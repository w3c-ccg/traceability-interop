{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2ad302da-95d4-4c4d-b845-46a2e3a1517f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "20e1bc54-5911-4b6f-bf97-3078bfc83cbc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fc01a385-288a-4740-b5f0-48e7af3f0000",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "84d3f480-9bfb-4208-8961-b02045a24528"
                }
              }
            ]
          },
          {
            "id": "4d08a1c1-821b-42d3-85e2-66872902e196",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "693d09d0-0046-4ea1-88c5-ed9e96ca50ad",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "02f1fcfa-7a5a-41e6-ba9e-4e37b12808c7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9d30698a-6cdd-441f-8055-b4b6dc646e31",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "512f5221-a954-495c-afc5-9691139f8b3a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ef6c715c-5345-46a0-a56d-bb511cc45477",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5448f63d-ff3b-4568-bc74-11fc507ec085",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "66228da0-833b-4b36-9491-42b0df415ab4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7bc26955-2e2b-4bfe-abd1-4fb7f5e32e55",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "12fed5f7-b2ce-440d-a980-da64f8989912"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ef8bfeb1-9850-4f27-b792-b7d4662b46b2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c3891501-c0b2-45d0-a2e4-dbb62b12501f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99612240-041c-4ec2-9eac-4ab43a871104",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "55761387-d071-4185-911d-f8fe35d7d9da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0e9b65d2-65c0-46c3-a6c2-f99521f4a617",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9f5a866c-9569-4fc7-bdfb-e67128193b45"
            }
          }
        ]
      },
      {
        "id": "a6edaded-a7d8-4087-83a9-093a6ed9dffe",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "93e1b66f-2684-4ee0-9900-3fb66ea0fa78",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7cb257c9-bddd-4950-aca6-68c69a7056be",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "367422a9-55a2-45aa-b675-c520702114e2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4486fcf1-19c1-4843-9af6-6f5557d2f801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8208d113-b068-4e7e-adda-62991e3cc23c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9006376b-74e1-4f22-83cf-d05c3a588a80",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29009f9-725c-485f-a0d8-0b1408f920fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d814daca-d8e3-4474-8caf-bcca2ea7618c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8165b60-9a29-4492-84b2-92aba6270368",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7425ce-3aa7-4f73-b675-faa23533b5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3cedcc4-74be-4b2b-a23b-c5e1d29d6179"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "25d14c07-1b7c-46bc-9e36-a098edc694f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0f29cda5-ca9f-4e18-a906-c2a87821e3d4",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa8d43b-86cc-4182-a6ae-9ebd908d06c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b08fead5-8f96-43c0-a021-cc508ee24cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3b07a3-f46f-4efd-8d93-44642a91f989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbbaa177-4bc7-4f73-9e67-9438cddc01a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a365484e-0462-4f37-98c5-7356fb91585f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ddf8e0-8e48-449c-9643-5a54a59fd94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dccd090d-ef9e-4734-8b28-909f9abe80a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c778e9-1227-402f-8397-8eed501e62b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "fc06246b-c707-41e0-a545-b4b62cf9233e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "87686eb5-c753-4cc5-9cb7-3d0bf4a1e5e2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a1ac218b-5078-497c-89cb-a9e683495e25",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e99faed1-7480-468b-8807-56a29a2367a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f3763f35-ab9c-48fc-8827-76639794073c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2bd0f20-1959-45db-a2a3-35229602faf0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "e326d6a1-dd2c-464c-8215-235e1f256824"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75aa5c58-80fd-45eb-8a5a-b7d9fc0160f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a5b69ea0-36f2-4b7f-b147-e4fa8bb9d75f"
            }
          }
        ]
      },
      {
        "id": "c2e43779-3deb-43ba-b5a1-b988a1db60f8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a57340e4-58f6-4e6d-8b0f-6035c47ac73b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90f43d8c-e834-45db-b064-fc34cae0d74a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "606db1fe-8a2a-47a8-a79b-35c375cfed67",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc36de76-0111-4a27-ac15-89b491a991c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799b8e3b-62e6-472b-ac0a-1c0c20286ce7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "738391a4-fe0e-4df9-9c1d-6775112cf7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0cbf5dee-34c3-40b6-a9bf-67de154a79e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c36c7c-611a-4501-8700-9f229304dc68",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97146337-cb23-408f-a2a1-61a0333cf9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76dd9ab-b139-4da3-83fd-12a17b6951e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43081c10-4536-4c75-8f4f-e85d3aa2dd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "295bb330-b7a1-4721-b98d-01fad78dcc26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a85866-3d14-473c-a1a1-90cf4f764c49",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9244ce20-3a3e-44b6-bf7e-25d87bdc3604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7052c8b0-61dc-43d4-9c6f-910dee36529c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b875c1-ec23-4a89-a461-834a44402e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "096195ed-4c92-4bc1-81dd-ffaf4212177e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a08181-5316-4606-bf7a-e13978fae40d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08806d3b-8a58-4b32-8eca-b33e5c86202e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7352aca-18b0-491f-916f-661f526d70a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2666f416-8bd3-443b-a9d3-1716cb6ded19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d72e05c-97d4-484a-bf54-3852b0f53572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9cb831-188c-467c-a6f2-e7da419a5b6e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "174021f1-5f15-4753-bca9-80100fd35014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c22d77d5-9a28-45e2-a403-70e1932f305d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ef0d21-cd0d-4215-9472-3c8862e4c28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7dee0500-4299-4f9f-9b4e-7645f8d6cdbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e95be28-00da-4fe1-bfd7-9d8beb29cd9f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2790587e-b02f-417f-a376-f15a5ea54bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0e16f0-c6a5-442f-a7c2-0b0e8e0934ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469c44d9-1108-4231-82e7-6a13d87375eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "45746667-78b9-46f9-be46-6cb63a7b4a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f61874-25c1-464c-a3b0-fe433f2ecbb3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041e451c-5cd5-406d-b7ab-99bd2e00a144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e832fc34-8819-482a-9967-e40e59fb41d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca5bcef-b501-4a45-9bdc-33559d70df89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84b5fd75-74c8-4f19-b700-5825fa90de8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a1dc5c-30dc-4ea4-8a37-e71c15b3b802",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cb095c-aa8a-46b6-a01b-2b6d81f8fa24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7ee959-ac5b-4187-b9f8-6ad9f272b2fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d42f04f-2ab0-4ec2-9988-71ed0c33b1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "683d2da4-e6d0-4476-a791-7598c44f2e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd5cd9c-42bf-46d8-9c20-de4010fac4c0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32d340a-342a-4c13-9010-8252f3dc44cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69394994-4bd5-4d8b-aaa7-2d49c4485300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f3249b-aa89-409d-9130-2208d81e6096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2d159b5-63aa-453d-8053-77746df74631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa2f299-58f6-499c-b46f-a8ba0ecc5a60",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5eec40a-dd45-4bca-a448-4eb9deb3a91b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49a472da-9b51-4d65-bb8c-a2c3de2df3d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907a201f-5c57-494d-805f-32932da2c536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc5770cf-27ba-4a67-b135-6b9a439d862c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa055ac0-d59c-4302-b8ef-70d2648bf23c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c5bdb4-be87-44b8-82f1-308dd991b2b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b937ec7-b51c-445b-989a-434d9eb2786d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f60da06-8633-42d8-aca8-268ec6391036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f53cfbea-37e5-471c-9ec8-0f9323898569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a45d92c-6645-439a-868c-d4403883acf1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0dafc8-90d3-4236-b2d9-f6d5686fc2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b204a2-e9a2-4aa1-9aec-9eca97f165da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31599a58-6937-485d-86d5-fd6cf76f28f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a2d8952-54ae-4b57-8388-7d41494eabd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57717681-9709-465c-a978-a5bcfee99396",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ebd11a5-84e1-4f66-9f76-1b579e6afc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d45f7ae4-0059-4776-a382-5a91e1c29940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ee7716-9843-42a3-83ed-7f3c37e25a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8643d87-c4a2-4a79-843f-c8989c2ace33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59009400-6b17-4c41-9534-8aa45c20a8d8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "615af46c-edb6-4251-b526-531488937853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f265295-5f10-4bc7-b3c1-7bc9f3b0b678"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b721a790-8fa9-4306-ba6b-8d409b7479b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "227a25f0-da77-4828-999a-975da94e81d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9194c884-1434-4861-906c-089e68c3910c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a77d1f-2fdb-4365-8b03-020a4ce14751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58dad1a3-16e0-4927-a651-d7df1f4e596a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd07795-deb4-4048-9bff-bb432208da0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bebd750c-5b65-441c-a322-04eed57bc050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dfa5eb8-1776-48e6-b5e6-6f579b01c2d5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a739ad2d-2f0c-4f80-829b-1ab432a478db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2211f9c5-4011-45ea-aec6-be24f3e8dd60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c57876d4-f1cb-4ef4-83be-1f7a6705cab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9733075-d880-4f57-8e66-154154bedcdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1260c173-4f93-4119-98f3-461d268ad3b7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49b23d9-7a39-4cc6-b8ef-21a4a6a770d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8411bd29-23bb-4250-a900-a75f7ecb5f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bd19bd-560f-43fb-82ce-03cf01bfe00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2fe68ac-766f-44f4-8e18-388ba622e904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a815412-ac49-42c6-9caa-643a7b01bf4c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d94bdd4-c72f-45a9-954c-4857fbd2994e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "838b38d8-fc7c-4873-b596-36ced8af9d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a3a914-42ee-42ba-9575-055bae34a449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1672767b-5736-45f5-bc49-5d94493f1ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96873956-de24-4d9e-8c5e-b5c695a18754",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1157e426-d12e-4458-83e7-e165820d1fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608ed227-ec4c-4978-bfdf-010168b9d76d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678fc826-ba58-493a-92e3-197376734f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23e05de7-70e0-41d6-b9d2-140da4f8c744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee9f7eb-61e8-4d64-a8e2-d29d72166f13",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee61f5b-ca90-41bf-89c3-9623fef47187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ff6210-cdcb-4513-ac97-e6e78d5bfb8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab043b4d-599f-44cd-9e69-4596e4a1ea2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d03e5e6e-4124-459c-848b-ae20814ed25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff88bbd-6ec9-4e22-a952-83c2ef129f75",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7f5eee-6661-4e04-93b0-81262c30b799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0c4ed4b-7f10-46cc-9512-f4504fe1cd7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8083de77-db36-46a1-a845-b702178d494a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e7c5b4c-5d63-4a55-ac4f-33aa57186fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90d278d-9ef1-416b-8415-149e8b8f05e2",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b241b9-010c-476d-820f-098d5eab9d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0616534d-ddc8-401b-8832-2378dbffc4f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f7813b-45e1-4cd1-a380-ce1c5a51a298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "72de057b-fcfa-4f06-9d70-3688ad865449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741ef944-caf9-4de2-bda1-9d6a129a750f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccb4f34-acb2-4828-bcd9-a8a0902f9ad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a184b3a-23bd-4d49-9ceb-91be77930bd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174224e9-c19b-4c23-a0d0-6963ecd3095c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc4788b6-0ab7-42f1-8303-24f64574b5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2db1039-3b39-49a9-98f2-5e6b584c6bd9",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b776ea-71ae-4192-a17a-6926cf96b7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88364290-7400-42ca-8a87-220fe0d8c9d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a92dcf-2067-4e25-8f50-faef70a4cda8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4717b159-0d67-489f-afd5-72638f875cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b9fa28-4077-42e0-a3a0-8a7649bf7b42",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8252ad-b2b3-4636-89c2-75aa6b44b916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c717331-eaf8-4da6-beb5-eb4e1651a687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fcd4ca7-3c70-494d-941a-8d4e249c8467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e1fe3b1-c08e-42b8-a38f-68f50f9eb985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a24839d-35b3-4e47-97ab-46cff4b23293",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0afb33d-9f49-4cae-a267-b8bd55ba7cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e6b97f5-cdae-4cf6-81a0-88726782155c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc30cd7-d665-4213-9f41-6b5db7e5e598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21cec76b-2f0e-4a2c-bc13-594c8851487f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ad712f-a85e-4aa1-8b35-b28e484eb675",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d92df81-8198-43d2-97e0-c5e1dcbc759e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d977a732-dd90-44c0-aa6c-72cfbad47170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a75499-3491-42e4-aece-36ec1908acde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d1d87df-811b-4998-9188-4f6812f15142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d61c02-f66f-4c4c-85a6-1291448ad6d1",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01744e5a-446d-48ce-8d69-5f372200fffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af68c0ad-5acc-4977-9d6b-484e6b08b1e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69103b5-5d8d-477d-a095-39e6375644b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d22e005b-32ea-4be4-93bc-f908192e6c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261236c8-7077-4bf4-9970-e1a8bd6e302c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba1e6d8-3ac1-4191-9c2a-55105b963e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d5ad01d-82ad-4205-b349-4eac071f5994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1b4b0b-334e-446a-8304-646c1ff24c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9677465b-1577-45fa-9b11-aa0356403572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd8fe188-c1c4-4f6e-ac24-4239d01e7a20",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04d9dee-0124-4198-8c41-23f3b79eec84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84490d57-b934-4db0-b99e-a8c398abffea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7bd6425-1509-4a96-87fc-3e9098af506d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8043f64-2df0-4dfb-a812-17ea41e032ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65ab231-68b5-4920-92ef-f4b4a27b38e5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86058a3f-aab8-4046-a8d6-041d46655e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4091e3d4-3b2a-4882-ab37-981a2bbb8f87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134121b3-735b-4d6b-9d3e-854524e505bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f14ae5b-e534-4865-a446-1aadaa799d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d33f62-05d8-4dbd-8be8-43453572d6e3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46e6639-b482-486b-bf5f-411ff72436a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3de5f6c-53d6-4b47-a8aa-2216245adf90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d633ec-9a0d-4823-8c1e-fa9e35db3e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f44b1cd9-924c-4c3b-805f-46e1e93259c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2050db74-82f7-49d2-b8ac-423a4d06ac93",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28fa740a-222e-45ca-b4da-768c5515849e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f20344-3673-474f-8c81-546df363cdac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3680f09b-8ee9-45dc-81a3-615c4dd22cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "80735ea5-0352-4aef-a9f0-cba31486cab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b330d2d-a618-4af7-b823-905294d76e3d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8885e80-3baa-4c0c-a355-305a0faa86f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a3de12f-db80-4c43-95f6-5b899bec5a27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197d72d8-d841-4a81-b028-0b9757ff8dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76500cf0-0272-4cb1-9289-c762c3f6a507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab877957-41ae-44b4-9f59-3771e7cb8780",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e811837-1bc6-4297-843f-1b6d4a156abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71aa19b6-dc62-4c73-a6ac-739203de40e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1dc90d-f846-4b62-ae81-4478e469ff3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "bfbca5b3-3b8d-4bb0-85ef-70043719dc98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf60d3a-6a7e-433f-837e-e00333a83c7a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f644d5-fb6e-4a53-a48c-92a30cf3daf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63e612f2-5512-4f24-8a45-d9d9e4f4ed3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc704c14-496a-4df8-a301-1edbfe60ae41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4a7a54e5-513b-4298-bd7c-af0660908cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32789b13-8be5-408c-8c48-b60d5e0c8cea",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58086ec3-b306-46fd-a5bd-1b6c2d67a987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea16938b-a4d3-43f2-940c-29ffd1b67a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2c0a8a-3233-4d3a-ada4-63b8bed4df9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ce10bb7-6fa9-42af-a7a4-c4c53c1289c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55596149-d657-41bb-83f0-194e27c05b51",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5eb040-45db-419d-b4dd-69ba61b3e269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fe01d29-a487-4999-a06a-65f7c1b52d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba47db6-713b-4199-ab88-80c848c22c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "56cf7e90-0d6d-4711-8081-ee95dbd10983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cf115d-50b3-4625-b4a5-a672ee79e2ba",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64cf0076-41c3-4337-b858-726cad921bd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b221001-5305-4b8b-abf5-dc4e6d483b8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7210c3e9-80cf-4d1c-ac96-12795f302a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd619a3f-3fba-4e8d-b24d-c9d753f21cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ccde39-29aa-47d8-915f-41eec86858f7",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f38cb0-e9de-4d4d-8b4c-be04f1bd2ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39fde0f-17d7-44e0-9426-b191336e9c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeacc8d4-6253-4e3e-96d3-e79c4074f769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "851b28d9-1a92-408b-9e77-f1f441ba1cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513ca416-b71c-4e3c-9f05-605a8e1d0a6d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1eb826-6253-4f32-bb1f-fdaf14213afc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b60f1b-2dd9-4760-b0d6-665d8d55557f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f44078-7194-4de5-b01d-ab405cef9515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bbf8f562-da62-4ddd-987e-3520ec739661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7066887-e14d-419e-92ae-77d58bb39aa0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c7278c-89f4-4e75-a3dd-c37520296e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4061d47c-22dc-48b0-85a8-4d6d2c8fc28f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac8cc04-f480-4e25-9162-dcae6e86d2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f1035ba6-4369-4f99-b590-5b26ff1129a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16f8b82-1496-4866-ba43-8bb580fb2186",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b134bb3-440d-4d8a-a098-2c69b852be59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e688c01f-8039-4315-9f30-b3576b006815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4293d9-ac28-4bb4-bd5d-6a20ff514959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea44c7c6-d792-428f-a436-eb85996108c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4eea3e-6c03-437c-a61e-971507aabe51",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5679037-c060-48b2-9b27-b997a7027762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a0d8a5a-a6e9-4b32-b825-9cf59d7a155d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31737eb-d523-425e-b136-614f91c0c328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7001747-3dca-450b-ac21-b5ac52d6edd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5b08b8-2606-43d5-a53f-065b5d1c5d9f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00ff418-3874-4cb0-bd4a-6821fcc69c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1997b8b-64dd-46eb-a5e9-f96a7a2be932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e206f09-8ec4-4bcd-8110-bf7fd917c976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4634778-b9fc-4fb9-b9f2-a50115f702b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e1f8fb-a2e3-41e8-a0d3-501cc208a98a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf0a6a4-d805-437c-a2a4-dd4e67f105a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0197727-ec05-421a-9cf4-10d755418588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44650d63-3e95-4ade-b9fa-6bff68ec61c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb47f9b-8b9e-4eab-b612-2f7bc8f2daf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029c9681-689c-4210-a347-ea7f03a0a8ed",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ce6dce-7d3e-424d-b3aa-e9a364aa18d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d5c978-418e-46c6-b8e2-7d1a84c9f854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2a8b3a-7ccf-4852-acc0-ca0e965cbcdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b56e789-d7d0-4d5e-8d03-7bf88a8cd0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3704d5a-7715-41d5-b1cf-9c44cececf7c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc19c696-52b7-40f1-b3a3-0cdc762e948a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ed11f31-ab69-4d40-9711-9131413d414b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aebdfd2-e700-46e0-b517-37838db9c523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "607231ac-3a03-4514-bc59-da0ac9892e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace96bcc-d27f-4735-ac76-cdf1c07ce751",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c8d77a-f6ed-4d6d-b3c7-48ca20c4b0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98737ef6-7595-47ef-a48a-1f274f7275bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00fe6bc-2971-4597-9fa2-20c74d146856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "763ed0f8-2ef8-4b22-bcf6-4b6c71d7f12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ffb623-ee32-4072-aed1-0dfc84ec10fa",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86839968-aeb4-415c-851b-98c8aa023f8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34679b5-1be0-4d74-94b0-d6c229614823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cda89b2-d01b-4446-8837-f386441c2c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72670825-fb23-4a6d-a6b7-1c888380483b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39065fc-ab44-473e-9b97-493d647b0971",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a3c0ab-91d0-4e9e-87eb-2e6f618d863f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7056edac-0081-4b5a-b983-e5055c875cfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c059fa19-9bd1-4267-8ca9-add1b8f22969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "45eaaf3b-15ad-486b-ba4e-09f443362872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51980c0e-dc42-4145-ad4f-ec10934411f1",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d339a207-c8d5-4b18-bf4e-fd5ed45ce9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29abf340-50e3-4a38-b61a-d5b307f7d4f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c0c872-1e8b-40a0-8562-cf47cc885882",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3599c700-b6ff-42e8-ab5d-d62a1c18c9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21fd7063-42d0-4e63-b71d-cd8a09f88486",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e9617e-5c74-4235-8f4e-20b269158822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0ddb32-30c8-4dc3-a8bd-790f3fcdec16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03e0dac9-2259-4f7b-a9a4-c61ffea51c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cd4b116-d2a0-4c3c-8dab-5d01d2d4ec7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b1e5479-5784-4cdd-b6bc-e7cb505f6239",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "197d7b7c-af1d-424d-bc57-51f9d45dc296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ff1192-b7d2-453a-abf3-7ea67327d1b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d04803-d0c7-4a89-aa61-06f7399e68f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43e50372-0e69-4a63-9b86-736a7d1d85b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0844607b-7099-49f5-9b6e-52dfc7b3a535",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b8ea10-f8b9-4eb0-a475-97a4440c786d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824110fe-d61a-4161-8db5-5028a1d276a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159dc193-fac0-419b-8295-01df3bd3974d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b67719-1e58-4f9c-b7d5-27858b72947a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1b8770-7899-433d-be0c-7143fa2c96e8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8d4a01-a113-4968-b9ff-40cc58bac6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "715d7e5d-6f33-4e2d-8876-befeba789fa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e6ffe9-0fa7-4a52-8b41-1ee6a904996c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "e5dfeae6-fe61-43db-9359-437a83f801d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69cf2b8-530f-439c-bade-d0c6fdfb5f63",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b7861a-360f-46d1-99d6-4e8a1f1164da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f0b60a0-6dd1-4477-89d3-5afd9cd4fe0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914c3076-6b07-4a4c-9438-2c97f8197d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e3e9b1-fe51-4de7-a48b-1d55f56e5b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbffbbfc-c8e8-4a0a-9ed6-aa4521949467",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "110eec80-031f-4f2b-9a99-837c1768f034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1750c9e5-e964-4e2d-9e11-3d00a71b083e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e125b96-1943-4c51-8681-1fc6527e9adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "97768825-1548-4cfa-b7dd-5f9433c7d4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a999ab0e-5ea4-4526-869d-ebfad09531ab",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2da265a-c42c-4f88-8f34-8a198317489b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c479934c-4fb8-4cb3-ac02-4296a9cbc145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f945746b-abd4-4ef7-9e44-3bdea229b82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "008e0418-0b7c-4c28-a5c3-202e031572b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9e0f4c-9f8f-460e-a7c2-1da0633b68bf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2752c08b-7368-40dd-8f02-b8b41edfe811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b172c8f4-aca9-480e-85aa-8f3cfba9f2cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2283af07-9789-46d5-96f8-b43ff182dbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1de502d-be55-4391-aed1-fc7cc0d1328a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd5e293-6a12-48e2-9b61-da64c0391104",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c67d12-6bdb-4832-8a70-9d9006d652d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eda8711-882e-49b0-826d-40c53da50d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e52733-6b37-4c0f-8984-5d2960ba8500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6800721f-3a20-442c-a906-7f5e12e04f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28cb148-3868-4510-a4bc-a015307d8695",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ab9824-2abb-4c88-93fe-ee7cd8736620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c528ddec-7ae5-4208-9d94-ed3e9607d06b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd55c705-9721-4550-bee3-901350afb241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b35cdf6-604b-413f-b4ab-d810f269f810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613d5190-825d-4bfb-b156-c1cb8d50030f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab500a0d-3dd8-4b82-92d4-1e4d94da1a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d689db95-6d3e-471d-a0a3-2272640cff2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634c3a7b-3588-40e8-ad8f-84a60841d36c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e89a1d4f-bfcc-4e4e-abe3-c251a9880442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6290d3fa-0172-498d-978d-42ebe293adbf",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a7707c-c621-4095-8fea-42fcb25c29b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "369b2038-8ded-4b8a-b5c4-30de860c4438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df862f5f-9ed8-4468-a9ce-206248c20629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0067285e-2f12-45ed-b9ac-14bdf21bfe1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3d1f02-3947-49f1-ba5d-c39044ad4677",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30c7bbc-869d-4701-aaa9-07d1e39a9260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "278a47dc-be6a-41f6-86a4-c6d261cc7544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f7d0dd-4c12-4819-8dc0-367433b3e22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d49d64c-7061-40d1-ad1d-72c96c8cb9f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93947837-f1a0-459d-8440-921d2f446e67",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ad32c0-b23c-4272-ae1e-be14154a7b77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "456e2cbc-7acb-47a7-a72e-b5ca0cb83dc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4259b9a9-8d2a-489e-b71c-f96d1da3deae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f54c39ff-3746-4016-9e34-6e6893da98ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c24ded2-fad6-4d81-8797-c7e0514cf836",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19bb8112-6c54-4371-abb8-9f2117e19769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79f0426-4fc2-4f8c-a397-13816d520da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dce50ce-f225-4f33-b10f-093f832d3b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "01a89ceb-c4c2-4b91-a0b4-73c691d58d02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762bd7f7-a3ee-4954-a1e9-695bf0336f6b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b92c88-5a4d-4e70-8856-1891113d8cd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef6d0b91-85fc-4b80-ac53-5e5eea124af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e8d86a-0e7f-4b36-8546-622549449660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f432d6c-e271-4adc-8b61-7e6b13c7897f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdcf411-8f66-4ce4-8140-0fb806bef826",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5b534d-39b3-4dc3-8eb7-4de229fb22cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "474c576f-d804-409c-bf8f-b0312181d6a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bef6dc9-159e-4043-aaaa-c72bc68eb6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c92694ce-b5aa-4063-b8a1-d05665693c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bfd41b5-0a9a-46ab-bee5-f28b85e6d31b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb75061a-96df-4db2-82be-76ce858a3cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9829acd3-0160-4ea6-94a5-591ea283f382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "816d5b93-1908-4dd9-bb37-b66ffa5f9b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c68d9f-24ce-4ffa-b635-c6e123cb3cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4d2088-6bee-4126-972b-d599ecb36a1d",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cf39a73-a701-4457-8803-b72d495c2d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1db9e23-7662-450d-97b6-1617a99612d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5376e839-e74a-43c5-92d6-8822a714fa4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b1e9d27-ca78-4dcc-9e9e-1b29bc918a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0bd125-a3f7-4a5d-bf1c-b9b7d850e4fc",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d324f2-fc4f-4337-b70e-3e712ebc350a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d122ea-82fe-4f34-b73a-8abe10c4c093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f668c05d-fcae-4222-9622-21eada21795a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f16d64a4-ee30-42b0-b8f1-20473352abbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cdde54e-40b4-4300-86eb-2ffe1a187dc4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543324f2-1203-41f1-9858-e2e326714b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c467d9c-a515-46c6-bc90-c7f8db3543e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98ec39d-635f-4d7e-8b02-ca1e72e17854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "789ccb7a-4ead-44b8-a5c7-351dbff0707d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4eeab7e-b852-4674-95e2-b602487f4794",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e260a48d-59f1-41c9-ab72-9f45ea5ff76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eac6467-1e6a-46b0-b433-1805579d6a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d091dfca-5517-4d6c-bd6a-8e9c1e00219c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c296b9fc-98d2-43c7-ab8e-528f7b1f3726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5b9b1d-123e-4690-95b3-b3a272cf0a8b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99aaef3a-093a-448c-9fef-6692c5c5854f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae00b428-0b63-47df-ba3d-a5755470a69b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da9b36d-7594-4cd6-a299-e3fc16e73cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "167a35cc-5d3c-45c3-a1df-26ab2188ac92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d66b10-551d-4a4f-bb8b-06bc368a318b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1d2a30-0405-4f55-a13a-7544d0019333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5022a8ca-49eb-41c1-a88e-ee9e74d2dc82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a67f903-c5ca-44f1-82f4-508becc0bc86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61053229-d63d-4161-9e2e-0c97a4a9f3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076148fb-ca2b-401c-8d1e-56de18b694ce",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed03a05-ef91-4abe-8cd1-403332a97f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a317de7-75e2-46a6-aec0-7ba553b06acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c76049a1-c753-4f47-ae7c-45fbc2f5999b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "021e381e-ea8d-4036-879f-f0409597a9b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ecfe6f8-68b5-4444-bf42-9d5ed23dddc3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddbd21f-b47d-4298-8776-85c16ace99d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66255626-600f-4960-8f33-85a3f138da92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7596273-87ff-4d88-910d-effacad2d72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb61825-5a52-419c-9873-0169d5d29fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4738eb-e582-43ac-8660-de6a6c429fda",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e68343-4cfc-45ee-a200-541d1e0bf206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d4176d-e4cf-419f-b62f-dfab21c9748d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabe95ce-683d-4162-8e8c-603dea413bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea1dc5f5-8c1c-474f-8be2-6a5457027bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da99ac15-7963-4927-8bfa-59490ff97552",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024a6e06-334b-4c24-977f-daa999c0c31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd10b821-58ba-4399-bdb1-74a63c5ace2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d72fbf-926c-4c76-b184-542122779bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3070748c-94fc-4967-9765-8cfa59250d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a610dfe7-cc56-4460-a355-7aed6a31428f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "626026b0-a57b-4cb3-82ef-f16b72ecd07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7d54361-0ed8-426a-a074-416a5026e160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813ddfad-406f-445b-aeee-7f1b77e30b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdfe2e57-a2d7-41f2-b79b-dae93e159a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb5a4e1-afa9-4af7-8280-b0762a264ad5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7588cd41-d872-4178-a955-0a8bea27ac27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10d62cc6-dc81-44cb-8e18-65244c1937c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27340bcb-6445-425d-b1f8-5d71213bbe98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ea9d8b-6cec-4f6b-8940-fbe7f24eb348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a7a9d3-176b-4519-b584-9df0becd39c4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8ff702-1b07-47a8-ab60-e7ef820f2ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d21eb20f-d9c0-42a5-931e-a8d0cc3920c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d338b590-5c84-42ad-897c-9b871eda0b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f12c06b-5e49-433a-b3b5-38d1486456cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd8af5d-d636-429b-95d2-41471c16f382",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a03f320-3d29-4204-927b-899fe784e8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7109fab-5b02-4119-820f-f5f546663bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7473dec1-3b21-4141-a3ae-415d04fc13de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa7b177a-1dec-41f8-a985-fa080411649f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582a54a2-ff6d-4faa-84c1-a5b964bbb075",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f26981-b970-482e-a686-fbde0edc7588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf938fc-ef30-4bee-9c82-e7c5dcdaa665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993532f2-042d-442b-a428-026754a9210d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae63e8f1-a568-42f3-be2d-95f80bdefa74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6a00ac-3e62-4e60-a567-729e49429260",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e77b236-3781-4f30-99eb-508df0e541c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fff2383-66ca-4219-bf13-ee81610b1f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf3c4ba-fdc2-48bb-8a3a-b3ab480876bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "776ce47d-aff4-4e6b-8701-17ba4e6578b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed658fb8-7eff-41af-880c-439b1c6237b0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed2b95a-bc4c-4676-9960-4ce72f7b540d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84439542-1d9f-4d31-abe1-fb16a2236efe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4a3bcc-d82a-4211-a2f8-c76add2782e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "485662f8-747d-4b5b-a795-b37649a72af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fad3a6-fbe4-4282-82ba-3978afc68fc8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17d7df7-6186-41c7-9b3a-97c16294455f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b827b534-bfff-426d-9a61-8e4d3a97dc33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e939d2f-2a08-4a3e-9c06-a9fb3ba8d68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "91d7a2b6-b72a-4bbe-ae35-e8b02b80ad35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c401ef-3b47-4b0d-a721-eac6a59f8b69",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ecd671-ff6e-456e-8147-62c8ba2d9f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8713fd4-c776-4d86-b887-026cc62bcb62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715b455a-7f82-4ec1-9b38-caddd2b19ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a71892ab-af6c-4573-9dba-0687a3e30375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041d7564-626a-4ddd-86eb-3f21d499517d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d350ed-87b4-49c8-acbe-f0141462ac1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a957e96-9856-416b-9b2f-89000363cce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b98e5f1-9ff3-4916-bc6a-206a5a5fb406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4caa0ff9-1486-458a-a929-8560d7a9cc35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6989837c-680d-438a-8d10-30b8c84bb54a",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99d590a-077a-4b8e-bcfc-303825e5797c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b707b98-5276-4f26-92e9-9ac318f515d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37f9f93-c3b0-4435-95b2-c2d711af165b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "56d2264f-9034-48e8-a42e-ac5ce11091a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f52db3-c09c-4263-9e3b-3f6ca2ae861a",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c239201-531b-434b-a4ee-7a2b8106f42d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "63df43b3-6f38-4d98-99fb-73084fc81ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c46428-e0d1-40d7-af53-62b625c89ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e36aa78-cead-4096-854d-0833fa9cb6a0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9fd0e67b-745b-477d-bb61-a999edd6a8ee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "99881b44-2bc9-4a79-b90a-4c79848408c7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d989db02-4193-44cb-a72a-36346f99c245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62aaa103-5d32-40d0-8afb-a857459a956b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28321f8-4ffb-4f59-b953-6778eac0e0cb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05ff1ae7-30bf-4496-abb5-a6a1eba030a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749fa30a-5f96-4315-96c9-bcba92e1b860",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d7e7a3-8569-4248-8404-740910c8e88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f631d8fb-9c37-4165-a497-c07f480f3f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a019b721-0cc0-4a4a-9b19-62ce2229a801",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7941f882-6366-47fb-8546-42a787789529"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aae93b8e-f7a4-461d-beb7-00d5dd144893",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "586e5fcf-2c42-40b4-8064-de2671acdb0b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77d7a5dc-95c3-444c-93ab-dd1edd32bfd5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfed873c-a2cf-4b9b-b502-0ecf505bfa2d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dfce83cd-4510-4577-9453-e69433b293ab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "19460dfe-55a5-4864-ab31-b6c4bde81667"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "90aa6e7d-58f6-49d6-83af-accfec33b36a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bd81c114-ec02-4113-bace-e4bd6708a380"
                }
              }
            ]
          },
          {
            "id": "e533ca5e-13fa-4d39-a3b9-9111a02fc725",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ba7edde6-0cf3-485d-84f1-a6f6b25d8f3c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f56d068-6009-4996-9c4e-e1afbb16dad5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "160a3c31-7c2b-4216-940d-4db63cfd3eab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1fba4f6-b819-43ab-a183-b4cffa2685bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "99e908c0-35e2-48ce-ace6-697ecaea8a13"
                    }
                  }
                ]
              },
              {
                "id": "b847e088-a3fc-4df6-a62a-ba15b6b55d26",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d56ba04f-5a27-47d5-8981-046c08496e02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "050418fa-3875-4fa8-bba7-55cd53d66d7f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea6c0a12-10b3-43e1-b5b6-0a7cbec95d19",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0806a626-df1b-4795-a1b3-aaf692e5a383"
                    }
                  }
                ]
              },
              {
                "id": "49e8f202-0499-489e-8628-b1af1abc392c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c0324f1-ed7f-4883-84a8-df59bbfe4848",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b00dcb37-664f-4802-b0a0-75ee603e7c31"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5cb489ea-525c-4aed-a96d-ba79683483bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5342c52c-098e-4e8c-a1b6-d05d86437348"
                    }
                  }
                ]
              },
              {
                "id": "5587af7a-86b6-4e76-9108-9b29c1d8a113",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ef96a8c-0a9b-4c06-98e8-964989b15fac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1c44ece9-5f37-434f-a3c1-8cb3f83fdf43"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09dd9ef7-6608-40e4-9614-d230d03b3eff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5e195f8d-2fa9-46f1-9e05-3fda71140c27"
                    }
                  }
                ]
              },
              {
                "id": "acc62ce3-66c5-4a18-bb59-ddc937fbd41c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d32b066d-6237-4e10-94a2-3575af5800ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97db871a-cb6d-4780-a136-7600956d3450"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9cfc3ccf-f161-4b84-8624-780ec185d17c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cf6f1441-4c64-40dc-bfe9-bc2f283a8c34"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7105e3a1-dc34-460c-a4b2-86632814075f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9286baa2-60ff-436b-b80e-5b093aff783c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "880747e2-4d55-453d-b629-c35dfad30dc2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "04459ad0-1942-4d3a-b4b6-8c99f6f5d99e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "973ddba3-fda6-44b9-942a-b14eb9459720",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2ba4be7a-4779-4484-ab1d-1b0e26f7b0ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9fcc99ea-d5a7-4675-91d7-df35c543f522",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d545474-a1d3-4e35-8abc-64327c6fc50f"
            }
          }
        ]
      },
      {
        "id": "759e26c3-20fb-4cdf-b44d-94e2d3588711",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5e701b95-ae93-45ac-b7c7-c71fdee0639e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f2d67bd-cdd9-4031-885c-cb1bc2210cbd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ec7307f6-e9b4-455b-8f2d-c5101619382d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c170d40-0941-4d3b-9af0-53b540a4ae4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b6b60a-1ba7-4cf4-8569-8809d0821485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bce2334-97cd-414e-a883-18d85cd25385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e77f3c41-6fa9-4a77-8c4f-af0730533297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a937bd-70a0-4403-b26a-d2e288bda292",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b93d6b-dda0-4707-95c9-c75730eb9b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b63e8560-e5bf-431d-8a64-800be19484dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e29eae-c952-4465-9024-f94f3a451fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5af93495-1e8c-4224-8986-66ac29f2ec05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e272e4-426b-4f52-9dcd-800677ceb230",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2a4e02-3291-4143-806f-e29b24d5b956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4461df6-dd17-443c-adf1-7976630b4b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb8a2e2-4bfd-429c-9760-82e03965f3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "345b0028-f6e1-4e20-bcb7-a6ca171852db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a20c27-c231-4461-aaa3-8ecc2dba19ad",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20839c32-98e7-40be-9a4f-396c726cd817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fdc3d75-3224-42af-a4e5-0878509aad41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fadbd7fe-d4a3-4b36-b06c-6cfc0e27f782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "273131a7-952e-446b-90e2-47a7dd35a396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d8b296-cb11-4950-9989-d36d009c32b7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4356d924-ca2a-4cd0-a09e-549b6577c93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea9a9860-29f7-4520-aad1-3e071a016721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c2a502d-0af7-40b6-8bed-568157bcb7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c472a83d-0267-4e02-82a0-9d33237c33c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de81ea1-7ff0-4da1-8860-4af98e1faba5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6e6f8f-d42e-4715-970f-6e2bf7896600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "351586e4-3b4f-4c79-a929-fe54783fa26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4663a700-d5b5-46bd-bb46-33c02dc76293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f506f13-4e7f-4dac-a88c-f8dc58c537bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f08cfc-70dc-4d70-8edd-90338a1e8ece",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e28e32-30ba-41b9-8691-d58e45eeaf5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97750042-8148-4472-9639-54e910ffbf2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad7a755-0af7-4e7b-ae4c-62164da54507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1206e17a-5eb1-4d05-bb69-f8d266ae8bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5879b480-38ac-4c91-997e-95d09d722607",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae221254-db9a-4f13-8b06-98fa220c46db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f79e6d1-a160-49fe-bd44-1f102b054224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8496e83-058f-4a97-89a3-aa2e050b6657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "892f7f62-6219-4a5b-b568-5490a42dc4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bfa30b5-4ef3-4148-a09f-cabe69d906d3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f971c6f6-4ff9-44f2-b592-a37fcf3e0212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "779aec8b-f314-4f93-a549-f5dcd42889f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9496bf-d27a-4000-b7a8-60614667822b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "97b53515-6bde-413e-8834-d0d663df127c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f627b15-b46f-497f-a052-6dd685860d78",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afae3e6-f422-4155-a81e-04bbcea46ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74af4c85-24e2-49bb-bc2f-d4af3e863951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bff3b12-d662-4fad-92ce-9d980601e045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b8312b5-58a5-4219-b62b-b52e8d885aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad542e6-89e8-4c20-b098-2826e67ea529",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92f440e-f2a0-4f24-a2ad-971d3f9ae6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8873196-8cae-4678-9258-fba72d9060f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77827e04-23d2-4edc-9982-f7c222ca2f49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1f32a4e7-85a1-4291-8135-a305392a0d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d2a1c7-2ea9-40c2-825e-8a80feb2c690",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f705cc5-7a67-492f-ae4a-726b5db5b1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7afc3551-280a-455c-a3dc-8da57e2be0da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d569ef1f-4998-4a4d-959b-10003ca7ca25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9519d4da-d205-4b20-81f5-c4cbd0dc4907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa90745b-0695-4ab0-97e0-a042ad2d7632",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b95b8ce-9778-4cd1-ba65-ec619743ccda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5645feb-d6c0-4dae-baa1-8234192752e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be894eb8-0dea-411a-9b50-b075c28fd14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "528003db-4a83-4c3e-9fd7-8fe0fb156a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be47b28-66fd-40b8-9d2e-417cd4dbed76",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfe1022-aa28-4ed8-8c7b-16442f89c5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07795a24-e6c6-4532-9b85-f268a2a9b8ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0fe5ba8-6c2f-4aa9-ba74-76f6f61f5b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c2c29a5-905e-4153-bfa3-c8d16c30cc20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa949d5-7bd1-4083-b528-72f5e5437a09",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c16c36b-46e1-4b97-8788-54e5a5de16d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1798a77f-92fb-473a-a731-da01b2882e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e739843-8bfe-43aa-8e34-b202256f4294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b607e663-635b-4f9e-badf-093e8189d14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d5869b-6551-42a7-bbe2-c56f1f822ade",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89af7395-43d1-4fb2-86ca-81f1c5ff747e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b13a77eb-dd07-407f-94f5-76654fae9e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ef803b-dc7b-4bfb-9fde-bba55fbb0f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "818c6aa7-e1d4-4a19-90ee-b93c87460edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49203f9-bc18-4b12-bc8e-ad6744bb580f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1acb33f-46e4-482f-9eb2-0f1dd641da84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46fed6d7-b657-4615-9101-cec7a42e4de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757e6d7b-1145-4af1-946b-00f59cba8ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c21b4ae2-3cfc-4a20-818e-8d5e7cb4e499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e04191c-56ec-476a-bbf4-59d4c9c126cf",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984e7ddb-4ee0-48b6-adb5-5ff346e9bf16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4737e6bc-d00a-4925-85c4-0e54ca7a5241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a9fdcb-e427-462f-abd8-e81f8b4e85a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "549a2825-ebe3-499d-990c-9fbefc35abc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf8866d-22de-49c3-b137-46777169fd24",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020eaad4-31f9-40d7-8407-f338ca023eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "659adf02-dfc0-4da7-b5e9-6a7097b4c304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21c9936-15ab-46fe-9357-ca9d6b481ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e5e439a-6480-4787-a650-3c2bea31e553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12ddf2d-0d27-40e5-a0b9-1813be20c5d0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a70da05-ebbf-475d-aa2a-205228b292f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d111759-28dc-4cec-a6a2-d337fb234741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4949c459-cda8-4bf4-a963-71e524cda5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b7058e8-4a46-4b76-9cb4-32f7f341ee88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2daa52-1328-4d04-89c7-0550dafb147a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "752ae433-4ae7-4a39-8594-f57e05e2e314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ac5309-fbfe-4722-aba7-d56a7df3c809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f327611c-65d0-4cbd-8b07-37fce703acae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9feda68c-ca08-44c6-bb7f-61be8db78e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3089c92-7127-4aad-9067-b768ebdc519b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8844248-3097-43a0-b8df-2cf03099405c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb281e85-f0ac-4e25-9c54-5cbdf16bed80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef82292b-e755-42d1-adc6-d8b3afc9931e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ad8980-a98f-4beb-a711-9170b7db39c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14b0aab-2b7e-439b-818a-af76ed6dfe11",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf44f216-9e3f-4e61-8c6b-00f2e27c1c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1c459d-bdfb-4d31-9370-a0af754ecca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a7c9e2c-e5fc-4353-b9b3-485cac6524a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe63730d-4b13-464b-a92c-6aeb0ea99d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6155157f-bee6-4454-b9fa-b18a35bf487b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37b460c-dd8f-43bf-bf13-3d4dbe79f192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "415ce8cf-8b02-4af5-9834-9abb83695c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d1cef4-753f-47e2-98af-88c3810921bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "542bcb9d-fd5a-48fd-8dcc-4a79506fdba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb893f48-2432-4e46-af06-588508d9a8f5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abbd1796-645b-493c-91f4-f75ff1b546c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e536e04-fc20-4716-930a-91053597f254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e5d377-0096-4410-9716-9c31c41caadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c43c89c-62da-4dac-9a0f-0e83782a47e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e29b172-32b0-4c60-9648-7b894b2ea280",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ab5581-9219-48f9-a603-3617bcf45908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e5c096-f141-4c8c-b971-e5a99d42a5a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3421e984-6d5f-4850-b9e4-4e11784ff456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ffded25-3d21-4b56-9a26-e8a484293b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d53eb9-5f63-404c-b6bc-8291684c687a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9211982b-3174-4b9c-ae25-af49eec0e512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd207b96-5b95-4bdd-a9ff-acfba7ae9f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a4b0cc-9e82-4803-8a27-2ea3d957be85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3de6b13-fa2b-4795-861d-0bb31bb59ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73560c9-51ed-4e6b-a3ab-8d6907f1c101",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8069bc-b24a-4b2e-bb8e-894e5a4fce08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292d7aab-dfa2-44cd-8a1f-1d6ecfbe6fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc56130-30f5-479c-bc88-f3efc78edda0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adb1ab5f-b287-4798-8354-e83c545381c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b3f917-5954-4b30-9c7f-900ab25d0b57",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cf1e9c-0d9f-430e-bd02-eac0ce8cf1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c4b33bb-e789-4ec5-83cb-0a016fa8e249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34d44908-cf99-4aaa-b2ed-d2008501ec1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e3ea6fe-47b0-437c-9b3c-6f853997db7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd33a64-c0b5-403b-a6b3-76f700aa3c05",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f8d1fa-17cb-4d03-925d-9bc9489a1b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3751d46a-e2bb-48b4-bc2d-59319fe1879c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd15ae02-2fdc-43f0-9624-d1cd41ce3bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58ea29db-6a70-4985-9316-c8ae681151ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb6c32e-9e57-43f0-87e0-773e31c333b8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4903b17-4d18-490b-911d-670b9cd2ea2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97090daf-0980-4f48-873c-9935103f36b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1bce3a7-96bd-49c8-b789-e2c531dc884e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "572a3ece-f892-4119-a7df-7a04e32581b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0a04b08-263a-4c49-b07c-01072d11ccd7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71c43b7-077a-476f-80c8-05e1505d2d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b6c210-106f-4a01-b100-7c69b10f5cde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70f8699-397d-4fcf-a952-141f83cf9069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa5b942-bb25-4970-a56a-b8d7c868c78e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "69db13db-4194-4985-a90e-712dd732d641",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b2e2a7e7-271c-4c03-96ab-46d877f5a9a2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b92dab1-bd22-499a-8ce2-2126c5d50be2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "27ee616d-caa7-4166-8c3f-9bbc898a03c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea879b4b-d62f-4550-8f96-e5cae4753143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fea78beb-db9c-451c-81a4-a45c0a57cf72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54208193-a6a2-40d0-bb98-e803aab51293",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c60181-7f40-484a-8e3b-6002c9abef4b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "de3ed863-dd29-4456-aab0-933883421c96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8f38cfb-83ef-4163-840e-56656d85a37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f1877b7-0eb2-45df-a097-5a3a0baf062e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c26deb6a-d400-40dd-9414-bb6041a92d91",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e898927-f92f-43ca-8b31-eb93ce9604dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05e2726d-2d15-4d6a-9dbb-2092a370de11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e8a7fa3-4722-40fb-839c-1938aa6addad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2005be9f-339a-487c-9c87-04202351551b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3ba025ee-98a8-40fe-ad80-7298d6777e36"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e047b8a4-b699-4471-bd91-d5f3a8982851",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b635904c-178a-462f-baab-0389a5f8e77f"
            }
          }
        ]
      },
      {
        "id": "e338d031-8b08-456b-930d-91875ff61ad3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "aa4ef096-86f2-4285-8df3-c8c5b2c04d87",
            "name": "Negative Testing",
            "item": [
              {
                "id": "74b2f94f-2861-4533-b2dc-098ed167b1d9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bb3a12e6-b17a-4e39-89de-ec37d66c9ceb",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a409e39-b42d-4ef1-a4ca-12206d6ab879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3e328a6-41f1-467c-b658-d7e7b416e7ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7290f933-4196-41b5-bb2b-1b06e2464b04",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14de13c2-f9f0-4052-af55-99cc2e87094a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca875a48-ec27-4ca5-a7f9-11ca7fd29b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f008abc-4a36-4b48-82f2-4bdd71cfbc58",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7c2c3b-260b-44e0-ac71-fead77dc090b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4f4e50-350c-4f7a-b30c-10e43cab3040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f0c8f8-fd61-4e22-9584-c131d84d9935",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe957d7-ac05-4069-8f44-1e5059e93b91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "136f890d-f263-4c63-b1a2-ae68721fd1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "424e67a6-c964-4979-949e-289f5f653f1b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36872375-cc65-4481-959a-0027c8aeda5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39e94cd8-04c3-438d-afca-da720f084b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b72e2f3-5d29-4a4d-a455-e97297942858",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfcc3ee-acd6-4ade-b6ae-df7cb8120dcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363116c8-1543-428f-87ce-285905c6c0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf0007d-9999-429e-9845-fe90817ff184",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efbbd32-eff7-46f0-8f0b-c0c346d6d6d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6fab956-d078-448b-a390-106b00cdc33a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf07915-382b-4d31-bea7-6f1c045b051a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0c96e3-ae9d-4c42-9d6c-8df6d6c1ff5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913ce6ad-2094-4634-80e3-1ffda3f93cff",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55809c55-ff68-4f09-98cc-5cd5c78803b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07d9391a-1955-48af-a12b-e5cdd8ec0991"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "454f03c8-e327-42ed-af18-35e22e3dfc97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5894308-93c1-441e-85e9-5387480dbaf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5baeb32d-1cf6-4516-be0e-2d27b060fb81",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270dada0-6ae4-4d05-af43-1ddb29e527ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec6cf8b9-3b6a-4288-9ce1-5d7afe27b23e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7290f560-68fd-4f2c-8588-0838efe42534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c625981e-3d45-470b-9a0a-2ede4ef57c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df20b672-12e8-4d06-949f-3e6060ee4797",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35dfbb4f-7931-4b7b-ac30-f9ec1b18fa31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a6a3ac2-5136-4973-9832-d0fb2b48dd11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c958efe-6069-4500-afc7-ab9f707c0c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3160517a-bfa4-4f11-80e8-55a5908835f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1991a03-b740-4020-9502-8c00c6b17830",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f48ec2-a9a0-4182-9ff8-a8e7333cf9da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e01e6ec-aa0c-4ad4-bce5-47532c1becff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d383f164-9955-4f34-b36a-767ab9deb2f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e0159e-56ae-46b3-ba3d-67d68c7b4780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c2c693-0a28-408c-83ab-ace56109fbb8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be0e7503-d406-4b22-a938-bbc5dca3c607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d4dc25-d804-497d-a593-5da26d2d1486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a723a4f-e615-4142-b50b-cd0dbcd6bb30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f63ad9-42dc-4292-a229-ad8ef2c834b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c054370-8be7-4cdd-82da-95d878f20b47",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea7b4d2e-7132-4dba-8018-4ab4d6d21049",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4582be9-f274-4119-9723-3d03375908c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00aaecc2-a927-458c-84a6-050f54590d30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c074c84-0a67-46cc-bf06-fceffc7d77c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4bd704-e406-4c91-9143-37c7b0d56238",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2183a3aa-565d-444d-84b0-6de18725646b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed1f6e1c-598b-4b91-a1c6-955f25a709c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c4c631-5eb0-46f2-8d7b-1b2594c4fb0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5513636e-589c-4fd2-926d-fe9c94deb9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d036bb-9120-455a-b372-94c6c450b8b8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e85ddb8-d526-42b1-8c07-66a626492d33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92caebf0-ceac-41de-b160-b69cb21cceb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f26ea4b-2da5-48bb-80cc-10aa2ef16544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bc8a6aa-86b4-4a4c-bb7e-8659430c06c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2038fbb-e0e4-4dbb-ad20-dbc726c7e63a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc6d451-fe03-4cdc-aadf-0f295149de15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f57d302-999a-46e3-aec4-611353f5be8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "382b3012-dd93-4270-b408-d178d0fd1310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d4831a-20dd-4d74-80a2-198dd851d3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab371505-57ee-4e66-b59a-a3fd1b64f32b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c16f580-0736-4dd8-8351-174ae4ee7d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f615602-2c10-445f-8d19-d85870220797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79131b7a-02c5-4c1c-a4ce-592f08a3f8be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56ccebc6-812f-4992-9cf8-872fdf3611bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32065c2e-514f-4340-8c61-423508cc5c7c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cea40d-3421-4ec4-bb65-97e7007cf85d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fc4c345-2a92-491b-8fee-0fa5ac5faea9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e478c83b-0214-4bce-b17e-67a54154ff4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46d502a3-4699-4caf-b666-f501b4aaa9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1cc2e9-5c86-4522-bf6f-9703583e12e2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716f49ac-8478-4a08-ad09-9692280b5619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5758a4e3-b091-4870-ad47-5359a44dc18a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30e3433-69d1-41be-92fd-2573b03c870c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed9eb48a-7a2b-43d4-8587-733b79c20bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e480338-51fe-43e8-9c54-225f4b345f7b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6402f80a-eece-4aff-88ee-1dcd83079c53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db7aa8f8-33dc-4e4a-a28d-d53c35714deb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "add80d3f-18b6-4adf-8545-18c4366287d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca399c8-fc19-4323-8b67-ddfa0eb958b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd8a958-fa6a-4489-89ef-1a92efdc67d8",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853d2b4f-6f05-48d0-8b47-1d248100b743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d6b6de-9f1c-47e8-9204-df8833b98e5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c93959-b584-4ffe-8a8f-7fe219aa8f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7af675e-8768-44b0-8e3b-02345bc7673f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337a9b05-0964-4b74-bf66-45d818e51dc8",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de0cd6c7-a541-42f9-b427-0c6f5f150ee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4309e259-f1be-443e-9791-7c4680604176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30a14d59-8c83-4819-a782-fa904ab0a834",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "816b7d87-c363-4239-ab0b-d4fafb7a6e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4af1570-a225-45be-a131-38bfca723aed",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32dcf9b2-5e55-4c81-9450-ab1bb6ea770c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f81f20-8e67-45f9-8577-cdaa3d1bb86a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ffdd79-b9f2-4ea4-8c81-96f10167cf76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed6154e-838d-45dd-9d05-8d9085e6f3e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819b86cc-66a0-4d24-a9c0-c2155a48b186",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6debce-5fee-4694-bf44-e5c71d3fd4af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8f52d77-306e-49f5-8de5-16f98ee7fda9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "630d1e2f-1f13-44cd-8d01-7606d4af1ec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc0cda2-836a-4121-986f-c4b1dbed9e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544fb1af-4914-40d8-96e8-3be4ad1bc7a8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac51053-a7e0-495c-9de9-082793285e35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30a7507a-7b63-4c2f-8bb7-74426bcd4fea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0602a5f6-862c-4d3e-b006-1f8e5e74fa90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d770b23-0a18-4476-90e4-a8c7a3e1b0f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c52b4e-3da8-4065-a2c4-ac2a65d3f4a5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a00602-c1e4-4fc8-af53-3553f34d3872",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caef2f4e-d638-4153-8ef1-a75dc2464a8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5875ed-474d-45c9-86c1-1e7974b993ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08cff3fa-97a8-4e14-82c3-2212c476213f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851614a8-7f6b-4db8-ac76-131363c54144",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab9da83-6fa1-4f56-bbe3-b1726a3c0858",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d0f32fe-556f-412b-b44b-5ea386e3a02b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05beb78-92e5-4345-a57e-df8c0c19e10d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9803aa9b-2ff7-432e-9363-cf6985c0fe00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcda7453-f687-4a1e-9cb4-55f0008dde8b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89c75db-8beb-4d1e-8e48-cb7535b86ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07896110-d8b0-40a9-8d30-c023c4a30fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1de1b1a-af83-4b76-807e-de52ec57c62f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f187aada-fe57-4351-8074-e06a29c69a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833d2470-758e-49e6-a251-276b90c945e0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8a7314-2467-49f7-acd0-d41b77f189ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd023323-f63a-463a-8cfa-e11af9c605f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32cd7b1f-290a-4c00-80d1-8e4e66509096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d8b8412-5942-4572-9ebe-b29bf1d08f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e28ece-d9a4-443c-bb5e-568c7b2f571e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c1f9be-2de2-4a9d-a5ed-e3e1ce0660dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "952ef5b8-da0a-4e69-aa16-c155db2d7c5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce5fd88-91fa-434c-8260-8722f3e00688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a749945-e7f1-4846-adc8-8383c632e21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991021fa-5c05-4e02-99a1-ee1c9396ed42",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1fcea3-3e51-48b4-9056-17f9cd2862ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ccd90bf-d0b3-480f-b667-dfc72bc078e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a960c9b2-1164-46d3-8028-f8dc01b14f97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e822723-4f41-4f1d-bd88-c983e2e7d6d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce09ecf-73ca-45fc-b818-96ab66e49853",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9cf2a15-1a82-423f-b9f5-067bee6b40a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dade8b8-eabc-4b5d-b1ff-d35920bd624c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbde33d-761b-4ec7-ab18-bf1a53dbd4d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "963dfd8c-e7e6-419b-a321-7042609a79c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b23d2599-02e8-4b25-89e0-65a85dab116a",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766bd594-14ca-42fa-81da-15b11f728ded",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55bcf53e-aec1-4075-ba39-293c2230dc0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4e6b7d-b0ad-4a23-a1b8-b6633f789a52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb4785c-9c93-4f0b-acb0-9e0d1bf2ae12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72cabc1e-a8cb-4a55-a819-603e7329ff75",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c492706a-8d35-44f1-add6-e17a9faa012b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d8aa768-22e9-4533-af1f-65c6256c6ce0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ef63a5-2e06-41e4-bdf0-7922c507d28a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb420e31-e5a8-4f5e-a5ea-f57251301299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cfe743-a9f1-4412-a4bb-d812a6b7f451",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabbb13d-4ad4-4a98-a549-4393ff9070d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d09a4d5-1c3b-4ff2-9d94-05e6e7957481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53d4546-02f7-4753-9902-33ec89c15c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a027b8cc-721b-4fae-899b-f722edc2c11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d25988d-5395-47d4-9375-50e7b557bbe9",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be06d46-86a3-440b-a006-af71cd96dbf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e1e77e-ba29-4190-8ca2-4bee259b3f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ee1e78-1672-4f1b-b171-8fc2a8d92db8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be23ae7-cc06-4c34-8a25-9ac1017cd8e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36b03e6-852b-4cd6-a613-f6e88939c7a0",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b73cc2-0b4d-458e-a8c1-0d3b2a19eb21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97d1f23f-008a-4cf2-8fb8-82629a0801a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28cfa53-7dea-4cb3-a089-f3e7cc98bde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9059c742-6816-42e7-8f8b-ba38b4782d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faaad6b5-0702-481a-b9c0-d8c981049253",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081fc975-7c9e-4fef-88ec-b88269f0986a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f6f388-0f28-4121-93ab-9a17877e33c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da391d0d-69fe-4b89-9e31-daf7970e5a6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fe77595-b9fc-4ff7-a739-00e32a0d8802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ac1350-242e-4046-8145-847bb7dbe58f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a91b62-a8a5-43ad-9ab8-d350ffd0abb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b696026-ed81-4edc-8570-55fd22ea431a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4dc0fe-bca2-441a-a33d-7d5b9e90bfc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8021b3e8-e9f7-4cbe-bf61-2f826718fa96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eceeaaf-0af6-4cf3-81b6-8d5b08de480d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c7f3b5-4797-4236-a5d9-5b8abcce29fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b43f71-325f-44df-8638-8843749068ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "417f093b-f0bf-4944-bf1a-aba7ea169001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b58a4936-7ec7-4e05-880e-6abab8adf70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38e9c7c-7dc2-4610-b3f3-e99798d5b252",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c086946-6506-4414-8040-eb2df8040fe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3f964b-557c-44ec-be7d-bd1c4c38fb95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0a27dd-c2c6-4fc1-8542-eb5295ba82db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea6c998-7335-4fa3-8d4b-4765bd17041e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5a7622-e231-49f2-a59e-f7537dcb6518",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283404d3-d581-4354-80c4-33881bf866c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a81bdd47-51a5-454a-a628-f43550a6494b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac924e66-246e-45c7-9f60-4764896155f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da9fa138-652d-4626-90a6-82157252a12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68bc2eba-f1a8-4515-8e5a-341796a18642",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb2c218-df35-4497-b116-48aa19380ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41228007-aec7-4a1b-acbb-a5777b5cbd0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be876cae-dc58-4724-8b4c-4fab2b89c21c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45211e41-b5a7-43ed-b8f5-06f877d03137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016f4caa-aaa8-4af8-8940-7028af6eeeaa",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ccda2e-8816-4cd1-b573-102d9bac6642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb39a11a-da3a-49e4-ad43-fef6705f7d50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ca3ca4-8c34-4c97-bbf9-eaaebf4035aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19dc95e6-26e6-4daf-b53a-677359363152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3913b335-60b3-4b52-8799-53f99b8c810b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbcfda5-0791-4e41-97cd-06a3731be879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d47d684-8b66-40b2-9882-e3aeee661c92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef920684-c2b6-4d10-bba4-5be13b3fe369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4642bbdd-e43f-4292-b4a3-328d177e7811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ffcb5e-f5ec-4377-8b08-267b190cd16a",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75d8937-520d-49ca-bacd-e79d38bf975d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13e3c275-a8c6-4fb6-90e6-fb4d360c216d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac4ce62-e3b4-49c0-be6a-cd7809f1da65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1876a303-5443-4ef7-8457-18510be4b194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0857f6c1-030c-4287-9dc9-f25d63b8f507",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471ad746-6776-4d92-9656-8dd6cbc6d9da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c6de7e9-1aab-48c2-b85b-62ccdf5f9332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67e72a8-2399-4e3b-b971-ff7ae8a500ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d79637-c507-4286-8fc7-bf8a44c6e37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ce7384-6923-4800-997e-a17f91b5361d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39baaabe-d745-49cf-905c-d7efa43e2365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f29cb333-d485-4b5e-a8cf-de160c0ae902"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e152d484-dc22-4d28-8f5d-ee3af17668dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "245e8a9d-dc13-49e4-a942-e8c937bac238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc16be0-0cde-407b-ad30-18f30699203d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd0f226-1219-4c30-a21a-1a940b9cd17c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd4af4e-2b10-457f-9c21-2cd334dc9e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7178ab6b-f74e-4c31-865a-3f4cb6ac3256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e44401-e9d2-4a71-8cd3-41f4bc45d5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f4eb9e-0833-4df4-a76b-7a581804b308",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b2d8e1-8270-409c-ab63-c03d40ce9b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0164c60b-43ba-4351-90d2-8b5b6451c882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e761965-8180-4e07-8c3a-606bd77fa60e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a2f424f-5a07-40ee-81e4-255bbc56caa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba731ca6-e852-4681-bd28-b9af70ed3fd1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d31a1c-3704-42e4-a32e-fc662d87b29f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f599a4cf-b4ec-413a-9d0f-2c2aaa73c5af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea19243-25dc-4108-ad0d-b99d2854cbe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13672155-4a1c-4e7e-b525-4b3b954f78bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9186226-7b9a-413e-accc-8d1c27c805c3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0abd668-9171-48ac-9e76-9ee00031a920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b187e766-afb4-4f4f-9e88-36b4755d7a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "835a26ac-aa6a-478e-ba82-093f42bc459b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "434c485f-55ed-450a-af53-ae1e32404398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ec1c71-5b8f-4bcd-9a65-0ba94cffa307",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da87523a-7cb5-4530-8c01-3842c0beb8bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94803d1c-bef8-47d4-ab51-537f0b486e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae575f62-b07a-4b61-a59c-8fbdcfa796bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170f46f9-0f88-40f2-b496-b9664b0d3293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923ef9f2-aace-48b1-8728-00fe363a3cb5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe980d4-507c-439c-a92a-6fb47b3c6000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c76a2191-8663-47c8-b336-07c8532dcab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c72d0e-fbdf-47af-ad50-bd32e4ff2435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bffc49e1-26e0-41eb-92df-3a788ec5fd92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db406b78-674f-4aa3-9bcd-0d4c20a2fb88",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d57f9a-ae88-4e96-b18a-31701f481452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e8ae80-812f-46ff-8d2a-06e37578b4ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d01cfd1-f326-4fd7-8106-ed78cb6e30b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "000c87c4-a31b-4777-be1b-de81739f85e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690cdfc7-4bf2-4c38-8ace-c8a00fae9203",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f85ecf3-4113-4fc8-81f4-33cff11d9746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52adba3d-2c09-43ae-991e-4e144cd9c47f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e7e32f-ae10-4fdc-b9a8-39645c0d9b5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5a10fe-9817-4734-81c0-e04dab919b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c2610b-bdbf-4d2c-9dbe-ef3836672524",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c44edd-d485-4ad4-94a7-aedb0c9bde29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f70cd2bf-eee4-4bf1-9891-d7a07b4b769c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96307dd0-f5b3-40fb-a56a-2a0d878b61a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0112c98d-bc5a-4ce9-84cc-51ed6a7f7f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02982ab-a84e-40d7-b196-242ebfbc3d94",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9462ac-63cb-4deb-ae18-b577f9e6a567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98306a2c-7065-4b35-8fba-66a536704000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a35bb05-f0ba-4ff9-a319-38c6835c98a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ca05ae-aaed-4471-94b2-94903bd176e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ff22e9-ea52-4b6b-8bc3-aa18e02fe0ce",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0443ef-f333-47f4-870c-8456f2e82b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2823f0-df52-4663-a0b9-b6df24faf9e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb595b86-3bd1-4300-851a-23be886bf9a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873c262a-b068-4195-8f32-c9144a186c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db150758-1296-4f55-9b3b-1ae2457bf37c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37dc6794-e87c-41db-8a63-cb48cc789075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99cc2f70-f7ab-465e-a06e-137b2281fcf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32eb908-22b3-48b4-abf6-a0aed974007c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caa7e5b1-0610-4df3-99b9-e42fa6c06b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5371e832-9e6f-4fb2-b18a-829c97b2d15b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89361d7-feff-4895-829c-67fff5c47c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d6e7ae1-eee3-4a58-b1ea-6e4d1879a704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b122987a-9610-4a03-bc2e-bc3b57ea6c62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27dc3f61-5f0c-461d-922d-0487e934b830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440e0adf-3362-44db-b2be-b631c64e7378",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d498134d-875d-4d4d-a34b-556355675925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a365c6-af86-47ea-8d10-e45f07a55936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f920431c-aeb1-455b-bd16-a33b888f4bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f71f40-e8cd-421c-851e-0bfcc4f45708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655c0090-e0fb-4948-8f1e-02b3b5258431",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1315f878-f204-485f-9839-622c93694d11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d4729c8-18fd-424e-a52d-295a26f423ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09edd638-f1ba-4b5f-9fc4-cb977179cbe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c26386f-6a58-49c1-99c3-4ca2a6299599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb588e5-8db6-4e97-a8c3-36a1061c7940",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2fcb081-9d2e-42c0-baa7-77b613477693",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1306712-f015-403a-8f6b-598409614407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3cebc2-259e-4fff-bc48-eca742a50e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56406ced-3a32-46b9-b2ba-66229c6a61a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9161607-ec89-46dc-b363-89aee95bc583",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d67b0096-a7a1-49f2-a706-21a92efad14b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f278bbc-3d13-4531-8b9d-412ebf75bccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b59e07-01ee-458c-ac1c-54e9876dc081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "882c8735-33dc-4762-9feb-aa64919b2b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4934f19c-4908-461f-be7a-cb1b59f15ef3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204e5f36-6267-4b3e-82b7-dfaeb287e59b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de0923fc-3674-45fb-860a-1a7ddec83910"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "456d66b8-5c6d-4732-b666-c19910fd45a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149a0416-b0ff-45a1-863e-d39ab0e83453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe25db0-f517-40d7-b177-7b8b38f2b124",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f0d92f-a60f-4a71-adb2-0bc6726c024f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9656e784-5bd3-49c0-9872-5f77f51e360c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e82d502-b3b3-45bd-a8b9-ab93256edf68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b333fbda-9f50-48b5-b4d3-a1b7ea7d45b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d059ad-ec2c-4e95-a4cc-eccc9cfb33f1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b131db7b-6c1d-48f8-9ce3-a21bdeba9644",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8422b1a4-d8a7-4366-a185-9144c8c691b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ff7f77-09d2-4718-b695-c23721fe3fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c81931b-2b3d-492e-a082-f688809dabbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f1bf75-33b7-4265-9f7d-bfbc2f582f4a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744a0eac-055c-434b-9739-6b6c0d4d1d59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd16105c-2b3a-4615-8fbe-dddb79236294"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a284a81-452c-4795-b437-b03f83e431fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26df1434-12bb-4ffb-97fc-da0b65bf4f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583bd318-c00f-4df3-b670-1235909411c0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907b2455-8260-422c-b43d-1d8a642a2bb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d9393f8-6347-4152-a81b-7ae7bd52fe6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23c8d8d-0637-4e4e-b497-d3e1ec6fe430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f4629e0-cc27-4e45-903e-d673b8d925c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5120e3df-3f78-4d8c-b0ca-16bddf546ba4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90467590-2ac3-494a-ba2f-39a09663728d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9d69d34-5405-46bb-8a55-3a47688e791a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a811a1d8-37d5-490a-a25b-885c739b0e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7caad245-8ab6-428d-a091-9f50616c0710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d13c14-e45d-433f-aafd-a30dfca93a71",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57b17136-ea23-4576-a207-946d426dff21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faa3c779-9141-4acb-ba1e-91aef2bd44c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1befbe05-de83-409b-ad3a-3d8037d1e494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "006343e1-b43c-46e4-a237-32a0b91cf106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca17889c-0c7d-44a0-b265-dd0cec08baba",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232a0983-f598-4207-b801-f7def150453d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4418dd0-e4d9-41ce-addd-73d3cd701dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f57aa7-727d-4dbf-b40b-2d485acc30df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d918509-2a00-4c8a-a616-08422b0c91d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471be7f6-520c-43ff-9b9c-458c4541abb7",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa6a153-ccc4-4205-88b9-618b2aa49e2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dd961a0-3a73-48ca-8815-394009d35b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17fe654b-bd33-406d-b85e-d49275aad8c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85a71566-8067-406f-8ec6-6c1e40757e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35547bb-8857-4632-9756-2f5310124cda",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82037792-8f08-4f35-bc13-68f342230322",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb6559b4-1ace-4bab-8c1c-1806e847290f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a351d26-6a05-4a0d-8e08-fe07135381a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47634504-ce82-41b9-9d46-492e3641c992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ac6295-eead-447a-85dc-26bf5586905b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01901be3-4bc2-4b9c-a4a4-6f05cdbde8f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5055a7a-6719-4c94-b2fa-d68223429ad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af351d7f-2497-4e82-b0eb-b8932dec9438",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08b2669d-0286-4420-8f08-fa2282653026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7402cfa2-c608-4d2d-92aa-234dc06de552",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "600ad330-03f8-4421-8b0f-b1cf6b20a576",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45f333ed-989c-4735-95c0-3c7d1be77fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c06281c-c643-40f8-8b35-088d58529974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a401dfa2-75ac-45ea-b739-195c9171e6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa4a6ce-3bbe-414e-8088-ac5fb624558d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831492bc-f57e-4d96-9882-ea0e3cbd60a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69c6d530-874d-4cc2-98f7-9431c7372519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "175f4d43-f7de-45bd-b65c-f630d4e0c106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "245c9277-146f-4625-a385-d39d6f441cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07911043-2084-426f-b8fc-22f63163040f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8d4d1b-91d5-463e-8741-96f4b479d508",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c26fa649-5c77-489f-9c5c-ddf2d07008fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05d82f1-f343-4ff9-9d99-1698f5fc18bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cd1e026-fbc2-4856-b991-61fffac79bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713589b0-2541-4613-86b8-d9c3e175b2c1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4158b4-39ab-44d6-8fb5-646594570c14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e670e403-0788-4dae-b835-5e4e6ba2a342"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23afc165-f6bf-4787-94bb-4985461848ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d23735f-15cd-4ad6-be4a-df1ea361840a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596a9f88-5b24-4646-8219-a57dd5615bc2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b3db17-db58-4dca-9072-485a8a930adb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "425944d3-d60a-4d14-97d4-a3f9f94d0217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3955f8-c9da-46da-ace0-867ea8fc0587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1894ae3-d58b-494b-96ef-0fa6bbbfa10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256eaa22-5ad2-4477-9c07-3e733f7402ea",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa24a67-9ad1-4d5f-a4d9-dd84bd09536f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daeae432-bf4c-4d41-8a0f-a8de61395169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cffb407-b0da-44c3-b903-c16e6750a04f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1787399a-b334-47de-a456-3fe61c799f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022117de-8378-409d-9b4c-249924fcddc8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2063b449-f298-4075-9769-290861ce3e38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2d52209-3111-40f7-a5bf-eb45d0e7b0e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14b842c-ae69-48cf-b4dd-61adf6f20712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b65003c-5d33-47b7-a4fc-70c4003334ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e947df8-637e-41ea-baf8-7888f217b670",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630c17a5-2d4a-49e3-9a2a-28e4ef7ff8c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "501ac7be-269c-480e-aaef-55317e457d84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a473bf-054b-4c77-98b0-416f0a83ee77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff34e556-50c2-4da1-a6e9-b131b4dc94f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786f0bfc-f5df-4070-9b79-b344465803ec",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d407e918-afda-43a2-90f3-3ae85cbc1607",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59b2963a-4f4f-4041-a8f1-7f2dbe791527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8a6a65-550e-4c32-a1d8-f3da53f02c23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa6f00c5-5643-4b73-ad29-8cc17e94301c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244bf667-2f4f-4923-8a04-aa1b41865eb2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb9b2ad-830a-4b9c-870c-e2ab5fa3cd8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c684f1e-e77f-4802-a85e-639a70480d11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4b792b-3116-42be-9415-ef46bc768131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb7134c-a753-4055-8e8f-1223e4c37a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be42b784-8342-480b-adcb-20a377fb3b22",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9331cba-d58f-4e80-8237-144a3410f664",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14a79f81-88ba-4a27-a34d-0a92a8bc93cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76ce8f2-77ce-4275-bcc8-4dffba0726a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a6c2da-42a6-4b66-a6eb-b6defc3db147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb78a909-9120-4b4d-aa31-1b8c0c7b502d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c07700e-977f-46af-a673-d5ab2f2d9622",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8cf7c2a-f16c-48c5-98c8-7daf0ee7d1cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4df38e-021d-49df-8282-28828df6b50e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5428424f-2305-4b8c-a911-9498d2ec874d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56f1263-37bb-4166-9d5f-b7081d2a9a41",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd8dd05-a01b-45e9-8b73-8035994fbae8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5191101b-ed43-44e4-b974-6fe9ff88f799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53963b9-bccd-425d-b6f0-ef384782c2eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c344b11-b408-444d-9dd7-fec857fcfb7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24034c9-d0e3-41b5-9501-2f6e03700753",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90f7abb-5f65-40d9-802d-cc4a9360801e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9e04b92-e977-4bdf-8c66-f92ebefa3c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff47200-b6ff-477e-adec-dc9205b93932",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0a61db1-b5f9-41c8-a379-263ebd823c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8744ec-0bdb-434c-ac5d-0d26a0ac6742",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138b006e-f4ae-4f20-a5b8-c9d0971022c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c312346e-67e9-46a8-b320-b2cf32c4146c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "099ac02e-a64c-4a8b-9bee-4783aafa6dc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765967d1-0417-496a-a10a-8377d209d0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3d3070-46dd-4c4d-9da7-010ecd5ca8af",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c181f309-a569-43f8-86bf-fac5d2a7771e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c1c890c-6ffe-403c-b73f-7991bf201236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7285ebcf-f422-4ff8-9554-a6911eb71705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1084adfb-0a92-4cd3-a9d8-31b211fe2280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2173cde-c793-49bc-ab91-6b2f7a6cbb4e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea15c881-fa59-4b23-bb57-e17f6981e89f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "945b2a18-9e4a-4758-9401-37f9f5bca037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "814bbffd-58be-4fa3-99f4-fb18c0573892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ee3fcd-253b-48b3-844d-5e14b72fb690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39e1d5e-35a8-47f2-bbb7-95bba17b6903",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c9970c-2da2-4ec9-b094-161d955c0750",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0725814-21b1-495e-baca-90f65da96a4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b42ba6-9e7a-41cd-92aa-1ed834fc8c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0e7eaf-1562-47d0-b953-b0d453aaa860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6fb90f8-8246-4510-aab2-20b4f95f2891",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ffbe1d-b2a5-4746-878e-350a0ffa85da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f98c2345-1e29-4ba3-a85f-501e3b4016a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "783a39e7-1814-4171-9648-860c363a2706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2184ee00-92d7-4095-8e57-3c09819fd898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d276070d-d341-483b-8bec-0eb24ead1614",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20fa519-88bd-4f83-a496-73bde375ac62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2d4faf9-0bba-449d-b0ca-c8f79e4db83d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0433270-e115-47ee-9cab-634cc499fdb1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b8396a1-fce7-41c7-8f60-7d0ee397caae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0087a0a8-9ec9-4040-b151-500cb6f64d23",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682bb5c1-0cc4-4df4-8554-a8b9dfafa500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5a9caa5-302c-4e01-8434-9367ebcc2497"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe28e3d8-c27e-4cb5-93b9-d68876ec2102",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22ffbf3-3b9c-458e-bad1-2a2e6707bd46"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfabf3ff-3985-4d6c-b0ea-0adb99bb579e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e454d32-07aa-48e1-a359-4d0bce3cbe21"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e136622-2d19-40b1-8522-03b1e9a9e3ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1bec6713-cac7-47bb-bffe-2c091cde08f9"
                    }
                  }
                ]
              },
              {
                "id": "7b2eca43-f29d-4a0e-988b-6059d604c1ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8429cbd-7c9e-4a26-9215-5c0e6c27f274",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3369a929-d528-4be3-87d9-7652460fb082",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7339ce3b-38fd-4ba6-9408-e2da7ad6b805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc1d0d3-3e61-4985-ad23-29f57e176323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3453c73c-0764-46ed-85fc-1ad3a54e3666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef64f2dd-5167-4056-8ba6-f7105c9325fd",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfee9534-a81c-43fa-a0c2-c030caeb3d2e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "673319c4-d020-4610-b699-54dc23617d16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18869d80-3679-4df2-9982-0a6c78b5f1e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20076837-579c-434f-a131-d730f0e05a86"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c50048da-eefa-4ac9-bd2f-2d53b9421471",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec5db99c-d643-4d02-86d7-1fea9fc9ce9c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d5dd7e36-c5a7-4d9c-bd32-d9db08a6d5d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d488d91-e011-4c05-95ad-1fab5e4c93c7"
                    }
                  }
                ]
              },
              {
                "id": "d9d8c499-213a-476e-a276-9ef1e3570220",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "21d55922-73f2-493f-b3ff-194dccba4ee8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae6ae44b-fc13-4dfa-9b85-5b5fd1590300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "33ed8d72-7ba5-4f8b-85aa-efdf8d6d5a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b9fac5-cd24-44c0-8154-c71f08ab81a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5933a614-bb73-46e4-b88a-14700ba3ce9c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c48dd257-97ab-4aca-854c-118ab58733d5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "942157f8-b0f9-42a6-b078-28ff541bbcf8",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "776d3b72-a071-4d72-883c-aa4dc6fdfcc1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "da86a300-63db-42e7-bed6-47f73dd43d67"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a42f4f26-876c-461c-b6fb-89db976ba4b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42522151-acc3-44e5-ba9b-39f499e4a00b"
                    }
                  }
                ]
              },
              {
                "id": "cac18a0f-d91f-4389-8fde-a950805a871b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7a0d1e8-668f-4c2b-b32c-ae83b46f16ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f29653db-596d-40f4-a987-1b529ded6707"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75ddd22f-a35f-4899-85fe-6702abe5df83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b1ba0fc4-c633-4202-b99d-14ef432d6965"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fbc053d3-87d9-4897-9f02-99da0ccffb8b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4f7e42be-77b8-403d-b1ce-eac7550cbb87"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8281a319-492e-40fb-9a80-074d24504a87",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e14f4011-3990-4d46-9cd4-cba706f90f28"
            }
          }
        ]
      },
      {
        "id": "97096791-3ff1-4627-a529-83c48964f024",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e4696438-f0a2-429e-b9b9-fc09127c07c1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d90f7cfa-f1ca-4cce-bb2c-22adea09c350",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b69a7a6a-871b-4524-8bc6-12f96c2d53f3",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8c5a4e-911d-414e-9dc9-7b5483f65a27",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c3eb9470-6fe9-4ecb-8ef5-9940e1802f67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6059e46-b0c3-4760-902d-223ffa179c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c59db6a-a16a-474c-b96e-1484636aae28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0fdd87-e3d0-4ed1-a101-571a2a3b4cc6",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ec2894-5b19-4f77-ab45-ae0fb23d926b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a0429121-2745-4ca3-883f-fcd204643175"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9862870d-7424-4fbc-b18c-e9bead51002d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2eda5801-4222-4717-9989-528bc84598b4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7190f07b-b668-4a60-bde3-b58bb27ac292",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7902fe20-f2cb-4f8e-99c5-584c6767f125"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "623e77e8-1bbd-44f8-94a0-af8e7be047fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de9e8d25-9951-4039-8d74-ed895182b291"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25c636da-cf0b-4149-aa0d-9cd6549e2492",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1048ee1d-3048-4d71-9667-7a94bdd2bfe8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41cd975b-d710-4782-928b-c8acae0b820a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "31c18b4a-8033-4fe1-a59e-1d1dc38125eb"
            }
          }
        ]
      },
      {
        "id": "65469e09-bf85-4104-b954-a381fe22e041",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d62ee6a5-1b8f-4394-9e7d-f191c5d2a7a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "28b20b05-cd31-4cc6-88e3-ed74fe7892e3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d7dc0962-aca7-4f35-8a0a-ac74d5f722d7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1902d1be-d21c-4f43-a3f7-99b5888015af",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9938da9b-cfb3-44a5-8535-3916502b0f15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c32660c-1822-437d-88b4-0461fc03e69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16be4ed8-7fc5-4fbb-bcc4-612a47fac935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72aeafff-5ba4-4d02-954f-f1f644d25e2b",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebe2137-b653-463c-97b0-ff181410d5f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8edb8416-c1a6-4050-b80e-19bf69b4fe1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "739f4689-161e-403b-b845-ed1ca21e9f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad1e79da-7af8-45e4-842e-e5ae533a20ec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1d9e509-2436-49f0-8c5e-f755e45b86da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4457319f-fdb6-4c2e-a62c-501c23cc0d8c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca45c546-0490-4288-8b34-45e540790f0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e333747-aa67-4912-874e-fc95b0831834"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "564a62b8-b175-486c-ae7e-7d0525823fbf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7dc71347-0dce-4d27-8829-9c2ed5d4cca0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13c1e427-7919-4f5e-9d40-3648ee97b41a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fa2b1d81-3229-4e27-9ce4-d7fc79c4a1e9"
            }
          }
        ]
      },
      {
        "id": "0821ae32-b5ed-40b6-929c-59c1e13f0b55",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d2e1a68d-a7c0-4565-b8f4-dfba8d787643",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99b16f89-945f-48a5-85a5-b803ab80b888",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a011a4d9-242c-409d-8a79-f2343f3649d4",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce709754-ff5b-48be-b714-1f2ce983d0d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2ef4c1d-f201-4462-909c-5530d55036c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4811f3e3-d026-40c3-939b-37b96d231721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5b4f80d-10b1-45e0-a833-2f5d1add528a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bca5ad9-70f7-448b-b347-d7cde5b8455c",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78793e3-f7f9-4035-85b3-ca6434770721",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e355dcb8-f159-4f92-bfdc-fc83d1111cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c65e70-8290-4932-930a-2bfc9e2509d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5c9c21f-431d-4679-a020-ce769d77b2ad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75bc7d48-8186-497d-89b5-cdf4c3a42175",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6eab5b16-6f7b-4687-ac1d-9b5cd73e1c11"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1c0d4ce-f0f2-477f-a6c3-c0720dc2e228",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1eeb5347-a8b8-4044-98a2-e5155d4434ad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "694d4ec3-4a99-4a6b-bfe4-ebb8e387c7b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b04bc9c2-9e58-43dc-a306-da74033f7d19"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ec32a8a-42c3-4202-a6ce-4970f836850b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6281b4c8-dcc0-4acb-a86d-e48739aec455"
            }
          }
        ]
      },
      {
        "id": "6eced3fa-6de6-412a-b483-c0240a0ac14c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a244c8c1-674e-45e7-bc22-0e30c1019096",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6da27bf4-0e00-43e6-9fc9-f0f1c0956821",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "166a4500-2069-4634-b563-da94d4d5fa57",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2295858f-b345-48d9-b83a-1545230e39ff",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70b70416-7863-4529-8454-5ccdbd375e7c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 298.7953667953669,
      "responseMin": 7,
      "responseMax": 6610,
      "responseSd": 803.0375829745794,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1678668015303,
      "completed": 1678668103640
    },
    "executions": [
      {
        "id": "20e1bc54-5911-4b6f-bf97-3078bfc83cbc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6623fe68-2f47-45bd-b4e8-b655181981ec",
          "httpRequestId": "2092d252-545c-44aa-8d2f-0435f84e964b"
        },
        "item": {
          "id": "20e1bc54-5911-4b6f-bf97-3078bfc83cbc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a73f6976-e86a-49c0-8872-c52d4bf7ad6a",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "4d08a1c1-821b-42d3-85e2-66872902e196",
        "cursor": {
          "ref": "932898d5-841d-4fea-b466-dd5c9e57b2c0",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8a550964-34e1-4db3-822a-60fe4ccd4828"
        },
        "item": {
          "id": "4d08a1c1-821b-42d3-85e2-66872902e196",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0fc58e80-ee3e-4717-be7e-252a42162209",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "ef6c715c-5345-46a0-a56d-bb511cc45477",
        "cursor": {
          "ref": "c3b5a470-767f-4cca-ad06-4fde953d3b6e",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "691a5498-7838-47f4-b518-cb02184edc63"
        },
        "item": {
          "id": "ef6c715c-5345-46a0-a56d-bb511cc45477",
          "name": "did_json"
        },
        "response": {
          "id": "ba3c6bb9-4346-4246-8b56-0f00be305898",
          "status": "OK",
          "code": 200,
          "responseTime": 320,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367422a9-55a2-45aa-b675-c520702114e2",
        "cursor": {
          "ref": "9b646944-b215-4213-afe7-e57342f7794b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "667f02d8-7541-45df-9cd5-41acee3a920f"
        },
        "item": {
          "id": "367422a9-55a2-45aa-b675-c520702114e2",
          "name": "did:invalid"
        },
        "response": {
          "id": "360bfa78-9d5a-4877-97e0-c4b392a2014a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1685,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "367422a9-55a2-45aa-b675-c520702114e2",
        "cursor": {
          "ref": "9b646944-b215-4213-afe7-e57342f7794b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "667f02d8-7541-45df-9cd5-41acee3a920f"
        },
        "item": {
          "id": "367422a9-55a2-45aa-b675-c520702114e2",
          "name": "did:invalid"
        },
        "response": {
          "id": "360bfa78-9d5a-4877-97e0-c4b392a2014a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1685,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "9006376b-74e1-4f22-83cf-d05c3a588a80",
        "cursor": {
          "ref": "2a168e9d-dc5b-4d4e-a5e4-5f85c2bd43fb",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "89156763-752b-459c-bff3-23f31e9092f5"
        },
        "item": {
          "id": "9006376b-74e1-4f22-83cf-d05c3a588a80",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "db0deaa1-1c28-4ad7-bb9e-4b8f3ead1564",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8165b60-9a29-4492-84b2-92aba6270368",
        "cursor": {
          "ref": "9ec6c7b6-fd9a-4454-89f7-bedba5535ee8",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1bdd1291-94bd-44b9-bf81-397f7aef2741"
        },
        "item": {
          "id": "d8165b60-9a29-4492-84b2-92aba6270368",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bda490ce-93ac-4704-affa-6c7c69d8f332",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f29cda5-ca9f-4e18-a906-c2a87821e3d4",
        "cursor": {
          "ref": "35f234ed-9a35-4f81-8b98-fba73f0d4c01",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0a94e792-3c4e-4986-88d0-02462a9f9176"
        },
        "item": {
          "id": "0f29cda5-ca9f-4e18-a906-c2a87821e3d4",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e4007360-15e7-48ec-aed4-e10c7e2221ab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "a365484e-0462-4f37-98c5-7356fb91585f",
        "cursor": {
          "ref": "1fd181ec-a349-44ac-9141-1543e9ee10a8",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d4a8024d-bf2a-45f4-8508-7d62df0feae2"
        },
        "item": {
          "id": "a365484e-0462-4f37-98c5-7356fb91585f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e2a46398-2f19-4e90-a492-8557eb89abf6",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a365484e-0462-4f37-98c5-7356fb91585f",
        "cursor": {
          "ref": "1fd181ec-a349-44ac-9141-1543e9ee10a8",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d4a8024d-bf2a-45f4-8508-7d62df0feae2"
        },
        "item": {
          "id": "a365484e-0462-4f37-98c5-7356fb91585f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "e2a46398-2f19-4e90-a492-8557eb89abf6",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "a1ac218b-5078-497c-89cb-a9e683495e25",
        "cursor": {
          "ref": "1ac24c88-3557-4cec-a222-76c9653d0d84",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "233f7df3-acca-430e-b6d5-14e197d9edab"
        },
        "item": {
          "id": "a1ac218b-5078-497c-89cb-a9e683495e25",
          "name": "identifiers"
        },
        "response": {
          "id": "2eeacf19-5e42-4457-8fe0-b8754d6c8621",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606db1fe-8a2a-47a8-a79b-35c375cfed67",
        "cursor": {
          "ref": "4b5589f3-98da-455e-a5a4-a33eb6022548",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "82e491cb-7186-4800-8f6a-a1e5add8fe38"
        },
        "item": {
          "id": "606db1fe-8a2a-47a8-a79b-35c375cfed67",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7545a427-7bff-4ab6-ab2d-14078714a5e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606db1fe-8a2a-47a8-a79b-35c375cfed67",
        "cursor": {
          "ref": "4b5589f3-98da-455e-a5a4-a33eb6022548",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "82e491cb-7186-4800-8f6a-a1e5add8fe38"
        },
        "item": {
          "id": "606db1fe-8a2a-47a8-a79b-35c375cfed67",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7545a427-7bff-4ab6-ab2d-14078714a5e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c36c7c-611a-4501-8700-9f229304dc68",
        "cursor": {
          "ref": "b6ffd3bc-4ad0-44f4-a410-a55db58570a0",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0e1d7ddb-559d-43bf-a78c-aecc44573a3f"
        },
        "item": {
          "id": "d6c36c7c-611a-4501-8700-9f229304dc68",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "57efcd8e-3810-4da2-a617-b40bce0be975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a85866-3d14-473c-a1a1-90cf4f764c49",
        "cursor": {
          "ref": "32bb4c4c-481f-4503-83f2-9492925fe5d3",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e8190ff4-769c-4152-99ff-4faf87be6498"
        },
        "item": {
          "id": "55a85866-3d14-473c-a1a1-90cf4f764c49",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b5590ffa-9849-401b-8341-f98563f8508c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a08181-5316-4606-bf7a-e13978fae40d",
        "cursor": {
          "ref": "b12e74c6-463f-4b1f-87c6-71cd8f15b4fa",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3075c97b-d979-4164-9b7e-1fac320facdb"
        },
        "item": {
          "id": "17a08181-5316-4606-bf7a-e13978fae40d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5e59285b-2f1c-4f74-bb50-b46eeb3bb3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9cb831-188c-467c-a6f2-e7da419a5b6e",
        "cursor": {
          "ref": "f00515e9-8bb7-4a5e-8bdb-d07e9ea844d9",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9515f8c8-e0ef-4adb-94d3-7d4a2e821e70"
        },
        "item": {
          "id": "8c9cb831-188c-467c-a6f2-e7da419a5b6e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "583979f2-997b-497d-abed-148508ca009d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e95be28-00da-4fe1-bfd7-9d8beb29cd9f",
        "cursor": {
          "ref": "8352fcd2-7c22-4b46-ba11-ff0d22a37619",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4d6fa20d-80b0-4100-b823-829e71261679"
        },
        "item": {
          "id": "3e95be28-00da-4fe1-bfd7-9d8beb29cd9f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "696ba55a-6352-4441-a82a-90a1630389f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f61874-25c1-464c-a3b0-fe433f2ecbb3",
        "cursor": {
          "ref": "6dc0b472-5c89-43b6-aab9-cfb292e4ff7d",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c92dd461-0117-4b17-b5ff-e745b8794ea7"
        },
        "item": {
          "id": "62f61874-25c1-464c-a3b0-fe433f2ecbb3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "88b319f8-48e5-4901-a5bf-d90de2af4de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a1dc5c-30dc-4ea4-8a37-e71c15b3b802",
        "cursor": {
          "ref": "80f2eafd-4254-4911-a2cd-c0100675fbca",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "7096c7e0-9b13-4781-aba8-c5e4840eba9b"
        },
        "item": {
          "id": "84a1dc5c-30dc-4ea4-8a37-e71c15b3b802",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "acc544e2-e833-4dbc-8889-69a0a41d73b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd5cd9c-42bf-46d8-9c20-de4010fac4c0",
        "cursor": {
          "ref": "8eb0e910-b7aa-4501-9a21-c3763766ce53",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "64dee4b9-21eb-432c-b1b7-72ab2e9bdbc7"
        },
        "item": {
          "id": "cdd5cd9c-42bf-46d8-9c20-de4010fac4c0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "39a66e3f-5c6e-4656-a5a4-a74e32bd04dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa2f299-58f6-499c-b46f-a8ba0ecc5a60",
        "cursor": {
          "ref": "b4851d4e-883d-458e-bb6a-163abf29a2b7",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "161780a3-b421-46c8-8678-99644ad0df3a"
        },
        "item": {
          "id": "baa2f299-58f6-499c-b46f-a8ba0ecc5a60",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5ca74cc4-f63a-4700-8892-0afae60c185a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa055ac0-d59c-4302-b8ef-70d2648bf23c",
        "cursor": {
          "ref": "379abc86-c9c4-4576-bc4a-60873fec188e",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "665d6390-8d5d-439a-ae05-872f49d54031"
        },
        "item": {
          "id": "aa055ac0-d59c-4302-b8ef-70d2648bf23c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ea2d65a1-fb52-431c-b594-793411bc2933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a45d92c-6645-439a-868c-d4403883acf1",
        "cursor": {
          "ref": "063119a8-18c2-4182-8557-c5b9301f7882",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "bc24026d-48b0-4d29-b5f4-b7b880f23545"
        },
        "item": {
          "id": "5a45d92c-6645-439a-868c-d4403883acf1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "21aceda7-cf60-49a5-a910-042470f917ea",
          "status": "Created",
          "code": 201,
          "responseTime": 639,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "57717681-9709-465c-a978-a5bcfee99396",
        "cursor": {
          "ref": "06ab9a74-6a1f-4f5a-b9a8-7ba7027bfea5",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d9795b9e-0dad-4e75-bf10-07ff8c409c4f"
        },
        "item": {
          "id": "57717681-9709-465c-a978-a5bcfee99396",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3b90fd9e-8f48-47a2-b3d5-c22c91c65031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59009400-6b17-4c41-9534-8aa45c20a8d8",
        "cursor": {
          "ref": "fde96d53-0a2c-4f87-8f29-42f9e2e69745",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "17057684-6938-4ad5-9abc-3cd51c1f0474"
        },
        "item": {
          "id": "59009400-6b17-4c41-9534-8aa45c20a8d8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "970628fe-cf62-4030-8e76-4cd87835a755",
          "status": "Created",
          "code": 201,
          "responseTime": 6610,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "9194c884-1434-4861-906c-089e68c3910c",
        "cursor": {
          "ref": "b17be78a-9c92-477d-a05e-bb667e75f396",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8ac51d10-4580-4a6e-9126-1bcff0ad479e"
        },
        "item": {
          "id": "9194c884-1434-4861-906c-089e68c3910c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "daf2b17d-b3ac-4b0f-85ef-bf8cc8adbf91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1041,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dfa5eb8-1776-48e6-b5e6-6f579b01c2d5",
        "cursor": {
          "ref": "c1b23e24-4762-4669-9026-3fbc23bb4aab",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ba6c138c-f7fe-46b2-855e-76d3750b5ed1"
        },
        "item": {
          "id": "5dfa5eb8-1776-48e6-b5e6-6f579b01c2d5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ce4dfe0e-1cc2-4370-b599-eaf2e6f6c551",
          "status": "Created",
          "code": 201,
          "responseTime": 5563,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "1260c173-4f93-4119-98f3-461d268ad3b7",
        "cursor": {
          "ref": "635af999-2d90-46cf-bd9e-485be6152642",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2f8b32af-3cc1-4a00-86f9-cbf17cc12954"
        },
        "item": {
          "id": "1260c173-4f93-4119-98f3-461d268ad3b7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3a0ba9a0-6669-4b57-8b4e-ee14a1968139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a815412-ac49-42c6-9caa-643a7b01bf4c",
        "cursor": {
          "ref": "7d053d0d-22f1-4442-bb5b-4c0525b4aef7",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e5ba5c90-46f6-459f-847d-acb48d346519"
        },
        "item": {
          "id": "1a815412-ac49-42c6-9caa-643a7b01bf4c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cf855781-c3a2-4ef9-b34e-3318925b8f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 489,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96873956-de24-4d9e-8c5e-b5c695a18754",
        "cursor": {
          "ref": "5341b01a-3431-4d73-b623-80fa4748670b",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6ad0e67a-782f-43dc-9050-55c59064b70c"
        },
        "item": {
          "id": "96873956-de24-4d9e-8c5e-b5c695a18754",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b3786204-dd64-49ca-b35a-578894430edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 382,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee9f7eb-61e8-4d64-a8e2-d29d72166f13",
        "cursor": {
          "ref": "17508fec-5f3a-44fe-93e9-25ee46752a44",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "6cd3d23a-43d9-4680-a372-ea7605350928"
        },
        "item": {
          "id": "5ee9f7eb-61e8-4d64-a8e2-d29d72166f13",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2931fcd2-9327-426d-9e9a-6739bfd6c1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 670,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff88bbd-6ec9-4e22-a952-83c2ef129f75",
        "cursor": {
          "ref": "526d55f0-df0c-47d9-9599-dd3c233b3abd",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "db2e1955-cb95-4b2b-9427-17078f30a4db"
        },
        "item": {
          "id": "5ff88bbd-6ec9-4e22-a952-83c2ef129f75",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3352797c-ab47-41e1-8f44-f537445cf74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 506,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90d278d-9ef1-416b-8415-149e8b8f05e2",
        "cursor": {
          "ref": "23e04c35-77a2-43f4-99b4-a14e6b212b93",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4775af74-d05f-43d6-a1e3-77a246312a63"
        },
        "item": {
          "id": "c90d278d-9ef1-416b-8415-149e8b8f05e2",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f99af445-5fc6-4f34-8eac-592ccdb0084f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1527,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741ef944-caf9-4de2-bda1-9d6a129a750f",
        "cursor": {
          "ref": "a22a1859-b873-4447-8312-0126c9ae2f1b",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0357ac25-6eab-480b-920d-a7a655a88210"
        },
        "item": {
          "id": "741ef944-caf9-4de2-bda1-9d6a129a750f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d9a23807-b665-4bf6-bfe9-47375df505eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1422,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2db1039-3b39-49a9-98f2-5e6b584c6bd9",
        "cursor": {
          "ref": "1b14a6cc-c6be-4cdd-9a60-d73fe326d53d",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f2ac2207-1577-48e4-a5e0-aec3ef00e8f8"
        },
        "item": {
          "id": "c2db1039-3b39-49a9-98f2-5e6b584c6bd9",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b17b9270-23a5-4ad1-8ea0-df052435ebd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1579,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b9fa28-4077-42e0-a3a0-8a7649bf7b42",
        "cursor": {
          "ref": "f63adadd-d9d2-40c8-a1be-d8645524b944",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9d24b97b-58cd-4d48-9c93-555dd389e920"
        },
        "item": {
          "id": "f6b9fa28-4077-42e0-a3a0-8a7649bf7b42",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c3e5eb23-f9ba-497d-9ceb-361034b44b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1231,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a24839d-35b3-4e47-97ab-46cff4b23293",
        "cursor": {
          "ref": "047c39ec-9358-419c-bf9d-73c04e854f25",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4b33c864-76e5-4d40-847e-a9d8bf9319c4"
        },
        "item": {
          "id": "2a24839d-35b3-4e47-97ab-46cff4b23293",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "925cb716-3da7-4859-aa7a-f425c9dddc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 492,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ad712f-a85e-4aa1-8b35-b28e484eb675",
        "cursor": {
          "ref": "1548b289-42ee-48c0-b6b1-6475bc44ebef",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f468e4b2-ebe1-42e1-b048-a1e866d74540"
        },
        "item": {
          "id": "42ad712f-a85e-4aa1-8b35-b28e484eb675",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "26d34e2c-3a59-47d4-8035-54c0844d46fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d61c02-f66f-4c4c-85a6-1291448ad6d1",
        "cursor": {
          "ref": "d7681712-022d-480e-b015-f0d72c27419a",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "71a1b4ab-f88d-4ef2-b831-a6f934f160c1"
        },
        "item": {
          "id": "d6d61c02-f66f-4c4c-85a6-1291448ad6d1",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2d6a2ac5-818e-4df7-9ea6-ba7efb0cc7aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261236c8-7077-4bf4-9970-e1a8bd6e302c",
        "cursor": {
          "ref": "adcf013b-344c-4e61-9018-06a5b9f6e6a4",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1195c582-a9da-41b9-818e-849e2e82bca7"
        },
        "item": {
          "id": "261236c8-7077-4bf4-9970-e1a8bd6e302c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "78adba4b-91d8-46ba-bf0a-24a133b1bd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd8fe188-c1c4-4f6e-ac24-4239d01e7a20",
        "cursor": {
          "ref": "0d8ee8cc-a3f1-41d9-8f4f-3d117f52e3a5",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ba2f0e63-064a-429c-ba3b-d824cccd84a6"
        },
        "item": {
          "id": "dd8fe188-c1c4-4f6e-ac24-4239d01e7a20",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cfa1d6d2-e583-4241-8b8a-c455d4c50f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f65ab231-68b5-4920-92ef-f4b4a27b38e5",
        "cursor": {
          "ref": "e9cb1360-0a88-4744-8589-d16dd0e2ab21",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6112c5a2-0d09-44b3-adf4-b3f427c8494f"
        },
        "item": {
          "id": "f65ab231-68b5-4920-92ef-f4b4a27b38e5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3aafe980-8954-4b13-bc90-3f82dbb2e756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d33f62-05d8-4dbd-8be8-43453572d6e3",
        "cursor": {
          "ref": "6ed5f533-1173-43f1-9358-560965c3076b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f480b3aa-2c82-493d-aa18-2590b7d4cd1c"
        },
        "item": {
          "id": "44d33f62-05d8-4dbd-8be8-43453572d6e3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ed8f36fc-f216-4fcc-8439-07a10b49ba5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2050db74-82f7-49d2-b8ac-423a4d06ac93",
        "cursor": {
          "ref": "b8478ae0-52ef-460c-aa43-0784ffc3ba4f",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cbf7d53f-a9dd-43df-ae0f-14ddde600a15"
        },
        "item": {
          "id": "2050db74-82f7-49d2-b8ac-423a4d06ac93",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f91960d7-4456-4751-abbb-4407ea18a02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b330d2d-a618-4af7-b823-905294d76e3d",
        "cursor": {
          "ref": "8154013d-3660-4d3d-b513-507643e60aa8",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d5309908-9805-4ab9-85b5-3e0714004bb7"
        },
        "item": {
          "id": "6b330d2d-a618-4af7-b823-905294d76e3d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "17bc556d-e8e0-4b7b-a8b7-669b6535db35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab877957-41ae-44b4-9f59-3771e7cb8780",
        "cursor": {
          "ref": "05a55c92-3ac5-4554-bb77-15376846e6ee",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "16e173e1-51b7-4cc9-a295-4f9eeaa1aeca"
        },
        "item": {
          "id": "ab877957-41ae-44b4-9f59-3771e7cb8780",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "69a16d81-d62b-4c93-988f-31e4a5249e31",
          "status": "Created",
          "code": 201,
          "responseTime": 2798,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "edf60d3a-6a7e-433f-837e-e00333a83c7a",
        "cursor": {
          "ref": "a70dbb18-0cf2-4c53-bfc3-906fbed75c8d",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "727bd0de-9915-4f42-9e43-032d25923851"
        },
        "item": {
          "id": "edf60d3a-6a7e-433f-837e-e00333a83c7a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "bdcc8215-3ae4-4393-aae7-8e0fc5836f6c",
          "status": "Created",
          "code": 201,
          "responseTime": 2407,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "32789b13-8be5-408c-8c48-b60d5e0c8cea",
        "cursor": {
          "ref": "ab82819f-435a-4002-848d-d0d40fb557ec",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a9d5a953-d6ea-4abb-829f-c4acb1126d1f"
        },
        "item": {
          "id": "32789b13-8be5-408c-8c48-b60d5e0c8cea",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "42ebb0ac-2ff5-4579-ac3e-70498c7c9a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2540,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55596149-d657-41bb-83f0-194e27c05b51",
        "cursor": {
          "ref": "9affdf30-27ac-4214-b5ff-2e19b5cf8902",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "33848c74-5db2-4231-ae97-b6df19c810f4"
        },
        "item": {
          "id": "55596149-d657-41bb-83f0-194e27c05b51",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "72144381-80fa-4b8d-a02f-d833656f588d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17cf115d-50b3-4625-b4a5-a672ee79e2ba",
        "cursor": {
          "ref": "66b9f19a-3d38-45e0-9b03-5294f24c2dc6",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5f614da7-64c5-4c90-b0cb-440a2e577907"
        },
        "item": {
          "id": "17cf115d-50b3-4625-b4a5-a672ee79e2ba",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2d5341b8-d1d3-48e6-8fd5-9c26ea6d6610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ccde39-29aa-47d8-915f-41eec86858f7",
        "cursor": {
          "ref": "c27bb52d-4600-4140-8ce9-91ab2656b2ac",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0c0e0b49-cf71-4134-82af-10be01a18de1"
        },
        "item": {
          "id": "46ccde39-29aa-47d8-915f-41eec86858f7",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a7741fa9-8860-4e3f-8a47-9c93ae9cf7d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "513ca416-b71c-4e3c-9f05-605a8e1d0a6d",
        "cursor": {
          "ref": "f46a3064-4427-4bae-b861-17a97e929739",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e9e66a69-aca3-4cdb-9286-8b008ed2ffbb"
        },
        "item": {
          "id": "513ca416-b71c-4e3c-9f05-605a8e1d0a6d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fc321a96-5755-4b9d-891e-13a85114f088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7066887-e14d-419e-92ae-77d58bb39aa0",
        "cursor": {
          "ref": "4651ef0f-6e0c-4698-b726-aca5baad3436",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fb14d370-58f5-4b92-aa35-6f28706e54fe"
        },
        "item": {
          "id": "d7066887-e14d-419e-92ae-77d58bb39aa0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3ad03f1b-dbcf-42fd-91a2-3d56f21029fd",
          "status": "Created",
          "code": 201,
          "responseTime": 2245,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b16f8b82-1496-4866-ba43-8bb580fb2186",
        "cursor": {
          "ref": "4b624ecf-a722-421a-a8b8-d85294ee7195",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f5c48771-9de2-48ba-a8f0-8bca3dc2f633"
        },
        "item": {
          "id": "b16f8b82-1496-4866-ba43-8bb580fb2186",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "32b4101b-8078-40a0-97f9-383a02530fa6",
          "status": "Created",
          "code": 201,
          "responseTime": 2342,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "0d4eea3e-6c03-437c-a61e-971507aabe51",
        "cursor": {
          "ref": "e3e91384-e8ac-4864-a83e-149465b61de5",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "967e71b0-893d-4096-9931-73a4d674758a"
        },
        "item": {
          "id": "0d4eea3e-6c03-437c-a61e-971507aabe51",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "27663ed6-9074-47ba-88e6-cedbc861c87e",
          "status": "Created",
          "code": 201,
          "responseTime": 2377,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "0b5b08b8-2606-43d5-a53f-065b5d1c5d9f",
        "cursor": {
          "ref": "8c67d4cd-e7ed-4a6e-85b1-776f83ec6ef1",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "718914bf-bc26-47d9-9332-de46861a22b6"
        },
        "item": {
          "id": "0b5b08b8-2606-43d5-a53f-065b5d1c5d9f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c5e404ad-fc16-4dbb-a98e-46871b89c005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e1f8fb-a2e3-41e8-a0d3-501cc208a98a",
        "cursor": {
          "ref": "e7773fc7-40b5-44c7-9f41-5b73616fe729",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "34cdac93-71f8-4260-b614-83b3c25d77e7"
        },
        "item": {
          "id": "23e1f8fb-a2e3-41e8-a0d3-501cc208a98a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0f0afa12-263b-4e27-bf2a-7786a3bd9ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029c9681-689c-4210-a347-ea7f03a0a8ed",
        "cursor": {
          "ref": "2c4e22c8-7ba1-4b3a-93a5-0378a58d86d8",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e00736cb-f3fe-4092-a7b6-5c82f2e4be3a"
        },
        "item": {
          "id": "029c9681-689c-4210-a347-ea7f03a0a8ed",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ed57ac2b-8b61-46da-847d-b137be999370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3704d5a-7715-41d5-b1cf-9c44cececf7c",
        "cursor": {
          "ref": "d33dc135-dc77-4da2-8208-38942c329339",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "35c796d5-7316-4a34-9220-681d2dcd527d"
        },
        "item": {
          "id": "d3704d5a-7715-41d5-b1cf-9c44cececf7c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "fbc3bffd-fecd-4a9f-b13b-b3cdbe38a752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace96bcc-d27f-4735-ac76-cdf1c07ce751",
        "cursor": {
          "ref": "8e8c4ada-fd25-436d-b0d4-e490014a753b",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9b41f915-5dc7-4355-9e88-320b781d3e0c"
        },
        "item": {
          "id": "ace96bcc-d27f-4735-ac76-cdf1c07ce751",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e691ead0-cdc4-40dd-b33e-9088c9c33b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 919,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ffb623-ee32-4072-aed1-0dfc84ec10fa",
        "cursor": {
          "ref": "cff8bbef-4036-48e0-9498-3b97592a63bc",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3c277ed2-7b0a-49a1-8c52-627017f14a83"
        },
        "item": {
          "id": "37ffb623-ee32-4072-aed1-0dfc84ec10fa",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "766b9a59-ae71-4549-92a6-dd075b7d2276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39065fc-ab44-473e-9b97-493d647b0971",
        "cursor": {
          "ref": "7afa8262-b4df-4aa7-b4bd-221fb02d0720",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e8ed389a-1388-49e0-816d-56b83da3dc78"
        },
        "item": {
          "id": "c39065fc-ab44-473e-9b97-493d647b0971",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "5f8179d8-8446-4a1b-9820-4fa520f2359a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51980c0e-dc42-4145-ad4f-ec10934411f1",
        "cursor": {
          "ref": "8ee0b367-a79f-4262-b824-146ad72a92ca",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4e36abbf-6711-48b0-a710-5307029bf02d"
        },
        "item": {
          "id": "51980c0e-dc42-4145-ad4f-ec10934411f1",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "d891fd71-8ed2-4b2b-b33e-d386d3f9d5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21fd7063-42d0-4e63-b71d-cd8a09f88486",
        "cursor": {
          "ref": "65729bad-b273-49f7-a8c4-27f37872e421",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f7816c55-b6ef-4dc4-ba0e-bde262b09099"
        },
        "item": {
          "id": "21fd7063-42d0-4e63-b71d-cd8a09f88486",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "fc64d6ba-3aad-4e46-bcd2-5effbb2a358b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 288,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1e5479-5784-4cdd-b6bc-e7cb505f6239",
        "cursor": {
          "ref": "b0510500-d38f-42ba-ba44-3d01c3a5533b",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4d840b7f-b3f7-4529-acfb-7a31e109d03f"
        },
        "item": {
          "id": "0b1e5479-5784-4cdd-b6bc-e7cb505f6239",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f1ec2ba4-d4f3-4166-94e7-ce7c3193e37f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0844607b-7099-49f5-9b6e-52dfc7b3a535",
        "cursor": {
          "ref": "a1862971-1229-4243-b4f4-b1e833ff8b49",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8bcf1b5d-2f99-4621-bfd2-fc6f40aa0f20"
        },
        "item": {
          "id": "0844607b-7099-49f5-9b6e-52dfc7b3a535",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "badc8d07-72b1-425c-9d9b-3e165303462d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a1b8770-7899-433d-be0c-7143fa2c96e8",
        "cursor": {
          "ref": "5b0b97b3-7a8e-4d05-9c0e-beb79000ea59",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "57c171cf-7353-4552-ba3d-b2fc7933c235"
        },
        "item": {
          "id": "0a1b8770-7899-433d-be0c-7143fa2c96e8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "53512272-794f-4457-b5ca-a71f50dccd8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69cf2b8-530f-439c-bade-d0c6fdfb5f63",
        "cursor": {
          "ref": "fff0dc57-fc18-4257-8b1e-8a29801533e4",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "aa362b81-996f-418a-8ef5-0d8a12658195"
        },
        "item": {
          "id": "a69cf2b8-530f-439c-bade-d0c6fdfb5f63",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1c376218-66c2-427d-b8e5-0efc2cea898c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbffbbfc-c8e8-4a0a-9ed6-aa4521949467",
        "cursor": {
          "ref": "c8b54180-57a7-45a8-ae50-6fda325a968b",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9e347e56-d96e-40c3-9025-e1b268dcbf81"
        },
        "item": {
          "id": "bbffbbfc-c8e8-4a0a-9ed6-aa4521949467",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c9aaaa9d-bf80-4082-bf30-a20c02f8bb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a999ab0e-5ea4-4526-869d-ebfad09531ab",
        "cursor": {
          "ref": "02491cc0-d321-4178-b0da-b4c341765a2c",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d696806d-077f-4a03-a5c8-ace0eecc3137"
        },
        "item": {
          "id": "a999ab0e-5ea4-4526-869d-ebfad09531ab",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "95698b0f-857d-4813-b290-82e26f8c389a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b9e0f4c-9f8f-460e-a7c2-1da0633b68bf",
        "cursor": {
          "ref": "63235854-719a-40d2-bcbe-40768a94fc5d",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8bbe2727-a26a-4c44-9ecd-d7c439750076"
        },
        "item": {
          "id": "4b9e0f4c-9f8f-460e-a7c2-1da0633b68bf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e42ab540-80fe-48f0-a3a9-b28cda0f926e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd5e293-6a12-48e2-9b61-da64c0391104",
        "cursor": {
          "ref": "ef916970-234d-4502-b9d6-779228db00b1",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4fb771cd-e7b8-4625-8355-e54dd1dd6e79"
        },
        "item": {
          "id": "abd5e293-6a12-48e2-9b61-da64c0391104",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "108aae65-dd60-46b1-886c-43d7cea0a7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28cb148-3868-4510-a4bc-a015307d8695",
        "cursor": {
          "ref": "9629a383-e487-4fa6-ba0d-961e9ff87f04",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "adc4b6ce-5968-4cd4-972d-8bd1d1c8436c"
        },
        "item": {
          "id": "f28cb148-3868-4510-a4bc-a015307d8695",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "261f2aef-2eba-445d-846d-5e0579db52ee",
          "status": "Created",
          "code": 201,
          "responseTime": 3025,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "613d5190-825d-4bfb-b156-c1cb8d50030f",
        "cursor": {
          "ref": "6a93e924-fb07-437b-a7dd-21985b231887",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7dc71499-d72d-47fc-ab62-1d05ac39c1fa"
        },
        "item": {
          "id": "613d5190-825d-4bfb-b156-c1cb8d50030f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "411f1872-4c20-49c6-bb71-eb4cc3394447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6290d3fa-0172-498d-978d-42ebe293adbf",
        "cursor": {
          "ref": "8a116e46-1f5d-49c1-bb54-8b08f36af5cf",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "01898e70-97fc-427e-9af1-60b36eceb493"
        },
        "item": {
          "id": "6290d3fa-0172-498d-978d-42ebe293adbf",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fd4db428-c12e-4e32-9fd9-e9314c250685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3d1f02-3947-49f1-ba5d-c39044ad4677",
        "cursor": {
          "ref": "324447eb-bf4c-4f47-ace2-b33621b5f4d8",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a5d15385-0285-45fa-9f69-6ceb33adb7d6"
        },
        "item": {
          "id": "da3d1f02-3947-49f1-ba5d-c39044ad4677",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "53cd2633-735e-4ecf-a2eb-30d742c740e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93947837-f1a0-459d-8440-921d2f446e67",
        "cursor": {
          "ref": "ac7c4084-0361-4c13-8e59-abd456f7f2b6",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "aaab776a-600e-4629-94fc-8a17bf90dedf"
        },
        "item": {
          "id": "93947837-f1a0-459d-8440-921d2f446e67",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b3d55fc7-d649-4435-9028-280fe0350ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c24ded2-fad6-4d81-8797-c7e0514cf836",
        "cursor": {
          "ref": "0b217001-e9c5-4ac4-9b42-2b52ba51d547",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "401986a1-d5ed-42b3-892a-c8e4c5a297af"
        },
        "item": {
          "id": "5c24ded2-fad6-4d81-8797-c7e0514cf836",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c9514b3f-77e5-4dd9-afd1-15229e86834a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762bd7f7-a3ee-4954-a1e9-695bf0336f6b",
        "cursor": {
          "ref": "f699d326-898e-4671-9319-6c1e816b0143",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6f5e0e36-9ae2-45bb-be06-76693df75574"
        },
        "item": {
          "id": "762bd7f7-a3ee-4954-a1e9-695bf0336f6b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d4a561df-ed56-4018-8747-9327277632e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdcf411-8f66-4ce4-8140-0fb806bef826",
        "cursor": {
          "ref": "61b4536a-1edd-4b0c-a57b-950204dd2a06",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "38514491-7dbe-4703-b080-b060e8437803"
        },
        "item": {
          "id": "0bdcf411-8f66-4ce4-8140-0fb806bef826",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e39f6119-0518-43af-bd35-b56409413aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bfd41b5-0a9a-46ab-bee5-f28b85e6d31b",
        "cursor": {
          "ref": "2594474d-7c17-42fb-9d56-cadbcd455173",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "69eb2884-fb54-4d86-a3e0-3b871df49760"
        },
        "item": {
          "id": "2bfd41b5-0a9a-46ab-bee5-f28b85e6d31b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "cea9807a-1ca7-4c24-ad43-8cffb41bea0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4d2088-6bee-4126-972b-d599ecb36a1d",
        "cursor": {
          "ref": "ffb69066-5b81-4ba5-b811-801ba64e4a37",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c1013160-b0de-423f-ae1a-27c3319898a1"
        },
        "item": {
          "id": "cc4d2088-6bee-4126-972b-d599ecb36a1d",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8f37607d-c433-4296-89d0-edca590d9b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0bd125-a3f7-4a5d-bf1c-b9b7d850e4fc",
        "cursor": {
          "ref": "80bb134d-14d1-4cba-8884-4844b9d5de93",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "44d7cde0-e2b7-4858-b89e-d742acf73c8d"
        },
        "item": {
          "id": "7a0bd125-a3f7-4a5d-bf1c-b9b7d850e4fc",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "10987862-75a2-46ad-8e29-a77e413e10b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdde54e-40b4-4300-86eb-2ffe1a187dc4",
        "cursor": {
          "ref": "9e3d1b4e-4031-45d1-a51d-2cc73e70d8bc",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "59551870-57d3-4972-8bde-ef7e304f9c94"
        },
        "item": {
          "id": "3cdde54e-40b4-4300-86eb-2ffe1a187dc4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f6517e66-b1c9-45e3-94d7-c706b87d7ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4eeab7e-b852-4674-95e2-b602487f4794",
        "cursor": {
          "ref": "e4cba8fc-b88f-4a7a-bf69-c3bde0df5362",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e90ea4e5-7f7b-4488-915f-03c84712d6ca"
        },
        "item": {
          "id": "e4eeab7e-b852-4674-95e2-b602487f4794",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "367df625-643a-4278-8cbe-13da2a2967a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5b9b1d-123e-4690-95b3-b3a272cf0a8b",
        "cursor": {
          "ref": "c3638e60-20d6-407d-95f6-7d9d95323480",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "bb1fc895-1369-4b61-8bfd-4cb1eb28f1a6"
        },
        "item": {
          "id": "dd5b9b1d-123e-4690-95b3-b3a272cf0a8b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ef30b5ff-45df-4bee-9018-dcd5963d8fbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d66b10-551d-4a4f-bb8b-06bc368a318b",
        "cursor": {
          "ref": "dbba6a57-c406-4b37-9fd7-44d8c6daeed4",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "cce132e4-e0de-4919-a401-61211e72d39e"
        },
        "item": {
          "id": "92d66b10-551d-4a4f-bb8b-06bc368a318b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "793de185-3bcd-4f98-9f9a-192dd00cbc40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076148fb-ca2b-401c-8d1e-56de18b694ce",
        "cursor": {
          "ref": "03288820-8ba3-4db3-b4b4-52a5865ee2b8",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8ff69669-cc53-4516-873e-e3a70f898607"
        },
        "item": {
          "id": "076148fb-ca2b-401c-8d1e-56de18b694ce",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ae4cfbfa-3a13-42fc-a330-de586f67a54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ecfe6f8-68b5-4444-bf42-9d5ed23dddc3",
        "cursor": {
          "ref": "893aee9e-3647-4dbb-9a8e-e313ed8328e4",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "669ba9b3-aa48-4270-bde8-196c29f7bff0"
        },
        "item": {
          "id": "9ecfe6f8-68b5-4444-bf42-9d5ed23dddc3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "34d7d73a-16b2-4f5b-aff6-e377318f9f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f4738eb-e582-43ac-8660-de6a6c429fda",
        "cursor": {
          "ref": "d14cc0fd-17d6-4cf4-82b9-7fb4723bf8cb",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "0114c165-8d2a-45bd-abf7-dc98234ca036"
        },
        "item": {
          "id": "2f4738eb-e582-43ac-8660-de6a6c429fda",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e51e1191-54e3-486b-bd03-c07b7674ba87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da99ac15-7963-4927-8bfa-59490ff97552",
        "cursor": {
          "ref": "c20b2e95-65d8-4b8b-9cdf-4c4fa5491b9d",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "8bfea237-7131-480c-8abf-3113b38875bb"
        },
        "item": {
          "id": "da99ac15-7963-4927-8bfa-59490ff97552",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "99b18d67-13d4-42a3-9510-1c9c667920aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a610dfe7-cc56-4460-a355-7aed6a31428f",
        "cursor": {
          "ref": "147582f1-b430-4b17-9eb2-5e9f57dbc2c1",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b640c751-7d31-4d3d-95a3-51e21632cdce"
        },
        "item": {
          "id": "a610dfe7-cc56-4460-a355-7aed6a31428f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1f3af988-3dee-49c2-b8dc-df45ee31a785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb5a4e1-afa9-4af7-8280-b0762a264ad5",
        "cursor": {
          "ref": "8fec95d8-04f4-4609-a0f6-d71f766ae744",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "054da85a-07d7-49d2-bf0f-1906d210226b"
        },
        "item": {
          "id": "5eb5a4e1-afa9-4af7-8280-b0762a264ad5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9743afe4-5013-4a16-9990-bcf5dbc9ad92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a7a9d3-176b-4519-b584-9df0becd39c4",
        "cursor": {
          "ref": "ae03ab13-f76b-4778-9803-9e67529f0b8f",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f700a55e-d776-46d7-a5fe-6fd5e17a6908"
        },
        "item": {
          "id": "99a7a9d3-176b-4519-b584-9df0becd39c4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3c31843b-86c5-4b5a-9e5d-3073e3a198b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 186,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd8af5d-d636-429b-95d2-41471c16f382",
        "cursor": {
          "ref": "2828d27b-5b92-4183-b255-429388159fec",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b14f0713-9159-4b66-a325-1e87801c8695"
        },
        "item": {
          "id": "2bd8af5d-d636-429b-95d2-41471c16f382",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "23f5aa78-0e3d-4113-ae17-890712b1bccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582a54a2-ff6d-4faa-84c1-a5b964bbb075",
        "cursor": {
          "ref": "02a06d71-0f2c-42d8-97b0-0a37aa734f5a",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "dcebac89-a9ac-4330-9379-1a7482313546"
        },
        "item": {
          "id": "582a54a2-ff6d-4faa-84c1-a5b964bbb075",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8146b296-aa7a-4887-b225-7c35bf2180a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6a00ac-3e62-4e60-a567-729e49429260",
        "cursor": {
          "ref": "5dc4952a-41b7-4fb0-9fa8-95ad268ee94c",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "01426566-5d3c-436a-9ef2-c796d607b110"
        },
        "item": {
          "id": "9a6a00ac-3e62-4e60-a567-729e49429260",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e0564bf8-afc3-43f2-965e-2de5fc9cb4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed658fb8-7eff-41af-880c-439b1c6237b0",
        "cursor": {
          "ref": "1210226d-c43c-4dd1-b5b5-a070876aa5ef",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1caddee1-32a0-4847-8def-5482aaab7e8a"
        },
        "item": {
          "id": "ed658fb8-7eff-41af-880c-439b1c6237b0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d6a077b6-74ff-4889-9cac-7701c2a15a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71fad3a6-fbe4-4282-82ba-3978afc68fc8",
        "cursor": {
          "ref": "32eab89a-102c-490d-87a4-4796798a12d6",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2da2d84c-a330-487c-b2a1-dcbbd231c1a4"
        },
        "item": {
          "id": "71fad3a6-fbe4-4282-82ba-3978afc68fc8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5b0e544f-6b30-4750-b5a0-37267e233b43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c401ef-3b47-4b0d-a721-eac6a59f8b69",
        "cursor": {
          "ref": "ef00593a-7fe7-4b05-86e1-1cf0f40b2a84",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "10448648-54bc-4251-a0db-2f6dab13580b"
        },
        "item": {
          "id": "89c401ef-3b47-4b0d-a721-eac6a59f8b69",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4d2f178d-5740-4a81-b310-8bc788de5c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041d7564-626a-4ddd-86eb-3f21d499517d",
        "cursor": {
          "ref": "6173428c-7f68-4b36-8ea9-49b688fc1d71",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e37ae395-bc26-48d2-8599-ab6a04f46293"
        },
        "item": {
          "id": "041d7564-626a-4ddd-86eb-3f21d499517d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1d7cfb2e-a329-4169-a75e-d6f9e081e107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6989837c-680d-438a-8d10-30b8c84bb54a",
        "cursor": {
          "ref": "41220975-6263-46ae-bfc6-e9cb20179ceb",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1a9a51f0-ed61-420e-871d-550745ff57e1"
        },
        "item": {
          "id": "6989837c-680d-438a-8d10-30b8c84bb54a",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5e41a508-0184-4540-a4be-acf593cc998c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f52db3-c09c-4263-9e3b-3f6ca2ae861a",
        "cursor": {
          "ref": "69a464d6-42da-4712-9a58-64d73ac4a0fb",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c32d0b6c-6d09-4c9b-9ecd-17eff0553e89"
        },
        "item": {
          "id": "e1f52db3-c09c-4263-9e3b-3f6ca2ae861a",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ffb69dd0-916d-4326-8e6b-3a4e39fe6684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99881b44-2bc9-4a79-b90a-4c79848408c7",
        "cursor": {
          "ref": "07cfd20a-5f73-4700-81dc-4fe3d9940e04",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "18c1edff-d5c5-403e-8d32-a0bb36e28802"
        },
        "item": {
          "id": "99881b44-2bc9-4a79-b90a-4c79848408c7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ae446154-46d0-435e-bd93-fa4112ba8635",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "749fa30a-5f96-4315-96c9-bcba92e1b860",
        "cursor": {
          "ref": "6fae4df0-f159-4df9-a606-23fbd309d2c6",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6bc5a8d5-d804-4215-b4c2-a53062771324"
        },
        "item": {
          "id": "749fa30a-5f96-4315-96c9-bcba92e1b860",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "a5e03090-6691-4357-9071-09d0cee4ce0e",
          "status": "Created",
          "code": 201,
          "responseTime": 2069,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "ba7edde6-0cf3-485d-84f1-a6f6b25d8f3c",
        "cursor": {
          "ref": "4c37226b-ea18-4f70-a73f-558b54320200",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1b7455f8-ed4e-494b-ad4a-0f74e57ee842"
        },
        "item": {
          "id": "ba7edde6-0cf3-485d-84f1-a6f6b25d8f3c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "75f386ee-7ed1-454f-8dbc-bf14ba07bf96",
          "status": "Created",
          "code": 201,
          "responseTime": 2165,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b847e088-a3fc-4df6-a62a-ba15b6b55d26",
        "cursor": {
          "ref": "3ceaf5d2-7041-4504-8b67-5ed24549afc3",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ad2d7d9e-b5c8-4581-9863-bdcc55e44859"
        },
        "item": {
          "id": "b847e088-a3fc-4df6-a62a-ba15b6b55d26",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "10be7596-af72-47b2-81e2-9385e63fb7cf",
          "status": "Created",
          "code": 201,
          "responseTime": 2588,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e8f202-0499-489e-8628-b1af1abc392c",
        "cursor": {
          "ref": "3c89c70f-f722-42a7-8183-6244e137591e",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1dd99bc5-2c38-464c-84f9-835cec09e0ec"
        },
        "item": {
          "id": "49e8f202-0499-489e-8628-b1af1abc392c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6b249fa9-4246-450b-a617-09d170188154",
          "status": "Created",
          "code": 201,
          "responseTime": 3055,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5587af7a-86b6-4e76-9108-9b29c1d8a113",
        "cursor": {
          "ref": "bdffaf86-ba90-4b3d-bf54-08b105b398e2",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ec6079cd-a3c7-4653-a262-46650d8ab7b8"
        },
        "item": {
          "id": "5587af7a-86b6-4e76-9108-9b29c1d8a113",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "788ffc45-1ccc-40cf-9592-4e7d458e90d4",
          "status": "Created",
          "code": 201,
          "responseTime": 2292,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-13T00:41:22Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-13T00:41:22Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "acc62ce3-66c5-4a18-bb59-ddc937fbd41c",
        "cursor": {
          "ref": "4164d45b-82d3-4c6a-8950-f578efda4d5b",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1f6b236a-3313-4464-9676-0d01e90b631e"
        },
        "item": {
          "id": "acc62ce3-66c5-4a18-bb59-ddc937fbd41c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "cc2a6a65-b550-4a5b-a0f8-b36dd779f524",
          "status": "Created",
          "code": 201,
          "responseTime": 2251,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7307f6-e9b4-455b-8f2d-c5101619382d",
        "cursor": {
          "ref": "cf2cf357-8ad6-480a-8055-cca19118e227",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2876ede2-ca96-42bf-8d8e-87e2f7621de5"
        },
        "item": {
          "id": "ec7307f6-e9b4-455b-8f2d-c5101619382d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1401e03d-d81a-4bfd-bcf8-44d20c3d7f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7307f6-e9b4-455b-8f2d-c5101619382d",
        "cursor": {
          "ref": "cf2cf357-8ad6-480a-8055-cca19118e227",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2876ede2-ca96-42bf-8d8e-87e2f7621de5"
        },
        "item": {
          "id": "ec7307f6-e9b4-455b-8f2d-c5101619382d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1401e03d-d81a-4bfd-bcf8-44d20c3d7f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a937bd-70a0-4403-b26a-d2e288bda292",
        "cursor": {
          "ref": "54e6b8a4-d82c-4d97-ae2e-588c6cebbd53",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "99067f75-3b4f-4355-8e89-dffdeca02acb"
        },
        "item": {
          "id": "70a937bd-70a0-4403-b26a-d2e288bda292",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3c967675-1095-4ddc-b9f2-1267f96cc9f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e272e4-426b-4f52-9dcd-800677ceb230",
        "cursor": {
          "ref": "bc6cf0f7-7472-4063-b6a6-0c9e0b45844a",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a8c4180d-a632-4699-91b0-2405b985e5c7"
        },
        "item": {
          "id": "29e272e4-426b-4f52-9dcd-800677ceb230",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1d1bfd46-9cfc-4f36-9e3a-b841fdd366f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a20c27-c231-4461-aaa3-8ecc2dba19ad",
        "cursor": {
          "ref": "540e7648-8169-4028-aa38-7ecfeae627f3",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1fc1bb41-6e96-4586-9110-53afdda7d9a6"
        },
        "item": {
          "id": "41a20c27-c231-4461-aaa3-8ecc2dba19ad",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "41b687db-4073-4e65-9ad4-e949388d836d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d8b296-cb11-4950-9989-d36d009c32b7",
        "cursor": {
          "ref": "4d496cdb-53ed-4f9a-8524-4726dad0252e",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7500c8a4-8986-46ab-9aa3-e4c4bf2b2710"
        },
        "item": {
          "id": "b6d8b296-cb11-4950-9989-d36d009c32b7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "20ff91a8-3cd2-42dd-b89b-b9705142217d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de81ea1-7ff0-4da1-8860-4af98e1faba5",
        "cursor": {
          "ref": "31d4e44e-2a49-4a0d-afdf-cc3dd8fac36e",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d8ce24ff-daa6-42aa-b5e9-17a9250d6a1e"
        },
        "item": {
          "id": "9de81ea1-7ff0-4da1-8860-4af98e1faba5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0b265384-13f5-4833-ab80-3e6330c110de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f08cfc-70dc-4d70-8edd-90338a1e8ece",
        "cursor": {
          "ref": "0ddf9b6f-0929-4ca0-aa4f-924a8f984fbb",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "58bdddb3-bad9-47da-94b3-d8d8854b415c"
        },
        "item": {
          "id": "b7f08cfc-70dc-4d70-8edd-90338a1e8ece",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "73594ead-255f-48f9-bdf6-e02637c5cd83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5879b480-38ac-4c91-997e-95d09d722607",
        "cursor": {
          "ref": "f08b02b9-2f25-4b5b-a3e1-60f27c0a2baf",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "7cf3da94-bab1-4559-9d22-b9255e0e4cb4"
        },
        "item": {
          "id": "5879b480-38ac-4c91-997e-95d09d722607",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4dfe650d-8acb-4fc6-9c05-4be05cf166cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bfa30b5-4ef3-4148-a09f-cabe69d906d3",
        "cursor": {
          "ref": "b36cabab-ad65-4057-90c6-3f988e868736",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "28c30793-5f6d-4523-ad2f-904f60df84c6"
        },
        "item": {
          "id": "6bfa30b5-4ef3-4148-a09f-cabe69d906d3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "498afb02-e98b-4307-832b-31e41f435760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f627b15-b46f-497f-a052-6dd685860d78",
        "cursor": {
          "ref": "c1aeec99-65cc-4e02-a1ad-cf1ed3e18ebd",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fa68218b-49af-4e5f-9f07-d55d4869285b"
        },
        "item": {
          "id": "7f627b15-b46f-497f-a052-6dd685860d78",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6707d327-2ba4-46cd-8fa3-bef08aad48a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad542e6-89e8-4c20-b098-2826e67ea529",
        "cursor": {
          "ref": "f880e117-2ee3-4343-bf3d-fe5b7c99a82c",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5180b5c8-0357-45c0-82e4-2696b190b0f0"
        },
        "item": {
          "id": "5ad542e6-89e8-4c20-b098-2826e67ea529",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "44b0fe61-96b7-4e44-9ccd-fbdcfae88d6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d2a1c7-2ea9-40c2-825e-8a80feb2c690",
        "cursor": {
          "ref": "da1e9b5e-2e8d-4397-834e-2dde8400acf9",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ef9ef8dc-dc8a-4d27-805f-36e55e40ab00"
        },
        "item": {
          "id": "84d2a1c7-2ea9-40c2-825e-8a80feb2c690",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d1d39a1b-e3ab-48d0-b976-cf04b5f298a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa90745b-0695-4ab0-97e0-a042ad2d7632",
        "cursor": {
          "ref": "1ea61650-f222-4ede-a11c-d385a57a2f6b",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "de8b480f-f123-4cc2-95d6-c52464b212e8"
        },
        "item": {
          "id": "fa90745b-0695-4ab0-97e0-a042ad2d7632",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9790f10f-5eaa-4cd7-ba32-6575dfb43974",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be47b28-66fd-40b8-9d2e-417cd4dbed76",
        "cursor": {
          "ref": "bc338f64-0e41-4727-bd87-cc21a0f3516a",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c5a52993-396d-4ae4-9c13-c2f745eee0cd"
        },
        "item": {
          "id": "4be47b28-66fd-40b8-9d2e-417cd4dbed76",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e3c83521-1656-47ca-a52e-3470253246fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa949d5-7bd1-4083-b528-72f5e5437a09",
        "cursor": {
          "ref": "dd16a3bd-954c-4228-9d80-13e881d37562",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "7bbb3f2b-c46e-4eda-b49b-483a89a75440"
        },
        "item": {
          "id": "9fa949d5-7bd1-4083-b528-72f5e5437a09",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "22d131fa-8413-4f97-ba12-e979be82a9f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d5869b-6551-42a7-bbe2-c56f1f822ade",
        "cursor": {
          "ref": "af6b8adf-656c-401c-a6a3-e4e820afeeab",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ff56a6f4-c037-4466-bb4b-3437206552ac"
        },
        "item": {
          "id": "15d5869b-6551-42a7-bbe2-c56f1f822ade",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "368001ad-5535-438e-9bfb-04ea8d845dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49203f9-bc18-4b12-bc8e-ad6744bb580f",
        "cursor": {
          "ref": "1008f930-369e-4538-905a-e2d6535c4e2e",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0aa3de7c-77dd-43dd-ae27-725fda830f60"
        },
        "item": {
          "id": "c49203f9-bc18-4b12-bc8e-ad6744bb580f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5b47989e-c2f8-402c-9d6b-89f1dac6df0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e04191c-56ec-476a-bbf4-59d4c9c126cf",
        "cursor": {
          "ref": "11a38805-5d1e-48f5-aeba-1d96cb709a92",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ccb899d7-08d1-44fc-b51a-8bec2f31b937"
        },
        "item": {
          "id": "0e04191c-56ec-476a-bbf4-59d4c9c126cf",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "eceb23bf-ff86-4e40-b356-c86c9ae19f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf8866d-22de-49c3-b137-46777169fd24",
        "cursor": {
          "ref": "0149546a-b16e-4a67-ab01-1505ca4e9d80",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e95a55bb-61b4-409b-9b9a-debd238c1086"
        },
        "item": {
          "id": "acf8866d-22de-49c3-b137-46777169fd24",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "595c967e-0b09-4ba3-bd18-aea171990a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12ddf2d-0d27-40e5-a0b9-1813be20c5d0",
        "cursor": {
          "ref": "4596a18c-a893-4dff-bcfc-6b35d2411112",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "04dfa474-4ea7-4583-9092-894377ddfd49"
        },
        "item": {
          "id": "b12ddf2d-0d27-40e5-a0b9-1813be20c5d0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "53bfaae0-596f-4457-ae75-aa411faf7b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2daa52-1328-4d04-89c7-0550dafb147a",
        "cursor": {
          "ref": "b5313d53-4ce1-4bf9-a1f2-67b9b70e1df1",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8bdef837-4377-4292-aeba-bd6d6bc75310"
        },
        "item": {
          "id": "eb2daa52-1328-4d04-89c7-0550dafb147a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "dc9b00f5-7301-407d-b142-430e986abdb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3089c92-7127-4aad-9067-b768ebdc519b",
        "cursor": {
          "ref": "42eef626-7ebc-4afc-b6d6-732f67b0b9e5",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "21eb9368-0c2d-42ae-8855-a254c253643c"
        },
        "item": {
          "id": "f3089c92-7127-4aad-9067-b768ebdc519b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "65b191fa-1b08-4033-8a65-89541685c0be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14b0aab-2b7e-439b-818a-af76ed6dfe11",
        "cursor": {
          "ref": "7d81460c-d65b-4760-b266-aa7618dff223",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6751d5bc-fa5c-4b0a-8460-7d6b9ec40347"
        },
        "item": {
          "id": "c14b0aab-2b7e-439b-818a-af76ed6dfe11",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "29827820-c518-4277-a184-1d05c6eb27ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6155157f-bee6-4454-b9fa-b18a35bf487b",
        "cursor": {
          "ref": "2ba801e5-ce58-4f77-b4df-a3d8c1cba437",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1d9adf37-83ab-4b13-9463-97dd6804d4ca"
        },
        "item": {
          "id": "6155157f-bee6-4454-b9fa-b18a35bf487b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8ffa4ff3-525a-4447-8540-71d7426b531b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb893f48-2432-4e46-af06-588508d9a8f5",
        "cursor": {
          "ref": "1134168a-80cc-4d85-a37e-52c8e0c1b12f",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "eefd8c69-e71e-4afe-80d4-79fc3f5fb1b6"
        },
        "item": {
          "id": "eb893f48-2432-4e46-af06-588508d9a8f5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "071112af-e38a-44fc-9bc9-bcc85133c45d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e29b172-32b0-4c60-9648-7b894b2ea280",
        "cursor": {
          "ref": "6c1a8e7a-5c80-4893-b9b1-015af7258c7d",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5dad64de-143a-48f6-a176-2748273e292e"
        },
        "item": {
          "id": "9e29b172-32b0-4c60-9648-7b894b2ea280",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6a93727d-8b36-4f80-83d2-2ea872e309c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d53eb9-5f63-404c-b6bc-8291684c687a",
        "cursor": {
          "ref": "2381c177-84d4-4e9c-a432-75530087fe75",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "b0261bd6-140b-474d-92c5-d23b3cbc449c"
        },
        "item": {
          "id": "b5d53eb9-5f63-404c-b6bc-8291684c687a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3871b5e5-130a-4b0b-b925-06e89c4c7d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73560c9-51ed-4e6b-a3ab-8d6907f1c101",
        "cursor": {
          "ref": "01ad9949-f3a6-40d3-83dd-c60ceb04a4bf",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "58bb06f0-8fa0-46bd-99e4-92e1040da8bd"
        },
        "item": {
          "id": "a73560c9-51ed-4e6b-a3ab-8d6907f1c101",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "506294e8-f052-4d8d-ba9b-af85c8eb9066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 306,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b3f917-5954-4b30-9c7f-900ab25d0b57",
        "cursor": {
          "ref": "2cb7094c-4e34-4e08-89a5-08d0387bf298",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "29d95a16-d2eb-4e71-bbfe-68ce6b14142a"
        },
        "item": {
          "id": "79b3f917-5954-4b30-9c7f-900ab25d0b57",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1dc8d6fa-1cf1-43de-a5a0-75307689d2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd33a64-c0b5-403b-a6b3-76f700aa3c05",
        "cursor": {
          "ref": "22119ad6-e8f9-4e90-8c2e-e8ba4f9f2b61",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "85a3b37c-4aa6-4a0d-a722-d7f8473e656e"
        },
        "item": {
          "id": "ecd33a64-c0b5-403b-a6b3-76f700aa3c05",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "16a77b9a-f3be-4672-b7e1-4c06b027a2ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb6c32e-9e57-43f0-87e0-773e31c333b8",
        "cursor": {
          "ref": "2c67c087-9260-46f5-a4f4-6d6b0ba88740",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "11f7330a-863f-4dc7-93e6-092151f1faf5"
        },
        "item": {
          "id": "ceb6c32e-9e57-43f0-87e0-773e31c333b8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b5373272-923f-4d2c-9ec3-d825e6b2cf22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a04b08-263a-4c49-b07c-01072d11ccd7",
        "cursor": {
          "ref": "673b9b0e-fc10-43e7-b29d-9776c88ee81c",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2351973b-6533-46d2-aa28-4400500f9725"
        },
        "item": {
          "id": "b0a04b08-263a-4c49-b07c-01072d11ccd7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5743caa4-cb85-4df3-9926-9fd7c5ff4cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e2a7e7-271c-4c03-96ab-46d877f5a9a2",
        "cursor": {
          "ref": "51605845-64ae-4b9c-852a-d27b834eafc4",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7cff815a-d9b4-422d-a2f5-99c9e1d783ef"
        },
        "item": {
          "id": "b2e2a7e7-271c-4c03-96ab-46d877f5a9a2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8ea17508-5792-4bb7-b0ba-eea38d5c3418",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "54208193-a6a2-40d0-bb98-e803aab51293",
        "cursor": {
          "ref": "8152abed-23f3-4484-95fe-c3e3b247ac77",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "af167ac6-5203-4f5d-b170-896629da2ae2"
        },
        "item": {
          "id": "54208193-a6a2-40d0-bb98-e803aab51293",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "b1e3f764-82eb-4aaf-960f-cdea44208509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "bb3a12e6-b17a-4e39-89de-ec37d66c9ceb",
        "cursor": {
          "ref": "15b77b45-9e01-46fe-a87a-e916f1c845a7",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "10823771-81ad-4ce8-a23c-afe3931bdf9c"
        },
        "item": {
          "id": "bb3a12e6-b17a-4e39-89de-ec37d66c9ceb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "08ce7746-2611-4150-aabe-3f8d19e58a7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3a12e6-b17a-4e39-89de-ec37d66c9ceb",
        "cursor": {
          "ref": "15b77b45-9e01-46fe-a87a-e916f1c845a7",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "10823771-81ad-4ce8-a23c-afe3931bdf9c"
        },
        "item": {
          "id": "bb3a12e6-b17a-4e39-89de-ec37d66c9ceb",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "08ce7746-2611-4150-aabe-3f8d19e58a7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7290f933-4196-41b5-bb2b-1b06e2464b04",
        "cursor": {
          "ref": "c4865159-21dd-4cad-9f04-fbbc9479fa4a",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d95021a4-0c10-4e69-ac1e-bd3c39fbc7e6"
        },
        "item": {
          "id": "7290f933-4196-41b5-bb2b-1b06e2464b04",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4e090b4d-2c87-49f1-bd21-deee34f3e766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f008abc-4a36-4b48-82f2-4bdd71cfbc58",
        "cursor": {
          "ref": "0b55bdce-7eda-4cc0-ae3c-881d748edaed",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "66eafcce-1df5-4c62-8922-150f7e9787ca"
        },
        "item": {
          "id": "4f008abc-4a36-4b48-82f2-4bdd71cfbc58",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "eef34116-f306-4969-95c7-aa7c32b6d99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f0c8f8-fd61-4e22-9584-c131d84d9935",
        "cursor": {
          "ref": "7717b235-f928-4f8c-b755-fc007ad1fbce",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9e9db6b4-93f5-4c87-a4bb-f6c60903875b"
        },
        "item": {
          "id": "d8f0c8f8-fd61-4e22-9584-c131d84d9935",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "18ad3a90-ba16-4a61-a109-618d95833bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "424e67a6-c964-4979-949e-289f5f653f1b",
        "cursor": {
          "ref": "bc97e770-9134-4593-8e06-9c2a1a22858d",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "afa1c17c-ebce-4b31-b7ed-ff2d9b2a2b51"
        },
        "item": {
          "id": "424e67a6-c964-4979-949e-289f5f653f1b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2125e3d4-565e-4615-9387-b5d1f974a258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b72e2f3-5d29-4a4d-a455-e97297942858",
        "cursor": {
          "ref": "3a1c7ef4-fa4b-4c0e-be4d-42a91ed98375",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b16f30d0-e317-444e-a34b-bdc15f1b1bb6"
        },
        "item": {
          "id": "2b72e2f3-5d29-4a4d-a455-e97297942858",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "dd26f9e0-5ef5-4c46-891e-f18d3ea0af46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf0007d-9999-429e-9845-fe90817ff184",
        "cursor": {
          "ref": "03f673f3-6741-456c-b5eb-c71c7029b17f",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "0b48504e-7f6c-4e40-a2e4-f7e7ffc4cde7"
        },
        "item": {
          "id": "ddf0007d-9999-429e-9845-fe90817ff184",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "86951479-9839-4446-bb4e-6753bac408ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913ce6ad-2094-4634-80e3-1ffda3f93cff",
        "cursor": {
          "ref": "f7c978f8-a1df-4430-b9ca-fdd8823854bf",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e96b7531-ec4b-4ace-9ea7-bdcff90a01ff"
        },
        "item": {
          "id": "913ce6ad-2094-4634-80e3-1ffda3f93cff",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "cab81b7f-2705-4a7a-aca2-e35b81b67353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5baeb32d-1cf6-4516-be0e-2d27b060fb81",
        "cursor": {
          "ref": "abc4f372-7313-49e0-b382-bfe87b48eb4a",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "53f8577d-a98b-4c6f-b7fb-707728df6c55"
        },
        "item": {
          "id": "5baeb32d-1cf6-4516-be0e-2d27b060fb81",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "070de20c-9343-400a-97cf-5579b5efa923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df20b672-12e8-4d06-949f-3e6060ee4797",
        "cursor": {
          "ref": "43be4746-78a5-4f42-8938-91d392f637f3",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b6335cbf-8281-49e3-ad26-76c73c821c97"
        },
        "item": {
          "id": "df20b672-12e8-4d06-949f-3e6060ee4797",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "4f1dfc84-68f4-4468-b939-e78a64ecb660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1991a03-b740-4020-9502-8c00c6b17830",
        "cursor": {
          "ref": "ac60d04b-cca7-4a92-9d47-c975d85e2a07",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0f86a6a4-e25d-4d75-986d-65f4e0abeb77"
        },
        "item": {
          "id": "f1991a03-b740-4020-9502-8c00c6b17830",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "220a357a-28c0-4562-be5a-a82622fb0b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c2c693-0a28-408c-83ab-ace56109fbb8",
        "cursor": {
          "ref": "22f768cd-4b03-4e57-b811-a99b05e28482",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3b25e040-92ac-4948-82a3-bee075f0330d"
        },
        "item": {
          "id": "40c2c693-0a28-408c-83ab-ace56109fbb8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9b9554b3-c24b-47a7-bf7d-4d7de609993a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c054370-8be7-4cdd-82da-95d878f20b47",
        "cursor": {
          "ref": "6d2b00cf-8da9-47fa-b619-bc39cf2aae94",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c6fcef5e-5d54-4171-b8fd-204644bd4d8a"
        },
        "item": {
          "id": "0c054370-8be7-4cdd-82da-95d878f20b47",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "67d0c1bb-c723-4ea6-b020-d22957aaabce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f4bd704-e406-4c91-9143-37c7b0d56238",
        "cursor": {
          "ref": "7e9e6ac3-f103-485f-8a68-c52ec4f92b1d",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "139babab-8cc3-4989-852b-d31926250ddd"
        },
        "item": {
          "id": "2f4bd704-e406-4c91-9143-37c7b0d56238",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b3c20959-00a3-4ff8-8ae5-7fceae815554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d036bb-9120-455a-b372-94c6c450b8b8",
        "cursor": {
          "ref": "f2e52744-acc3-448f-adef-8133e8250fc1",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0753ac30-4ce8-433a-b777-c8122aadcfaa"
        },
        "item": {
          "id": "a0d036bb-9120-455a-b372-94c6c450b8b8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "da6ab96a-3f2d-42bd-abef-252f7d73b77e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2038fbb-e0e4-4dbb-ad20-dbc726c7e63a",
        "cursor": {
          "ref": "2a9f1191-22b5-4330-abdf-621cde3209fa",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "faa6fbae-23f1-4c93-8dc9-773aa5b3f9a0"
        },
        "item": {
          "id": "a2038fbb-e0e4-4dbb-ad20-dbc726c7e63a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3dbd16a6-bd06-4861-aab8-be1075813fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab371505-57ee-4e66-b59a-a3fd1b64f32b",
        "cursor": {
          "ref": "92989d65-9148-43bd-b938-58527df8a006",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "1a797d42-fcd2-4f50-9561-59b59e7b48fa"
        },
        "item": {
          "id": "ab371505-57ee-4e66-b59a-a3fd1b64f32b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5f657a38-60b8-43f5-b8e4-723296bc97f4",
          "status": "OK",
          "code": 200,
          "responseTime": 231,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "32065c2e-514f-4340-8c61-423508cc5c7c",
        "cursor": {
          "ref": "e66895cb-ca4a-4e4c-bcca-8cb9555d3a25",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "75940998-7e8f-4533-b9c8-47fde41e9e90"
        },
        "item": {
          "id": "32065c2e-514f-4340-8c61-423508cc5c7c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "178d685a-a1be-4cf3-be03-b3b7bc8c8689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1cc2e9-5c86-4522-bf6f-9703583e12e2",
        "cursor": {
          "ref": "cdf9c3d5-cb58-4bdd-ac37-50aadc88038f",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "529c092d-fd7d-4679-9023-716b2dcca0a1"
        },
        "item": {
          "id": "cd1cc2e9-5c86-4522-bf6f-9703583e12e2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5ef159e6-9342-4ccb-924b-dd659618f734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e480338-51fe-43e8-9c54-225f4b345f7b",
        "cursor": {
          "ref": "89240b32-7f9a-4dca-b88d-849d0662da06",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e59da189-d956-4060-bedc-d96e5073c644"
        },
        "item": {
          "id": "8e480338-51fe-43e8-9c54-225f4b345f7b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "55dd2fa6-9d98-44fa-939e-f0059e2e4ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfd8a958-fa6a-4489-89ef-1a92efdc67d8",
        "cursor": {
          "ref": "8e2cf163-806a-4c40-875c-c7029b09a09e",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "fd920fe8-f26a-446e-a810-4ca7abf51154"
        },
        "item": {
          "id": "bfd8a958-fa6a-4489-89ef-1a92efdc67d8",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "75555502-8356-43ab-81d1-d34c89c42a30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337a9b05-0964-4b74-bf66-45d818e51dc8",
        "cursor": {
          "ref": "bed95e86-6606-4bb4-b062-c3a7ae62432c",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "183c1779-2c3e-4ef4-b159-821ede4a4586"
        },
        "item": {
          "id": "337a9b05-0964-4b74-bf66-45d818e51dc8",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "787ebd97-3d37-48f8-a067-e974cd5c3dd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4af1570-a225-45be-a131-38bfca723aed",
        "cursor": {
          "ref": "12261476-0a75-4302-85d3-76797d0aa57e",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "83f88f0c-ac22-4964-8b78-76be1889c0e9"
        },
        "item": {
          "id": "e4af1570-a225-45be-a131-38bfca723aed",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8eab0fff-507b-4afa-8c60-1f672ede3b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819b86cc-66a0-4d24-a9c0-c2155a48b186",
        "cursor": {
          "ref": "e5e54692-4c21-444b-b10f-d68bbc74ceac",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8c6a5ce8-133c-4f7c-bafb-7aa709e29f99"
        },
        "item": {
          "id": "819b86cc-66a0-4d24-a9c0-c2155a48b186",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "97f998cf-0bac-4f56-8a10-9b94b4fbf3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544fb1af-4914-40d8-96e8-3be4ad1bc7a8",
        "cursor": {
          "ref": "c07d42c8-7e2b-48f1-af9a-76ffbe0e42a5",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "91e9113d-7100-41aa-af60-b8ba95032570"
        },
        "item": {
          "id": "544fb1af-4914-40d8-96e8-3be4ad1bc7a8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a5119088-7b57-4b29-baeb-ef61d443d1ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c52b4e-3da8-4065-a2c4-ac2a65d3f4a5",
        "cursor": {
          "ref": "7ca0f371-9aa2-4045-a68e-aa17cde66040",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d66bbf96-2787-4ce5-901d-0666842db329"
        },
        "item": {
          "id": "e4c52b4e-3da8-4065-a2c4-ac2a65d3f4a5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3bfb6d20-6478-4181-9a91-798da0ee49d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "851614a8-7f6b-4db8-ac76-131363c54144",
        "cursor": {
          "ref": "e792f297-1079-43c6-9401-aeb9468027bb",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d236f081-3cb1-4edd-a2ac-9b5f1def0aac"
        },
        "item": {
          "id": "851614a8-7f6b-4db8-ac76-131363c54144",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e2b7401c-3bb7-4bc8-9ffa-e829e1249c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcda7453-f687-4a1e-9cb4-55f0008dde8b",
        "cursor": {
          "ref": "1164c955-4590-44da-bfbd-54d2f52f32c7",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "0a0d0b01-a40b-4850-a12e-98cc272796d9"
        },
        "item": {
          "id": "dcda7453-f687-4a1e-9cb4-55f0008dde8b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "13f81279-773b-475a-b6b9-38573dc28e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833d2470-758e-49e6-a251-276b90c945e0",
        "cursor": {
          "ref": "7ae9760c-d191-4ce4-b461-14cb6464c07c",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "55f64667-22c2-45e9-921f-3d468ca64ed3"
        },
        "item": {
          "id": "833d2470-758e-49e6-a251-276b90c945e0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "0e09c799-635d-41ae-828c-5ce83a35d7dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e28ece-d9a4-443c-bb5e-568c7b2f571e",
        "cursor": {
          "ref": "9db03c5a-d746-4d84-8cbc-8ee2d10a05a2",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "009a2153-ae92-4dab-bfbd-e71012dfce63"
        },
        "item": {
          "id": "61e28ece-d9a4-443c-bb5e-568c7b2f571e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "03a3b4b1-6cf0-40e2-a0b2-af62c2096fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991021fa-5c05-4e02-99a1-ee1c9396ed42",
        "cursor": {
          "ref": "1b2b47a0-6fc2-4a08-bbb3-70520801f007",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cae44b99-90cf-4438-956a-f37e2107508e"
        },
        "item": {
          "id": "991021fa-5c05-4e02-99a1-ee1c9396ed42",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "0dfce90e-057d-42e9-9e6c-a8a2b59f6abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce09ecf-73ca-45fc-b818-96ab66e49853",
        "cursor": {
          "ref": "c739bac2-5527-4234-904e-6560f69e0496",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "5c6d1473-9646-404d-af0a-4b7e252c8978"
        },
        "item": {
          "id": "dce09ecf-73ca-45fc-b818-96ab66e49853",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "cf5e1057-4a93-4da4-b26f-5d4806f0e939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23d2599-02e8-4b25-89e0-65a85dab116a",
        "cursor": {
          "ref": "202371e4-963f-496a-8a6c-beb3d54c3529",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "dd0e3e2f-04b7-4d36-95a2-2d0344a930b9"
        },
        "item": {
          "id": "b23d2599-02e8-4b25-89e0-65a85dab116a",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "478ab554-493e-4b04-8da4-81426c5d7dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72cabc1e-a8cb-4a55-a819-603e7329ff75",
        "cursor": {
          "ref": "a7a71e3c-4d4e-4f5d-935b-87598eb35e20",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3f02447f-f105-4573-8afc-f72bd7c764b4"
        },
        "item": {
          "id": "72cabc1e-a8cb-4a55-a819-603e7329ff75",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "785e2203-0d97-4041-936e-e9a187163092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20cfe743-a9f1-4412-a4bb-d812a6b7f451",
        "cursor": {
          "ref": "9cc415fb-a58c-45ed-a72f-f7cc28770e83",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d2cf6832-e2b5-4bf6-9c51-448f48290c49"
        },
        "item": {
          "id": "20cfe743-a9f1-4412-a4bb-d812a6b7f451",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "337c0d96-ad92-4909-b0df-0536e0f2aec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d25988d-5395-47d4-9375-50e7b557bbe9",
        "cursor": {
          "ref": "e24aac26-6eb9-45a3-9ee3-911cf27b5881",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f1b58ac9-06f9-4821-9cc5-a7681c17cdf3"
        },
        "item": {
          "id": "6d25988d-5395-47d4-9375-50e7b557bbe9",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8bacc36a-de74-42a9-bb6f-92401d326066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36b03e6-852b-4cd6-a613-f6e88939c7a0",
        "cursor": {
          "ref": "05149d91-d347-4634-aec4-cbfdd5faadfb",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "70e86d72-8910-48cb-bc51-cfb1f0ea04df"
        },
        "item": {
          "id": "f36b03e6-852b-4cd6-a613-f6e88939c7a0",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "109242ff-a4bb-4986-8373-5cb1cf1d2776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faaad6b5-0702-481a-b9c0-d8c981049253",
        "cursor": {
          "ref": "ab862e44-1f89-4576-8002-77fad879519c",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "7fccecdf-35cb-4a41-a1a4-f073b4fe0fe3"
        },
        "item": {
          "id": "faaad6b5-0702-481a-b9c0-d8c981049253",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1fc640d8-f879-4414-8352-3ff527a9bf02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ac1350-242e-4046-8145-847bb7dbe58f",
        "cursor": {
          "ref": "4f237fe6-1642-4408-9ca5-56bedf120375",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9b29aba5-2177-49ad-922f-5a05ab9da8b6"
        },
        "item": {
          "id": "78ac1350-242e-4046-8145-847bb7dbe58f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "02e8c5f8-d166-4db0-aa6c-ab08aca35da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eceeaaf-0af6-4cf3-81b6-8d5b08de480d",
        "cursor": {
          "ref": "4aacdaab-b9d7-4f9d-8291-920797f7418b",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4f103949-edd0-4dca-9a7e-e9405fddd8b3"
        },
        "item": {
          "id": "1eceeaaf-0af6-4cf3-81b6-8d5b08de480d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4e51a25f-b855-408b-832b-89ec699c97cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38e9c7c-7dc2-4610-b3f3-e99798d5b252",
        "cursor": {
          "ref": "cb56784f-bb3c-4f4e-ad9b-032cfaf8deb7",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3a0523a5-d4bf-4dcd-b649-aad89ed22d98"
        },
        "item": {
          "id": "b38e9c7c-7dc2-4610-b3f3-e99798d5b252",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "dbe74f45-1a19-46e9-85e5-4c6978d488dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df5a7622-e231-49f2-a59e-f7537dcb6518",
        "cursor": {
          "ref": "d7c00149-625a-4240-a952-1e5b14f7964e",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9908cce2-d0bf-4862-880b-e96b090fc2aa"
        },
        "item": {
          "id": "df5a7622-e231-49f2-a59e-f7537dcb6518",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bce73f5e-07e7-43dc-bffc-03d7c4959ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68bc2eba-f1a8-4515-8e5a-341796a18642",
        "cursor": {
          "ref": "d8269cb1-2975-4388-8015-e8ba5a9dec69",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7f0f691f-8c25-4b91-a5e0-5dda5775982d"
        },
        "item": {
          "id": "68bc2eba-f1a8-4515-8e5a-341796a18642",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "62da95ef-aaf6-448a-874e-ae6791380561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016f4caa-aaa8-4af8-8940-7028af6eeeaa",
        "cursor": {
          "ref": "ff9ecb07-33c9-47c2-a641-ed3279f3abe8",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "37822ae4-51e8-4cae-90ce-eca8d381b8ae"
        },
        "item": {
          "id": "016f4caa-aaa8-4af8-8940-7028af6eeeaa",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "99813329-7fc3-4142-878a-776f65b441be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3913b335-60b3-4b52-8799-53f99b8c810b",
        "cursor": {
          "ref": "bc38d47e-bb0f-4a10-b8d6-8d0310cd49d3",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "07b437db-17ab-44ec-a4d8-a2e206f13ba4"
        },
        "item": {
          "id": "3913b335-60b3-4b52-8799-53f99b8c810b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "20b17dce-624e-4c87-ad3a-cf5323a7e0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ffcb5e-f5ec-4377-8b08-267b190cd16a",
        "cursor": {
          "ref": "77cab016-5aef-4bf0-84d3-6e2985d46100",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ae64d11b-15c7-4ff3-aecd-6d10dffd272e"
        },
        "item": {
          "id": "81ffcb5e-f5ec-4377-8b08-267b190cd16a",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8af6b565-45f4-4438-8e34-343fc6927657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0857f6c1-030c-4287-9dc9-f25d63b8f507",
        "cursor": {
          "ref": "fb7140d4-c9bb-4bcc-926e-57c1abee54a5",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2808a3a4-e2ca-4e35-ac94-922550648e4c"
        },
        "item": {
          "id": "0857f6c1-030c-4287-9dc9-f25d63b8f507",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2d38781f-d149-4706-84a7-dc7112b9cd76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ce7384-6923-4800-997e-a17f91b5361d",
        "cursor": {
          "ref": "71e6540b-b70c-4b21-9d5b-50a99ef205c2",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a0aa7811-6352-43f4-9d6b-401698e30f26"
        },
        "item": {
          "id": "44ce7384-6923-4800-997e-a17f91b5361d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b9dc5d10-6832-499c-9118-a789eac674fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 675,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc16be0-0cde-407b-ad30-18f30699203d",
        "cursor": {
          "ref": "314f2a6d-0ad9-4119-9439-201f3a4de18b",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "96db2c4f-b972-4406-a612-ccbfcd7676e3"
        },
        "item": {
          "id": "ecc16be0-0cde-407b-ad30-18f30699203d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "bc1f7b78-61e0-4230-9ab2-24e8ed68eb66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f4eb9e-0833-4df4-a76b-7a581804b308",
        "cursor": {
          "ref": "4e189b05-67dc-4c79-b2fe-a8340effb5aa",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b08e7dd6-e25d-473e-a508-6da1e8481674"
        },
        "item": {
          "id": "a6f4eb9e-0833-4df4-a76b-7a581804b308",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "44811039-fa04-45f3-acdd-36db86a3d3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba731ca6-e852-4681-bd28-b9af70ed3fd1",
        "cursor": {
          "ref": "dff77575-967b-45bb-80fe-dc94aaf2395f",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e264ba3f-6ac3-4a81-9f79-2250c258bd39"
        },
        "item": {
          "id": "ba731ca6-e852-4681-bd28-b9af70ed3fd1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4d4c0dd2-17b3-455f-a4e4-7a669681c3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9186226-7b9a-413e-accc-8d1c27c805c3",
        "cursor": {
          "ref": "9cf1c033-dc9f-4491-a419-d5de79a7aee6",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4bf7c337-e4c8-443b-b2b4-36de9a550b3e"
        },
        "item": {
          "id": "f9186226-7b9a-413e-accc-8d1c27c805c3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e5c4ac74-e164-481f-bb4b-69113fa7a37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ec1c71-5b8f-4bcd-9a65-0ba94cffa307",
        "cursor": {
          "ref": "8fe6804c-c439-4ad1-9d6a-653090b8cc99",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4b5600a7-478f-43b4-8e25-6d3e0dae05a1"
        },
        "item": {
          "id": "63ec1c71-5b8f-4bcd-9a65-0ba94cffa307",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a9a73da8-8265-4f85-bef1-87a4dee86191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923ef9f2-aace-48b1-8728-00fe363a3cb5",
        "cursor": {
          "ref": "3626bd04-e130-4d8d-97ac-0a8f810a4fc2",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "beae23db-69f9-497e-8c82-dabf277584f9"
        },
        "item": {
          "id": "923ef9f2-aace-48b1-8728-00fe363a3cb5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "56c518a1-8a08-49d8-85ae-8497c608baef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db406b78-674f-4aa3-9bcd-0d4c20a2fb88",
        "cursor": {
          "ref": "e6ef09a1-92cc-4bd9-a109-e2a74c3f991e",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d586bbd4-5090-4c5a-9901-bbb5f4ae4deb"
        },
        "item": {
          "id": "db406b78-674f-4aa3-9bcd-0d4c20a2fb88",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c8be7e72-8b91-4993-9d2d-5a737f351efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "690cdfc7-4bf2-4c38-8ace-c8a00fae9203",
        "cursor": {
          "ref": "4cc21d60-4b99-4e80-ab2c-72403f272263",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "7766cec4-263d-4a18-8698-0025008214f9"
        },
        "item": {
          "id": "690cdfc7-4bf2-4c38-8ace-c8a00fae9203",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "744d54ca-0022-47ee-aaa9-573b12582916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c2610b-bdbf-4d2c-9dbe-ef3836672524",
        "cursor": {
          "ref": "b36d369c-b0c2-47cc-ba3b-d2cd33f804ba",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ad966a24-c91c-477b-a459-89e782aa8a61"
        },
        "item": {
          "id": "42c2610b-bdbf-4d2c-9dbe-ef3836672524",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5ca9de3f-a30d-408b-96ee-88761bbb4bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02982ab-a84e-40d7-b196-242ebfbc3d94",
        "cursor": {
          "ref": "430cbb65-011d-415c-82a5-032fcee0d17e",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "031979fa-92ca-4dee-b5f4-deadc0fc1cf5"
        },
        "item": {
          "id": "e02982ab-a84e-40d7-b196-242ebfbc3d94",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "13e8d7c5-5408-4764-9add-03013ad04588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ff22e9-ea52-4b6b-8bc3-aa18e02fe0ce",
        "cursor": {
          "ref": "a375e68c-9b31-4479-84c1-36d52b980452",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "b7d82f9f-2ea2-4f21-aef4-d51f0b3f7bfc"
        },
        "item": {
          "id": "93ff22e9-ea52-4b6b-8bc3-aa18e02fe0ce",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "deacd824-7bbc-49ed-8333-d57011515500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db150758-1296-4f55-9b3b-1ae2457bf37c",
        "cursor": {
          "ref": "f0a4e422-4a8d-43bf-90bc-30314c6241d7",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "25087c84-6e9c-4fee-9e61-c464db50d759"
        },
        "item": {
          "id": "db150758-1296-4f55-9b3b-1ae2457bf37c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f93cc0b9-3e86-4220-ae0e-ff78a190f91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5371e832-9e6f-4fb2-b18a-829c97b2d15b",
        "cursor": {
          "ref": "7151e889-6620-4e15-8ebc-eece74489671",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f0e7f0ff-5635-4925-b2c7-cae72596adba"
        },
        "item": {
          "id": "5371e832-9e6f-4fb2-b18a-829c97b2d15b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9ef43978-5165-4777-90f6-c78ef67b374d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440e0adf-3362-44db-b2be-b631c64e7378",
        "cursor": {
          "ref": "001b453d-c6fa-46d8-929b-caa2e6cf6dfe",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ed00cd28-1ef2-49e7-b2ae-2417dbb1aeb8"
        },
        "item": {
          "id": "440e0adf-3362-44db-b2be-b631c64e7378",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "58871b01-122b-48dd-9bfc-28ebc88843c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655c0090-e0fb-4948-8f1e-02b3b5258431",
        "cursor": {
          "ref": "80da94e9-e2e9-4ffb-a5b2-a673c18f5f07",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "00b4f110-5efa-49ab-83b7-883cbfea6c46"
        },
        "item": {
          "id": "655c0090-e0fb-4948-8f1e-02b3b5258431",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b57742b7-b494-48fb-a98a-e327f92825bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb588e5-8db6-4e97-a8c3-36a1061c7940",
        "cursor": {
          "ref": "84b99268-1664-41f2-b3f4-f9daa8601edd",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "deffaa6e-2a02-4755-ab29-20e99ca15ec3"
        },
        "item": {
          "id": "1cb588e5-8db6-4e97-a8c3-36a1061c7940",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6ee25400-1cf4-4a89-a4f6-d93754f73684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9161607-ec89-46dc-b363-89aee95bc583",
        "cursor": {
          "ref": "9b8661a5-34a4-445e-8c90-5305c801376e",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "fbd4914f-211b-454a-a6b0-18be1b4edc10"
        },
        "item": {
          "id": "d9161607-ec89-46dc-b363-89aee95bc583",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f53b1184-2f26-42a7-9796-b828bc8cfb0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4934f19c-4908-461f-be7a-cb1b59f15ef3",
        "cursor": {
          "ref": "dab022eb-a4f6-4892-8369-4c029803f6c3",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "084a4e4f-1439-4288-8568-7b17457262c6"
        },
        "item": {
          "id": "4934f19c-4908-461f-be7a-cb1b59f15ef3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d656d623-8a0d-4744-9aaa-ebbbc2cbebd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe25db0-f517-40d7-b177-7b8b38f2b124",
        "cursor": {
          "ref": "2b8a53df-64bc-4f15-b34e-2dca2d958d94",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9c541c78-2fb9-4061-a216-8c493ffd5ded"
        },
        "item": {
          "id": "5fe25db0-f517-40d7-b177-7b8b38f2b124",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b2f04e75-de01-44bc-8a3e-0f6edb6a7a02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d059ad-ec2c-4e95-a4cc-eccc9cfb33f1",
        "cursor": {
          "ref": "a57853ed-d948-4720-ad65-a707a9e6c4a6",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "41645d2e-8a26-49ac-a17e-7a9fb539f90b"
        },
        "item": {
          "id": "62d059ad-ec2c-4e95-a4cc-eccc9cfb33f1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b993dfaa-f09d-4175-8bc6-85d85b8175ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f1bf75-33b7-4265-9f7d-bfbc2f582f4a",
        "cursor": {
          "ref": "b99a4774-2484-4bd8-a0e3-b3e03809e7a0",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "daf8e84d-d10b-4083-bde7-1659d461f0ca"
        },
        "item": {
          "id": "e8f1bf75-33b7-4265-9f7d-bfbc2f582f4a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ced0fc7d-74db-4708-9b39-ba29c013cc5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583bd318-c00f-4df3-b670-1235909411c0",
        "cursor": {
          "ref": "b305c140-049b-4ebf-9c4a-ec67bd827ed7",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3735ae49-15c9-49d4-9555-c71ec139e3b1"
        },
        "item": {
          "id": "583bd318-c00f-4df3-b670-1235909411c0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0d1d2249-e862-4204-93cf-68b3f0ed0ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5120e3df-3f78-4d8c-b0ca-16bddf546ba4",
        "cursor": {
          "ref": "faa4ddd4-ce5b-4d59-a3eb-a9af7ad965c8",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0302a7af-2cbe-4450-a3c4-419bc6fa641a"
        },
        "item": {
          "id": "5120e3df-3f78-4d8c-b0ca-16bddf546ba4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "50c26cf8-3785-4d19-a6a6-db5fb416a9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d13c14-e45d-433f-aafd-a30dfca93a71",
        "cursor": {
          "ref": "bd3fd9b3-1f50-4ea3-9c1a-34b50bda758f",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "4b0940ae-26b2-4296-8d9b-4fcb35fd6b84"
        },
        "item": {
          "id": "02d13c14-e45d-433f-aafd-a30dfca93a71",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "df9439dc-474e-4cd4-8ac7-dd27154ac524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca17889c-0c7d-44a0-b265-dd0cec08baba",
        "cursor": {
          "ref": "16b54551-e79c-4e32-8663-de2954074402",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c8c226c5-813e-49d2-8fa4-72ac9677bca8"
        },
        "item": {
          "id": "ca17889c-0c7d-44a0-b265-dd0cec08baba",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "74d8919d-b0f8-4f9c-a5c4-15a34f92e832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471be7f6-520c-43ff-9b9c-458c4541abb7",
        "cursor": {
          "ref": "2bccf689-4a2c-4d91-a2d0-8511d6a90b9a",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "978a24e2-f9a2-4319-a806-adddab571f4b"
        },
        "item": {
          "id": "471be7f6-520c-43ff-9b9c-458c4541abb7",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "60531b91-de19-4991-b3f8-c6f6e6dd8a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35547bb-8857-4632-9756-2f5310124cda",
        "cursor": {
          "ref": "685a4ca3-76e3-4431-8037-c681b4db519a",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "794dcab7-1b48-4369-bead-102e98ee1162"
        },
        "item": {
          "id": "d35547bb-8857-4632-9756-2f5310124cda",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5fb2bee9-cd73-4dec-87a0-9cfef3b0b9c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ac6295-eead-447a-85dc-26bf5586905b",
        "cursor": {
          "ref": "0dad89d4-73e0-4e81-8803-abca3c3b801c",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "68d2ace4-0dcd-4767-bf14-e543d506e6f4"
        },
        "item": {
          "id": "a1ac6295-eead-447a-85dc-26bf5586905b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "aee8c1fe-169f-414c-ab96-7d73ce4fea12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7402cfa2-c608-4d2d-92aa-234dc06de552",
        "cursor": {
          "ref": "ea6623e1-a06b-4b19-addc-dca3d345d98f",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "18b13748-f908-40c2-bc37-1b423a38f540"
        },
        "item": {
          "id": "7402cfa2-c608-4d2d-92aa-234dc06de552",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "012838a3-ba76-4bbd-a300-c78a092accee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa4a6ce-3bbe-414e-8088-ac5fb624558d",
        "cursor": {
          "ref": "18be7312-b34d-4520-8169-a59328218bd6",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "92a0963d-74ec-4862-a5e3-98cb86c85a8c"
        },
        "item": {
          "id": "faa4a6ce-3bbe-414e-8088-ac5fb624558d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b17dad42-69a8-4c07-b87e-0364a9c50caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07911043-2084-426f-b8fc-22f63163040f",
        "cursor": {
          "ref": "4db7c56e-f371-4a9e-a598-890204387bad",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1385842a-428f-4dc9-a7ce-70dbda8bdf8b"
        },
        "item": {
          "id": "07911043-2084-426f-b8fc-22f63163040f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3bbb4ceb-0e5c-45c8-b1fa-a2dcb603cf0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713589b0-2541-4613-86b8-d9c3e175b2c1",
        "cursor": {
          "ref": "d491c7da-8cde-49db-8956-bcccda840315",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "56a4672f-7220-4057-a3c5-1a30e234eb10"
        },
        "item": {
          "id": "713589b0-2541-4613-86b8-d9c3e175b2c1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "bdb637e1-959c-4851-816d-c941cc775137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596a9f88-5b24-4646-8219-a57dd5615bc2",
        "cursor": {
          "ref": "d875ca90-3cab-4b89-805c-07b4596145f5",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "74074a68-984a-40b8-931b-128a182e65da"
        },
        "item": {
          "id": "596a9f88-5b24-4646-8219-a57dd5615bc2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a574e45c-0191-46d0-8ee7-6e342cef513e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256eaa22-5ad2-4477-9c07-3e733f7402ea",
        "cursor": {
          "ref": "412b7718-f2b0-49ed-ae36-4dd4acfc6965",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8de51700-8988-4bd2-9c24-b629d12e7ceb"
        },
        "item": {
          "id": "256eaa22-5ad2-4477-9c07-3e733f7402ea",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d26289c6-ad22-4439-8b80-01e3ec1a8a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022117de-8378-409d-9b4c-249924fcddc8",
        "cursor": {
          "ref": "4aafb873-f690-4e5f-a346-583d40d90568",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e64a42f8-f6da-405d-8ced-66521d2b2c7f"
        },
        "item": {
          "id": "022117de-8378-409d-9b4c-249924fcddc8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "175d2af2-0a00-4573-af9e-682bab41276a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e947df8-637e-41ea-baf8-7888f217b670",
        "cursor": {
          "ref": "6b8fc7a0-b3de-4842-b1ee-20d2cf4c3d7c",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e3e8d60e-daac-4a1b-835c-6fe669f64a6a"
        },
        "item": {
          "id": "7e947df8-637e-41ea-baf8-7888f217b670",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "32ef1d0f-5572-4724-9032-0c3646a4abc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786f0bfc-f5df-4070-9b79-b344465803ec",
        "cursor": {
          "ref": "2cef17a1-4484-4356-b5ab-28d14336b831",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6f4a171f-2dbe-47c7-a947-64038e5b5872"
        },
        "item": {
          "id": "786f0bfc-f5df-4070-9b79-b344465803ec",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "cefc905e-a9ed-4d60-8193-fb2ffbfe68a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244bf667-2f4f-4923-8a04-aa1b41865eb2",
        "cursor": {
          "ref": "9407b92d-cdfa-4ddb-a716-5ca64464e9a9",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "3c8cdf1a-496b-4dcd-9617-6a97092e67ca"
        },
        "item": {
          "id": "244bf667-2f4f-4923-8a04-aa1b41865eb2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0ba6d448-bc78-4a0d-865f-57479430f6e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be42b784-8342-480b-adcb-20a377fb3b22",
        "cursor": {
          "ref": "11e2a14e-4d96-4cac-a1ce-f245afc97520",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "91562950-9f68-4cea-8517-9faa8ecab0ae"
        },
        "item": {
          "id": "be42b784-8342-480b-adcb-20a377fb3b22",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fcfff277-ab6d-48b9-8bf8-13aca921dd38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb78a909-9120-4b4d-aa31-1b8c0c7b502d",
        "cursor": {
          "ref": "9cf325d7-db51-4535-9fea-aaf3d98aaa5a",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "859949d0-595c-4921-8fe8-85fce4db6331"
        },
        "item": {
          "id": "fb78a909-9120-4b4d-aa31-1b8c0c7b502d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "36a8523b-66c3-4ca5-a1b7-7b43928e6298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56f1263-37bb-4166-9d5f-b7081d2a9a41",
        "cursor": {
          "ref": "ac83cb72-4ba9-46f0-bb79-30a70ba7d461",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ade846e9-69a5-4c25-913f-ccb6b5cf6d1d"
        },
        "item": {
          "id": "e56f1263-37bb-4166-9d5f-b7081d2a9a41",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "629239e0-78c1-48be-be77-ad1da68b45f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24034c9-d0e3-41b5-9501-2f6e03700753",
        "cursor": {
          "ref": "3c111dd1-973d-433c-a98e-ff38e97f9cb7",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "368184f9-0f7c-4663-af37-4b30c5dcf6b9"
        },
        "item": {
          "id": "f24034c9-d0e3-41b5-9501-2f6e03700753",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4ec91ba2-5d8c-46d3-aafc-1f93f06a006a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8744ec-0bdb-434c-ac5d-0d26a0ac6742",
        "cursor": {
          "ref": "ddc89c91-3f77-45a8-a14e-c27b26cfe983",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6037e112-22d9-4235-93c6-a084723b6ca3"
        },
        "item": {
          "id": "8d8744ec-0bdb-434c-ac5d-0d26a0ac6742",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c1337cc8-bc28-4e94-affb-4363938c6aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3d3070-46dd-4c4d-9da7-010ecd5ca8af",
        "cursor": {
          "ref": "5a8166a7-29ab-4719-b1c8-f51d6b03abfc",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "79ca49fd-26d3-458d-83e4-10e1fdeec3f1"
        },
        "item": {
          "id": "db3d3070-46dd-4c4d-9da7-010ecd5ca8af",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "3e6d69ec-be33-422d-9b62-fe302026df69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2173cde-c793-49bc-ab91-6b2f7a6cbb4e",
        "cursor": {
          "ref": "813eccfb-c160-4bb4-aac2-66576550b80c",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "12a87a16-45a3-469f-9f0e-5be123896475"
        },
        "item": {
          "id": "c2173cde-c793-49bc-ab91-6b2f7a6cbb4e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "95e29a33-f539-422d-9edb-4b435bfd2d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39e1d5e-35a8-47f2-bbb7-95bba17b6903",
        "cursor": {
          "ref": "dd1eae01-b5f0-464d-8810-7f60ab5b6733",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "273b8f13-6b04-477b-81cf-59b7869773ff"
        },
        "item": {
          "id": "f39e1d5e-35a8-47f2-bbb7-95bba17b6903",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "304297e8-16bc-4eb0-8dfa-98a68391feb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6fb90f8-8246-4510-aab2-20b4f95f2891",
        "cursor": {
          "ref": "b5d97520-f390-4bc2-9ed0-6b4daecb6fa1",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4e47fccc-b7a8-4d5d-95f5-9e17fd65d437"
        },
        "item": {
          "id": "a6fb90f8-8246-4510-aab2-20b4f95f2891",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "64540232-fe4e-4c3b-85f1-16e16c6d3c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d276070d-d341-483b-8bec-0eb24ead1614",
        "cursor": {
          "ref": "48bdc80b-332c-4899-9ed3-5d8a3f21b334",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5c4f97b1-5421-4115-bf91-21aa0f4cf55e"
        },
        "item": {
          "id": "d276070d-d341-483b-8bec-0eb24ead1614",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "201e41bb-ca95-42ac-aa92-312d5ce6d84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0087a0a8-9ec9-4040-b151-500cb6f64d23",
        "cursor": {
          "ref": "e84efe6b-969a-4b40-9b38-e4eae8457950",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ae3248f7-7630-47b1-bcc5-47656647f6e4"
        },
        "item": {
          "id": "0087a0a8-9ec9-4040-b151-500cb6f64d23",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "25787bf8-ee8e-4b59-bf8f-a6f457896738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8429cbd-7c9e-4a26-9215-5c0e6c27f274",
        "cursor": {
          "ref": "04e07133-d4ac-45dd-9ce1-0959fc3f73b0",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "265b9989-80f4-4758-af36-d4b20f685890"
        },
        "item": {
          "id": "c8429cbd-7c9e-4a26-9215-5c0e6c27f274",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d541eb7a-da5d-4fab-ae70-ece0f1f64155",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "ef64f2dd-5167-4056-8ba6-f7105c9325fd",
        "cursor": {
          "ref": "f028bbce-90ce-485b-93a2-409a6de65695",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7be06244-02d7-44cd-81fe-46930980d4be"
        },
        "item": {
          "id": "ef64f2dd-5167-4056-8ba6-f7105c9325fd",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "d2ad9115-0052-4a80-8016-ecdc6bb272b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "21d55922-73f2-493f-b3ff-194dccba4ee8",
        "cursor": {
          "ref": "135e8f71-28b5-412a-81cd-0992176aa173",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "637931b1-970f-4dcc-b560-67ea46126be6"
        },
        "item": {
          "id": "21d55922-73f2-493f-b3ff-194dccba4ee8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6b3d15a1-793c-432e-96d4-2aba811e1078",
          "status": "OK",
          "code": 200,
          "responseTime": 64,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "942157f8-b0f9-42a6-b078-28ff541bbcf8",
        "cursor": {
          "ref": "fa5d4763-b0eb-4650-beec-4ddb1c8cd689",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "c1e6f3ae-5298-4eee-a6ad-5fd0827a2be7"
        },
        "item": {
          "id": "942157f8-b0f9-42a6-b078-28ff541bbcf8",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4ecc51f8-8000-4d8d-a975-6edadcffa4dd",
          "status": "OK",
          "code": 200,
          "responseTime": 1629,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac18a0f-d91f-4389-8fde-a950805a871b",
        "cursor": {
          "ref": "e4e61cb8-fc9e-49c7-a6d0-335ade6664c2",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1424c9e3-b585-4f87-be51-761b367b895e"
        },
        "item": {
          "id": "cac18a0f-d91f-4389-8fde-a950805a871b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a03650dc-426e-44db-b04f-ad3b63529341",
          "status": "OK",
          "code": 200,
          "responseTime": 2152,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b69a7a6a-871b-4524-8bc6-12f96c2d53f3",
        "cursor": {
          "ref": "5b927b46-e514-4943-b1cb-3d2b9291b0d9",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "43c3b4fe-4f7c-413d-9796-5d12ca5c3f0b"
        },
        "item": {
          "id": "b69a7a6a-871b-4524-8bc6-12f96c2d53f3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4073cbba-d397-4146-97e4-fe60d26b5e5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "b69a7a6a-871b-4524-8bc6-12f96c2d53f3",
        "cursor": {
          "ref": "5b927b46-e514-4943-b1cb-3d2b9291b0d9",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "43c3b4fe-4f7c-413d-9796-5d12ca5c3f0b"
        },
        "item": {
          "id": "b69a7a6a-871b-4524-8bc6-12f96c2d53f3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4073cbba-d397-4146-97e4-fe60d26b5e5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "b69a7a6a-871b-4524-8bc6-12f96c2d53f3",
        "cursor": {
          "ref": "5b927b46-e514-4943-b1cb-3d2b9291b0d9",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "43c3b4fe-4f7c-413d-9796-5d12ca5c3f0b"
        },
        "item": {
          "id": "b69a7a6a-871b-4524-8bc6-12f96c2d53f3",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4073cbba-d397-4146-97e4-fe60d26b5e5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "1e0fdd87-e3d0-4ed1-a101-571a2a3b4cc6",
        "cursor": {
          "ref": "caa26bc1-c605-463a-8d22-6d3dfa3814fc",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3ec21969-164a-4205-9594-1b715bc75600"
        },
        "item": {
          "id": "1e0fdd87-e3d0-4ed1-a101-571a2a3b4cc6",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6e32b7df-cf74-4d16-9f60-bc35ae8431b4",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "d7dc0962-aca7-4f35-8a0a-ac74d5f722d7",
        "cursor": {
          "ref": "72cc6941-e665-4c6a-81d5-efd02338a6de",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4ce87ea3-842f-4bd1-b2e0-be0b67883ac8"
        },
        "item": {
          "id": "d7dc0962-aca7-4f35-8a0a-ac74d5f722d7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "38fdd407-61aa-4296-acc4-7ae6e9928de7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "d7dc0962-aca7-4f35-8a0a-ac74d5f722d7",
        "cursor": {
          "ref": "72cc6941-e665-4c6a-81d5-efd02338a6de",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4ce87ea3-842f-4bd1-b2e0-be0b67883ac8"
        },
        "item": {
          "id": "d7dc0962-aca7-4f35-8a0a-ac74d5f722d7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "38fdd407-61aa-4296-acc4-7ae6e9928de7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "72aeafff-5ba4-4d02-954f-f1f644d25e2b",
        "cursor": {
          "ref": "99ccf3aa-709d-4836-ba58-45f52230e568",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "00c56f4e-a58d-4f48-ab3b-4b37d2e8f68b"
        },
        "item": {
          "id": "72aeafff-5ba4-4d02-954f-f1f644d25e2b",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "aff38d0a-87f9-464b-baa3-af1dfd078c1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 501,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "a011a4d9-242c-409d-8a79-f2343f3649d4",
        "cursor": {
          "ref": "5da88da2-1ccc-4ee3-af7a-8f9d9a152e50",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "aa9b5c14-1790-496d-bee6-a8e2f0a0a821"
        },
        "item": {
          "id": "a011a4d9-242c-409d-8a79-f2343f3649d4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "20bcfc79-efa1-41ed-9196-b3b624bdc1a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "a011a4d9-242c-409d-8a79-f2343f3649d4",
        "cursor": {
          "ref": "5da88da2-1ccc-4ee3-af7a-8f9d9a152e50",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "aa9b5c14-1790-496d-bee6-a8e2f0a0a821"
        },
        "item": {
          "id": "a011a4d9-242c-409d-8a79-f2343f3649d4",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "20bcfc79-efa1-41ed-9196-b3b624bdc1a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6bca5ad9-70f7-448b-b347-d7cde5b8455c",
        "cursor": {
          "ref": "865ae379-b5e7-4a8e-a747-105edc74d7f4",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7c0c2c64-e05d-40d9-95de-2d7706799bda"
        },
        "item": {
          "id": "6bca5ad9-70f7-448b-b347-d7cde5b8455c",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "7827abd8-5ca7-4394-9f1a-ddf8e02cf45b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}