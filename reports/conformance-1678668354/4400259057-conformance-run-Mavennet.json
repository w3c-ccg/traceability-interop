{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6be4e806-536b-4b77-8665-96a2d91c0f7f",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ba091820-f23b-41af-8760-12c61d96399f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d3121fc7-83dd-4cdd-a830-0ea6287f5282",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "729dccfb-ad88-47e5-a2ac-0182462e8a52"
                }
              }
            ]
          },
          {
            "id": "a467e537-6f35-434b-b99f-0cd679be96d6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d6d0e0f5-1aaf-453a-b2ba-cf7642feea58",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fc836b19-505c-4280-a54b-57f5cc2e925f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dd30c4f7-924a-4018-9e87-eb67db85b403",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "cfcc663e-72f5-4a04-80a9-781385693872",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4a80c06d-0343-4401-8d78-4ea7b72e1e4b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b301d335-9970-43b8-8389-c13e19317264",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d24c2a03-c9cd-4f02-9bc6-88f8d316fe38"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d0f7d129-9974-4a67-9126-54c4ca816faf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d21391f4-33e7-4f62-84e9-f23cd38c7932"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c28d614b-6f83-4ad0-9b0f-d3106a52665a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e84b9254-d315-450a-b18f-d256dfaf0655"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c100315c-2bcd-48bb-9d14-559be286f5ce",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "1ae44aae-93fd-459c-92dd-08e59c304c3a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "878fa5fd-b0b7-4d45-9785-e7a2bb9c4660",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c26a07a5-87e6-47dd-9247-e5c4fee83f16"
            }
          }
        ]
      },
      {
        "id": "2f6b535a-6652-4e09-96e1-69153216f103",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cf300daa-c015-4176-aa99-ea9aa87183f2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4974298-dea0-49de-9a56-566d5aeb93bf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "79d21517-c108-4d4f-95fc-30ace754b3f9",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abee36f-c295-496c-b7dd-263771bb082d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df3d4777-6c4e-4362-9493-293a85c1beda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb97367-fa0d-4eb7-a2da-4e030d39a4a7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f920385c-ea84-4ff5-ad9a-8715468c6193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb91e537-6962-4c8d-9afa-f8a33e429002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97141af6-1682-46b0-a103-487a3f8bbaac",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e0eccd-5053-4803-ae8e-d59a6bc8eac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0d07a19-288c-4682-820f-dbb4bb0c7203"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "25362da8-5c42-4a6d-b2e5-639e55684371",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7fff123f-1120-4edb-9396-2bf53d5eb4bf",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d798714-47e4-4e78-a970-fadb4516648b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cdde6fe8-1108-4ae3-ab20-1cb686a1e9c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda76253-3827-4508-ad41-d652031b6db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a522fa2-aa8a-4baa-b83e-a6b47bfe7bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953923cb-b86e-4803-86de-49d1831e187e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027a67c1-efdf-4041-8f0f-4f2c6feaabcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0769ed4b-1f09-4a6f-a268-b5e2258deccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b18569-37ce-4c81-b3f7-b3b204a11a3e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "49959cd2-bcb5-4339-90b2-6f283e0c7548"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b2d9f255-6100-441e-953c-a2194865755b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cfc3ec75-922d-42a6-9eb0-996fb3681f89",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aecbbac7-a55a-4e5e-8746-19ee500c668c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "44c09ac7-dfe6-419c-af36-e73a43f84474"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "029abb2f-06f1-4bcc-8ff6-0a7ee18c61df",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "d7d169c5-9e46-4bdb-834f-81bfc6d356cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a8fb59d-d33e-48f8-889a-51bbb31bce76",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "34df2bd1-27ac-4d33-a9be-51f19bab0f4b"
            }
          }
        ]
      },
      {
        "id": "f600d93f-ec40-4e00-be21-1d592f3250f3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e29ad580-bcea-4799-b6b6-65dd20ca4764",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8181184b-b7d3-47ff-aa86-c6771fb3149d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b08aa8c5-7da8-40f9-a6c2-ea91336d37ec",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57565163-dbd5-40e9-add4-b36a40719f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a9bf82-5b4b-420a-b201-5d799abd9827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf83c754-a4df-4444-b13f-8e30622167c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa650697-dac3-4bf5-8a9b-39c32cf6e503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299cddd9-5f28-409d-b9f2-800561063a68",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4361b6bb-5f91-44e5-b4e1-c597866c72e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d101c3-a9c2-4762-abc1-42e2b22fb3ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b170f5e-5b97-452a-841a-ee69f94a1ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23eda64c-abab-40c2-86e6-b47c8d485101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e52fce-2139-4289-81ad-a3b50aff7fa6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf524528-f547-4f6b-a60f-5d05918cc353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daea1b28-084c-487b-a52c-5aa2b2d652a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d98d22-381b-404b-86fa-99fa7b642475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47643b53-73d1-4e82-ba32-fc5b49586c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449403d5-5416-4501-a95a-a9515b3bd1c7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca5de42-7f73-482f-b1ae-b5782eb0544f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5138afc-3240-49e6-91ef-ea6092d5a5f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78883eb-a1bf-461b-a21c-1cff826951ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db7ab9cd-6a61-48d9-9f0b-b2e1a0870394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce856f2-d544-4137-9929-0621a4cf6d63",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc0f1e32-8762-41cb-b08f-e3e5602aa2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c56b1701-5941-4473-a148-9f7b9f294c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab8cac3-f4fe-45b6-a736-8e492c0876c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "858e7ef2-d1ee-4dc3-9a0b-02bd9b1cb86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9272cfd6-0918-4e6e-b34c-78a9133b4a04",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9528d4-2fd5-483b-abdc-ad9fc16e14a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf4d621-7ace-4283-86e9-4feedf0cade5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e0540c-a12f-425b-a2b9-0db48c5bb7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0aba34d-ba8c-44f3-be8d-0fd19398afaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c2d114-0a95-4714-9dd5-36b480703399",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f239fa10-c78b-4f1f-a2e5-ad45be144bd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ba3a0d-09a4-4b76-8768-b0aa1a47150d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b64785-b5a3-4f0a-82e1-8221140f5674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ed6608a-611d-43ff-8279-cbe4c9d3a3c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566c0a21-e326-4d0f-9cb9-758e88080b70",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93dfd8d-951c-42a4-aec9-c36da9cef91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d9972e2-ea3b-4d08-afab-27e7c1b7551e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb33ad6f-29c2-4565-ae91-c6fa510c1597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8061aa0b-4912-4e68-8071-0d56a5fde8f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438dda53-c893-445e-b90d-ddafd321424f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10459cb-165a-4367-9382-a37a5e136567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5982d0-816d-407e-b5ae-8496056d9ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4739a334-2c01-442f-9f8f-3c988512359b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efe204d2-f07b-42c6-96f4-d417fc2d9af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ebcef5-643f-489e-89b9-04152dd58cd6",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0aea251-2618-4c96-b1c8-88021cd0ca9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe8ed7f-80fe-43e2-b242-c3817e08688c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbf0f8e-217f-44b8-b1dc-614d4f451bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b44a1e87-4b0c-4b05-a000-ad9fbe82a84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b75fab-3ff8-4842-9047-17aabedcc789",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac02cc57-d8d9-47f8-b3d0-7a47459817d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e4ceee6-20c7-4c2d-90c9-0551dcbff1c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189c7334-665d-4a27-9b14-3f8815c5e968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b00fbdb0-bc72-4dd0-bedc-424033ec39f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446f6935-ce9e-4a2a-b13e-e4704d5a5e2b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d492d0-8a47-42e5-86f2-42f58c1ca996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375c004a-20af-45d1-8692-7622e2797259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d332d4-5835-4339-88c5-917a45106416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "306ec901-b851-41da-934d-205283e7e205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e4585f-d404-4470-8567-349de439c080",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12fb6ef-1df7-43f6-ab23-a86a8cd1d9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e56d5ae5-3420-4ef1-86aa-984d63bc37f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5c9d21-e4b4-47ed-acad-de82d5ac3353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9da45fe1-b3ab-4cf8-bb61-88b12dfb85f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5874e923-c643-420c-af9d-67035fa1b825",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bc7bc0-491d-4ea3-863f-61d385776cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ef5679-0152-4d8b-8187-e979ef2e70f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9a22c8-2c6c-41bc-97a8-396be5060416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bff28d3-3d5d-4ade-8db7-15bcdc4882e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a331f9-0cc2-4b84-a1a0-d6105f728d8e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d63532-716e-4df6-9c63-33b9537d6de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86911421-3602-4242-ad9e-6a00af171768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bddc1b95-19d2-4536-9c4c-8f8973f21bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0a1f69b-905a-43b4-b4fa-71dd854ff5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75579b7d-adb1-4250-9646-80808565dddd",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed88ddc4-c8da-41b9-947a-c092e7b14d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec8f0cf-fde4-4733-9c4c-9f7bc5ec45be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d7f74c-f9bd-48f0-a652-d045ceb5d8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a12a2dae-d0bd-464d-baff-abcbb5104b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56631863-c5bf-4aef-b0e6-f1fcc3db559e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfde39a3-1555-4470-8d79-d2d53197d368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2a95de-db42-4155-8bbd-00a07b321909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0000d1d-be5a-4b36-bb08-d112d9e5f70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf868172-cb6f-4ac5-ba19-d227b827e38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95ad905-7d59-415b-ae97-b63932a68426",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8614b6a-aabd-4afb-8875-3bf325c7ad9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c0c573b-425d-41ba-b1aa-deba6910b3bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a017943-03ba-4705-96dd-b18db130560e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6482595e-8847-4696-a53e-868a3f924796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098c9b63-1d2d-407d-a62e-56427a9f825f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d83f6800-5b6d-4586-8af6-27d8cf8f8463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ecfe0e-c196-4e99-b88e-956218827e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d7a085-fb52-464f-a47e-dd34154f7148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44cb46ce-6129-42f1-8e6e-ea2fa8101f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb0db1e-1e07-4dd4-a56d-97f20a88ba4b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8721f313-a122-44f9-b953-d51bc442d949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66aac4d-7d44-44dd-867b-e8d781759563"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c662ec45-6817-41a2-8b19-2fc4ab5f9e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "225624ed-f834-4d62-90a7-8b9b43db4439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c02403e-5722-4609-bd60-d63025f200ba",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc38c05-f066-4133-93cb-a8070f8e07b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd3b0d10-6f0a-451b-8e50-f2d4e80a968d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e4a535-58ac-46e0-8907-6c0adfa25626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "896b2444-f556-4ef8-8e2e-d29ad7084afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8523d2f6-c623-4182-ac08-48f839e8bcd1",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a89ead-58ed-4100-8c7e-5ef4394811c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1290ddfa-1780-4948-b9cb-929235607013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c76a67-cbb5-405f-90a7-0dd6dbd6ac8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d998bd3e-31ae-424d-91a9-21ccf6de80c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff7a39e-8a49-4744-86a1-855a91b5b6aa",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f04f57-4b39-4946-8e96-5b1719493785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57b2bae-9ff0-41d7-8c79-b25cbbc920e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe635a8-2e44-4463-bb5a-56ee3068a278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "654db6b0-6ba3-4365-b608-95700d62a9b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c98faf7-59bd-43ae-b8c5-7ab7077db338",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcae8b8-c5ca-4cbc-892f-205c019ddbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebff9b26-b4a4-4dee-96a2-ddeddac5c648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b43ec7b-c110-4f66-9c63-79072d98e15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc47db0a-49dd-4360-ad44-daea642c83ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf06e6e-6113-437f-92b4-421fa924b64e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f89f137f-bb63-46c0-8879-33cbaa0fe417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3713d22-b4da-4464-91cc-00cc9e0dbba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f96b061-d22b-4d53-9a22-659d5263a825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eaa82f9-89c6-4d52-b10b-bcc836da724f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa857ef-cb40-4c7b-918b-eda52beaf95a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "532bec8e-64f5-474a-8c5c-feb35b532e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7a11d7-64aa-47bc-8749-ed19cfdd54c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b444baa4-2753-40c6-abf5-4e109650294a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bd50304-458b-4109-9f95-7def44ad7141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63503b0-1da3-471b-b44e-9928d51e8182",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9f9022-ff3a-4e03-a957-5e192097a7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a769a5-b3a6-49a0-ade6-b7d598592934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8534b85b-e9c7-41f5-af4c-ae92dc7922d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "43d4c2d0-9a05-46a8-a5a8-b06c8ea06dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032d3bb1-5fa9-447a-bf94-89a5dde99a09",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db954aa-6a56-4bc1-982e-67c85a090872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "132bc9cc-b841-4ebe-814c-7d894295a332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39cdb11-d880-47d3-9f3c-bcb1aac4dc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c648cf19-0237-47b5-89a0-af9c18588e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfacd008-a38d-43bd-b805-cca652fdf721",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75acf146-e0df-4ed1-bd55-dfe8a58e9788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3cf9cd-c88b-4cbb-8f24-7206f38e319b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a2e8376-bce2-42dd-b2de-4540e0978493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee7b6a2-527c-4efe-99f4-22d2d4416359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617488d1-6b53-41ad-a548-986cf393fe2a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed56bd7-54fe-4b24-9cea-50780a71b580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34634985-496e-4f79-9de4-20180425f358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cccd29a1-ee09-4039-a920-3a9cf55bc59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b822f3b3-4c61-4990-8a69-4f7d35a3cfcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1e07b1-ef37-4d77-a101-bcc56000282a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265640f0-8c83-4a95-8939-ab6f1286f2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5f79d3-ce37-4bea-aa31-7ec28a1d874f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9e9e21-ba69-42d2-b6a4-c5ea6ac675cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "66ee684e-e132-4a5c-aab0-280bb08fba5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9d2735-7439-485b-9e85-dac3ae2f9c75",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8f86ec-5cfe-47b3-8fe4-340c4ee84224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c08466d-a7c3-4de9-b7aa-4b3f54ad4d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0b51ad-a094-41bd-89a5-a2e3cea3808f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae3e9307-795f-4b6e-86ac-abb6c13bba67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f38291b-f284-4ad7-a729-72439c0f22d8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd58f9dc-28c6-49d5-8e49-9f49644dec47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b552376a-e012-43e9-878c-5d6cb3f9e84b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e238915b-b7d4-4444-9c7b-ee529009fd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "04e9b1f3-36c9-42e8-863f-d521fec94bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73166d7-971f-4e19-bf3c-7d037113d403",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c484750-ecf1-42d4-a974-fc64ea9f3e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f3958ff-4927-41be-b4fd-e2e369a88799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cad5552-84b5-48f4-9849-74f3cbe60e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac294665-f4b8-476a-b282-f15e8c6013ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d70bd71-cb73-4655-9a40-05e8e39ae194",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94fa8e55-668a-4af1-bd94-ffc3878dd8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f490e2-d2c3-49e0-b2eb-9144d221c49c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6234afd2-48e2-43b1-a476-bcc36ed52129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e74bbce6-d53f-4f6c-b3a9-f533eeb67155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789f8bd9-267e-4e7c-929b-7615c58466b8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2a206d-aa3f-420e-a7bd-7c8d51a025b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5adfa009-c6cd-4e82-946a-41197edc23a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b767819-0dc5-48ed-bf0e-5a1cd02fda1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed1a087d-d39a-4525-8695-18cc95c8d5ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ecf5e9-98f7-4b36-8070-49b63040a65f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69d635a-1ac6-4aec-b9df-0e3e79b38628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "accec071-ab11-4ea8-aa70-3ff804c256f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff18f80d-b569-46b5-8cae-eb64e698c34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c191e1b-04a0-444a-9d15-b6fcf75ce436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5aeb74a-c0eb-4ca0-81ba-dec3348a886e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b98584a-8658-4037-baf9-7fc171bb091e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dee2fbfe-e881-44e1-9b45-b11c4357c53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78cc774c-bd85-4ffa-b4b3-d3c81df0a9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f8b11c6-459f-4a8c-a72f-a7e057e42abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9206b290-8594-49f5-9fb6-37b2abbf472c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728b3d72-acdd-4820-9a64-46aa36f2a62e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d4922e3-6931-4a62-8bfb-2abfcadf2337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02eca7b3-a500-46c3-a1ee-f638cfd75127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "80e07b45-13cb-48ff-91de-04996559b45d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a992ee8a-24ee-4c79-91df-aa56b6a72a6b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccba8292-05eb-4bde-9ac8-a24790a00f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "244e8942-2932-4102-ae90-937c95f60d4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c793c25-1512-4e7f-b15e-fb189ff02428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ec7b6f3-e8ec-458f-a099-e6e97fd2c7cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5024eb0e-2fb3-4810-9a71-e4f89a248364",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f87b60-996c-461e-b3a5-adb2b1234719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1426ed8-527f-4995-be0f-e0a23a2f6d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c7d535-4425-4318-9a27-1d19ae23c95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a40695d1-f040-48b1-956d-d44461b02dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc23c9e0-35ac-4d0e-91aa-bd83859a8cda",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cdf51fa-3aaf-413a-90c3-21a360726ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c5bf3a7-5625-44a4-a824-bcf9cd86639f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf7a5c35-8a12-407f-a66c-a2cbdfe03071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b61bd0cb-a785-4812-9980-6a62604c5203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7317128-1075-4b65-9c40-2ce4c8b8dec6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd445c35-4f38-4043-81e8-d77bde62b0d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40d7f026-cbd4-4a9b-adb8-5b42f9397981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56381131-820c-41b7-8d31-e6089039a4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3bf0557-540c-4aca-ba56-10b87f6e88f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bad762e-bdc4-45c6-b915-84ce12a89f95",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b2433c-2930-4e96-bd5d-072ec801f345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc4167a-a0d3-41b7-9eaa-54561925a0ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27fd4e70-0938-48df-966f-912386ed27ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "70195dd9-8653-4e9d-8aef-29896e415c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e5d60f-35c0-4b74-8ace-3f6b2b9b68ff",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8699758-9d62-468b-aca5-e8b2ef107ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ca9e1b-942c-4b45-a3c6-7d096ce18cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad3e297-d328-4b0e-a751-6bdfadd67851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4b6ffc-cd98-4380-868f-664ef57a4853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffdcd715-c80a-45b2-8afa-d7121eba0da3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1187114f-48b5-4d87-bf21-fdb70a024c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88df824e-c11c-4a54-9105-f27e9c4ce4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279d76ee-b7cb-4305-8e28-0fd9b4997b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06393ac3-5307-44e5-9945-7d35ed14c304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fd0a88-f7ab-485c-ba8b-4636c5edf786",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7373001d-b908-43bf-8db0-da2a7d23e281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba3cca2c-a66a-493a-ab4a-bd4b3d0bd57a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82ef10d-7716-4636-a158-85aa45db3c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "591afa91-ec9f-4fe8-8821-ef7531b43fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f5e1b1-165b-4534-807e-61526d09eed1",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec94042f-bc38-4aa8-9095-208dca22c365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440b36a3-0afc-40c8-8113-f75e9edfb0ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a023707f-12bb-420b-9d7f-21b72c697ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79098cda-771f-4e40-aa60-8e9e82f5299d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56813d75-b5ce-4fb2-a0e2-7b6b4eb92f8b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21c5ac9-44c6-42ec-8adc-cb93e3f1383d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "928b7a41-a375-4f0a-9556-434d1863303a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "289694ad-e31a-4543-99ed-4b5bbc6d8ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "145cf19f-cc96-4845-8e18-8e77c4f5ba25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422afbdb-ce4a-4384-821e-fa69f025fba9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a37c45-170d-44a5-a4e2-b9b2aa708088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f13aae2-2f15-4428-98b4-97a715be34d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d9471c-2a36-48c2-9bd6-d1021113eb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d15e25a-3bd8-4d9d-aef5-d59bb0962306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41be4ad4-4e4c-434d-8607-d4b50e516c35",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1721b3a2-a5e3-4ebd-8143-bd7805f2da11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40dee7a2-af13-4aa4-86ca-c2c9c1c7d5ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f246df-a1b9-4c69-8766-2083389f9fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a368745-5089-474f-bfc6-ebe180b11745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9050b2d-cfc7-4440-8c47-d10b62ea8baf",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad88eb4-d7c7-4eea-9677-d681e14c8dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b3778b-d152-4ac1-b30a-5f27618e8973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09dfeb18-5db0-4878-88ac-59a29f3200e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c08c3aa2-4e31-47a6-a2eb-c7aaa0f063f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09a2dc5-f9ac-4c53-854b-83e28d1a284b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d767f89-0ec3-4332-8117-c5d3e8640c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cffa976-df66-427d-a1ec-1276352e2113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d09ead-0603-4598-a367-b33497425ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c6a20bf-ecb8-42a5-ae31-3c933e3ab3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64206bbd-5695-41c3-baf4-1489f0bfe9dd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e0218e-d37e-4513-998b-e9cdf15de70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07abd2cf-4014-4f16-b07a-908a60cb5429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ca192a-cee0-4838-b2e5-38d00f689185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e68f4ceb-1d97-4960-9d93-4a8825fa74ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a650f2e3-7e23-47f9-a0ca-86aaf3ba367f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e736e79f-4c61-418e-91eb-64a3efaadc24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b10b96c-e7df-4068-9183-d5753779e542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0f6d8d-0f8d-4bbd-9e21-f8e3a4298a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3163a13d-5af3-48e6-bf58-35bca7d627e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c191e2b-c0ae-44be-bc54-0e535bcf6743",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3815397d-294b-4310-8842-5962afe0777e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3436049-42fb-4b9e-9985-1612d3ff331a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc0b3d9-5d4a-467d-9a64-0d121cfd8618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5fabd24c-373b-4d4b-8511-54918f0d4d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e495df1-934e-4298-beef-2728cbd43735",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff2ded0-38bf-43f9-8af5-a5a7b0da4b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "437ef38f-a79b-45e8-8192-b4c3732973f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1299316f-6b77-4fcd-9a89-b3c8c2e6048b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3c9a05-41b4-466d-a607-3a45662e6866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e9adf1-c2ec-412c-99d9-37349f7d7956",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe4e5e1-16d8-48db-a977-76faa259df96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c10a7a3-14ab-4ccb-9bbd-ae79a768f7d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583cba53-a3b4-483e-97c3-10053fefc385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa91835-81c3-4065-b14f-fdf2350c80cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605644cc-cb71-4948-afab-83f4ae467e7a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7cc5dd9-2741-48fc-b2da-00609cd05c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82ba61e7-4c87-4e41-a086-5e999fc2fdf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ce1720-a6d6-426c-8a20-99d01f7e2204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a19c0ed2-4c6d-4ae2-9556-0d967c9d6d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7588c5f-43f7-4e84-80b6-bad5911fe6a2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05528801-a338-4684-b544-dbef9f56d687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84476533-91bc-4402-9f43-6662d03cdc77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe69c477-7efc-47ee-a8a1-d9f4ee43b1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1aa7c5ed-f451-449e-ab6c-79123125ba1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d4363e-d86e-4197-905b-f16bbb8d5469",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92469599-7d66-4f75-a9b4-46ccd097c54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9950346e-c95b-47b4-afb1-b740b680f169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e205183a-49eb-4e95-88b5-752bb7f62130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2d9db9b-805e-4fd5-b615-c74891d187b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc56de1a-2db1-4816-8978-6f1df94109ee",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8fd8ab8-1aa8-4a5f-aa07-464e85b0f7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90ee272f-578b-461c-9fc5-c7d425cc30aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b767bf-a6fc-4a27-b414-ff80050c4ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "293359b1-006c-4f13-bfbf-1bd2c9a54a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9971f9-fa5d-490e-9026-8e87e711b3bd",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8785bf81-8135-4d37-bb66-26225e9a79de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f64935-7ec4-4022-8d3c-250cb1b052a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79608421-2153-4b40-a25c-b8ea1ca750c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fafe726-e3d5-4eeb-8803-ae6079537df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6edabc3b-7f38-4b91-9df2-1e1c6bfde55a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9c1001-cbc8-4bf6-be97-388c164c8f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1349b850-363b-4e30-a38e-518b4bd03658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba1ddc5-5148-4301-882b-9b925e247626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "defcf04c-d7ef-4b4e-9f71-6933628518ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc73eea-fb04-471f-903b-e52cec964392",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd25d76-d994-4e6d-a5e1-99749dd5bbfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91d5723f-71d5-4cec-9ea9-95fcabafaafd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe6bd73-5eb1-4e66-9572-ddeec99b5c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "42f5b228-147b-4667-8281-40b31a0bccec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f71b273-5e45-47a6-8f93-a091c27a5668",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c137b2ba-c8f4-4042-ad7e-a733e78d3545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8cf0e03-23f0-41ea-b1be-4e22475a1cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4857a66e-46e6-4469-856e-9dfde357a8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "23fe5b04-3c64-484d-bf9a-49c55b394d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef74f79-a45d-48ea-84d6-9b6f120385f2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c7c6f5f-c647-4de5-8466-35dd4196da9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f12b9f3-192e-4635-80a3-155bbb8160ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4b7b99-9938-4906-8d4c-cc4534a77dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4369e637-5826-430e-bb66-3fd1f2eb3d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972c2366-1990-4448-bd43-9b1fdd313b6f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "929903a3-17e0-4090-bdbc-858d675d3f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff32701c-c8e8-43db-be4a-69846ad832d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daad5d46-82d8-4b8b-993e-9ca2a7fffbc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f841a48e-1fe9-46bf-9c9c-a846eea5626a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a885a1-9861-4baf-a260-59732e830525",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ceee8a-76c7-48eb-80c4-a6723f3cd312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ded50d5-61c7-4999-8883-46d5954c781c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce6c022b-7776-4338-a064-08410db067e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "13f36fa9-d0b5-47b7-a979-9f7ec7a25d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94016fe6-0afc-42c0-959c-f53ec20a83f4",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95273961-cbf9-45a9-b926-308267bfff0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14ffa5f6-b8d1-4f8d-9d6a-daa00392e6f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc46bf0-5ad7-4d0a-b30c-ee8839f29285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "267b09af-6ec4-471e-9854-e08a87ae4018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211fa8d8-81e0-4756-9360-7e49544b7f78",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "555a135c-55b9-42cc-a43e-51b8d57888c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f76e28-8db2-45d7-bfc7-094922836584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e8adce-7ae9-43ae-8153-3533c6fd27c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f6edc8b-c748-415e-a219-dd3a28940bcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092595f0-bf04-4a18-b93b-f824c79104e1",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "303a5657-c3ae-43f3-a130-43ee8a567d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338b65be-8a33-4969-8e8b-2c92faf109fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf08773-2ec9-4f2d-ba8c-121cc9451165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "254a6ccd-e43c-4ae6-98c8-8d1b48492b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b22782-f594-41e1-bbb4-621cee838c89",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "535bbba5-39b4-4750-8454-ab30025a24d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e28aca4a-4233-4f15-8ada-47d9e707f54c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecf781d-9a87-4015-afc5-561a56524c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f659b0-7f64-4cad-9e35-45c66a10423b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf0d0df-e310-4089-8d2c-393bcc0d70e6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdcbe1c7-70e0-44d5-be5a-6d470613e135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1397bc5-1f68-4402-ac84-9d5babf17e86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1c1eac-9872-416f-afbf-bfc685be6fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a2d3f1bf-f731-46de-9f78-2772e72e070a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac0eac6-8403-4ab4-b493-9f6324478b92",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e05a82-d117-45bc-94fb-26f447a9b57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2af8bda2-54fb-401d-b528-7690ec45084b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6abc289-3917-4a11-894e-7458960d7e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0781bc1f-0796-4bd9-a15d-ea8ef6f77076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe6ea48-6ffc-419e-ba5e-834f66d3fe52",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5286b4-2ec8-4bcf-bce4-0cbb397bf97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7672ac87-f80e-4a4a-87d9-684ee1863578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840fdbb0-6092-4a1c-afec-f3935835978c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b4ab838-bb2c-4142-a4ba-e64b70ed240c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9cc149-ebeb-4354-9dce-fb51cefc9a66",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a1e06e-c0b4-49e6-88b0-12c61b867bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "787c3648-564a-4a6a-a5fb-a82d13b4e4f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dca2653-8fce-4597-82a7-6a902e690608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d249e28f-0794-47cd-9f89-a0bff3279a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d5045e-3866-42cf-a82a-a54f4419769d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b698c3-9fed-4ad4-b974-5d112861ef8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41bbb547-5b00-4dbe-abf5-d836a3813710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf066501-1625-4241-9da6-27541da0538c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a69b7ae-a477-47cc-805a-ccb236a71f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b6c826-f059-4f51-9eeb-f790b079db72",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba95427-1806-4f2e-a375-3f39cc5f5f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc7c14d-0259-41c7-9007-71f041a058c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9528996-2d0c-4cfa-9528-0dabb2e97188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ddf990c-835c-4095-b1cd-7f86822c87ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d26db08f-3b55-49b0-9b40-4cfdfca4db97",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3621e412-842a-42d0-ac78-e2619ae0e1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d84f6102-8777-471a-b448-a1ae5b21714d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8feb0a29-adc4-431a-b29c-acf525359238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "affdff0d-db8a-422b-bee1-698766a1f5c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971d8a91-419c-48db-add5-7f7460889bbd",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1dd7aa-6ea0-4c2f-b43a-921393d32c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d44d262-43da-48b7-9984-1378fbfc6f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ec7abd-e7b7-400e-8e30-ffb1f3f81b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "543e8cd2-e1a3-4ce3-9741-0ee83404cb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b033f4-7abe-47f4-ac94-f3ff107e1888",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d35f6bc-b740-490d-acc6-e4835f542139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca96b34-6ada-470d-aae3-47e4fd2f7d07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6683414d-5684-4f96-8e86-d7cd4a33cd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed88b7a7-7a5a-4c6f-87b4-95537c4366eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6672d7-d19f-4ffc-985a-a65155b12e95",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa1e945-a3dd-43b8-b5a1-9d282914e8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68bcaa9d-6564-4e56-9a8f-dbd9a39daf57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309cfc1e-4b2c-4983-a843-deabfdbd5964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83cf0fa2-f77a-4a85-b9dd-1b98f2a66cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b5c015-63df-4384-89de-5376fa293334",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41db42c7-542a-4c71-ac97-ac104b2e041e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5745e55f-e3d6-471b-8067-9bfd950dbf9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf061a2d-5996-452e-a1e8-a2b780a196d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7bdc25b-b400-4792-9cae-82176368a981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b247186e-74aa-42f7-ae62-7cfd95bd1924",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b2a6c2-7e1b-4c47-84c3-a08a55beddd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "939da684-c914-4c6f-83fb-3f5075be7432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936888e3-0055-48c3-9d6a-6a6d97def183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8380b64-6513-4214-8e33-46244eac20b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380e3a70-ad1c-477e-a0b6-e9f88cc4e973",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b21fd1a-2b56-4bf2-8f1b-16fda0966c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bc4ec30-1cb9-44c8-8af1-571d50b590c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1daf04e-7479-405e-ac69-df1355180974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c611f493-df57-43fc-9487-cfdc53575dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efef15cd-d4ec-471d-9f0a-fa071bc204c6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4598635d-f7fd-4060-aabd-1f258ffa827b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a9584b4-cedc-4d06-b26a-0fd637914dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bcb2884-400c-43df-8b55-1961b1f5e2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "10e463c6-d6dd-439c-89a9-f391092e8089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e989a4-cfc8-48d4-9d7c-3bd002912d0a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83385360-0fcd-48ee-ba24-f08fad7d67b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6eec16e-dc90-4c82-895c-ad960bcbc1b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee9ac27-5ad9-466f-a959-8237fa9649d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f41c9b4-6f7f-4194-bd7d-0f9d556377e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc16c25-b437-4255-a28d-27b87a80e9aa",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05477eb-c08b-4a14-91e3-7fb6b0b8a6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7fc79d1-0926-4f3e-81ee-f0dcc8eee58c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93743234-2924-48b7-bb5b-89b4feff8f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "49ec7b2b-60c8-4d2f-84d6-4f357a09faf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad87cbd8-c7a8-4c11-8fb7-634bf8addae2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4356a5-a278-4612-81b7-00b22a6d99bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ce0663-a066-4cf0-97c3-20176265cd26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fffd5afd-d70b-4975-99ba-8dbaa92e169d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7a08de9-327b-4171-9c51-aae49b2439a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fb1d82-16a9-403a-b9c7-529c079bf5a6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a88eb23-3b50-44aa-8118-5f62f135f41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87e750a5-d0f6-49cf-96d5-69a849292c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ffdf22b-b30e-4380-b3b4-a668caa033d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee1f2e5b-207e-4d54-a0ce-1031a645293e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de0f094-eb38-48f2-8ad4-2778d9486611",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d935969c-901a-41ad-9765-1de7ff35786d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a54167c9-a711-45e7-af38-8950c1842590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7660415a-3968-4e23-b64e-3fe88e3c972a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1373a39b-1ec3-4ca9-b4e5-cdfd78dca26d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4102ceee-7172-4e20-b53f-37a37424a05a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fdb6b15e-15ef-4bd0-81f1-6b5cc88ed4bd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab07775-2608-41c4-b063-45c90a634999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "581dba1c-b47d-4908-9434-6f1ea55564fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24d78d5-9653-493d-96e2-5304157f7320",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3cdeaf55-6f78-422d-8875-6d20db174ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46b5c4e-c8cb-4625-ae11-863e3082bcd3",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a307b74f-b4e4-4092-a864-60e8b851f995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a321264a-f713-496d-a0ac-d0cab8f5dd11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88e88a6-6729-46cc-abc3-fb5bd670fcca",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25c8ac21-ddf5-400d-85ef-5ebda8c72a6d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "daeae02a-45f3-4144-816c-44aec5ca1523",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3f3c005-8be1-4a8b-bbeb-7eccbe6ed191"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0333fbeb-eab0-4288-a145-ff4dc5017651",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec32b4cd-d13a-40b1-b44a-f5683f01ecc6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d994f1eb-5fa6-4179-99cb-dc4855f58789",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2e7618c7-6c96-4d4f-9055-2abaa175bb0c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a7250ffd-befc-404e-8d66-d1972ca6f7ec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "943c08e0-c78a-440c-916e-65bd7cca9617"
                }
              }
            ]
          },
          {
            "id": "29a0ce8b-ad8e-467c-8f9e-3ad30a5a89f7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "749fe9f7-3f12-4669-aa7f-d39df1f6b271",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e47332e1-ae1f-4da6-b575-46e736e3e924",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ddfa98f-0339-4b87-a817-fe8aacc095c4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9db15e7f-af6f-4164-9284-20389e33480e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "52f281cc-247a-4538-8c6b-e5723c47d428"
                    }
                  }
                ]
              },
              {
                "id": "72d7dbfc-e37b-418a-8519-5cd1009f4815",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "06fb49dd-131a-4fa1-8062-0ab42cdf3bd3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5739569f-a726-400e-9c9f-af0bdf4ea453"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "46a4e094-2e77-48e1-86ba-3725fc16d8b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "be7d98a3-9286-4c68-8ec3-9ca9a815482b"
                    }
                  }
                ]
              },
              {
                "id": "d04669d7-2169-4ac5-85e1-127cbfc479a4",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8505da97-d032-4c0a-947f-5f03855dd510",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "db64d432-ae67-4d48-be9d-d74f80b8f0aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44b2c63b-edb8-40e1-9b52-02525fa9c51d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "93cfb03a-898c-4cd2-8a51-99bb1df1fb9d"
                    }
                  }
                ]
              },
              {
                "id": "93df9d69-51f6-49ba-9ec0-69739ca1ee66",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b99179ce-434d-48cd-ba21-465d7e52f0c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "84ebf1c4-bdeb-44aa-94f7-8a0fc2bccacd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "783e40fd-7df4-4ffb-b7c1-e4a79bbd2c22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "93608c62-6263-4a7b-b6ea-2d90a2c74c6b"
                    }
                  }
                ]
              },
              {
                "id": "a3651cf8-787c-4551-959a-eb16200f03b0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "358ec940-f932-49f4-9294-8941ae10b1dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c8b1cf82-5d10-4e4e-8ea0-19dadf1021ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "beaffe49-e7ef-4788-9754-43b16fca3807",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f6f531e0-b595-444a-b517-db9de17a7de9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81ce18e7-6a44-4cd0-9436-906ad55bd823",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2f67c123-7997-43ab-a6d1-15ca76c69874"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c548eb4b-f5ae-42f6-b51a-a4f05eea8d7a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf9cf100-79cc-4ab7-97d7-18d8d6f7f79f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75716398-3572-4650-92e6-401fb8b93b04",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9d169ef1-09e6-4a68-ba04-51767604ec86"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63c5edf7-5a70-4ff8-a758-5ed3cb701668",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8546728-695e-4bad-b61d-c0ac0420676c"
            }
          }
        ]
      },
      {
        "id": "f98e2b84-7153-4536-919c-bdda58b50ce7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c8dcde53-4e61-49ce-bbdb-e81fde480b49",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5b53fa88-1038-4ded-aaae-537f8fb75835",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2938dab6-7979-445a-821c-a45dc43a691a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fce21f-4a0c-49df-8d8a-b41a66e33e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea98c363-d193-41c4-bbba-225aa65e771d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ea22ad-dd5e-4644-8479-5801b1c3dea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "603b3bdc-e763-44f1-9d2e-50b4f5806b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895a0bb2-1f0c-4168-8df3-c6703133269f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74270c82-c634-4fc8-873c-f4cbd2825efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80cb9a03-e9ad-4d66-8e15-5bb4b0f45b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c541639e-f75a-4827-ba28-fef6f79d8881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0acf1495-4861-465f-8c2c-360741959e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ac90bf-ca41-4fe5-a64f-4f77e686c824",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9586db66-2235-4f9a-b38b-3f7668654b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f0c2fce-d919-4aa6-98d4-29f3439974a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a94139d-b96f-40d6-93a4-b8d8f8ce9294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d0f250d-0e7d-4b31-b4a2-b3415ceb3e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5156c7b-fc9e-4715-94cc-09740af3b3ec",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0c6336-75bd-4895-aa26-320b14455e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dd103f0-5a16-41f1-82a1-b56c8b312da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d711fc-12f6-467d-a3e2-4242d0b1df4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5dc68b6-7de3-4021-bdcb-c9ccfc62c03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f77b3e-08d0-4246-b0b6-fadb498d2178",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e492ae1f-ede6-4c3a-a24f-5d100d3a38f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc999db2-f062-4acf-9405-3e0745d3a258"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e632fb3-4670-4cec-ab2b-1be82739ba39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63740863-b266-4e03-bb20-d67b31656f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee4a9fb9-55ea-450d-a5b0-d03eb888dda3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c341a0-c567-4b7b-b241-400a4875c4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "604cfe40-2d8e-4dc9-befe-88f38bd9fe49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e857adc-4d82-4415-849b-ad93ca862987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd036ee-716a-4b15-81e4-caf0ffbe84ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78d0858-5b1a-410b-bd84-20041bb2d367",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6d7554-169d-4573-9f7d-92bf4a4fe868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0611d9c7-bd9f-4515-851e-fff7cd75b917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6838403-748b-4e7d-86b5-6dac57c32401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "dec98a41-6776-4432-b362-188a8d4e4915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21e59d5-0fd8-4847-b39c-56da662d8480",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d854fbb-d827-406a-b23e-9dfe81b37d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dffc5d0-dfc3-474e-a0e0-c0da6847c42e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d5ef987-8622-4349-8bbd-de79be4f9574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a298e7dd-f5c7-4639-af6f-934078ec41ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad639cc6-cacb-4e0a-b577-5a3060f0cc36",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43eff205-5702-48f2-8f54-476964291ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad2632c8-785e-4fce-a364-0dcce0e36150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09fa71b-f74f-4640-a4b9-375d10d83f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86693a4e-bef5-4b2a-b6f7-388a35a05d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e94fa2b-7517-498f-bdff-2ab87b0874b4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b7e33f-802b-49c2-af71-7563b7926b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71ee6f40-e5c9-451d-a891-f1d1c2af4ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3950e12-92f9-4eaf-b639-09affb55b199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0c7766-c1f0-4816-91dd-2ef0172a2e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e93f0e5-e945-48b5-bc76-2c324b30111d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924f8ab6-d038-4a5f-8dd5-0b8cbfe25971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d816c64c-dd30-40fc-b138-d15945e6fc0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c23abb98-bbce-43f7-a174-b02fe7f7ffd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "783903ba-d52d-4568-afe4-bfe98c08e7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89972ab-5458-4c19-8330-2aab313018e5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc805239-e518-4182-afee-a2f66b8243e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cedcab04-ece5-4a58-9e42-d10cfc22cfa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753ba966-72e1-4e74-af9e-82015c842929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dd3b9654-377b-49b6-937c-01526b0a8f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e607198-b854-413a-968d-10033da1a75b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4637c4b-e99a-48f3-adf8-6abc7ba6fcf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0036412-8f62-4164-90ed-39e1105a7ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8889455e-febf-48ba-81dd-2acb0a4cae70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f88504ba-eb43-4dda-9203-957e3a96de13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73d39ca6-157c-415d-8cf2-f1e794dc23f7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f063b123-d40a-44b8-8970-d60a4181f833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10aac2cb-841f-4f5b-b317-bd166090ddec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31bf1000-fdb2-40f2-a126-34ec628f92c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "366a9958-a352-4fa8-8195-758ec3ac6a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f6b691c-7431-4202-bc20-263c3951e130",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3898c290-6215-41d3-982a-b3b8543618d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e7a880-16d8-4bd1-8d62-3ef714c5237e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7e6747-fab9-4d79-8ffc-b39e0f38e801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "409b7428-7ff6-4ae2-9d37-c635454494b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667e0b15-4111-4fa6-807e-0a31808a72a4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb818f18-aeaa-463c-977b-e79f2133e49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5625a0ae-222b-43b3-889a-049597295cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d5cc2d-f367-4428-a906-f87b61ae7620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dd988ae-9107-453c-a802-f28db9e7033f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b49fd4-54b4-43a5-9d52-dc5c1ec96600",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd243ad4-106a-4282-95dc-25d470dd43d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "586cd5e6-92d0-4945-92eb-74743621ce6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24805810-6ab2-4c77-a432-3f0377fdbafe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fa29d9d-f397-48fd-afe8-9fdd20bae3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a1536a-acdd-489a-bd0c-e6ba156793b6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c06e38d-b5da-471c-a766-7713d2f5f98d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2bfb275-0421-41dd-afdd-7052c845d3c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf830ce3-a82d-4a86-a449-4578ad219209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "986a31d6-920a-410c-a78f-87b51885a864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fecf7eb-551b-4840-8e50-1210d89f2c24",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa3eba4-ee00-4781-9f1c-8d74b270ee28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a40fde-6107-46d0-a1e9-33c14e3a11db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d393ba08-df93-497e-ad3b-322f7d547692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f10e539-a1ac-418a-9a56-823087219e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a397e2b9-9438-4112-b83b-4b6ed277b9de",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b6061e-8e05-470f-93d0-4f6658ecf28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6ee362-e733-492e-b277-e0226e98283a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545427fc-8ec6-4dab-80de-ba7fc7662231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd06c91-73b1-4939-b5b4-2230d6c1f585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7932272-f772-410f-8d2f-f0054cf894e6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6603a5-8119-4d5f-bbe1-305411bd399b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aadc50c-114f-4278-997c-9849f7f31220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8325ea-eff1-4846-bb3d-040c4cbf98fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e9b2c9-868c-4799-ad86-b9439b4e81e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f8f65a-b7d2-47ed-a677-83add3999374",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "491c4f86-029e-4ab6-a22e-0abb9706075f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2d1aab-ed65-41f8-be10-1a2a9d94bccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871afa37-4a66-4329-b41d-2bb94a350e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f88e7b3-19c2-45d6-8000-118723f37255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4fca02a-4739-4a4b-91eb-06316c952f89",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916e058d-3191-4504-a807-16c2dedceb51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09042ab9-191c-48b3-aa10-423cd877780d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82961ddc-2247-4809-ac7e-b1b7eba13836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d2e4342-d4ec-404b-b4ee-d1f936400c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91c1989-8eeb-4c53-b95c-497aaf366024",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d12872-a628-4739-8b37-d5dcbab1bab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "539cfa19-4dd1-4e89-8431-94896a5824d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebd5e22-721a-4bd6-9f07-1a05c8c38586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdd7c501-6920-4951-863a-8b61da010137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a261fd9-23e4-47b1-bfda-ba8a8a3cbc91",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1232de7-243a-4762-9878-335e9eba804a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32ab4cb-643c-4117-b0e8-b8d7346d28b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5244518-edc1-4274-848f-fbd48543223f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd3109f7-579c-423d-be43-9b09aa6fa244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c4df1f-e21a-47c6-87a1-e6ff8213b91c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7822df94-0220-42a2-b86d-b99943299814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ee69ebd-4db0-417f-ac24-dcf10efbd600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041da91a-afb5-44ff-9449-7b085f6713c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb7885d7-7fa2-4ce1-96bd-fb829402d384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43840d7-058f-4e18-9d74-8469225b273b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22723744-2208-4217-ab4e-179e8bc18df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d1ce83a-c947-48c2-8e63-8c7f253b94ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e53d07-55d2-40bd-8260-a91591ff47a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "050af2fe-59d2-49e3-9b59-b7331dda2e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4391e5f-1f9b-4acc-9f25-62e4f9caf4af",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9d13e9-5722-41e8-8c20-322b6b72aca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "597a1068-2e9d-4527-b082-a8ed3865840b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5091ad1-79cb-4fc5-82a2-55840dd98eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8af3f0a-8103-4470-8411-4986cf9ff70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5200fca-fd57-4562-9fe6-d168b9171e69",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e6df93-5ec9-480d-82e0-3b27d3b7c3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14a5d28-9dc2-4c6c-9b7d-53d76fe7fb5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af32264d-d359-4622-9380-61e95010ebfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a1a01e-6f9f-48b9-8bed-fd70df027bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a9845e-f411-4d8f-9bbb-0e7165946b2d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4fe20e5-a1b6-4a55-8e32-a39b754f8fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f28f1d-41cd-4b37-87b1-556189dae40c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64859593-d17b-433d-a437-f130ee75c78d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dcb44a8-5e0b-4eca-9a74-1f0ae33a7edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c54fb1-78c7-4cad-9b34-7a04668d70da",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2c940b-3b64-4533-b102-7a3f6cc677da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9649ce2c-3f75-4d36-a87f-f5145d10e7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1e9356-4c21-4f3c-a6c6-3f6dd1367d50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c27e8c2b-d5cf-4ade-8057-3f77deda833f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b3fc75-f682-465f-b935-ec8c41847727",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e5c6416-c1d5-45c2-8d27-ab931936285d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ef5aad-33dd-491b-9835-77b61e262b63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6346ba05-319d-4f50-b296-4d5393aeca9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6637a476-0fd6-4fca-aea2-2b2f774a9a97"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "256f5090-ba9b-406d-866b-0ccd06e9b638",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6293979c-17a9-45c6-8cca-cdef84072792",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb08bd1c-1346-401f-b2b6-7f081def9ddf",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "26bab523-57d7-458b-85e3-3fb93ff3e1a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40acfa3-aafd-422d-9ab8-e062c3f1f784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9107c193-8f01-4eb3-b57d-1e70b521928c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7af6edc-c5b3-4aa5-9b5d-8f85eaa01700",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0338b67-4a0f-4f9d-96bb-f6b55ba6b7f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "43a79925-9ad4-4629-bd7b-940a4bac0958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76b8b18-1b2d-4485-bd4a-b1850765d5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4191ec1-e9d0-4a95-a5d7-615de9a96379"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44f1f516-73ff-45db-83ce-5be4d4f63aa3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "abdf7a10-1666-4a58-b6c3-89b13f3d0e36"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9739bb81-37d5-4b64-93e1-83ad145912f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de4121e7-dc5e-4bbd-9c2a-f6d4c7461923"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3fa49486-c449-4a96-b8fb-d5deb5911217",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ecb0b5e0-71e4-4d58-90e7-0fd9c7707930"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a58bc592-5aa3-4e83-bc92-40102d9e5911",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd4a2562-8bd9-4af0-98cb-debaab4fa7fb"
            }
          }
        ]
      },
      {
        "id": "6bd9d018-84d2-40b0-881a-00c9c78c2603",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "fe76468a-1689-4316-b905-8b97d67701da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "411684d6-87f8-4f91-acf8-b896f61b06d2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ffceeef9-be25-4005-86d3-de9d46353773",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220d3c5c-ec3c-42a1-aa68-b7d1be0f0970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6760ca-b23f-4606-b7b9-0f164b266820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f421d0e4-23d3-4ed0-bc41-4581e71499ae",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "332e837f-fcc9-4df0-a206-e93855f6bd17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc6b7395-131e-4462-bdb3-1253d8ef500a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d535c8e3-f032-4b10-8dd3-16381a341318",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8526271-aea0-4a24-8a82-1e8d24da3bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced99770-e6eb-49ab-a862-7048f5275fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a28f666-1394-4c7c-94a1-738c9a072969",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8b17f7-061f-4e74-ae5a-94727c9e7ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f0b72df-023a-4a53-a15b-67c5a1fddedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06468983-8e01-481f-bdec-09ec86a77707",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c82e14-bf93-4e72-9488-fcc898545bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c78e6dbe-2fdd-4261-9794-3937295d96fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef2d7e6-0bb0-4657-87fe-685a15778c6f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ad9960-f721-4a7b-baed-1c35ce303ab6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88605f35-7fb7-44f1-86df-78ef2a45e158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfe6414-5dd1-4b18-86ec-1db6ada43343",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b70990-8806-45f1-8530-c6523c5d8a85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77682bfc-dd1b-46af-a639-11e6b02a7775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "112d2db2-d55a-40a5-a87a-16d16076fb14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8621b315-affa-4abe-a44a-08419a839bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c016bc3-ba86-482c-9646-cb563b381ff4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92c9201-cca1-4aa9-930b-80d02bef885d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47a83e62-e2e5-4ebd-9531-4a548c777b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e9c53e-47b9-411a-a5c5-5a312137dcd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854cd40e-f324-4e72-9e29-98e698cc7ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951b1f40-6acf-4c97-81ef-9d3d29be15c0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb6c4c3-efbc-4adc-9f24-64de17ded103",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "430dcfaf-9b56-40c3-a60d-3357cbd9eb59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "939a5184-7637-4d75-8896-2f5ffbbba527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "980b3b3d-c27a-44da-9a71-d5c8547a157a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc269f55-da5a-4d4c-9130-78d1ec009f6d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d65b41-34a9-4b03-84c2-0e59a150f4dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "413f1f48-cf0f-44c9-8b10-4a81039d27c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a907bea2-68ce-44da-b51a-ae01a384e995",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea4f0f7-91dd-437d-9252-b97fac3611b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e01a6fe-ccab-4cc5-911b-e9ded77be6c5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002b021b-34d5-4f20-8308-9f4f12e9bcc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be3b717-e8e4-4517-a593-f4a3eff0de85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d80294-4bce-4a6a-bb57-63169e3cecdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99adc8df-2281-4261-bbb4-e6bd22419de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3811dfd-f568-44fe-9d3c-e6b3b54cf217",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee62ee0-a53c-4758-bafc-08a4b8b262f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7915f16-ad63-4a72-9bd6-425ee10cbd4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be90c505-5e1c-4638-9675-e4208b5f3184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ea95f7-f564-4457-bf64-8c55a3da7ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2acd944-7675-485c-a2b2-4cc907658569",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6aad2c5-6597-4565-b306-d6de81f68e4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3af0814-e025-43bd-a2ad-b1e9bace46f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac46e8c-948c-4a0d-9349-ac2f3d92fc1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69326799-fd1d-4709-b304-36e7bebde526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3ec88f-9d6f-4c12-92c9-dcf94eea6a1d",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893f8261-1050-4355-9d9d-0d8ef7c592f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "965b8135-b7f3-425a-a6c6-6721b7e03e6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e48a58-1651-4239-b94d-95fc703223a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "157a70d5-2c58-4cc5-a71e-57af1d21a172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c4e1a5-d198-40b7-8a13-28a5a6c4d2b1",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019fb081-c2d9-4083-9765-e08ddb87ee7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ca54539-1e97-40c0-8ab8-1d01712e54b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f75642-eb52-4c62-9f9b-236c8d3cf90a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bceab0e5-fcdf-46fd-9d83-ca743b293a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287f4758-0e84-4631-892e-98b9c9a10a37",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d8b583-229e-4798-a96d-18a691cbe2ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be4d93ec-1160-4287-8ad1-33f7bd4e9ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcf06f7-9dc2-4a8d-85df-f5b6a2434456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fafb733-dfe7-4634-bcc7-8b63e1d04a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb0f515-e138-4258-ab5f-37b3d4ca0142",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea221293-13c7-4f0c-a3d7-bd23a6ceedf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7fedaeb-58ce-4b0b-805c-11c03b8cfac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db70660c-57a3-40cf-b587-8951ac3cd13a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c91a2817-1fe2-4a2b-ba79-5d01f2508559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3d3227-6141-48c2-82aa-16aa02da9d93",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974599ac-0f7a-483e-8c06-23dc1fe6d7d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c2f08fc-5879-46ca-b7d9-d23fd6bbdfd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ebbfb0-48b7-416f-95fb-ea74076cdf7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57df3170-1b26-49a1-ab40-fae5f4c946a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b773dc-7c09-4158-9193-b15b55a6cf2f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f16edf-7226-42f4-a084-212c190a0c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e691b79-af7e-4c08-8302-d2bca7c15014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa7aa8b4-b391-4894-9538-0069fe24161e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130942b1-6603-4803-a861-da72fdb97c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6beba67-f1ab-4efa-b721-baac7e3e0999",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1494bb8a-ea6a-467c-8dd3-c47ba5ba9975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c75b9fbf-52b4-4015-8996-6a2dfe1c7b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41164596-51b4-40d0-bb35-07071d49319e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff5eac15-9fed-4506-bb12-fe7bcffbd3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326d2141-1250-4aca-92ed-d160105d8489",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8950ce14-4ff6-48bb-97ea-063ee1e390d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9ab677-4b8b-4154-ad5b-24e231605af3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a306a8-6880-457d-83fc-30ffc53fa044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32394e2e-386a-442c-b0be-4bf59a7b0467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd1f467-eb73-4a5a-aa68-0bd1194da2c0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84131675-9dad-4f24-b93d-c026ca05ac56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad9af511-e1ca-4be0-98c3-06c6626e7a0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12787f8-6b7b-4301-91a4-114cbbe0d0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73dc0ba1-f0b9-4e71-8dda-2dc146234bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f3d7e7-ef7c-4f53-a44f-85763394b5c9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35caa69c-2c20-45f8-89c6-c6e70175c41a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a5d0eb6-a0b4-4f53-bbb4-7dce5c36e79e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c8738c-60c0-4955-bb84-ff0121d65087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc3bf088-d710-44f4-94a7-0a501204174f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd50294a-18a0-446b-ab77-bbf0d80fae5a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b308bfa5-c2f9-4aec-8e0a-5e3109ef2fd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8028a5ea-3d4e-4474-ac13-587e85e988b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8df9b9a-ad47-40de-911e-91a24edff7f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91f53c2e-3237-4060-bfa7-4cba1932745b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8fcb244-4c91-470d-ac35-538c15f48834",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4232759d-e6b0-49e9-8eff-bb4e59fb3420",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f9f7804-c190-4965-8bb9-d5cef691598b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdaaa47b-020b-4232-bfb6-7b56f13fb3dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a002e7-8b09-4c62-8326-4e38228b117a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6db03e3-5a63-404c-b3f8-e5a52eefb32d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319a9abf-dd7f-4c60-9a0e-21d7c05ffff7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01af46b7-9971-4979-b132-9fe036ad1b1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e60f4db-1bde-4333-bac0-0161581b8317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4debab0-324f-4b64-9f7b-877bd3c404e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebeff5ae-6e82-42dc-a470-79a41b72fb81",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4c1f7a-56ab-44c8-8274-78307985c84d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9c10cf4-ae4d-4fe7-bb21-02314a54b15c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd641d69-e18c-4409-88ad-cdf40a822615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b151ab45-17ed-4053-8f34-4709f8df370f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9b88b5-f6b7-4d4e-b006-8ce564b49bdf",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287994da-c888-4716-88cc-586e0f473212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fe5ffea-4259-40df-86be-334a68e16e47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93951e97-4848-46d0-8112-4eefa52fb3dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ac0327a-f575-4c09-8c98-8f036c0a2c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37246aa1-c708-4a50-bdab-1913aaef4b2c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38bea03-131e-4a7d-97d0-35a930d1f157",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c88b4a5b-56c9-4725-88c8-00c6d366f7f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edcfdaa-8b4b-4eb5-9c22-597df9b89e6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67de729-495f-4797-b82c-5aa84e79f2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f085dca1-6cd3-4c2c-9353-64e8a2a13c7d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981bf80d-3a6f-4ad8-a190-337e76e73144",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb5924fb-87e6-471f-a08e-618bf285153c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3577b6-e292-4a39-8336-cf9bb0de2eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74e6ead6-adb2-4c7b-817e-b3b532bcd195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29eeeb80-1d3e-4718-a3bc-62fd6e48fcc6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fda2a7-4435-42ea-9ecf-a00bf0a85d6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1b40f6f-11bd-41b4-a7d0-1407876cf72b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "179d5a79-4918-4c5b-929b-775bcb5a98e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c0855c5-011d-4a4b-9636-7673a05cb2ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9393072d-ce92-48c1-97a2-30ec1080f5bd",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d198870-80ee-477f-b0c7-7e45f9591519",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93b914ee-a81e-4b5a-a2a7-ef75e0556a70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62ec56d-f276-472c-925a-72e8087f198b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a613636-fe3f-40d8-b137-251610d7b4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e63f7657-afb4-4552-9fe6-05814d77cc5c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59064fc1-c268-4f84-a87d-062743dc1834",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9d20f49-fb7c-4d05-9780-0240a79c092a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc40542a-dc00-48bb-a3f3-061498c74c58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4939a1e0-3e90-4829-a76c-bbc0b47e5958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef55cfd3-5b45-4dc8-844b-338f3a1e7899",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9979b455-18e6-4b3c-88b2-24ce26c2b641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b5c74a1-38f2-428b-94c6-927b38f23881"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d738f405-394c-4ca5-a91e-ff8da4fa98cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7f72a7a-b037-4380-986d-828b1f3a66aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61c58a2-19bc-4097-8914-5498c01efe03",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ec3cc2e-7684-4e54-8248-b619361c2c8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da466d3-7678-4523-86cd-cd786da92ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "060a37d3-3b4c-4719-a05e-12665efab898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4021ef5-c452-46f6-a123-05d7ef3f6d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c9967ff-04b5-4c9f-9330-64d5a2b26aa2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b9e151-fea8-44a8-834b-a80dd70f16a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ba320b-5b95-4994-9b29-feb39c49d34c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49726ba4-8838-49d7-854b-d5f9741e4f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "201e270a-b1d1-4caf-bca6-02d37ed11ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98dbd7fd-8830-43f8-8dc9-cab26e74ddb7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee4a713-6bc3-444d-a57b-037f2ec099ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04356d1f-57c6-4f9e-b355-4597f4249d09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d2faa5-b6a5-48e9-996c-381008951c42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f47e49-cf2d-41b1-8c96-6faaf2417297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e5ed61-5e93-477d-af59-33476ac2f457",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48274374-0d55-4e7c-84bf-363f3d457010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094b644c-74cf-4314-8830-2be159fc177f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a44d2386-6e8c-4fe2-bc73-3a3e5b3bc461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ab32cc-1e03-427c-a842-14279abf9347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5f4c8c-007f-41df-b1b7-3b92701acb91",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923c9f7e-ae3c-4c7b-863a-967690145e51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e879a983-3abc-4588-83ad-4462b7fc15c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "222667b2-db4a-41fc-8115-67b0b4c432ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b3f166-c076-44c5-b999-a079952325e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ba45ed-89cb-4aeb-83f6-3428d786acdb",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ccb8045-782a-44c7-a6f9-9a46822e376e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9bd85cb-daae-4a00-ae4d-6551be103d20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8623611-616d-42c2-bb63-c475b943290a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a893b8bf-8efb-4b00-b491-47c190c92d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d056d76-0189-4b0a-8d68-78d6004a3bb6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3299b2-9473-4e67-af0f-277ec68d3607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b89181ee-b45b-4a47-882a-e70dc9a3bf01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f664786a-e48d-472e-a508-7c4e8283bdd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dbd1960-6245-460c-8caa-b9153cf3a883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97136f45-f4d3-40fd-93d8-afce73fba1b6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c322340-a11a-434d-bc77-de457669b379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a12a3e-a381-4708-852b-90e25e440877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb4e18e-1be4-432e-90b8-df4794490525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe1bac1-58fa-4418-9ff9-21a16d76c416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66422dab-90b5-43ca-aaad-49eb7058ba85",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02590f3d-9bab-4f53-9cc2-1eab27b4d081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced92404-b2ac-4bdb-864c-65131073d5da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2149692f-d41e-4a00-a08c-98dcce06194c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f5f1b8-8f91-401f-8524-43ae4c366ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fd931e-3937-4d86-94b4-a7bc64e62864",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a863ea3a-46f4-40fb-b6b6-8b605aa8ed13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8038e5-03f8-4dd3-8efc-4336c90b1cb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a5f051-db93-4593-90da-f19ed734102e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d963c539-a4c2-49c5-a973-f737d139b357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec598c1-f759-46ee-b1e9-1fd972354854",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b9f7f7-22dd-4e60-8f00-a9fb0cc1ee48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09efd268-3881-4edd-a7ae-1ef7b10277c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfa0059-3ccf-45e2-b1a7-76297707a461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607ae912-438b-4c79-b97d-61aadb87bbcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff5fed0-f6cb-4525-9916-79db2618b083",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c9b849-6584-4ead-9c61-e3d12677b372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b912016c-5ee8-480c-8555-4ff8ebe2f49d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "893f4ef7-5803-4dc5-b62c-5659098c89f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5c51ee-39c9-4d20-b1ae-726ba85b5d25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2ad23c-f080-406c-a03d-c10ef2ed2ae4",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5eb223a-5c9b-4c46-b036-06c607ca97e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7025c188-7569-485f-8d6c-3eb9ecbb49ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdaaea3a-b052-4f1c-bc36-7e897ae59ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "120d8c35-f7b8-4c22-906b-3098787fba1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c5c815-2659-480c-8ba5-b7628224a77e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62690c65-c518-4108-9807-d4ad98b514cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e6f7c5b-d708-4d72-8d2a-f37a108d36f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e90a23-24ab-4d1a-8674-26055289214e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05446b2f-fe40-49b1-9826-2ddae385d749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3252a210-6925-450e-be3e-dc8db15f4c36",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a091ef31-27f1-43f0-8e98-de3ae3e17359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a787e5c-8b3e-4583-bc5a-016caf1e50b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6bcccd-e187-4a11-b290-aea3e1696eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f523ea-60b1-4160-8dbe-5bf5f4a287e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea938929-a516-4529-9712-954b008db1ea",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449aefcf-d1f7-4013-b0ac-418df615c248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67cffdc4-b443-4afb-ad1c-c08f2f7d048d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8adbce5-ea64-466f-9406-1630bba121a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b865c7d2-e1eb-41f5-9e39-7caa9519bd20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ff40728-3d97-4f02-8e34-813dd573e068",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70fd3aed-78e4-466b-9550-d702de8c8b32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b293ea2c-34aa-4db5-b79e-fd60ac704f7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "508d731c-a6ff-4c02-a503-54a59d6a8617",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e147ace-ad78-4990-837a-0a707e459c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d0b192-7ea7-463a-92f6-be2ad8f4a9d2",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754bd9fb-4192-40b2-b739-cef52518ca01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7464e7f-0469-4f91-94ef-b29365302966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3cdbd5-7ebe-4c07-b49c-acb3533954ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3f39f05-45b9-4b2c-bd82-be86b78f905a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56faf6bc-18d1-4206-a686-4971f7717356",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4497c80f-3d49-4348-ae08-186b005d7249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed970c71-5ba7-4bd0-81df-98570831b816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1848a4e-cd80-49fd-beb2-c4c33ac337f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a45c8d71-aab8-4350-bf4b-1516346d04b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2c8fea-12be-4a4a-a70f-36fdfb433593",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565693ca-d734-4c76-af32-e5c856ec3e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "410785cb-43ca-4475-a1e3-f1e3efb74f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0025499d-ddd7-4067-970d-d975e0b5b914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15117239-720f-4049-b6ef-f93e2bc4bd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bab32b9-a425-427b-9c21-7aaa2d9bb2a2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7e9ac4-b52f-473f-bdaf-7e7e23368d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e484474-b17e-48c5-be66-6d84f5acadab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceaf0c8b-34fa-4bb7-aa51-8393f0c7b497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63dbac21-3e8a-4a56-948f-1f326bd6d4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb90178-7662-4c93-88d1-059dc8a77733",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bba4c07-4d05-46a5-b897-4ecbab7b99a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430aeed1-09f4-4079-88a8-df3fe025ee0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87627a22-55d7-47d5-beec-84f51420fb22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70714d4e-5289-4874-bb13-ce8d9ef9b943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438d23e4-a2a4-4c0f-9a4b-2f7d206df30c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78865f62-9a9a-4255-899a-9a69928e1749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baeea8d0-8d32-4957-9a9b-84cd12bd770d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1966b071-3236-4e12-b493-86bbbf4a8c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a316107-08ab-4311-9c7d-472c91af72ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ad2457-8f99-46fc-b13b-acd201f628d8",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714f1296-3d73-4e8b-aaa4-3fafa085e758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac4fac0-f1ca-4872-adaa-9ad2f6c072b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74bb00f-b5bc-4d6a-819c-052597d0d250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d950399-9b86-4568-ae15-03c86c37393c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aebc4810-5b2e-4c98-a2f8-12d0118bfed3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a88134-7660-4979-b8ac-6c4a3b3e0d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "525efc1b-65c0-4673-ad5a-3244aa6fb4a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "900e9553-bd35-4eab-80d1-dc7b17626970",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bcb8a94-098e-402f-af71-03a27078c4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed5078ba-f4ac-41a7-8e81-95aa1154b2d3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28ca02ec-541c-46b2-9ada-c730ecbbbcd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab1a73ac-54f3-4524-9097-66b9c154122e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb16f626-14a0-41cb-8740-54bff04d3174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5756e1f0-cfc5-469f-9ffb-ba306f36172e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4da01e-7ba4-4b94-9731-cdfc5a97b9de",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42951de3-b530-4962-b113-ef8b5a4e950b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31492799-f9ed-438e-874b-772e7744bd1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "794783f0-9d54-4a5e-9b80-e06d17df153d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ac26750-bff4-44cc-a131-499bdb661ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba97945-4187-4040-a1b6-10aa783c87a9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc0a962e-288e-4c65-a7a4-1ed8c0645174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b7996c0-a2f1-4359-98dc-b5ee9101ef69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b9dd972-ec3f-4936-b33a-e861a15971a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79883809-aa07-4331-9294-36222f3bf574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48789ce-0d71-42ab-86e6-c657e0be1aee",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d12ac0-07a8-4c3c-8e30-a9f9ba300944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad878f72-535f-474e-8495-7f8ed9d9ff34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30cb0472-9114-4f19-a02d-d8bb79fe8959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeac9287-9846-45a3-b2fc-74e12ee6a970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af0a037-e0d3-401d-b9e5-197c6b93e312",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4651af-a357-43f1-89fa-97c088d3d452",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f79ad0c-ac5c-45ec-9cff-3b9ce82fc8ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c55769f-f41d-4e30-9b35-7ad30b48495f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c58925e2-93fb-43b8-a3a0-ae9b1101592d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e4ccd5-0876-450b-989b-a056a5c252db",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088eecfd-1ed1-4f1b-9351-18520713e386",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d493c0cf-2c2a-4056-aea9-0fff4472b5cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "589081bb-f55a-48cc-b172-84276d345c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0701e1e2-1047-453a-9a1c-af908b3dd462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34fa30c5-3388-4da8-a3cc-7cb0cdcb358d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b454b14-4450-4346-8168-a97754236623",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb10b4b5-a378-4317-8860-b57322972a70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b5efee-f843-47ad-8d0e-638040772cab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f384a9e0-2caa-45de-8e10-13243ded9158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f001323d-6873-4090-b5ea-9baa6d39f938",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9c846f-6a84-4b7a-b3ae-56face33551b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9584975e-4bd4-49de-ac17-e56da4fb31e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a5838a-0df4-4a7e-bc55-3e30aa8d5e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eea8fe3-ddf1-43aa-a2db-3d3590165bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ec7152-fc2c-49d5-a23b-22e51c07c937",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48179bbd-43bb-4fa6-af9c-49333d15f6b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7df5448e-0ddb-4894-8637-6fdee4f327d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e3b419-d915-4a6a-a28c-1a6faf6521f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff562cc-9a98-40f7-84af-bf4fb01872a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22991204-5e2d-482b-9825-d44bb30c0a5a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e829de-c981-4e17-a2fa-820daa4c8f9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d39d8cf-3b1e-43de-a6da-eece095935c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41529c9-a169-4cf1-b155-2ad2d159a226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10d4212f-60a7-4ad1-8fbe-8c7d8c3e3159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1dc54b9-7dfc-4b2b-8c38-129b4f02a484",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6fdda9f-4c0c-4201-b438-df2bc6a105c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "645d0f29-5c5f-48b5-8da2-6e4fc0c8b187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e665a4-5c31-484e-ab13-35dbab7cc92f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac2df278-da66-44f9-959d-b954d80f1676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ac288f-7a64-4304-82ba-724ac4efb59d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "686610e4-eea9-469c-b083-822b8e390fbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e92a8e82-3e90-4c07-8408-ab6b5c56a29d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b106cb-831c-47d5-9ff4-acae48a0c1eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9ace3b5-c153-40bc-bcc2-7e2533b65764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8fc9e0e-5f6d-4238-9e34-3679d3802079",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac06bb56-002a-4756-8761-948f82e2ee6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a159291-9fbf-409e-93e9-d16263e5bdc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5b24c3-89d7-41bf-bf28-74ee65f30598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc9dbde3-2db5-41b7-b7c9-79a88f8aa2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84789a86-e34d-42a2-ab3d-fe6f1f304eef",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5993edb1-85e7-4e51-9a2b-ec2a08f49a42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0afac273-3091-4145-bb1b-be8b6150e86b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90fa0c6e-7faf-4702-aca4-cdec73ce843a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd15166c-14d5-4d16-9b28-eaf241f22705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2e12c8-a22f-464e-879f-af15fbd9da46",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cf4d61-96f1-4b7a-b70d-417b50c717bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb7c161a-53ac-4563-ac70-0d7a2a33aaaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7cb908-f749-46e9-903e-f04d39e519d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de0e266e-c0f1-4aa2-93b6-66b7a7a3626c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c44b870-6e73-4f98-b914-ccd2f955868d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c1230e-1aa7-40a7-8a4b-94a90cb8bcf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e794fafc-50c3-4872-8e06-4f0249c46ccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5f2cb2-2de2-4784-b7d3-c344f3a00f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18053bfb-d4e0-4d3a-8ba0-9a432b675d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbfe046-ca87-49e1-8eae-e516c994e56d",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf2ffa5-11e5-4fce-8ba9-32ee34a45fec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b163ac08-8d84-4031-9166-1a624a1fda6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5d2e42-8efa-4633-92ad-3bc12290c823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b75689-0aad-4954-b23b-7929ec126e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c27d2525-a0aa-47e6-a0f5-f097680da235",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf4ac3f-4002-44d3-9ca9-d5b68ab62dd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4e3f27a-64b3-4c1e-a3ae-bfc79aab779e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "701bde73-c0b3-4c08-936a-7e1e2996d611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b34e3503-a909-40b4-9f3c-af6cf198654f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd452e3-0310-40a9-bad7-ff5fc4d9d426",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7824c5f3-62b6-468c-bb84-7c4841dda136",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6aca585-6656-4e6a-9b1c-65794581d258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb5fd65-3b4e-407f-ad04-7b86b7d48dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54b2016c-c717-45ad-a5fa-02f15e09c151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc0a6e5-82d2-463f-bd1a-9058c70a26a1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c14dc40-ccb5-476b-a529-5243aeaa7df1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83f7734e-5ecf-4d10-a225-da1008d75c9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e22d7de-9277-4b83-a51c-6a9354e8aab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28c32d4-287f-47a8-9d24-80a854e7886a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51244093-a9bf-4291-bbea-843f335b6200",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a383e91b-c6e6-4f6b-b684-b0741aee6869",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f6fa9ab-a337-4076-8dc3-484c3a35844a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "407db582-b095-4fe9-8e96-dcd4c9afc640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35fde18d-57bf-4ddc-8b34-6d8711ae468e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7fe977-ef5f-4706-a3a2-817c7ff2dbdd",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df7d865f-0569-4e87-9755-bbaa7a38f043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2837e118-ba36-4486-9310-e77572e7681b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d643bc24-35d0-40b0-b83c-b4f4168faf9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c21f70-3a81-457d-9a9c-f0907e7f8ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8feee4-28ad-4cd1-9a53-140e7a0125fb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4509957a-b505-43e2-9a20-e3fed0582993",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0e15ede-723b-44e6-9cb7-f6363f7bc52c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1138e63b-1649-4173-81fa-19141d3529f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f991ba53-0d59-44cc-b70a-d3268ffb761f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6af430-da6d-4fc5-9d14-b5952cc6ad91",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c1fe3f-2e11-4591-abfb-35ab947172f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "374b37c1-151c-4329-87d0-a51247a36cff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f697296-2c6f-4f99-a59d-6015b971d76f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b80491f8-f2f6-4a8c-88ea-a664d74246be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2069617f-ba63-4430-8bda-40bfc046c896",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ac4be6-607c-4aac-808f-1d85a11818eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2de5d594-5b9c-4d70-86c9-53538c2bf92f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3421b41a-6c7d-47d8-b1b9-fe73ce94b00d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6813b15a-f4c2-4eb5-8634-f72f20fdcee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6686333e-75d1-4aa1-8d59-d0f2c38e07b1",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8286d1-6aff-431c-a82f-2d846afbea07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2933ef2-3cef-44a5-9af6-361d2312626c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36058b9e-62fa-4a59-9622-b1a979faac6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4aec8b0-5ddf-4747-8bbc-e49ec103df8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b03741-fb46-4baf-835b-8eb2de31e419",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e382dd82-0798-4cb6-a853-80cda84f00f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10f1f5b4-1eb5-42e2-9820-4f794e2c09f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95fb9bcc-2a78-4779-ae7b-34bd8685f787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7677af95-0eb6-4434-beb1-bfa27300c91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112c36f1-cd0a-4de0-816e-6b0e165d18dd",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e9cbc8-bb4a-4e00-af03-a03d9fb40ef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bbffc9f-e6a2-4e07-aeef-3a1ac1b31c44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa978d6-c362-4c95-b234-7dce02ea9747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ff6c55-3cf4-44c0-9997-0eccdfb43773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5e56fc-6aaa-4ee7-90dd-4c17761a2d49",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17f22022-2427-45df-9186-6f85510c0952",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5aba217-2496-45cb-9dab-bb5b43d9ea2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d15505-f52d-42f8-80c4-331dadf67777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f563143-81d9-41d3-8ad6-0a4ca732b357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567543f3-1eae-482c-b92c-08f317b93b57",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af603d2f-e37a-4d20-b9ea-5a28951da9e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d19e179-3c55-4949-8432-2cb15c66be9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e12399-26e0-488a-92ad-7396358447aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d60dfb-1b57-4d28-bb14-fcd0aa24ec6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582a6cf0-9c52-48b4-ad82-6f0d8c706121",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fea762-f6b4-4b1f-80f3-b36995114bae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ca1916c-3c06-4493-8607-9e434c82da5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "104e9161-96b0-4c30-93cf-2e1276b8eb50",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b38387-10d0-4aff-a2dc-2c4bded5f9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5743ccc7-1884-4ab2-aaa2-b1f3e0fbc0c0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ec3ddf-fcc5-4450-92f7-d8a0ed4cd853",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a63be405-1dc9-47ea-afdb-0a6afd8c7b7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83984409-c5a5-45d5-afea-8de3b754b17b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79205487-2886-4989-9df3-ed7cb3d8d974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef26900e-20b5-41b0-9e08-3180e7351cc2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97716287-40ce-4174-9483-b9a0c943bc29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a86f324-8840-45a5-8eb5-664c0c24eee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a57078b-2727-46c6-8dc2-8e09a9166b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58047a37-ddbc-4961-82cf-cf82bbbaf75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e608aa5e-787b-421c-a0ee-ad2b2efacf21",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e389e127-00f7-4655-ada5-bbc131a74815",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83a61460-379b-4d5e-acd3-343ebab3bfc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baceef0c-4065-4263-96ff-d7bd061c2de4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "183395d6-c4df-4d87-9f3f-a0cb38da1d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec54e93-32da-4c57-aea0-41d139cddb98",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54953ae5-7a86-48de-8b21-42d770e7079d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3848cefc-c473-49e6-9c4c-5488d406b7f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deffb97d-38a2-45f4-b3b8-ae410cc0eb81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53367271-f799-4f37-860b-ad19f3a0a584"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803fc2fc-b995-4a13-a5c2-0678263349bc",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e637e892-4712-4bc2-bf92-818654f17602",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65a58add-fc8c-4577-9e0a-5b54e8e37fb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c2e6f9-dcff-4a7e-a8c7-98b9afb9cead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ff674a-51d2-4263-98c4-d75a7b95226d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37fefdf-cedb-41de-928e-3b76568e188a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805c9d74-0e4f-421c-8201-80404d721996",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b5803e8-1e1e-4f16-836e-988be09f70c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5602763-3490-4770-9197-9e239718b667",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c91963-f736-4cec-92d3-ad33098e404f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc8e2bb-35b0-4b9a-b336-d2a216f62f67",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb10d140-e311-4a20-b546-2e466c0d4fc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fcce124-3bf3-454e-91bd-10b9da1a3dbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82477999-988a-4f3d-8732-6d2ccceea3b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4483a7da-3ea1-401b-b918-96cd11a64612"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3376f455-f603-4ede-a774-76af0bc630c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "331d8c98-f4af-40de-89d9-d0cee2197dfc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae706d52-485e-45a4-9346-4d7eb4884d0d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e79fb9e-ad2a-49e8-b4d1-34b412a33cc1"
                    }
                  }
                ]
              },
              {
                "id": "d8df8cdd-2bb4-4dea-8826-2a5f7bee0082",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "42dd2481-0912-4ea9-88f2-95a3fd12c1b5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c477f66-3fc5-4b13-9012-bb2b3192b009",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "490b45b8-b4d9-4ab0-897d-f4ad3dd0d89d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82a8661-9f42-4f19-94a9-34963a152332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "61ea0710-e2a7-4601-af7c-06c01aef8066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7663704e-4905-41b8-aaff-21c304f768f3",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38bf3300-be6b-45a3-a5b3-963120336a91",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "139c4a92-0a06-46b4-b0ed-fd22009aa8cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfdda02-29c2-45d7-ac2b-393200b9cb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c54e0c9-3c7d-4171-a175-fc3250758ab0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8af24b38-e287-4224-8b2f-fea493d58bd3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79e2c01a-2664-440b-ad38-ede5782f072c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "be2cfcdf-71ad-42a4-9626-e0689deb866b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21c12fe3-3702-4858-9b40-48fd9368c072"
                    }
                  }
                ]
              },
              {
                "id": "ee0e62e9-0446-4852-8b4c-84bc7dd433db",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "75948788-5f2a-4d14-bdbb-0a83d7765a46",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "babe5ef0-2cc0-4dd3-852c-e4aa8328296d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "88169f48-e317-4705-ac5a-1d0adbb9bc4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6006b499-3c34-42cb-86d2-4e0beb81e4c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d648cf8-e6d3-44f4-bd31-15297b4295b4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d2b55785-22f9-4cdc-9ce8-f3cabc063da4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "70985ea2-01a9-4763-b494-9a01209442d1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84e5f37c-c171-4300-ac44-f64877751bfd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dd26943b-5365-4724-b394-1e99f5f34669"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a828cf52-fa6c-418b-9a89-3916f7769f89",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "712c82c9-c276-4f19-968d-463ad6ff179a"
                    }
                  }
                ]
              },
              {
                "id": "c9e6d938-68cb-4ecd-931d-51ebdb983373",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2319bf4d-0590-4096-a031-9dd325fa016e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "112659f6-9bc8-452a-8e04-b1a953247444"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "516ef494-9e87-49bd-82a6-54c04a4e473a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "73d70de1-a9db-461f-8819-77f98b17b0b3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a498f4e-fcad-472b-9aec-3a31e88fcf55",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "45c22413-fd8c-4196-90c3-c66a422e1d6c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a017550-7e42-4940-a695-84c2fdf0b825",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9ab1023a-1e83-4b7d-a0fa-bfebb8b700e2"
            }
          }
        ]
      },
      {
        "id": "6007cde1-661a-4384-a8b4-20983727f8fd",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7a0b13bc-7cf9-485c-af99-a30cf6f36eaf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7d899b9-f17a-4cba-83d2-345f11d7de8e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cc973c6e-a23b-49ee-8b72-1695de420b5f",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c0416e-c7c7-45b5-8181-cc0c77f33df9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "224ce4e7-7d4f-408e-8bd0-e36922a7f7be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93632630-d536-4c84-854c-9e6e62f86735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da5dcd70-80c7-4c4d-be0a-fcb3610ceb84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25fd0df-93ab-4bb9-8566-af17d437d212",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e069ab79-fb8d-4c54-8132-f9c097e00067",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cd204c7a-bca1-416b-840f-e51d2e161522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c834e4b-6bb4-4137-b4b5-c5e76847afc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "464c5483-70cc-4337-818b-f98073703f6c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa68c3d4-0159-4e93-bc13-b4e53f0cbd0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20a14dfd-5d8c-4c4c-9860-2dff65f8d021"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "59311c06-7a70-4938-95f3-d3d8969c1c2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2907569-3dba-4f13-8d29-5cf1a5f1bffe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8159ba5-4e1b-47b7-a2b5-947632116150",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8493e5e6-e931-4549-a602-829249da301c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7edf390-ca07-4be1-a89f-1381f5b2be4f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a07c157-c705-43cf-a5d9-ed08594fc961"
            }
          }
        ]
      },
      {
        "id": "8bd6227a-fd17-49a5-8bcf-28cc0ddd5b9c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "35b0a2b0-7d74-42db-a4af-ba71f303d456",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f928a1df-41ce-4c0c-9b89-f56a46785047",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3429ff66-26e5-4427-972e-56bde459181e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93e87e6-832e-4abf-ac40-1dca8490148b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4ba96f8-fead-4c2a-aab9-dd3d1be87b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a3c0875-130d-4eab-9b43-a895753aa511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4519b55-7984-4d37-94eb-b814883eb44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7870d5d4-9195-40c0-9254-2bf6d3e62b51",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff20402-5181-45df-8817-c815abd12fe0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "549f7c2c-f995-4d48-a2e0-890af10be3f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b01ce21-b054-4037-97ff-f86af739b1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93cbb79d-1988-43d3-b7d8-9d46501941a2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62f162e2-06d1-4051-8c02-9ce1699bf6bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df9152d8-92a4-4c3f-a555-0cf3bd613852"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6160fb62-e704-4ed0-ad42-9473b09bbb20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b49cccf-0a46-448e-acbe-961f05470b53"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62be1368-b043-4296-83f8-c111330403ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9a9d26df-31e8-4788-9bdb-c8e452d1451b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34f8d267-166c-4375-beb5-b5ae0fa96a23",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d34f0b61-14ac-46ef-b5df-8fc9f6ffe202"
            }
          }
        ]
      },
      {
        "id": "7c766191-642e-4e14-8776-073481e72530",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fe3efce9-6bc8-44b4-a5a9-6f60f588f745",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d2d7ca83-ebd1-49fb-bd1f-a8b6295a2794",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "204c7c9b-b90f-4d73-8552-c232278ee230",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228925cb-0f0b-4928-ae6e-80eda8f9d12f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "077ce0d7-de59-4b6d-a297-06c2ae50d1a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87543082-7f27-42f9-98b8-6f9d2c369612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60a76879-8cc6-4e2c-b9c3-9ba9303d845a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbaa6be-abd7-491c-92e0-a847d2ea4951",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d3b807-1f81-4511-8375-4f9a84327757",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "189cc218-3884-4289-b38a-878dc6412c2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d98bc5-1189-45fb-a644-013fda02c0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84378d4b-0f11-4e7c-a91d-f3b57fcdc9f2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac049a22-1a42-4d93-a51c-ab0088fe6e3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90d26ccf-540d-4b60-9981-9aa3831af38d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "422a15ee-7546-4ccc-835a-93aad6670681",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9f62863-fd86-4d64-877e-7c2a7a189367"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "daa3773e-24f8-40ac-ae6a-51e1eb3a4ff0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0bc002c9-39f0-4b8b-a379-c35303c98c28"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4bb1bcf8-9a1a-4fd9-a573-d0d0177922dd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5e109937-77f2-41e4-be8e-95e91fdac80c"
            }
          }
        ]
      },
      {
        "id": "75cbbc9c-69e7-401e-8231-3f37f803b48f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24ab5196-46e3-4832-b7a1-94c502c694f5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4fffe3cf-b857-470c-bfc8-ecda314b9502",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "340b2eef-b65d-4673-bd04-cf10e21c8f4d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d32d69b-2dbc-40a2-b589-12f2b6aee67a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "478de997-d1d6-4278-87d9-e7d85a5faf51",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 401,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 469
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 111.84352468589672,
      "responseMin": 6,
      "responseMax": 4653,
      "responseSd": 560.3955823268949,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1678668014988,
      "completed": 1678668069542
    },
    "executions": [
      {
        "id": "ba091820-f23b-41af-8760-12c61d96399f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "19886a9d-814c-42a6-8686-a65422219ea2",
          "httpRequestId": "6566badb-dcb2-40c7-ae08-30fcded0b5e7"
        },
        "item": {
          "id": "ba091820-f23b-41af-8760-12c61d96399f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "d21d1265-7f9a-4b4e-af6c-f1e2f892e1d0",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "a467e537-6f35-434b-b99f-0cd679be96d6",
        "cursor": {
          "ref": "9e67cd8f-9bc4-4f3e-8ee8-231cb2057bc3",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "78f3c41c-e1e4-4122-b26b-16c089ce351e"
        },
        "item": {
          "id": "a467e537-6f35-434b-b99f-0cd679be96d6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "f06d29ec-2002-4b22-886c-cb57e587fc0b",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "4a80c06d-0343-4401-8d78-4ea7b72e1e4b",
        "cursor": {
          "ref": "ab7fc35e-10e2-43d0-a5f0-17f1c5eecd67",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5371d129-67f0-4265-a895-c13b42909e85"
        },
        "item": {
          "id": "4a80c06d-0343-4401-8d78-4ea7b72e1e4b",
          "name": "did_json"
        },
        "response": {
          "id": "b79bb3b0-d404-466d-beae-5e742af57df0",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d21517-c108-4d4f-95fc-30ace754b3f9",
        "cursor": {
          "ref": "12aa6f5d-9f2e-48d2-bf81-a764b22f99b6",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e3ed2473-deb0-483e-ab64-e87a9fdc964d"
        },
        "item": {
          "id": "79d21517-c108-4d4f-95fc-30ace754b3f9",
          "name": "did:invalid"
        },
        "response": {
          "id": "5878ff48-d330-419b-b7b6-ee9a49e4a9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d21517-c108-4d4f-95fc-30ace754b3f9",
        "cursor": {
          "ref": "12aa6f5d-9f2e-48d2-bf81-a764b22f99b6",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e3ed2473-deb0-483e-ab64-e87a9fdc964d"
        },
        "item": {
          "id": "79d21517-c108-4d4f-95fc-30ace754b3f9",
          "name": "did:invalid"
        },
        "response": {
          "id": "5878ff48-d330-419b-b7b6-ee9a49e4a9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb97367-fa0d-4eb7-a2da-4e030d39a4a7",
        "cursor": {
          "ref": "f231084f-47c3-4e97-9156-51e56385f559",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a187d75e-d03e-41cf-93b6-c82f8f9657b4"
        },
        "item": {
          "id": "4cb97367-fa0d-4eb7-a2da-4e030d39a4a7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d992adc4-9d21-4285-a1e5-b3f112becacd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 286,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97141af6-1682-46b0-a103-487a3f8bbaac",
        "cursor": {
          "ref": "04b89f52-c301-4925-8043-c501ff9d0d4f",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "29e8f325-5a04-49a7-81ee-575a60958ed5"
        },
        "item": {
          "id": "97141af6-1682-46b0-a103-487a3f8bbaac",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8812c355-f553-4996-8bc9-e0ea54fd9e52",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fff123f-1120-4edb-9396-2bf53d5eb4bf",
        "cursor": {
          "ref": "36c9c2c5-de7e-47fd-89dd-29790d1df36a",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "073f7d00-a42a-418b-a146-1d8bfc0c0e3e"
        },
        "item": {
          "id": "7fff123f-1120-4edb-9396-2bf53d5eb4bf",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f2b01ef0-d24b-43e5-88ed-485ba775457f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953923cb-b86e-4803-86de-49d1831e187e",
        "cursor": {
          "ref": "34d03da3-171a-4f29-a06f-1c6b64f2b8f4",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7c7b13be-5844-4541-9ec6-0140abadb3ef"
        },
        "item": {
          "id": "953923cb-b86e-4803-86de-49d1831e187e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3d3db3ca-4080-44e7-8c40-66bd979cfd51",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "953923cb-b86e-4803-86de-49d1831e187e",
        "cursor": {
          "ref": "34d03da3-171a-4f29-a06f-1c6b64f2b8f4",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7c7b13be-5844-4541-9ec6-0140abadb3ef"
        },
        "item": {
          "id": "953923cb-b86e-4803-86de-49d1831e187e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "3d3db3ca-4080-44e7-8c40-66bd979cfd51",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "cfc3ec75-922d-42a6-9eb0-996fb3681f89",
        "cursor": {
          "ref": "e675a40f-e07c-4c10-a3d6-805222afd131",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9a1af527-1d09-4631-afdf-f7a1986ba72d"
        },
        "item": {
          "id": "cfc3ec75-922d-42a6-9eb0-996fb3681f89",
          "name": "identifiers"
        },
        "response": {
          "id": "ecbfced9-01f9-4049-906d-97d25e53214f",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "b08aa8c5-7da8-40f9-a6c2-ea91336d37ec",
        "cursor": {
          "ref": "b2814f84-5e69-4b94-b769-49d398691c55",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d80a6db4-da67-4fae-a035-142c5884485a"
        },
        "item": {
          "id": "b08aa8c5-7da8-40f9-a6c2-ea91336d37ec",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2d50313f-6c96-4cb6-9a4e-58b34e20ed9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "b08aa8c5-7da8-40f9-a6c2-ea91336d37ec",
        "cursor": {
          "ref": "b2814f84-5e69-4b94-b769-49d398691c55",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d80a6db4-da67-4fae-a035-142c5884485a"
        },
        "item": {
          "id": "b08aa8c5-7da8-40f9-a6c2-ea91336d37ec",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2d50313f-6c96-4cb6-9a4e-58b34e20ed9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "299cddd9-5f28-409d-b9f2-800561063a68",
        "cursor": {
          "ref": "51cc1c36-f5fe-45f3-91fe-892624a325f5",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "87320edd-70b4-4c6c-8d0c-63e2e2d1c25e"
        },
        "item": {
          "id": "299cddd9-5f28-409d-b9f2-800561063a68",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "81627ce8-8438-4f23-84af-b540dcd7d02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "82e52fce-2139-4289-81ad-a3b50aff7fa6",
        "cursor": {
          "ref": "588df576-6cf0-4a18-9bf8-475351d01262",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3acb2495-0b16-4521-9103-bc01c4782503"
        },
        "item": {
          "id": "82e52fce-2139-4289-81ad-a3b50aff7fa6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e268e39b-f7f3-473b-9b84-1f0c8caf00ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "449403d5-5416-4501-a95a-a9515b3bd1c7",
        "cursor": {
          "ref": "a3fd2a4c-4bd1-465f-baaa-c94d8b3ab922",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2c6482f0-fdbe-46dd-aed4-bc83468761f0"
        },
        "item": {
          "id": "449403d5-5416-4501-a95a-a9515b3bd1c7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7711743e-69d6-4cb9-9e1e-a587ac7b57af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "bce856f2-d544-4137-9929-0621a4cf6d63",
        "cursor": {
          "ref": "14c45452-3519-43dc-98ad-6681fb046824",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ef9cce73-be31-469b-a341-f85838753e8e"
        },
        "item": {
          "id": "bce856f2-d544-4137-9929-0621a4cf6d63",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "23b3c99a-6f87-442d-b9d8-dbb47c6b55c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "9272cfd6-0918-4e6e-b34c-78a9133b4a04",
        "cursor": {
          "ref": "5b7c4e63-2d4c-4c4e-8a94-64429a7d1e23",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4f7a3517-a91b-4f79-93a1-b29c54b7991a"
        },
        "item": {
          "id": "9272cfd6-0918-4e6e-b34c-78a9133b4a04",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f3a2ae44-0681-4bb5-b4d9-e40c0f48d7af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "f5c2d114-0a95-4714-9dd5-36b480703399",
        "cursor": {
          "ref": "c432ad40-4b61-4a28-bdc7-1c13cf5f3129",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "23ecf207-6c12-4ed5-9c12-ecf08596ca89"
        },
        "item": {
          "id": "f5c2d114-0a95-4714-9dd5-36b480703399",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5c9ac66b-7324-445b-a4a2-8c1572aee57d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "566c0a21-e326-4d0f-9cb9-758e88080b70",
        "cursor": {
          "ref": "6815b250-32ed-492a-b2e0-741b948bea36",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "510bd790-4e58-466e-96c5-c6d17e91379a"
        },
        "item": {
          "id": "566c0a21-e326-4d0f-9cb9-758e88080b70",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bb78f183-1e39-4174-9c87-89b75485c88a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "438dda53-c893-445e-b90d-ddafd321424f",
        "cursor": {
          "ref": "dfa0e9dd-f248-4bfb-853b-03f4326b2cf7",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6edc00c3-e981-41de-81bd-23891ef1bbb1"
        },
        "item": {
          "id": "438dda53-c893-445e-b90d-ddafd321424f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "abb64503-027b-4d62-976c-98a26e99d3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "66ebcef5-643f-489e-89b9-04152dd58cd6",
        "cursor": {
          "ref": "dd5b7a9c-adfd-4c50-b146-0626303f51f7",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "c26cbba7-003a-4cfa-b4fc-801ca36dfe3c"
        },
        "item": {
          "id": "66ebcef5-643f-489e-89b9-04152dd58cd6",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "490eb78a-f3d2-4334-8098-c37736e91b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "e8b75fab-3ff8-4842-9047-17aabedcc789",
        "cursor": {
          "ref": "6d09afd9-d907-4878-96f6-9f7f86982526",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9c8c3573-5274-4773-bde9-b759974b58a2"
        },
        "item": {
          "id": "e8b75fab-3ff8-4842-9047-17aabedcc789",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "58be049a-df80-448b-a956-bbdb54a97a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "446f6935-ce9e-4a2a-b13e-e4704d5a5e2b",
        "cursor": {
          "ref": "41e4e38b-6a10-4229-af0a-616a75f01607",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a9e36e17-7acb-4025-9dd5-b34a6f184e3e"
        },
        "item": {
          "id": "446f6935-ce9e-4a2a-b13e-e4704d5a5e2b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0ce7df3f-ef77-4449-b47e-626a22af955f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "11e4585f-d404-4470-8567-349de439c080",
        "cursor": {
          "ref": "9c2cf166-e49c-4959-a0c8-88d1bd99eb8e",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c3c078ea-2fa0-4d87-8822-7a33a99bd6ee"
        },
        "item": {
          "id": "11e4585f-d404-4470-8567-349de439c080",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bcd4f496-7834-4c78-8550-caf89e2c69be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "5874e923-c643-420c-af9d-67035fa1b825",
        "cursor": {
          "ref": "a3500635-81d0-4d17-b715-afcb7e7b66f6",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6f62efd6-d837-4581-b14d-08fb63942543"
        },
        "item": {
          "id": "5874e923-c643-420c-af9d-67035fa1b825",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "ebbc186c-9a2b-41ed-8ab9-6b851c10b00e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "b9a331f9-0cc2-4b84-a1a0-d6105f728d8e",
        "cursor": {
          "ref": "824ba689-08f5-4c2a-b375-29916148da79",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1629c326-724b-46cb-80b8-db1f1713f0f5"
        },
        "item": {
          "id": "b9a331f9-0cc2-4b84-a1a0-d6105f728d8e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9cf6f542-8712-4049-87c6-9e0d3b8d4886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "75579b7d-adb1-4250-9646-80808565dddd",
        "cursor": {
          "ref": "853d3ecd-37db-4814-8273-2bcfd830cdde",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5d65d2ae-e1a5-4cb0-ba41-deefc83d5d73"
        },
        "item": {
          "id": "75579b7d-adb1-4250-9646-80808565dddd",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "817b5122-5648-4718-aa1e-b9e0a8f151d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "56631863-c5bf-4aef-b0e6-f1fcc3db559e",
        "cursor": {
          "ref": "22fbdd5f-5d72-4f33-a249-efb4a29a6899",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "23264fb2-369f-45d8-90e4-d67c85a71fac"
        },
        "item": {
          "id": "56631863-c5bf-4aef-b0e6-f1fcc3db559e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e34ad585-00ed-4f76-8c9c-6719ec62199f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "b95ad905-7d59-415b-ae97-b63932a68426",
        "cursor": {
          "ref": "d02cc4f1-79c2-47a9-8d42-295e4b51ef2e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c2ba6182-5644-432e-b1bf-46f3dd97db83"
        },
        "item": {
          "id": "b95ad905-7d59-415b-ae97-b63932a68426",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "faf27f9a-467a-4e2d-a6f0-837885396ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "098c9b63-1d2d-407d-a62e-56427a9f825f",
        "cursor": {
          "ref": "799383df-4a39-475d-b658-afd0826be77b",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9b91b702-69f5-4851-9cd2-bac7b5dc2f4a"
        },
        "item": {
          "id": "098c9b63-1d2d-407d-a62e-56427a9f825f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "218dc78c-cb7e-4004-9e03-1e41758981b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "0fb0db1e-1e07-4dd4-a56d-97f20a88ba4b",
        "cursor": {
          "ref": "c2e9b1cb-e2d9-4190-a9c7-261f64b026ac",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "58eaf414-3f07-4c40-b1e9-460e33072176"
        },
        "item": {
          "id": "0fb0db1e-1e07-4dd4-a56d-97f20a88ba4b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ce69e0e0-0b29-43d9-afca-4a7a2f7ecadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "3c02403e-5722-4609-bd60-d63025f200ba",
        "cursor": {
          "ref": "2882ef92-2b7c-43fc-8c24-cb578390ade3",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9a30a6f8-4f75-47ce-af38-1cc7bdf4647b"
        },
        "item": {
          "id": "3c02403e-5722-4609-bd60-d63025f200ba",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "849b9621-88d2-4482-b9e3-d98ba32c2ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "8523d2f6-c623-4182-ac08-48f839e8bcd1",
        "cursor": {
          "ref": "22e472dd-2625-4787-b0fc-399191148f10",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "83165264-4f3e-48ee-a4c2-ce8ba9c37266"
        },
        "item": {
          "id": "8523d2f6-c623-4182-ac08-48f839e8bcd1",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4650223a-63af-42c6-8332-0412d874e3df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "eff7a39e-8a49-4744-86a1-855a91b5b6aa",
        "cursor": {
          "ref": "3bd16f23-5255-4da0-bf63-e02442193007",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "39200842-e4c3-45c1-abde-4c49b3e9c389"
        },
        "item": {
          "id": "eff7a39e-8a49-4744-86a1-855a91b5b6aa",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0c767d05-9e4f-4def-a068-95031dcda633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "3c98faf7-59bd-43ae-b8c5-7ab7077db338",
        "cursor": {
          "ref": "0b9be3b7-7e75-4ca1-8822-cd4e740f1aea",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "30e0874a-92f6-412f-a68d-81d9b4f20c6d"
        },
        "item": {
          "id": "3c98faf7-59bd-43ae-b8c5-7ab7077db338",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1a24beb2-4a0b-4e0f-ae16-87d76918909f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "0cf06e6e-6113-437f-92b4-421fa924b64e",
        "cursor": {
          "ref": "f9c34923-70cd-4fff-9520-e9ec3b126f91",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b0bdd625-d9c3-4cb9-a7e8-a49bfb9cd64c"
        },
        "item": {
          "id": "0cf06e6e-6113-437f-92b4-421fa924b64e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "b91eea37-db7d-4888-b86b-8aad9566a746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4653,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "3fa857ef-cb40-4c7b-918b-eda52beaf95a",
        "cursor": {
          "ref": "808f0cad-2889-4604-aede-dd08e235a1b2",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c4bf1366-6120-402b-be61-f7de7ea6aef2"
        },
        "item": {
          "id": "3fa857ef-cb40-4c7b-918b-eda52beaf95a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a4cb4f9c-211d-413a-b241-68d3b8ef7c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4544,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "e63503b0-1da3-471b-b44e-9928d51e8182",
        "cursor": {
          "ref": "32e11c87-4151-4d36-aa0f-793e4fdfb6c3",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b0e369e7-3d5f-48d9-a141-559373f945da"
        },
        "item": {
          "id": "e63503b0-1da3-471b-b44e-9928d51e8182",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "0252fd63-aed9-494f-bd88-d912d71e632e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3045,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "032d3bb1-5fa9-447a-bf94-89a5dde99a09",
        "cursor": {
          "ref": "8a3f0259-9cbb-4bba-b9b3-ef181d65440c",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9b7f4eb4-361a-4d90-add7-a9c04db2a60c"
        },
        "item": {
          "id": "032d3bb1-5fa9-447a-bf94-89a5dde99a09",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1fe3bf97-433d-4083-bcfe-17669f7bddd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4263,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "bfacd008-a38d-43bd-b805-cca652fdf721",
        "cursor": {
          "ref": "8d7ceaf3-8fa3-4438-b23c-992c4443d876",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "140d1709-1ec0-4f21-8da1-693af5f2b585"
        },
        "item": {
          "id": "bfacd008-a38d-43bd-b805-cca652fdf721",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "655a995b-c23e-4b00-955a-81894427f1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2454,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "617488d1-6b53-41ad-a548-986cf393fe2a",
        "cursor": {
          "ref": "0970d293-a739-4b3f-b25c-3a8f8b5df606",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "105f1362-2ce3-4a22-85ac-2f8456aa6951"
        },
        "item": {
          "id": "617488d1-6b53-41ad-a548-986cf393fe2a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a3f93507-3e00-4cbd-9195-39079b2ea087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fe1e07b1-ef37-4d77-a101-bcc56000282a",
        "cursor": {
          "ref": "86bac1cd-92b8-4343-89bb-8d53747e5721",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6098d7f0-c277-4a17-9c8e-dacdc2f7ac88"
        },
        "item": {
          "id": "fe1e07b1-ef37-4d77-a101-bcc56000282a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f0296b7a-cfd9-4924-a0a6-7c340aecaa5a",
          "status": "Created",
          "code": 201,
          "responseTime": 3752,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7e9d2735-7439-485b-9e85-dac3ae2f9c75",
        "cursor": {
          "ref": "b2137e68-bff3-4350-a8ea-d7c27945ced6",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b3dfa954-5ad9-484f-b75a-606526fe5d7f"
        },
        "item": {
          "id": "7e9d2735-7439-485b-9e85-dac3ae2f9c75",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6c57ece0-abbf-4ce6-a55b-4d7678e6e360",
          "status": "Created",
          "code": 201,
          "responseTime": 2696,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "1f38291b-f284-4ad7-a729-72439c0f22d8",
        "cursor": {
          "ref": "144e0284-0e94-4192-8b88-0cbb79b75966",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e8670009-1de4-4369-b45f-433a8e8bfdc0"
        },
        "item": {
          "id": "1f38291b-f284-4ad7-a729-72439c0f22d8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ac6f2394-20e3-4f74-a7cc-c38852679191",
          "status": "Created",
          "code": 201,
          "responseTime": 2424,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "e73166d7-971f-4e19-bf3c-7d037113d403",
        "cursor": {
          "ref": "348fddfb-c647-4fa8-b9e9-1b89e44c9012",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "43bc9a57-6a9b-454f-9013-cac66bb76345"
        },
        "item": {
          "id": "e73166d7-971f-4e19-bf3c-7d037113d403",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "de17cee9-fca9-4fdb-bfe3-b1cce0b3cce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5d70bd71-cb73-4655-9a40-05e8e39ae194",
        "cursor": {
          "ref": "50ebd3d1-0797-49f0-a373-31e3695754b8",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "22366060-6e15-4875-93b2-20e1e5268f47"
        },
        "item": {
          "id": "5d70bd71-cb73-4655-9a40-05e8e39ae194",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "debf411a-d562-4781-a813-bdda62514f25",
          "status": "Created",
          "code": 201,
          "responseTime": 4095,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "789f8bd9-267e-4e7c-929b-7615c58466b8",
        "cursor": {
          "ref": "c0b4682d-21a5-4def-b45d-51437f423076",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e09f3c20-d458-41a6-9018-217e019c9f0f"
        },
        "item": {
          "id": "789f8bd9-267e-4e7c-929b-7615c58466b8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ace20c6d-a18e-463c-8583-f7d84b5463d4",
          "status": "Created",
          "code": 201,
          "responseTime": 2455,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "71ecf5e9-98f7-4b36-8070-49b63040a65f",
        "cursor": {
          "ref": "66f08994-17f6-4571-96b8-d10b448b1ce5",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "269499cc-e84d-4c2a-9539-234c44664999"
        },
        "item": {
          "id": "71ecf5e9-98f7-4b36-8070-49b63040a65f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "dd329ac0-879e-48ef-9224-d08bda21cb0e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 1648,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a5aeb74a-c0eb-4ca0-81ba-dec3348a886e",
        "cursor": {
          "ref": "d2dd94f3-ebdb-476b-8f64-dd57b23e2898",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "90187482-d680-4f28-9ebf-899b3c8ea2b5"
        },
        "item": {
          "id": "a5aeb74a-c0eb-4ca0-81ba-dec3348a886e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "61c230d9-4c95-4482-b846-8e0fd99f9889",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9206b290-8594-49f5-9fb6-37b2abbf472c",
        "cursor": {
          "ref": "8c81ce2c-e233-40d0-bce4-9308682ce049",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "37f1c193-6d53-4ec3-80d5-5f49d7bce623"
        },
        "item": {
          "id": "9206b290-8594-49f5-9fb6-37b2abbf472c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "48149987-9406-4c61-a2be-2da610f13664",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a992ee8a-24ee-4c79-91df-aa56b6a72a6b",
        "cursor": {
          "ref": "d69c68b1-da36-4220-97d9-a2943d89e400",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "451ec6b8-8fee-4a04-9559-6bc5fe9c01c5"
        },
        "item": {
          "id": "a992ee8a-24ee-4c79-91df-aa56b6a72a6b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b90934f1-d75e-4899-8a80-be2e71ef9faf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "5024eb0e-2fb3-4810-9a71-e4f89a248364",
        "cursor": {
          "ref": "1c6e1de9-dde4-4e67-8785-a5f41013896b",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "bb074ac2-fcda-4794-bb61-fed201d12268"
        },
        "item": {
          "id": "5024eb0e-2fb3-4810-9a71-e4f89a248364",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "74d3b998-d152-4eca-ad77-e3ab293887b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "cc23c9e0-35ac-4d0e-91aa-bd83859a8cda",
        "cursor": {
          "ref": "1703010a-3232-4d66-9773-800333de026d",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "b8507475-603f-43b5-8d9b-da144290680c"
        },
        "item": {
          "id": "cc23c9e0-35ac-4d0e-91aa-bd83859a8cda",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6682a69d-4580-4069-af73-0b840da85b8a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f7317128-1075-4b65-9c40-2ce4c8b8dec6",
        "cursor": {
          "ref": "1f03c758-0424-487c-a63b-6ed712cb66e8",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e5c8f81b-4425-4b98-aa82-a5e9a4b09862"
        },
        "item": {
          "id": "f7317128-1075-4b65-9c40-2ce4c8b8dec6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "18e217ff-006d-42e3-b403-748fb20fb388",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 503",
              "stack": "AssertionError: expected response to have status code 422 but got 503\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "4bad762e-bdc4-45c6-b915-84ce12a89f95",
        "cursor": {
          "ref": "6cbd4750-c7e2-43e1-8667-0931d9fa4811",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "73e42ed4-b95a-487f-9424-f0844e1c5555"
        },
        "item": {
          "id": "4bad762e-bdc4-45c6-b915-84ce12a89f95",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "20e1989b-86fc-4847-8d45-423bfad8276f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "49e5d60f-35c0-4b74-8ace-3f6b2b9b68ff",
        "cursor": {
          "ref": "e16b73ce-97aa-4949-9416-ad7ce6b72848",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "be4be48f-2c37-4c92-a046-4fe03f4f78d9"
        },
        "item": {
          "id": "49e5d60f-35c0-4b74-8ace-3f6b2b9b68ff",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0f9780a0-c1cd-4132-9759-11f3bd7bef7c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "ffdcd715-c80a-45b2-8afa-d7121eba0da3",
        "cursor": {
          "ref": "57b3b51b-eb47-4164-8def-520c0e534d18",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "114c3462-2e7c-47fc-8d82-3ff0eb2a2333"
        },
        "item": {
          "id": "ffdcd715-c80a-45b2-8afa-d7121eba0da3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5e70ebf5-f3f3-4ad3-96eb-80544182dd39",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "71fd0a88-f7ab-485c-ba8b-4636c5edf786",
        "cursor": {
          "ref": "9ea29e48-dc48-4f0d-962f-3b45ec37d770",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "05c1db7a-8eed-412c-aa69-ec8a6c9d34ea"
        },
        "item": {
          "id": "71fd0a88-f7ab-485c-ba8b-4636c5edf786",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8201488d-f191-43cb-ab0c-18005867448e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "11f5e1b1-165b-4534-807e-61526d09eed1",
        "cursor": {
          "ref": "e92fd260-5825-4010-8ba9-04c7b63703e3",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "0f681986-6509-49c5-80d2-5c4bfdcf031b"
        },
        "item": {
          "id": "11f5e1b1-165b-4534-807e-61526d09eed1",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "832e57f9-c451-4928-9006-4d8f5abaa69e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "56813d75-b5ce-4fb2-a0e2-7b6b4eb92f8b",
        "cursor": {
          "ref": "35c709e1-4756-4b30-8600-e7a860147766",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "437fa676-beb2-4ac2-894c-440f048e3d57"
        },
        "item": {
          "id": "56813d75-b5ce-4fb2-a0e2-7b6b4eb92f8b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bbafeb46-eee8-4e94-a0e3-06a4f2404c79",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "422afbdb-ce4a-4384-821e-fa69f025fba9",
        "cursor": {
          "ref": "dd44b490-a0cf-404a-9c7b-edf924360ed8",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "db61146a-6e4e-4fc1-9726-94f7b1dfc640"
        },
        "item": {
          "id": "422afbdb-ce4a-4384-821e-fa69f025fba9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d6ff43bb-032c-4d53-8155-9382e54c246f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "41be4ad4-4e4c-434d-8607-d4b50e516c35",
        "cursor": {
          "ref": "f0f39f7b-ab2e-4db6-9070-7f1c2313d3f0",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8fbba709-9890-4471-ac11-801770045110"
        },
        "item": {
          "id": "41be4ad4-4e4c-434d-8607-d4b50e516c35",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6f2de982-81fc-4ef8-943a-a887c732ad7c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "a9050b2d-cfc7-4440-8c47-d10b62ea8baf",
        "cursor": {
          "ref": "0e55aff6-1ecd-444f-a344-9ff3bad948db",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "66ea90f8-7bdf-4565-9e1d-01980f8a2835"
        },
        "item": {
          "id": "a9050b2d-cfc7-4440-8c47-d10b62ea8baf",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "20be88bb-aa99-4035-9e04-9b127808e82b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "a09a2dc5-f9ac-4c53-854b-83e28d1a284b",
        "cursor": {
          "ref": "618d816f-3ecc-4a4a-bf54-2844e4a336d7",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "de48fafe-fadc-4cb0-9403-2c678dd66fe1"
        },
        "item": {
          "id": "a09a2dc5-f9ac-4c53-854b-83e28d1a284b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5a8470d4-68f5-4f62-a225-9539a6c12589",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "64206bbd-5695-41c3-baf4-1489f0bfe9dd",
        "cursor": {
          "ref": "07fc99ba-cb50-4e60-bc4a-2df4f0b05f84",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4c5b9a31-785f-4041-a40e-aeba349994bc"
        },
        "item": {
          "id": "64206bbd-5695-41c3-baf4-1489f0bfe9dd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "cf717eb3-857a-4b5e-9d86-4e4b7accd28e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "a650f2e3-7e23-47f9-a0ca-86aaf3ba367f",
        "cursor": {
          "ref": "c8d1ad41-3587-4b5b-8069-db6ade11e7e0",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8d66b005-c121-481b-b020-af7bd276cfea"
        },
        "item": {
          "id": "a650f2e3-7e23-47f9-a0ca-86aaf3ba367f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d4465af7-e5b2-484a-a6a5-7ddaad52e744",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "5c191e2b-c0ae-44be-bc54-0e535bcf6743",
        "cursor": {
          "ref": "0015d4fb-9047-492b-be46-8babe5015ae9",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ff3598e5-3960-424d-93b2-e03b430801bd"
        },
        "item": {
          "id": "5c191e2b-c0ae-44be-bc54-0e535bcf6743",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f707905b-f765-40bc-98f8-6a09f7608b5f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "1e495df1-934e-4298-beef-2728cbd43735",
        "cursor": {
          "ref": "a0274b43-8268-46ad-a84b-bf5220a26f36",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c5c1f270-8a9b-4a36-aef0-e54c030f6a49"
        },
        "item": {
          "id": "1e495df1-934e-4298-beef-2728cbd43735",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ddb63d59-0b12-457c-850e-355033adfaae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "33e9adf1-c2ec-412c-99d9-37349f7d7956",
        "cursor": {
          "ref": "3bbb7f76-2316-43ab-928e-3a603308ae68",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2e82b6bc-07fc-4f4d-be44-c89618e6a0ff"
        },
        "item": {
          "id": "33e9adf1-c2ec-412c-99d9-37349f7d7956",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9da137d6-86f8-46dd-a7a8-f647393589c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "605644cc-cb71-4948-afab-83f4ae467e7a",
        "cursor": {
          "ref": "d90a84db-3267-43c8-8190-abe8f4e10bfb",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "b92b01de-fdef-4522-a5a0-248212fbf214"
        },
        "item": {
          "id": "605644cc-cb71-4948-afab-83f4ae467e7a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e671b155-6313-4063-addd-1b561cfc6856",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "e7588c5f-43f7-4e84-80b6-bad5911fe6a2",
        "cursor": {
          "ref": "144dcee4-c8d6-421e-9a64-6d6cc442a343",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "78ba520e-6f0d-4098-a195-33a03e3b0769"
        },
        "item": {
          "id": "e7588c5f-43f7-4e84-80b6-bad5911fe6a2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "eccb5a79-af16-4656-b4f5-dd0f09af1875",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b1d4363e-d86e-4197-905b-f16bbb8d5469",
        "cursor": {
          "ref": "da0fa443-1171-4364-824b-a6b922dc2860",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "80237c10-797b-49c0-a4bd-b24c6c9f4894"
        },
        "item": {
          "id": "b1d4363e-d86e-4197-905b-f16bbb8d5469",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "61664efc-a492-4a02-9f71-2817d50a67ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "cc56de1a-2db1-4816-8978-6f1df94109ee",
        "cursor": {
          "ref": "0ab5b7f9-e112-42c1-84bb-004e702e76c2",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c28a15d6-770d-4aaa-b4fa-a85b6c096c81"
        },
        "item": {
          "id": "cc56de1a-2db1-4816-8978-6f1df94109ee",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b5e74c34-8de1-491b-bcf8-c78e80006c93",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "cf9971f9-fa5d-490e-9026-8e87e711b3bd",
        "cursor": {
          "ref": "a4248a66-e220-4988-af6a-c3400064f182",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1b87f5af-cf91-4298-9ee1-8dc9c55ee4be"
        },
        "item": {
          "id": "cf9971f9-fa5d-490e-9026-8e87e711b3bd",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6880cba2-c6d2-4acb-b099-9510f82f9fba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "6edabc3b-7f38-4b91-9df2-1e1c6bfde55a",
        "cursor": {
          "ref": "b2f282c1-e0ac-42a0-a35a-e057551a0d56",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cf3c0c6d-ee56-44a3-af6c-e0679b77307f"
        },
        "item": {
          "id": "6edabc3b-7f38-4b91-9df2-1e1c6bfde55a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2cd41108-903b-4a44-baf0-b729e03b45a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 18,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "bcc73eea-fb04-471f-903b-e52cec964392",
        "cursor": {
          "ref": "c5a4a9ec-455b-42c9-81f4-88081716367e",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "51dfea41-b379-4eb1-afb4-0b72f863a59d"
        },
        "item": {
          "id": "bcc73eea-fb04-471f-903b-e52cec964392",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "643dd3b0-2a0c-4e89-864b-2c6918f2cbb9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "2f71b273-5e45-47a6-8f93-a091c27a5668",
        "cursor": {
          "ref": "10c3255a-e900-4994-9c12-bb8ee9314ec8",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e55316b5-ca8d-490c-b14a-f87c94ef7718"
        },
        "item": {
          "id": "2f71b273-5e45-47a6-8f93-a091c27a5668",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "27fec861-4c6f-4d82-924d-6d47d955583a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "8ef74f79-a45d-48ea-84d6-9b6f120385f2",
        "cursor": {
          "ref": "6b9b6820-934d-4b93-8b62-5de2aaa79df5",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0c7fcd06-05b0-4b46-a9fa-ef442c8cca51"
        },
        "item": {
          "id": "8ef74f79-a45d-48ea-84d6-9b6f120385f2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "00433c7f-ade7-4904-a465-d3dc035afde9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "972c2366-1990-4448-bd43-9b1fdd313b6f",
        "cursor": {
          "ref": "a4253395-0837-4bde-a32f-97deac15b2b7",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "42786c67-3032-4ecc-9641-17f80b7180d7"
        },
        "item": {
          "id": "972c2366-1990-4448-bd43-9b1fdd313b6f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d083aa8c-8e3b-4632-95cd-8341491fe247",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "06a885a1-9861-4baf-a260-59732e830525",
        "cursor": {
          "ref": "5a153ea0-9933-40ff-9b22-c00381eb2f47",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ae222830-7bab-4c44-9575-178638526a16"
        },
        "item": {
          "id": "06a885a1-9861-4baf-a260-59732e830525",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a4e3cdde-1693-4a71-b779-9f377eb45431",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "94016fe6-0afc-42c0-959c-f53ec20a83f4",
        "cursor": {
          "ref": "131b40d2-7344-4559-a0aa-25114ea436f9",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "34966622-f799-431d-a320-7d43b6e65ed4"
        },
        "item": {
          "id": "94016fe6-0afc-42c0-959c-f53ec20a83f4",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "82e4a569-0259-40a4-917d-bb157ceb3344",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "211fa8d8-81e0-4756-9360-7e49544b7f78",
        "cursor": {
          "ref": "397e04a3-29cc-44a2-bf2e-5ef6bdebe78a",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cc0390bc-9643-4663-8477-f29783ee5bea"
        },
        "item": {
          "id": "211fa8d8-81e0-4756-9360-7e49544b7f78",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1e59724e-491d-4f03-8e2d-2b70dc926176",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "092595f0-bf04-4a18-b93b-f824c79104e1",
        "cursor": {
          "ref": "089883ed-b747-4c25-bf79-43e0cb845a3c",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "32c54de8-86ec-48a9-a00a-9329d6b0d98b"
        },
        "item": {
          "id": "092595f0-bf04-4a18-b93b-f824c79104e1",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "115a447c-366d-48d5-aff7-1457e91d7e49",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "b3b22782-f594-41e1-bbb4-621cee838c89",
        "cursor": {
          "ref": "4e456124-2241-4f63-99a2-281ce6da1463",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d44e5863-1f78-4d9e-812c-4a05539cf69b"
        },
        "item": {
          "id": "b3b22782-f594-41e1-bbb4-621cee838c89",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ea5fea8c-a4a5-48cf-8ed4-c9343b80a191",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "9cf0d0df-e310-4089-8d2c-393bcc0d70e6",
        "cursor": {
          "ref": "7a680467-fd03-4601-aeef-ee87472a0d6e",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b12d7fbb-cc72-4659-8397-d696dde1eb20"
        },
        "item": {
          "id": "9cf0d0df-e310-4089-8d2c-393bcc0d70e6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e8ada94c-cff3-463c-93a3-b6165d3e12d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "5ac0eac6-8403-4ab4-b493-9f6324478b92",
        "cursor": {
          "ref": "0d32d67d-f1ac-43bf-9c80-4854a6224ed7",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "660ac413-d5a9-411b-81d8-084625468850"
        },
        "item": {
          "id": "5ac0eac6-8403-4ab4-b493-9f6324478b92",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2b1959b2-483e-4712-a09f-6486d55bba88",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "cbe6ea48-6ffc-419e-ba5e-834f66d3fe52",
        "cursor": {
          "ref": "0c14ed9c-9fed-4c44-ab67-2ac36436bb9c",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e3b828c4-d71a-44ff-a540-4bce629c7e44"
        },
        "item": {
          "id": "cbe6ea48-6ffc-419e-ba5e-834f66d3fe52",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6f85fe9a-6353-41ff-b924-3d12eb797bce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "2c9cc149-ebeb-4354-9dce-fb51cefc9a66",
        "cursor": {
          "ref": "f6cdd62a-2ddb-42f6-9c06-383f088e8cde",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "02b552d2-98c1-4bca-91ab-c909bae42c16"
        },
        "item": {
          "id": "2c9cc149-ebeb-4354-9dce-fb51cefc9a66",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "29246a31-d278-4650-80af-b8e5d56f28ec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "b3d5045e-3866-42cf-a82a-a54f4419769d",
        "cursor": {
          "ref": "cdf8b851-19cd-4036-8c1f-2ac61793a336",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e2ab9e37-14df-451e-b5c1-2ff89236896e"
        },
        "item": {
          "id": "b3d5045e-3866-42cf-a82a-a54f4419769d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "224e6f9f-96c2-4e02-98d6-f0ac42337471",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "66b6c826-f059-4f51-9eeb-f790b079db72",
        "cursor": {
          "ref": "8a256d95-af6e-41ce-950c-718dab960d2f",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "761cbf9e-1dd9-4332-9e4d-9c06475b787d"
        },
        "item": {
          "id": "66b6c826-f059-4f51-9eeb-f790b079db72",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2ba1be95-e158-491d-8082-8f7332ae0d63",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "d26db08f-3b55-49b0-9b40-4cfdfca4db97",
        "cursor": {
          "ref": "affd2b5b-ceb7-4840-b0eb-57d2b58030d0",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0b0f8a37-bfc4-4e58-b423-8b42adb75133"
        },
        "item": {
          "id": "d26db08f-3b55-49b0-9b40-4cfdfca4db97",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f45f1dd1-9826-4861-8913-1681c73e2e96",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "971d8a91-419c-48db-add5-7f7460889bbd",
        "cursor": {
          "ref": "b1e1491a-09ce-4ed2-80f9-4200dd1e31cc",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8d45877e-47d5-4293-8977-7e0a6d82ef66"
        },
        "item": {
          "id": "971d8a91-419c-48db-add5-7f7460889bbd",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8b30d925-f230-42c2-a005-c61b93f84677",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "86b033f4-7abe-47f4-ac94-f3ff107e1888",
        "cursor": {
          "ref": "24baecc9-a31c-4aa1-b39e-1827a74922b0",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b9c7adec-1bed-47a5-b61b-581981dc5175"
        },
        "item": {
          "id": "86b033f4-7abe-47f4-ac94-f3ff107e1888",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9f177817-2561-454d-9959-05c2d68d9bbe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "ab6672d7-d19f-4ffc-985a-a65155b12e95",
        "cursor": {
          "ref": "d963dbd9-9663-4b79-956a-f2a1a56e9abe",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "41d11047-51c5-4519-85f4-5ca98a2249f6"
        },
        "item": {
          "id": "ab6672d7-d19f-4ffc-985a-a65155b12e95",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e420c570-28a5-45a0-b513-d432abd8b1f0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "75b5c015-63df-4384-89de-5376fa293334",
        "cursor": {
          "ref": "6132e58a-865c-4291-8fbd-a885b539f6b6",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "15548abe-45ff-41ed-adaa-e84e75df5950"
        },
        "item": {
          "id": "75b5c015-63df-4384-89de-5376fa293334",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6c39752c-2122-4d7f-863b-54abde9629d8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "b247186e-74aa-42f7-ae62-7cfd95bd1924",
        "cursor": {
          "ref": "b5c2f188-05ff-4ede-b014-35ac4916022a",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f09d7801-e322-46d8-a7e6-ebcdbb787c34"
        },
        "item": {
          "id": "b247186e-74aa-42f7-ae62-7cfd95bd1924",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "65855f8f-ab00-4d94-9acf-fe1f68e48665",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "380e3a70-ad1c-477e-a0b6-e9f88cc4e973",
        "cursor": {
          "ref": "65380b90-6597-454d-bec0-86e335bfce35",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0be9af4b-32ba-4266-a90a-cfb06e91f8c6"
        },
        "item": {
          "id": "380e3a70-ad1c-477e-a0b6-e9f88cc4e973",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "188cb942-8ff3-4e72-ab33-a5cbbe3763ec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "efef15cd-d4ec-471d-9f0a-fa071bc204c6",
        "cursor": {
          "ref": "8ed1f6c4-6602-477f-ae2e-32ef50d7db6c",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d5c4d490-7916-4d51-9c87-4e20d1cd0bf8"
        },
        "item": {
          "id": "efef15cd-d4ec-471d-9f0a-fa071bc204c6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "4fd38e5f-94b5-439e-8ed1-4bfd4e82f46f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "c8e989a4-cfc8-48d4-9d7c-3bd002912d0a",
        "cursor": {
          "ref": "f1010adb-45ee-40f8-b6f0-d338b663fe70",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ef2caece-ec31-46de-a6d0-b149c5ef30a8"
        },
        "item": {
          "id": "c8e989a4-cfc8-48d4-9d7c-3bd002912d0a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3590b42d-6fa9-46b2-86a7-926f81f532d1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "6fc16c25-b437-4255-a28d-27b87a80e9aa",
        "cursor": {
          "ref": "886fbe01-dccb-4923-a255-a4d692ab16ff",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e00a944e-d30b-4076-8baa-6d77d97d4425"
        },
        "item": {
          "id": "6fc16c25-b437-4255-a28d-27b87a80e9aa",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d6d46d3c-1665-4de0-be8e-cb256022a4b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "ad87cbd8-c7a8-4c11-8fb7-634bf8addae2",
        "cursor": {
          "ref": "649fdc60-5c78-4424-9b59-2f563d029af0",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "fe2b1f13-73c4-43c7-b253-9550a749bde6"
        },
        "item": {
          "id": "ad87cbd8-c7a8-4c11-8fb7-634bf8addae2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "71553e00-995c-4200-94ab-d4934e8ef88a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "55fb1d82-16a9-403a-b9c7-529c079bf5a6",
        "cursor": {
          "ref": "3e29533a-cc1b-4f1a-83cb-93ed2c54ecb9",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6578fcb1-0585-4293-adf9-dec01d9990ba"
        },
        "item": {
          "id": "55fb1d82-16a9-403a-b9c7-529c079bf5a6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a605c5f8-db6e-4863-a081-f036f6b0af87",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "6de0f094-eb38-48f2-8ad4-2778d9486611",
        "cursor": {
          "ref": "418bd61e-8276-43ad-89d8-3a3455f92eba",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "90f86c6f-c1ac-46a9-9e78-7fa01cb106c1"
        },
        "item": {
          "id": "6de0f094-eb38-48f2-8ad4-2778d9486611",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c4999126-e036-488a-ad94-8dee133bbbef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "fdb6b15e-15ef-4bd0-81f1-6b5cc88ed4bd",
        "cursor": {
          "ref": "580409e5-e7cc-44b1-a5be-fc85330b8f62",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4c0bf1c2-51d8-4fa0-853b-4d241855f2c8"
        },
        "item": {
          "id": "fdb6b15e-15ef-4bd0-81f1-6b5cc88ed4bd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c0584fab-a776-4dff-95d5-5301c5a765c8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "d46b5c4e-c8cb-4625-ae11-863e3082bcd3",
        "cursor": {
          "ref": "01f7614b-8b0a-4a73-a2a5-3c742c5c76d1",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c4468d40-8af1-420d-b553-af4902bad6b0"
        },
        "item": {
          "id": "d46b5c4e-c8cb-4625-ae11-863e3082bcd3",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "6d75af48-6d03-481a-95af-290b0b57bdee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "749fe9f7-3f12-4669-aa7f-d39df1f6b271",
        "cursor": {
          "ref": "b5affd9a-0305-4e9d-ad30-4f2a46b90ebd",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5b23afd1-0bd3-4e84-94b9-0b1240b5638e"
        },
        "item": {
          "id": "749fe9f7-3f12-4669-aa7f-d39df1f6b271",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b223bc87-121d-46b2-a96d-04af2b91e639",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:104)"
            }
          }
        ]
      },
      {
        "id": "72d7dbfc-e37b-418a-8519-5cd1009f4815",
        "cursor": {
          "ref": "aebd390c-48bb-49e5-967e-7124b866001d",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b320468d-2372-4571-b5a5-f0911d28117f"
        },
        "item": {
          "id": "72d7dbfc-e37b-418a-8519-5cd1009f4815",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "bab5de59-bbb7-4023-9917-3ddb62021f72",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:105)"
            }
          }
        ]
      },
      {
        "id": "d04669d7-2169-4ac5-85e1-127cbfc479a4",
        "cursor": {
          "ref": "39d48d76-27c5-4530-a177-9c777efbf308",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6135b54b-13b5-4a16-b930-ca7edb7c101d"
        },
        "item": {
          "id": "d04669d7-2169-4ac5-85e1-127cbfc479a4",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f0f0aeb4-f785-4f49-b8a1-3e486423ba61",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          }
        ]
      },
      {
        "id": "93df9d69-51f6-49ba-9ec0-69739ca1ee66",
        "cursor": {
          "ref": "4b810b7d-8526-4f06-bb62-1a206da84946",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3130bb3c-ab52-4c0d-914a-38481ddecb81"
        },
        "item": {
          "id": "93df9d69-51f6-49ba-9ec0-69739ca1ee66",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2ff682f3-1b55-4f56-a9b8-4d78178ecd0a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "a3651cf8-787c-4551-959a-eb16200f03b0",
        "cursor": {
          "ref": "43c96fa2-da9d-46bf-9309-b2948b1111e8",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d9a205d9-5b22-4ba6-9181-6f870792708c"
        },
        "item": {
          "id": "a3651cf8-787c-4551-959a-eb16200f03b0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9ee1f3b3-159e-464a-9645-20bfec484610",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "2938dab6-7979-445a-821c-a45dc43a691a",
        "cursor": {
          "ref": "3da55569-f24d-4939-b284-3ff0feaa76a8",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a86d1309-19de-47a4-bd6b-a9745d756d0f"
        },
        "item": {
          "id": "2938dab6-7979-445a-821c-a45dc43a691a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "84447e8f-7955-4357-aa99-568173ce7b3e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "2938dab6-7979-445a-821c-a45dc43a691a",
        "cursor": {
          "ref": "3da55569-f24d-4939-b284-3ff0feaa76a8",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a86d1309-19de-47a4-bd6b-a9745d756d0f"
        },
        "item": {
          "id": "2938dab6-7979-445a-821c-a45dc43a691a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "84447e8f-7955-4357-aa99-568173ce7b3e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "895a0bb2-1f0c-4168-8df3-c6703133269f",
        "cursor": {
          "ref": "43e5d685-07ee-4da9-a1ef-7fd5f815b6a5",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bfd81f43-12dc-4461-9493-6f52ce78cc50"
        },
        "item": {
          "id": "895a0bb2-1f0c-4168-8df3-c6703133269f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "82f67212-5bf0-458b-9ecf-5b7e8ba5a2ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "895a0bb2-1f0c-4168-8df3-c6703133269f",
        "cursor": {
          "ref": "43e5d685-07ee-4da9-a1ef-7fd5f815b6a5",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bfd81f43-12dc-4461-9493-6f52ce78cc50"
        },
        "item": {
          "id": "895a0bb2-1f0c-4168-8df3-c6703133269f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "82f67212-5bf0-458b-9ecf-5b7e8ba5a2ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "35ac90bf-ca41-4fe5-a64f-4f77e686c824",
        "cursor": {
          "ref": "f4ef112b-6974-4bea-9665-b2a41c8173c9",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5723040c-09f3-4106-a882-4f595479c109"
        },
        "item": {
          "id": "35ac90bf-ca41-4fe5-a64f-4f77e686c824",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "703ae44f-efd4-4bf5-8337-efd9d1a1fbce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "35ac90bf-ca41-4fe5-a64f-4f77e686c824",
        "cursor": {
          "ref": "f4ef112b-6974-4bea-9665-b2a41c8173c9",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5723040c-09f3-4106-a882-4f595479c109"
        },
        "item": {
          "id": "35ac90bf-ca41-4fe5-a64f-4f77e686c824",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "703ae44f-efd4-4bf5-8337-efd9d1a1fbce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e5156c7b-fc9e-4715-94cc-09740af3b3ec",
        "cursor": {
          "ref": "49540b0b-d725-4992-9ee1-00f7270bdd60",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4ad20b4a-3cf2-48a1-9284-1001aaa0f05e"
        },
        "item": {
          "id": "e5156c7b-fc9e-4715-94cc-09740af3b3ec",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9053ca59-f4e9-4990-b6a6-df3aa3688cba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "e5156c7b-fc9e-4715-94cc-09740af3b3ec",
        "cursor": {
          "ref": "49540b0b-d725-4992-9ee1-00f7270bdd60",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4ad20b4a-3cf2-48a1-9284-1001aaa0f05e"
        },
        "item": {
          "id": "e5156c7b-fc9e-4715-94cc-09740af3b3ec",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9053ca59-f4e9-4990-b6a6-df3aa3688cba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "31f77b3e-08d0-4246-b0b6-fadb498d2178",
        "cursor": {
          "ref": "820a26b2-7f04-41bd-b54f-9750fe913748",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "977dae97-f075-4b57-b50b-091fb7ae1022"
        },
        "item": {
          "id": "31f77b3e-08d0-4246-b0b6-fadb498d2178",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "38901cf3-a83b-4fd7-b889-5a0d107e6c34",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "31f77b3e-08d0-4246-b0b6-fadb498d2178",
        "cursor": {
          "ref": "820a26b2-7f04-41bd-b54f-9750fe913748",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "977dae97-f075-4b57-b50b-091fb7ae1022"
        },
        "item": {
          "id": "31f77b3e-08d0-4246-b0b6-fadb498d2178",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "38901cf3-a83b-4fd7-b889-5a0d107e6c34",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "ee4a9fb9-55ea-450d-a5b0-d03eb888dda3",
        "cursor": {
          "ref": "dff3e6ef-ce25-4ecd-8703-e7a921c8093c",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6293ec51-2898-4f03-a849-b001744ddbc4"
        },
        "item": {
          "id": "ee4a9fb9-55ea-450d-a5b0-d03eb888dda3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0e61916c-6bf2-4798-9989-fcda478c6d18",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "ee4a9fb9-55ea-450d-a5b0-d03eb888dda3",
        "cursor": {
          "ref": "dff3e6ef-ce25-4ecd-8703-e7a921c8093c",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "6293ec51-2898-4f03-a849-b001744ddbc4"
        },
        "item": {
          "id": "ee4a9fb9-55ea-450d-a5b0-d03eb888dda3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0e61916c-6bf2-4798-9989-fcda478c6d18",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "b78d0858-5b1a-410b-bd84-20041bb2d367",
        "cursor": {
          "ref": "0771f9f3-3bcd-41fa-bd9c-000c62550248",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c84beaf3-2104-45cd-bc9c-18fdeac368f2"
        },
        "item": {
          "id": "b78d0858-5b1a-410b-bd84-20041bb2d367",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3cb0bb78-b1e2-4b19-a298-d03a8f4cc0a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "b78d0858-5b1a-410b-bd84-20041bb2d367",
        "cursor": {
          "ref": "0771f9f3-3bcd-41fa-bd9c-000c62550248",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c84beaf3-2104-45cd-bc9c-18fdeac368f2"
        },
        "item": {
          "id": "b78d0858-5b1a-410b-bd84-20041bb2d367",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3cb0bb78-b1e2-4b19-a298-d03a8f4cc0a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "f21e59d5-0fd8-4847-b39c-56da662d8480",
        "cursor": {
          "ref": "c518f365-4314-4af7-9f82-aaa678e71e6c",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ad232907-c7d1-4ec2-a6cd-777c304eb550"
        },
        "item": {
          "id": "f21e59d5-0fd8-4847-b39c-56da662d8480",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7f0b2683-ec19-4951-925b-138f3c85e076",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "f21e59d5-0fd8-4847-b39c-56da662d8480",
        "cursor": {
          "ref": "c518f365-4314-4af7-9f82-aaa678e71e6c",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ad232907-c7d1-4ec2-a6cd-777c304eb550"
        },
        "item": {
          "id": "f21e59d5-0fd8-4847-b39c-56da662d8480",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7f0b2683-ec19-4951-925b-138f3c85e076",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "ad639cc6-cacb-4e0a-b577-5a3060f0cc36",
        "cursor": {
          "ref": "3fd4d9a0-673c-4247-ac24-82b71e7f7d2b",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9c1d5d2f-259a-40fc-88aa-436120c79a20"
        },
        "item": {
          "id": "ad639cc6-cacb-4e0a-b577-5a3060f0cc36",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "10804314-74ec-4dcb-b6d7-d593a9766759",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "ad639cc6-cacb-4e0a-b577-5a3060f0cc36",
        "cursor": {
          "ref": "3fd4d9a0-673c-4247-ac24-82b71e7f7d2b",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9c1d5d2f-259a-40fc-88aa-436120c79a20"
        },
        "item": {
          "id": "ad639cc6-cacb-4e0a-b577-5a3060f0cc36",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "10804314-74ec-4dcb-b6d7-d593a9766759",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "5e94fa2b-7517-498f-bdff-2ab87b0874b4",
        "cursor": {
          "ref": "f321c54b-1c80-4497-b5b1-223302daf8fc",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "51dd7a7e-27f4-4492-9514-ceb2c78d67c9"
        },
        "item": {
          "id": "5e94fa2b-7517-498f-bdff-2ab87b0874b4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "14f625d6-9a8b-4893-ad76-b9220b503683",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 36,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "5e94fa2b-7517-498f-bdff-2ab87b0874b4",
        "cursor": {
          "ref": "f321c54b-1c80-4497-b5b1-223302daf8fc",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "51dd7a7e-27f4-4492-9514-ceb2c78d67c9"
        },
        "item": {
          "id": "5e94fa2b-7517-498f-bdff-2ab87b0874b4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "14f625d6-9a8b-4893-ad76-b9220b503683",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 36,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "8e93f0e5-e945-48b5-bc76-2c324b30111d",
        "cursor": {
          "ref": "453c972e-cabc-45f6-b565-3c65df6f2bf0",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "49954ad5-836b-4ddb-8b56-78ea76d9213e"
        },
        "item": {
          "id": "8e93f0e5-e945-48b5-bc76-2c324b30111d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "de3709d2-4ea1-4026-b2f0-40943cf347fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "8e93f0e5-e945-48b5-bc76-2c324b30111d",
        "cursor": {
          "ref": "453c972e-cabc-45f6-b565-3c65df6f2bf0",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "49954ad5-836b-4ddb-8b56-78ea76d9213e"
        },
        "item": {
          "id": "8e93f0e5-e945-48b5-bc76-2c324b30111d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "de3709d2-4ea1-4026-b2f0-40943cf347fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "e89972ab-5458-4c19-8330-2aab313018e5",
        "cursor": {
          "ref": "6ec573dc-04d2-4607-a526-e6a5cf09fd34",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a6535f2f-ffe9-40ed-b1f1-dfbbfc00bcf9"
        },
        "item": {
          "id": "e89972ab-5458-4c19-8330-2aab313018e5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "51cf69ac-1f8a-452b-8388-9c80755a0e48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "e89972ab-5458-4c19-8330-2aab313018e5",
        "cursor": {
          "ref": "6ec573dc-04d2-4607-a526-e6a5cf09fd34",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a6535f2f-ffe9-40ed-b1f1-dfbbfc00bcf9"
        },
        "item": {
          "id": "e89972ab-5458-4c19-8330-2aab313018e5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "51cf69ac-1f8a-452b-8388-9c80755a0e48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "6e607198-b854-413a-968d-10033da1a75b",
        "cursor": {
          "ref": "deaacbce-9ed0-4ae6-92b6-9a73638fad01",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d15faff2-9aa3-4d0c-8219-e42524f5228a"
        },
        "item": {
          "id": "6e607198-b854-413a-968d-10033da1a75b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "217b13fe-24f3-4168-abdc-177b7823398a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "6e607198-b854-413a-968d-10033da1a75b",
        "cursor": {
          "ref": "deaacbce-9ed0-4ae6-92b6-9a73638fad01",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d15faff2-9aa3-4d0c-8219-e42524f5228a"
        },
        "item": {
          "id": "6e607198-b854-413a-968d-10033da1a75b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "217b13fe-24f3-4168-abdc-177b7823398a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "73d39ca6-157c-415d-8cf2-f1e794dc23f7",
        "cursor": {
          "ref": "95acbc9b-754f-49b8-a583-b98535c63fe0",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8364ccad-6455-4a6b-bc68-db7f09eb0e4c"
        },
        "item": {
          "id": "73d39ca6-157c-415d-8cf2-f1e794dc23f7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ef1b1d94-607d-4e08-bed3-66bed4edc0fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "73d39ca6-157c-415d-8cf2-f1e794dc23f7",
        "cursor": {
          "ref": "95acbc9b-754f-49b8-a583-b98535c63fe0",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8364ccad-6455-4a6b-bc68-db7f09eb0e4c"
        },
        "item": {
          "id": "73d39ca6-157c-415d-8cf2-f1e794dc23f7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ef1b1d94-607d-4e08-bed3-66bed4edc0fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "0f6b691c-7431-4202-bc20-263c3951e130",
        "cursor": {
          "ref": "e4294533-38b3-4df5-9e99-6064b126c049",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1f7d3415-4e29-4183-b7ad-8c2fad90c090"
        },
        "item": {
          "id": "0f6b691c-7431-4202-bc20-263c3951e130",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8a85f030-ae65-45ca-a8b7-8f139049e119",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "0f6b691c-7431-4202-bc20-263c3951e130",
        "cursor": {
          "ref": "e4294533-38b3-4df5-9e99-6064b126c049",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1f7d3415-4e29-4183-b7ad-8c2fad90c090"
        },
        "item": {
          "id": "0f6b691c-7431-4202-bc20-263c3951e130",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8a85f030-ae65-45ca-a8b7-8f139049e119",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "667e0b15-4111-4fa6-807e-0a31808a72a4",
        "cursor": {
          "ref": "c1238d2e-5603-46d7-ade9-b728ca618a6d",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "aa72c2fd-628b-407d-9c85-07c532e801d5"
        },
        "item": {
          "id": "667e0b15-4111-4fa6-807e-0a31808a72a4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "24dec50f-9f57-4829-a5a8-b1c620c6eeb8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "667e0b15-4111-4fa6-807e-0a31808a72a4",
        "cursor": {
          "ref": "c1238d2e-5603-46d7-ade9-b728ca618a6d",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "aa72c2fd-628b-407d-9c85-07c532e801d5"
        },
        "item": {
          "id": "667e0b15-4111-4fa6-807e-0a31808a72a4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "24dec50f-9f57-4829-a5a8-b1c620c6eeb8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "97b49fd4-54b4-43a5-9d52-dc5c1ec96600",
        "cursor": {
          "ref": "e8cb57b4-d54e-4af8-8a65-0e8b283d1e84",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "31a542b5-c312-48ad-b809-0d3e24466daf"
        },
        "item": {
          "id": "97b49fd4-54b4-43a5-9d52-dc5c1ec96600",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2648f7f6-176d-47d4-80a0-39a1bbc5c6f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "97b49fd4-54b4-43a5-9d52-dc5c1ec96600",
        "cursor": {
          "ref": "e8cb57b4-d54e-4af8-8a65-0e8b283d1e84",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "31a542b5-c312-48ad-b809-0d3e24466daf"
        },
        "item": {
          "id": "97b49fd4-54b4-43a5-9d52-dc5c1ec96600",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2648f7f6-176d-47d4-80a0-39a1bbc5c6f4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "26a1536a-acdd-489a-bd0c-e6ba156793b6",
        "cursor": {
          "ref": "976e4510-c0b1-4249-b86f-93b94883de95",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2fa4e9d2-308c-42e5-baee-ef3ce97f3aee"
        },
        "item": {
          "id": "26a1536a-acdd-489a-bd0c-e6ba156793b6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "44ea96d1-413e-4a13-b884-ffd6987c2889",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "26a1536a-acdd-489a-bd0c-e6ba156793b6",
        "cursor": {
          "ref": "976e4510-c0b1-4249-b86f-93b94883de95",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2fa4e9d2-308c-42e5-baee-ef3ce97f3aee"
        },
        "item": {
          "id": "26a1536a-acdd-489a-bd0c-e6ba156793b6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "44ea96d1-413e-4a13-b884-ffd6987c2889",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "4fecf7eb-551b-4840-8e50-1210d89f2c24",
        "cursor": {
          "ref": "75b3b537-cfc7-4e74-8e04-9129d897640d",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1f08f2ad-b06f-4a07-8a12-94d303e4e8f9"
        },
        "item": {
          "id": "4fecf7eb-551b-4840-8e50-1210d89f2c24",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "193bfbe2-28b8-4ba9-977e-e415f131616f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "4fecf7eb-551b-4840-8e50-1210d89f2c24",
        "cursor": {
          "ref": "75b3b537-cfc7-4e74-8e04-9129d897640d",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1f08f2ad-b06f-4a07-8a12-94d303e4e8f9"
        },
        "item": {
          "id": "4fecf7eb-551b-4840-8e50-1210d89f2c24",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "193bfbe2-28b8-4ba9-977e-e415f131616f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "a397e2b9-9438-4112-b83b-4b6ed277b9de",
        "cursor": {
          "ref": "09be8f27-a8be-490d-bdf2-71aa25ac0144",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a7430533-5ea5-43ea-94f2-603a791d32df"
        },
        "item": {
          "id": "a397e2b9-9438-4112-b83b-4b6ed277b9de",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "179145a6-256d-4dff-9085-16683c08b708",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "a397e2b9-9438-4112-b83b-4b6ed277b9de",
        "cursor": {
          "ref": "09be8f27-a8be-490d-bdf2-71aa25ac0144",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a7430533-5ea5-43ea-94f2-603a791d32df"
        },
        "item": {
          "id": "a397e2b9-9438-4112-b83b-4b6ed277b9de",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "179145a6-256d-4dff-9085-16683c08b708",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "d7932272-f772-410f-8d2f-f0054cf894e6",
        "cursor": {
          "ref": "73104d74-8801-48a5-98b2-226bec26ad82",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8b9d21dd-0f21-4343-9cd4-9478837d96dd"
        },
        "item": {
          "id": "d7932272-f772-410f-8d2f-f0054cf894e6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6aab9ec5-fcf6-4a37-adc6-d7e37f2d4f4b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "d7932272-f772-410f-8d2f-f0054cf894e6",
        "cursor": {
          "ref": "73104d74-8801-48a5-98b2-226bec26ad82",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8b9d21dd-0f21-4343-9cd4-9478837d96dd"
        },
        "item": {
          "id": "d7932272-f772-410f-8d2f-f0054cf894e6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6aab9ec5-fcf6-4a37-adc6-d7e37f2d4f4b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "03f8f65a-b7d2-47ed-a677-83add3999374",
        "cursor": {
          "ref": "13a4716d-8b0d-4646-a693-6cce10de51e5",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "96660bd5-1e45-4376-8c65-74d854c1a729"
        },
        "item": {
          "id": "03f8f65a-b7d2-47ed-a677-83add3999374",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a567bcca-3edb-47d7-a749-7b6b56648932",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "03f8f65a-b7d2-47ed-a677-83add3999374",
        "cursor": {
          "ref": "13a4716d-8b0d-4646-a693-6cce10de51e5",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "96660bd5-1e45-4376-8c65-74d854c1a729"
        },
        "item": {
          "id": "03f8f65a-b7d2-47ed-a677-83add3999374",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a567bcca-3edb-47d7-a749-7b6b56648932",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "d4fca02a-4739-4a4b-91eb-06316c952f89",
        "cursor": {
          "ref": "06f8e7f8-1354-470a-8501-ae1b985abe57",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a48bd0a5-854c-4a82-b560-31e02d2df103"
        },
        "item": {
          "id": "d4fca02a-4739-4a4b-91eb-06316c952f89",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3aa13fe9-a8f6-4150-b925-8820b52d6690",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "d4fca02a-4739-4a4b-91eb-06316c952f89",
        "cursor": {
          "ref": "06f8e7f8-1354-470a-8501-ae1b985abe57",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a48bd0a5-854c-4a82-b560-31e02d2df103"
        },
        "item": {
          "id": "d4fca02a-4739-4a4b-91eb-06316c952f89",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3aa13fe9-a8f6-4150-b925-8820b52d6690",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "f91c1989-8eeb-4c53-b95c-497aaf366024",
        "cursor": {
          "ref": "01327f81-6cd1-4ae0-85cf-7833048b02b7",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0b32ecd1-9796-4f99-b9ea-ddbdd92bc1c4"
        },
        "item": {
          "id": "f91c1989-8eeb-4c53-b95c-497aaf366024",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "55de6b93-bcf2-4f96-9bd4-caaf7cb47a4d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "f91c1989-8eeb-4c53-b95c-497aaf366024",
        "cursor": {
          "ref": "01327f81-6cd1-4ae0-85cf-7833048b02b7",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0b32ecd1-9796-4f99-b9ea-ddbdd92bc1c4"
        },
        "item": {
          "id": "f91c1989-8eeb-4c53-b95c-497aaf366024",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "55de6b93-bcf2-4f96-9bd4-caaf7cb47a4d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "8a261fd9-23e4-47b1-bfda-ba8a8a3cbc91",
        "cursor": {
          "ref": "7d31489f-c242-470c-b351-1ee14f16895a",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6007c9c0-dbd7-404d-bcfe-8f3c5ce9c3e7"
        },
        "item": {
          "id": "8a261fd9-23e4-47b1-bfda-ba8a8a3cbc91",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "713f045c-1e77-4b96-9622-931d7206ef3f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "8a261fd9-23e4-47b1-bfda-ba8a8a3cbc91",
        "cursor": {
          "ref": "7d31489f-c242-470c-b351-1ee14f16895a",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6007c9c0-dbd7-404d-bcfe-8f3c5ce9c3e7"
        },
        "item": {
          "id": "8a261fd9-23e4-47b1-bfda-ba8a8a3cbc91",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "713f045c-1e77-4b96-9622-931d7206ef3f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "76c4df1f-e21a-47c6-87a1-e6ff8213b91c",
        "cursor": {
          "ref": "4d9520b3-d116-4e0f-85fa-eff6bab4fb2c",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "38732cb3-2d73-4ed2-8bf8-2683a1136cb8"
        },
        "item": {
          "id": "76c4df1f-e21a-47c6-87a1-e6ff8213b91c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4c603fe7-a2b6-461c-ab25-86ec27c73e3e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "76c4df1f-e21a-47c6-87a1-e6ff8213b91c",
        "cursor": {
          "ref": "4d9520b3-d116-4e0f-85fa-eff6bab4fb2c",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "38732cb3-2d73-4ed2-8bf8-2683a1136cb8"
        },
        "item": {
          "id": "76c4df1f-e21a-47c6-87a1-e6ff8213b91c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4c603fe7-a2b6-461c-ab25-86ec27c73e3e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "e43840d7-058f-4e18-9d74-8469225b273b",
        "cursor": {
          "ref": "608b38a0-6d72-460b-9c3a-224411e5bfba",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ac0e361e-be1c-4176-adac-e1182d8c7a3a"
        },
        "item": {
          "id": "e43840d7-058f-4e18-9d74-8469225b273b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "09ed11f4-8738-4bb1-aec8-1f9a6e7436b9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "e43840d7-058f-4e18-9d74-8469225b273b",
        "cursor": {
          "ref": "608b38a0-6d72-460b-9c3a-224411e5bfba",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ac0e361e-be1c-4176-adac-e1182d8c7a3a"
        },
        "item": {
          "id": "e43840d7-058f-4e18-9d74-8469225b273b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "09ed11f4-8738-4bb1-aec8-1f9a6e7436b9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "e4391e5f-1f9b-4acc-9f25-62e4f9caf4af",
        "cursor": {
          "ref": "3e533edb-99bc-4c74-a0c6-ed9ba8aa360a",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "cdd86b7c-bd1c-442b-8bc0-abb04fa90e35"
        },
        "item": {
          "id": "e4391e5f-1f9b-4acc-9f25-62e4f9caf4af",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fce842fa-7819-40c6-9ddc-2ee6ec526a5f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "e4391e5f-1f9b-4acc-9f25-62e4f9caf4af",
        "cursor": {
          "ref": "3e533edb-99bc-4c74-a0c6-ed9ba8aa360a",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "cdd86b7c-bd1c-442b-8bc0-abb04fa90e35"
        },
        "item": {
          "id": "e4391e5f-1f9b-4acc-9f25-62e4f9caf4af",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fce842fa-7819-40c6-9ddc-2ee6ec526a5f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "d5200fca-fd57-4562-9fe6-d168b9171e69",
        "cursor": {
          "ref": "6f65bdd2-e2fc-416f-b58f-c5e4e11c7eb7",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1e284432-ea09-42c7-abca-555dc970fa85"
        },
        "item": {
          "id": "d5200fca-fd57-4562-9fe6-d168b9171e69",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1fbd173a-55c9-4adf-b2ba-910ddf9d502e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "d5200fca-fd57-4562-9fe6-d168b9171e69",
        "cursor": {
          "ref": "6f65bdd2-e2fc-416f-b58f-c5e4e11c7eb7",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1e284432-ea09-42c7-abca-555dc970fa85"
        },
        "item": {
          "id": "d5200fca-fd57-4562-9fe6-d168b9171e69",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1fbd173a-55c9-4adf-b2ba-910ddf9d502e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "60a9845e-f411-4d8f-9bbb-0e7165946b2d",
        "cursor": {
          "ref": "c1e1f709-d58c-42c3-98b9-079e13c86e1c",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2439607d-5800-49a1-9777-b0ad340d8973"
        },
        "item": {
          "id": "60a9845e-f411-4d8f-9bbb-0e7165946b2d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bce9719a-a3d3-4022-b34f-dd937dfab30d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "60a9845e-f411-4d8f-9bbb-0e7165946b2d",
        "cursor": {
          "ref": "c1e1f709-d58c-42c3-98b9-079e13c86e1c",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2439607d-5800-49a1-9777-b0ad340d8973"
        },
        "item": {
          "id": "60a9845e-f411-4d8f-9bbb-0e7165946b2d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bce9719a-a3d3-4022-b34f-dd937dfab30d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "e6c54fb1-78c7-4cad-9b34-7a04668d70da",
        "cursor": {
          "ref": "ba5d790b-7efc-4afa-bf47-535b2596861c",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "dd460783-fd90-4ff9-be85-cee125ee8ce3"
        },
        "item": {
          "id": "e6c54fb1-78c7-4cad-9b34-7a04668d70da",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6c8bd250-77ad-4761-8bc0-d49573e288e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "e6c54fb1-78c7-4cad-9b34-7a04668d70da",
        "cursor": {
          "ref": "ba5d790b-7efc-4afa-bf47-535b2596861c",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "dd460783-fd90-4ff9-be85-cee125ee8ce3"
        },
        "item": {
          "id": "e6c54fb1-78c7-4cad-9b34-7a04668d70da",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6c8bd250-77ad-4761-8bc0-d49573e288e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "37b3fc75-f682-465f-b935-ec8c41847727",
        "cursor": {
          "ref": "b7c923f4-203b-42a1-92b8-d21a8a1a5428",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "572e19ef-0bb8-40ba-8c68-bb4a6eaa0f5e"
        },
        "item": {
          "id": "37b3fc75-f682-465f-b935-ec8c41847727",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "aa6317aa-3741-4c21-9082-470ccc4e06b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "37b3fc75-f682-465f-b935-ec8c41847727",
        "cursor": {
          "ref": "b7c923f4-203b-42a1-92b8-d21a8a1a5428",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "572e19ef-0bb8-40ba-8c68-bb4a6eaa0f5e"
        },
        "item": {
          "id": "37b3fc75-f682-465f-b935-ec8c41847727",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "aa6317aa-3741-4c21-9082-470ccc4e06b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "6293979c-17a9-45c6-8cca-cdef84072792",
        "cursor": {
          "ref": "dc261a93-a891-4b3c-a585-18a777980e65",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "742bad84-2a73-4db3-891d-d45054ae04f5"
        },
        "item": {
          "id": "6293979c-17a9-45c6-8cca-cdef84072792",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "43f84176-f2fb-4fb3-9d0d-48859b66e330",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "6293979c-17a9-45c6-8cca-cdef84072792",
        "cursor": {
          "ref": "dc261a93-a891-4b3c-a585-18a777980e65",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "742bad84-2a73-4db3-891d-d45054ae04f5"
        },
        "item": {
          "id": "6293979c-17a9-45c6-8cca-cdef84072792",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "43f84176-f2fb-4fb3-9d0d-48859b66e330",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "e7af6edc-c5b3-4aa5-9b5d-8f85eaa01700",
        "cursor": {
          "ref": "54a4c191-9bd3-46e0-8b2b-ebc062007aa7",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d242fc0b-1550-476a-a8a8-0d5a553b78e9"
        },
        "item": {
          "id": "e7af6edc-c5b3-4aa5-9b5d-8f85eaa01700",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e90d121d-c3b9-4427-8ad5-6368f69624a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "e7af6edc-c5b3-4aa5-9b5d-8f85eaa01700",
        "cursor": {
          "ref": "54a4c191-9bd3-46e0-8b2b-ebc062007aa7",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d242fc0b-1550-476a-a8a8-0d5a553b78e9"
        },
        "item": {
          "id": "e7af6edc-c5b3-4aa5-9b5d-8f85eaa01700",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e90d121d-c3b9-4427-8ad5-6368f69624a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "ffceeef9-be25-4005-86d3-de9d46353773",
        "cursor": {
          "ref": "1674bd81-cd58-4deb-b333-f3a71a9b2ed8",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ef20bc63-fd6f-4818-97ea-2486c70393ae"
        },
        "item": {
          "id": "ffceeef9-be25-4005-86d3-de9d46353773",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "66017754-0e00-4c79-a3a6-f73ab51e4f68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "ffceeef9-be25-4005-86d3-de9d46353773",
        "cursor": {
          "ref": "1674bd81-cd58-4deb-b333-f3a71a9b2ed8",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ef20bc63-fd6f-4818-97ea-2486c70393ae"
        },
        "item": {
          "id": "ffceeef9-be25-4005-86d3-de9d46353773",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "66017754-0e00-4c79-a3a6-f73ab51e4f68",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "f421d0e4-23d3-4ed0-bc41-4581e71499ae",
        "cursor": {
          "ref": "e0c15a0e-b556-45c8-8c36-81423a2ee22d",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f0a7a3a1-0ce3-47c1-8bc4-f0d001423ce6"
        },
        "item": {
          "id": "f421d0e4-23d3-4ed0-bc41-4581e71499ae",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a833d4d5-be5b-4e54-a459-9401351b24fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "f421d0e4-23d3-4ed0-bc41-4581e71499ae",
        "cursor": {
          "ref": "e0c15a0e-b556-45c8-8c36-81423a2ee22d",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f0a7a3a1-0ce3-47c1-8bc4-f0d001423ce6"
        },
        "item": {
          "id": "f421d0e4-23d3-4ed0-bc41-4581e71499ae",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a833d4d5-be5b-4e54-a459-9401351b24fd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "d535c8e3-f032-4b10-8dd3-16381a341318",
        "cursor": {
          "ref": "30392eb9-e758-45da-b60d-a78f88021285",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d0766fe7-fbeb-4a91-bddb-76a2cc0eadf6"
        },
        "item": {
          "id": "d535c8e3-f032-4b10-8dd3-16381a341318",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "de5815d6-1e86-4c74-8ff4-586480f78498",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "d535c8e3-f032-4b10-8dd3-16381a341318",
        "cursor": {
          "ref": "30392eb9-e758-45da-b60d-a78f88021285",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d0766fe7-fbeb-4a91-bddb-76a2cc0eadf6"
        },
        "item": {
          "id": "d535c8e3-f032-4b10-8dd3-16381a341318",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "de5815d6-1e86-4c74-8ff4-586480f78498",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "0a28f666-1394-4c7c-94a1-738c9a072969",
        "cursor": {
          "ref": "4b63501f-cfe8-43d3-a71c-d9c3d5857212",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6717959a-d509-4b19-a96e-e155f5374383"
        },
        "item": {
          "id": "0a28f666-1394-4c7c-94a1-738c9a072969",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4a45e3bc-03f4-495e-b6e4-fc416b89279c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "0a28f666-1394-4c7c-94a1-738c9a072969",
        "cursor": {
          "ref": "4b63501f-cfe8-43d3-a71c-d9c3d5857212",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6717959a-d509-4b19-a96e-e155f5374383"
        },
        "item": {
          "id": "0a28f666-1394-4c7c-94a1-738c9a072969",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4a45e3bc-03f4-495e-b6e4-fc416b89279c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "06468983-8e01-481f-bdec-09ec86a77707",
        "cursor": {
          "ref": "126f0814-edb3-496c-98e7-b7e692660887",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "80ac7dbb-c725-49ee-b7ac-2375441a08f5"
        },
        "item": {
          "id": "06468983-8e01-481f-bdec-09ec86a77707",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8b9aa0b7-a79d-474b-bff2-e0af2f7dad8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "06468983-8e01-481f-bdec-09ec86a77707",
        "cursor": {
          "ref": "126f0814-edb3-496c-98e7-b7e692660887",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "80ac7dbb-c725-49ee-b7ac-2375441a08f5"
        },
        "item": {
          "id": "06468983-8e01-481f-bdec-09ec86a77707",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8b9aa0b7-a79d-474b-bff2-e0af2f7dad8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "6ef2d7e6-0bb0-4657-87fe-685a15778c6f",
        "cursor": {
          "ref": "bc9eb0ae-59bc-41cf-9b25-9344fc47fc1f",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b8642c18-8650-4e1f-927b-24cdca70c675"
        },
        "item": {
          "id": "6ef2d7e6-0bb0-4657-87fe-685a15778c6f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "49f1a3a9-2ce3-4aca-af24-e2672dbf6aa4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "6ef2d7e6-0bb0-4657-87fe-685a15778c6f",
        "cursor": {
          "ref": "bc9eb0ae-59bc-41cf-9b25-9344fc47fc1f",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b8642c18-8650-4e1f-927b-24cdca70c675"
        },
        "item": {
          "id": "6ef2d7e6-0bb0-4657-87fe-685a15778c6f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "49f1a3a9-2ce3-4aca-af24-e2672dbf6aa4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "9dfe6414-5dd1-4b18-86ec-1db6ada43343",
        "cursor": {
          "ref": "e9885d0d-fd5b-4777-9590-0c78ad6d379b",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7df1e88a-7d92-4f70-9712-4b1389292977"
        },
        "item": {
          "id": "9dfe6414-5dd1-4b18-86ec-1db6ada43343",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "267475dd-1979-4ca3-87f1-5fa6bb452301",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "9dfe6414-5dd1-4b18-86ec-1db6ada43343",
        "cursor": {
          "ref": "e9885d0d-fd5b-4777-9590-0c78ad6d379b",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7df1e88a-7d92-4f70-9712-4b1389292977"
        },
        "item": {
          "id": "9dfe6414-5dd1-4b18-86ec-1db6ada43343",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "267475dd-1979-4ca3-87f1-5fa6bb452301",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "4c016bc3-ba86-482c-9646-cb563b381ff4",
        "cursor": {
          "ref": "4297e376-bc75-4abd-a2ec-8382e50a7d04",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d5c0d767-252b-4135-bcc4-fd920337e05e"
        },
        "item": {
          "id": "4c016bc3-ba86-482c-9646-cb563b381ff4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1cef0baa-eeca-4200-96e5-3b2c1b56b4e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "4c016bc3-ba86-482c-9646-cb563b381ff4",
        "cursor": {
          "ref": "4297e376-bc75-4abd-a2ec-8382e50a7d04",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d5c0d767-252b-4135-bcc4-fd920337e05e"
        },
        "item": {
          "id": "4c016bc3-ba86-482c-9646-cb563b381ff4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "1cef0baa-eeca-4200-96e5-3b2c1b56b4e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "951b1f40-6acf-4c97-81ef-9d3d29be15c0",
        "cursor": {
          "ref": "a5c3c69f-9cfb-4896-9e89-464799df74b3",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5332db2e-831c-498a-afee-84889e5b3edd"
        },
        "item": {
          "id": "951b1f40-6acf-4c97-81ef-9d3d29be15c0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a3724dd9-f87c-4046-a567-f1ebe1fafbc6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "951b1f40-6acf-4c97-81ef-9d3d29be15c0",
        "cursor": {
          "ref": "a5c3c69f-9cfb-4896-9e89-464799df74b3",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5332db2e-831c-498a-afee-84889e5b3edd"
        },
        "item": {
          "id": "951b1f40-6acf-4c97-81ef-9d3d29be15c0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a3724dd9-f87c-4046-a567-f1ebe1fafbc6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "dc269f55-da5a-4d4c-9130-78d1ec009f6d",
        "cursor": {
          "ref": "06b43020-9f90-4a23-a25c-548a422dffd8",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "fa588b6a-92e0-4880-8911-7520b42b967d"
        },
        "item": {
          "id": "dc269f55-da5a-4d4c-9130-78d1ec009f6d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a6acff71-93bb-41e4-ae27-776763a795a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "dc269f55-da5a-4d4c-9130-78d1ec009f6d",
        "cursor": {
          "ref": "06b43020-9f90-4a23-a25c-548a422dffd8",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "fa588b6a-92e0-4880-8911-7520b42b967d"
        },
        "item": {
          "id": "dc269f55-da5a-4d4c-9130-78d1ec009f6d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a6acff71-93bb-41e4-ae27-776763a795a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "2e01a6fe-ccab-4cc5-911b-e9ded77be6c5",
        "cursor": {
          "ref": "03787c09-da78-498a-9f6b-0aa38437ed14",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7bda45fc-eb53-43bf-a8c4-f50fb8a8c8b8"
        },
        "item": {
          "id": "2e01a6fe-ccab-4cc5-911b-e9ded77be6c5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a76e218e-3004-4007-b16a-82656312477d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "2e01a6fe-ccab-4cc5-911b-e9ded77be6c5",
        "cursor": {
          "ref": "03787c09-da78-498a-9f6b-0aa38437ed14",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7bda45fc-eb53-43bf-a8c4-f50fb8a8c8b8"
        },
        "item": {
          "id": "2e01a6fe-ccab-4cc5-911b-e9ded77be6c5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a76e218e-3004-4007-b16a-82656312477d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "f3811dfd-f568-44fe-9d3c-e6b3b54cf217",
        "cursor": {
          "ref": "0d5933f5-1059-4f8a-8d73-25890a49b8de",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "da6e7cdb-c9ee-478d-8be8-01955dd91365"
        },
        "item": {
          "id": "f3811dfd-f568-44fe-9d3c-e6b3b54cf217",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d0f80760-5db5-4592-933c-029db13c3241",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "f3811dfd-f568-44fe-9d3c-e6b3b54cf217",
        "cursor": {
          "ref": "0d5933f5-1059-4f8a-8d73-25890a49b8de",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "da6e7cdb-c9ee-478d-8be8-01955dd91365"
        },
        "item": {
          "id": "f3811dfd-f568-44fe-9d3c-e6b3b54cf217",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d0f80760-5db5-4592-933c-029db13c3241",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "c2acd944-7675-485c-a2b2-4cc907658569",
        "cursor": {
          "ref": "91c0a299-38a1-4aa3-9eef-c788c1d2f139",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1c671580-d3c1-4136-a02f-807da0c4ef7e"
        },
        "item": {
          "id": "c2acd944-7675-485c-a2b2-4cc907658569",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "71682aa5-8233-4a78-957a-114702e2367c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "c2acd944-7675-485c-a2b2-4cc907658569",
        "cursor": {
          "ref": "91c0a299-38a1-4aa3-9eef-c788c1d2f139",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1c671580-d3c1-4136-a02f-807da0c4ef7e"
        },
        "item": {
          "id": "c2acd944-7675-485c-a2b2-4cc907658569",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "71682aa5-8233-4a78-957a-114702e2367c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "8a3ec88f-9d6f-4c12-92c9-dcf94eea6a1d",
        "cursor": {
          "ref": "4c30cf56-91df-4c51-94de-d81535f384dd",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2c128c07-ae19-413f-8aa9-0cbf64d87eb5"
        },
        "item": {
          "id": "8a3ec88f-9d6f-4c12-92c9-dcf94eea6a1d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5ac6329a-7224-4fda-9d14-240d7f6a7e36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "8a3ec88f-9d6f-4c12-92c9-dcf94eea6a1d",
        "cursor": {
          "ref": "4c30cf56-91df-4c51-94de-d81535f384dd",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2c128c07-ae19-413f-8aa9-0cbf64d87eb5"
        },
        "item": {
          "id": "8a3ec88f-9d6f-4c12-92c9-dcf94eea6a1d",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5ac6329a-7224-4fda-9d14-240d7f6a7e36",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "09c4e1a5-d198-40b7-8a13-28a5a6c4d2b1",
        "cursor": {
          "ref": "4d266ff8-1a1e-4ce4-a373-4f34f0f490e0",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "dfa8c07e-59db-4df6-b226-9b1743d6091a"
        },
        "item": {
          "id": "09c4e1a5-d198-40b7-8a13-28a5a6c4d2b1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "695f9154-9470-46dc-b01e-fcd65e03321a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "09c4e1a5-d198-40b7-8a13-28a5a6c4d2b1",
        "cursor": {
          "ref": "4d266ff8-1a1e-4ce4-a373-4f34f0f490e0",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "dfa8c07e-59db-4df6-b226-9b1743d6091a"
        },
        "item": {
          "id": "09c4e1a5-d198-40b7-8a13-28a5a6c4d2b1",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "695f9154-9470-46dc-b01e-fcd65e03321a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "287f4758-0e84-4631-892e-98b9c9a10a37",
        "cursor": {
          "ref": "27cbc24f-a7c3-4483-af2e-0a3a1193ce37",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4c50197c-bf5a-4ce7-802d-2731081db072"
        },
        "item": {
          "id": "287f4758-0e84-4631-892e-98b9c9a10a37",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c6338c44-867f-4d04-8cb2-e842aa4a96cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "287f4758-0e84-4631-892e-98b9c9a10a37",
        "cursor": {
          "ref": "27cbc24f-a7c3-4483-af2e-0a3a1193ce37",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4c50197c-bf5a-4ce7-802d-2731081db072"
        },
        "item": {
          "id": "287f4758-0e84-4631-892e-98b9c9a10a37",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "c6338c44-867f-4d04-8cb2-e842aa4a96cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "5fb0f515-e138-4258-ab5f-37b3d4ca0142",
        "cursor": {
          "ref": "976350c6-45f1-4ce6-a421-b5fdca13d1c5",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ba9ab9dd-54f0-4397-b042-74f819fd3904"
        },
        "item": {
          "id": "5fb0f515-e138-4258-ab5f-37b3d4ca0142",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5aa5f86f-d6bf-4f43-a0d9-dc367b4eb3b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "5fb0f515-e138-4258-ab5f-37b3d4ca0142",
        "cursor": {
          "ref": "976350c6-45f1-4ce6-a421-b5fdca13d1c5",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ba9ab9dd-54f0-4397-b042-74f819fd3904"
        },
        "item": {
          "id": "5fb0f515-e138-4258-ab5f-37b3d4ca0142",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5aa5f86f-d6bf-4f43-a0d9-dc367b4eb3b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "2b3d3227-6141-48c2-82aa-16aa02da9d93",
        "cursor": {
          "ref": "b3b144a1-b470-492d-8d9e-63c381b97e9b",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2e876c22-828d-4cf0-80aa-a927d868d0cb"
        },
        "item": {
          "id": "2b3d3227-6141-48c2-82aa-16aa02da9d93",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "94242dc9-def5-49ec-9ec3-3ecf76a9e3bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "2b3d3227-6141-48c2-82aa-16aa02da9d93",
        "cursor": {
          "ref": "b3b144a1-b470-492d-8d9e-63c381b97e9b",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "2e876c22-828d-4cf0-80aa-a927d868d0cb"
        },
        "item": {
          "id": "2b3d3227-6141-48c2-82aa-16aa02da9d93",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "94242dc9-def5-49ec-9ec3-3ecf76a9e3bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "f8b773dc-7c09-4158-9193-b15b55a6cf2f",
        "cursor": {
          "ref": "d786cc7e-c645-4db2-8aac-5230235ce326",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "99e84e00-4ed2-45a2-863e-65987593542d"
        },
        "item": {
          "id": "f8b773dc-7c09-4158-9193-b15b55a6cf2f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "859d348c-433b-48c6-8a80-26691fdc24b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "f8b773dc-7c09-4158-9193-b15b55a6cf2f",
        "cursor": {
          "ref": "d786cc7e-c645-4db2-8aac-5230235ce326",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "99e84e00-4ed2-45a2-863e-65987593542d"
        },
        "item": {
          "id": "f8b773dc-7c09-4158-9193-b15b55a6cf2f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "859d348c-433b-48c6-8a80-26691fdc24b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "d6beba67-f1ab-4efa-b721-baac7e3e0999",
        "cursor": {
          "ref": "c75f15a2-5f66-4a73-85d7-eb5a24e09a47",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3856ffcf-3209-49fa-b1c6-230b1ed6fd1e"
        },
        "item": {
          "id": "d6beba67-f1ab-4efa-b721-baac7e3e0999",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b59190b2-4f1c-433b-a75e-f9ba8517f9f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 24,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "d6beba67-f1ab-4efa-b721-baac7e3e0999",
        "cursor": {
          "ref": "c75f15a2-5f66-4a73-85d7-eb5a24e09a47",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3856ffcf-3209-49fa-b1c6-230b1ed6fd1e"
        },
        "item": {
          "id": "d6beba67-f1ab-4efa-b721-baac7e3e0999",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b59190b2-4f1c-433b-a75e-f9ba8517f9f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 24,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "326d2141-1250-4aca-92ed-d160105d8489",
        "cursor": {
          "ref": "e68bff31-8b95-42ed-99d4-64a0052d1582",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "906334ce-6ed9-4bcf-a987-4e95e60d884b"
        },
        "item": {
          "id": "326d2141-1250-4aca-92ed-d160105d8489",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f3d3ecfd-baf9-4e51-9d48-8b5ae6b81127",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "326d2141-1250-4aca-92ed-d160105d8489",
        "cursor": {
          "ref": "e68bff31-8b95-42ed-99d4-64a0052d1582",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "906334ce-6ed9-4bcf-a987-4e95e60d884b"
        },
        "item": {
          "id": "326d2141-1250-4aca-92ed-d160105d8489",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f3d3ecfd-baf9-4e51-9d48-8b5ae6b81127",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "8fd1f467-eb73-4a5a-aa68-0bd1194da2c0",
        "cursor": {
          "ref": "7004571d-4bee-4908-9fd7-14461329802b",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "90d59b49-feec-4fd5-a09e-3d0561090af5"
        },
        "item": {
          "id": "8fd1f467-eb73-4a5a-aa68-0bd1194da2c0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "35547ded-7f51-4be6-9120-cc6614fe9414",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "8fd1f467-eb73-4a5a-aa68-0bd1194da2c0",
        "cursor": {
          "ref": "7004571d-4bee-4908-9fd7-14461329802b",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "90d59b49-feec-4fd5-a09e-3d0561090af5"
        },
        "item": {
          "id": "8fd1f467-eb73-4a5a-aa68-0bd1194da2c0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "35547ded-7f51-4be6-9120-cc6614fe9414",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "d8f3d7e7-ef7c-4f53-a44f-85763394b5c9",
        "cursor": {
          "ref": "99555f8a-905e-4577-b25e-e9829380de0d",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f3c7ff5b-ea93-42d4-b22b-b06cf4787b53"
        },
        "item": {
          "id": "d8f3d7e7-ef7c-4f53-a44f-85763394b5c9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "33492882-2e0d-47e1-9e0e-6fe069bce634",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "d8f3d7e7-ef7c-4f53-a44f-85763394b5c9",
        "cursor": {
          "ref": "99555f8a-905e-4577-b25e-e9829380de0d",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f3c7ff5b-ea93-42d4-b22b-b06cf4787b53"
        },
        "item": {
          "id": "d8f3d7e7-ef7c-4f53-a44f-85763394b5c9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "33492882-2e0d-47e1-9e0e-6fe069bce634",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "cd50294a-18a0-446b-ab77-bbf0d80fae5a",
        "cursor": {
          "ref": "c44d227f-8a82-4658-a3ad-f1c222efa22e",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7650ccd3-c370-4658-bbee-04ed62d75880"
        },
        "item": {
          "id": "cd50294a-18a0-446b-ab77-bbf0d80fae5a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0ebbf78f-7b83-40e5-9bb6-53e87ea8072a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "cd50294a-18a0-446b-ab77-bbf0d80fae5a",
        "cursor": {
          "ref": "c44d227f-8a82-4658-a3ad-f1c222efa22e",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7650ccd3-c370-4658-bbee-04ed62d75880"
        },
        "item": {
          "id": "cd50294a-18a0-446b-ab77-bbf0d80fae5a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0ebbf78f-7b83-40e5-9bb6-53e87ea8072a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "a8fcb244-4c91-470d-ac35-538c15f48834",
        "cursor": {
          "ref": "5699fe7e-a91f-4f38-aa16-86fc69062024",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4d6d626e-5dbc-4e6a-bbc8-91858a1e3ec2"
        },
        "item": {
          "id": "a8fcb244-4c91-470d-ac35-538c15f48834",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "35f52760-b876-4109-9e4a-e2e470fadd2c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "a8fcb244-4c91-470d-ac35-538c15f48834",
        "cursor": {
          "ref": "5699fe7e-a91f-4f38-aa16-86fc69062024",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4d6d626e-5dbc-4e6a-bbc8-91858a1e3ec2"
        },
        "item": {
          "id": "a8fcb244-4c91-470d-ac35-538c15f48834",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "35f52760-b876-4109-9e4a-e2e470fadd2c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "e6db03e3-5a63-404c-b3f8-e5a52eefb32d",
        "cursor": {
          "ref": "85b0d796-2a80-42ce-862a-9a83d347eb6d",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4a287a08-7b40-4e03-b3af-528fd8b8caec"
        },
        "item": {
          "id": "e6db03e3-5a63-404c-b3f8-e5a52eefb32d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6f11783e-6b73-4e22-9b3d-cd41ea8ef562",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "e6db03e3-5a63-404c-b3f8-e5a52eefb32d",
        "cursor": {
          "ref": "85b0d796-2a80-42ce-862a-9a83d347eb6d",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4a287a08-7b40-4e03-b3af-528fd8b8caec"
        },
        "item": {
          "id": "e6db03e3-5a63-404c-b3f8-e5a52eefb32d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6f11783e-6b73-4e22-9b3d-cd41ea8ef562",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "ebeff5ae-6e82-42dc-a470-79a41b72fb81",
        "cursor": {
          "ref": "a725faa4-abfe-4f65-8d35-d52a24b59927",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3673e568-8256-4fe9-99a5-5a85448231b0"
        },
        "item": {
          "id": "ebeff5ae-6e82-42dc-a470-79a41b72fb81",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5a23eb4d-fc08-4486-a3d0-d07f0e40778d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "ebeff5ae-6e82-42dc-a470-79a41b72fb81",
        "cursor": {
          "ref": "a725faa4-abfe-4f65-8d35-d52a24b59927",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3673e568-8256-4fe9-99a5-5a85448231b0"
        },
        "item": {
          "id": "ebeff5ae-6e82-42dc-a470-79a41b72fb81",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5a23eb4d-fc08-4486-a3d0-d07f0e40778d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "6b9b88b5-f6b7-4d4e-b006-8ce564b49bdf",
        "cursor": {
          "ref": "fbffedd6-5a8f-47e3-80c4-ff5c9cc554ea",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e6f872fd-faa5-4db9-876c-ef9d7d15e88c"
        },
        "item": {
          "id": "6b9b88b5-f6b7-4d4e-b006-8ce564b49bdf",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9cf8a746-e7b4-484e-bdc8-9974839417c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "6b9b88b5-f6b7-4d4e-b006-8ce564b49bdf",
        "cursor": {
          "ref": "fbffedd6-5a8f-47e3-80c4-ff5c9cc554ea",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e6f872fd-faa5-4db9-876c-ef9d7d15e88c"
        },
        "item": {
          "id": "6b9b88b5-f6b7-4d4e-b006-8ce564b49bdf",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9cf8a746-e7b4-484e-bdc8-9974839417c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "37246aa1-c708-4a50-bdab-1913aaef4b2c",
        "cursor": {
          "ref": "ce299d18-9e94-4a06-b0e2-57c3c5ff26dc",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9758a9fe-d042-4c28-a089-21f0dc6e3d85"
        },
        "item": {
          "id": "37246aa1-c708-4a50-bdab-1913aaef4b2c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "db030bfe-af2a-45b2-8fd4-6e9ec6745005",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "37246aa1-c708-4a50-bdab-1913aaef4b2c",
        "cursor": {
          "ref": "ce299d18-9e94-4a06-b0e2-57c3c5ff26dc",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9758a9fe-d042-4c28-a089-21f0dc6e3d85"
        },
        "item": {
          "id": "37246aa1-c708-4a50-bdab-1913aaef4b2c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "db030bfe-af2a-45b2-8fd4-6e9ec6745005",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "f085dca1-6cd3-4c2c-9353-64e8a2a13c7d",
        "cursor": {
          "ref": "e4b31a69-b88d-4fce-b4ec-c5776a79abfc",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b440a327-bec2-4163-9bbd-6e97d27a55d4"
        },
        "item": {
          "id": "f085dca1-6cd3-4c2c-9353-64e8a2a13c7d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9bd30184-8b6c-47a3-b31c-843d001fa003",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "f085dca1-6cd3-4c2c-9353-64e8a2a13c7d",
        "cursor": {
          "ref": "e4b31a69-b88d-4fce-b4ec-c5776a79abfc",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b440a327-bec2-4163-9bbd-6e97d27a55d4"
        },
        "item": {
          "id": "f085dca1-6cd3-4c2c-9353-64e8a2a13c7d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9bd30184-8b6c-47a3-b31c-843d001fa003",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "29eeeb80-1d3e-4718-a3bc-62fd6e48fcc6",
        "cursor": {
          "ref": "9c190257-35f1-43e5-b141-4800e721eef4",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9681ba87-212c-408b-ba0b-6a4932d5ab62"
        },
        "item": {
          "id": "29eeeb80-1d3e-4718-a3bc-62fd6e48fcc6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9b5f3d1f-254d-4af2-8042-e117cfc056a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "29eeeb80-1d3e-4718-a3bc-62fd6e48fcc6",
        "cursor": {
          "ref": "9c190257-35f1-43e5-b141-4800e721eef4",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9681ba87-212c-408b-ba0b-6a4932d5ab62"
        },
        "item": {
          "id": "29eeeb80-1d3e-4718-a3bc-62fd6e48fcc6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9b5f3d1f-254d-4af2-8042-e117cfc056a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "9393072d-ce92-48c1-97a2-30ec1080f5bd",
        "cursor": {
          "ref": "d5cc700a-55aa-4659-b68e-8a1a019be9ac",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b9c67916-8a40-44f7-89d7-f1113c7fcf19"
        },
        "item": {
          "id": "9393072d-ce92-48c1-97a2-30ec1080f5bd",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4b595c83-3928-4022-a334-8128a804c307",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "9393072d-ce92-48c1-97a2-30ec1080f5bd",
        "cursor": {
          "ref": "d5cc700a-55aa-4659-b68e-8a1a019be9ac",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b9c67916-8a40-44f7-89d7-f1113c7fcf19"
        },
        "item": {
          "id": "9393072d-ce92-48c1-97a2-30ec1080f5bd",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4b595c83-3928-4022-a334-8128a804c307",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "e63f7657-afb4-4552-9fe6-05814d77cc5c",
        "cursor": {
          "ref": "9060d141-9e68-4c3a-9dd3-4d846aa4b29b",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "44d8494a-105b-4d49-93d7-79715b31849c"
        },
        "item": {
          "id": "e63f7657-afb4-4552-9fe6-05814d77cc5c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1b4da15f-7bc2-42b1-aaa8-de7d599c992a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "e63f7657-afb4-4552-9fe6-05814d77cc5c",
        "cursor": {
          "ref": "9060d141-9e68-4c3a-9dd3-4d846aa4b29b",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "44d8494a-105b-4d49-93d7-79715b31849c"
        },
        "item": {
          "id": "e63f7657-afb4-4552-9fe6-05814d77cc5c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1b4da15f-7bc2-42b1-aaa8-de7d599c992a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "ef55cfd3-5b45-4dc8-844b-338f3a1e7899",
        "cursor": {
          "ref": "1656f5c4-a082-47e5-9a89-d37bf98e6fa5",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "af6df0d4-2665-45da-aa4c-7c8f3e1213c8"
        },
        "item": {
          "id": "ef55cfd3-5b45-4dc8-844b-338f3a1e7899",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fbbdf8a5-ea84-494c-ba0b-a93dd5bd5f55",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "ef55cfd3-5b45-4dc8-844b-338f3a1e7899",
        "cursor": {
          "ref": "1656f5c4-a082-47e5-9a89-d37bf98e6fa5",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "af6df0d4-2665-45da-aa4c-7c8f3e1213c8"
        },
        "item": {
          "id": "ef55cfd3-5b45-4dc8-844b-338f3a1e7899",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "fbbdf8a5-ea84-494c-ba0b-a93dd5bd5f55",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "e61c58a2-19bc-4097-8914-5498c01efe03",
        "cursor": {
          "ref": "8de569b7-7889-472f-b5a3-2066781758d4",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f858fb53-7dd4-4c1c-b922-bcd29da8dfe5"
        },
        "item": {
          "id": "e61c58a2-19bc-4097-8914-5498c01efe03",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8e6a14ce-e01a-4c9f-bd54-4bba45c7404a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "e61c58a2-19bc-4097-8914-5498c01efe03",
        "cursor": {
          "ref": "8de569b7-7889-472f-b5a3-2066781758d4",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f858fb53-7dd4-4c1c-b922-bcd29da8dfe5"
        },
        "item": {
          "id": "e61c58a2-19bc-4097-8914-5498c01efe03",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8e6a14ce-e01a-4c9f-bd54-4bba45c7404a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "0c9967ff-04b5-4c9f-9330-64d5a2b26aa2",
        "cursor": {
          "ref": "d44dfaab-9577-439f-a748-51d016925c88",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "40794f36-d87c-4777-8674-01f18e65b698"
        },
        "item": {
          "id": "0c9967ff-04b5-4c9f-9330-64d5a2b26aa2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "16e4c412-f95b-4f4f-a2b6-c2149f2b6322",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "0c9967ff-04b5-4c9f-9330-64d5a2b26aa2",
        "cursor": {
          "ref": "d44dfaab-9577-439f-a748-51d016925c88",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "40794f36-d87c-4777-8674-01f18e65b698"
        },
        "item": {
          "id": "0c9967ff-04b5-4c9f-9330-64d5a2b26aa2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "16e4c412-f95b-4f4f-a2b6-c2149f2b6322",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "98dbd7fd-8830-43f8-8dc9-cab26e74ddb7",
        "cursor": {
          "ref": "31b41047-5a1e-461e-a51a-147146bc5753",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2a2e1c2e-4f57-4ac1-8dae-c3ac125bb32e"
        },
        "item": {
          "id": "98dbd7fd-8830-43f8-8dc9-cab26e74ddb7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "aed0da51-b01a-4202-9230-a6db3033dcd8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "98dbd7fd-8830-43f8-8dc9-cab26e74ddb7",
        "cursor": {
          "ref": "31b41047-5a1e-461e-a51a-147146bc5753",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2a2e1c2e-4f57-4ac1-8dae-c3ac125bb32e"
        },
        "item": {
          "id": "98dbd7fd-8830-43f8-8dc9-cab26e74ddb7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "aed0da51-b01a-4202-9230-a6db3033dcd8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "24e5ed61-5e93-477d-af59-33476ac2f457",
        "cursor": {
          "ref": "c7f004b7-2182-479c-8f82-a04e6344a2bb",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a1039284-31ed-46eb-a99c-c63987e0a9ef"
        },
        "item": {
          "id": "24e5ed61-5e93-477d-af59-33476ac2f457",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e87448da-e006-42d3-bbcd-e530659dfc22",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "24e5ed61-5e93-477d-af59-33476ac2f457",
        "cursor": {
          "ref": "c7f004b7-2182-479c-8f82-a04e6344a2bb",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a1039284-31ed-46eb-a99c-c63987e0a9ef"
        },
        "item": {
          "id": "24e5ed61-5e93-477d-af59-33476ac2f457",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e87448da-e006-42d3-bbcd-e530659dfc22",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "df5f4c8c-007f-41df-b1b7-3b92701acb91",
        "cursor": {
          "ref": "09eb0dd8-b89f-43c1-ba0a-db834dda23e5",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "03b32fa7-3ac8-490f-8e0f-5c4f60f6b0c1"
        },
        "item": {
          "id": "df5f4c8c-007f-41df-b1b7-3b92701acb91",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "10ab7f48-82a5-4309-b460-5f083a643103",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "df5f4c8c-007f-41df-b1b7-3b92701acb91",
        "cursor": {
          "ref": "09eb0dd8-b89f-43c1-ba0a-db834dda23e5",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "03b32fa7-3ac8-490f-8e0f-5c4f60f6b0c1"
        },
        "item": {
          "id": "df5f4c8c-007f-41df-b1b7-3b92701acb91",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "10ab7f48-82a5-4309-b460-5f083a643103",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "24ba45ed-89cb-4aeb-83f6-3428d786acdb",
        "cursor": {
          "ref": "9fbb3a69-caa2-4cb3-b9a9-cccc0efc6e2a",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2d37a8a0-77aa-47b7-b7d7-1cb132876013"
        },
        "item": {
          "id": "24ba45ed-89cb-4aeb-83f6-3428d786acdb",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "acac006f-2db4-4cae-9290-425cbaa3e27d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "24ba45ed-89cb-4aeb-83f6-3428d786acdb",
        "cursor": {
          "ref": "9fbb3a69-caa2-4cb3-b9a9-cccc0efc6e2a",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2d37a8a0-77aa-47b7-b7d7-1cb132876013"
        },
        "item": {
          "id": "24ba45ed-89cb-4aeb-83f6-3428d786acdb",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "acac006f-2db4-4cae-9290-425cbaa3e27d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "5d056d76-0189-4b0a-8d68-78d6004a3bb6",
        "cursor": {
          "ref": "42c7fbb2-e477-41f4-b918-31407836decf",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "254e9284-772b-414b-b3e1-aa504d8f6ba8"
        },
        "item": {
          "id": "5d056d76-0189-4b0a-8d68-78d6004a3bb6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4e9a504e-7097-42ef-a9ce-7b0adbfb38b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "5d056d76-0189-4b0a-8d68-78d6004a3bb6",
        "cursor": {
          "ref": "42c7fbb2-e477-41f4-b918-31407836decf",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "254e9284-772b-414b-b3e1-aa504d8f6ba8"
        },
        "item": {
          "id": "5d056d76-0189-4b0a-8d68-78d6004a3bb6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4e9a504e-7097-42ef-a9ce-7b0adbfb38b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "97136f45-f4d3-40fd-93d8-afce73fba1b6",
        "cursor": {
          "ref": "e3ae18e3-b532-4f2a-9d81-e428e857244f",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "404af2d6-1072-45ac-955d-d47cf0e75f27"
        },
        "item": {
          "id": "97136f45-f4d3-40fd-93d8-afce73fba1b6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8cad8c1b-df33-4cc9-a180-adc55b6ea34d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "97136f45-f4d3-40fd-93d8-afce73fba1b6",
        "cursor": {
          "ref": "e3ae18e3-b532-4f2a-9d81-e428e857244f",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "404af2d6-1072-45ac-955d-d47cf0e75f27"
        },
        "item": {
          "id": "97136f45-f4d3-40fd-93d8-afce73fba1b6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8cad8c1b-df33-4cc9-a180-adc55b6ea34d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "66422dab-90b5-43ca-aaad-49eb7058ba85",
        "cursor": {
          "ref": "2cba47c0-0463-4360-ad36-b6b3c034759f",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f919c773-9f00-4641-ab90-f4d2d4e2cdaa"
        },
        "item": {
          "id": "66422dab-90b5-43ca-aaad-49eb7058ba85",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d845a458-81e7-4f1b-b74b-2bf9e0aa092b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "66422dab-90b5-43ca-aaad-49eb7058ba85",
        "cursor": {
          "ref": "2cba47c0-0463-4360-ad36-b6b3c034759f",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f919c773-9f00-4641-ab90-f4d2d4e2cdaa"
        },
        "item": {
          "id": "66422dab-90b5-43ca-aaad-49eb7058ba85",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d845a458-81e7-4f1b-b74b-2bf9e0aa092b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "56fd931e-3937-4d86-94b4-a7bc64e62864",
        "cursor": {
          "ref": "32fb0366-fce7-4418-b778-c6adc584ccb1",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d55de68a-87c0-4b0f-b294-ccb63b60f69b"
        },
        "item": {
          "id": "56fd931e-3937-4d86-94b4-a7bc64e62864",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6a3bbf3c-1c3a-4cf1-b69e-f5d41599f445",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "56fd931e-3937-4d86-94b4-a7bc64e62864",
        "cursor": {
          "ref": "32fb0366-fce7-4418-b778-c6adc584ccb1",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d55de68a-87c0-4b0f-b294-ccb63b60f69b"
        },
        "item": {
          "id": "56fd931e-3937-4d86-94b4-a7bc64e62864",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6a3bbf3c-1c3a-4cf1-b69e-f5d41599f445",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "4ec598c1-f759-46ee-b1e9-1fd972354854",
        "cursor": {
          "ref": "ee3a68ec-22a5-474d-8170-0c9b90fc16e2",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "10c2b33b-22df-4852-854c-9e1a6071044f"
        },
        "item": {
          "id": "4ec598c1-f759-46ee-b1e9-1fd972354854",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "222917e7-26dc-42d1-b9c6-2897d415fafe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "4ec598c1-f759-46ee-b1e9-1fd972354854",
        "cursor": {
          "ref": "ee3a68ec-22a5-474d-8170-0c9b90fc16e2",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "10c2b33b-22df-4852-854c-9e1a6071044f"
        },
        "item": {
          "id": "4ec598c1-f759-46ee-b1e9-1fd972354854",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "222917e7-26dc-42d1-b9c6-2897d415fafe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "bff5fed0-f6cb-4525-9916-79db2618b083",
        "cursor": {
          "ref": "45cd35fa-60d1-44c8-86df-a1d5b0bcf261",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "545bb44c-e49d-4da0-825a-8e33eec17859"
        },
        "item": {
          "id": "bff5fed0-f6cb-4525-9916-79db2618b083",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0839a40d-63b7-4f89-954b-48ba3725b267",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "bff5fed0-f6cb-4525-9916-79db2618b083",
        "cursor": {
          "ref": "45cd35fa-60d1-44c8-86df-a1d5b0bcf261",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "545bb44c-e49d-4da0-825a-8e33eec17859"
        },
        "item": {
          "id": "bff5fed0-f6cb-4525-9916-79db2618b083",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0839a40d-63b7-4f89-954b-48ba3725b267",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "af2ad23c-f080-406c-a03d-c10ef2ed2ae4",
        "cursor": {
          "ref": "4d8141e4-41a6-4048-8824-f4fc44ce74a8",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9e4ddab6-289f-4c77-bdaa-ceec54c16458"
        },
        "item": {
          "id": "af2ad23c-f080-406c-a03d-c10ef2ed2ae4",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "87c6a626-ad94-43fc-84b7-50b7f748faae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "af2ad23c-f080-406c-a03d-c10ef2ed2ae4",
        "cursor": {
          "ref": "4d8141e4-41a6-4048-8824-f4fc44ce74a8",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9e4ddab6-289f-4c77-bdaa-ceec54c16458"
        },
        "item": {
          "id": "af2ad23c-f080-406c-a03d-c10ef2ed2ae4",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "87c6a626-ad94-43fc-84b7-50b7f748faae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "81c5c815-2659-480c-8ba5-b7628224a77e",
        "cursor": {
          "ref": "5ce8c19c-28dc-4e2f-ac73-ac8e66f8b321",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "52b21042-d9a2-4ad2-86e7-911cccbfef22"
        },
        "item": {
          "id": "81c5c815-2659-480c-8ba5-b7628224a77e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9c785cb9-9f9e-4cd4-bb30-8a97703cd4ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "81c5c815-2659-480c-8ba5-b7628224a77e",
        "cursor": {
          "ref": "5ce8c19c-28dc-4e2f-ac73-ac8e66f8b321",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "52b21042-d9a2-4ad2-86e7-911cccbfef22"
        },
        "item": {
          "id": "81c5c815-2659-480c-8ba5-b7628224a77e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9c785cb9-9f9e-4cd4-bb30-8a97703cd4ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "3252a210-6925-450e-be3e-dc8db15f4c36",
        "cursor": {
          "ref": "92cc9151-f09e-4827-b985-f1d0109d5e29",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "916adc71-c937-41c5-b9f1-8453ab495722"
        },
        "item": {
          "id": "3252a210-6925-450e-be3e-dc8db15f4c36",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6fbab395-86a3-410f-bd82-865b6e614b51",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "3252a210-6925-450e-be3e-dc8db15f4c36",
        "cursor": {
          "ref": "92cc9151-f09e-4827-b985-f1d0109d5e29",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "916adc71-c937-41c5-b9f1-8453ab495722"
        },
        "item": {
          "id": "3252a210-6925-450e-be3e-dc8db15f4c36",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6fbab395-86a3-410f-bd82-865b6e614b51",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "ea938929-a516-4529-9712-954b008db1ea",
        "cursor": {
          "ref": "8809b207-4219-40d1-ac81-e57f8f6ef471",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d08e4848-d926-48f0-a5db-f2c72fffbbec"
        },
        "item": {
          "id": "ea938929-a516-4529-9712-954b008db1ea",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6fbf037c-290a-4b43-a391-34820f2d2787",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "ea938929-a516-4529-9712-954b008db1ea",
        "cursor": {
          "ref": "8809b207-4219-40d1-ac81-e57f8f6ef471",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d08e4848-d926-48f0-a5db-f2c72fffbbec"
        },
        "item": {
          "id": "ea938929-a516-4529-9712-954b008db1ea",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6fbf037c-290a-4b43-a391-34820f2d2787",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "7ff40728-3d97-4f02-8e34-813dd573e068",
        "cursor": {
          "ref": "585d9f59-40d0-4c5b-a1a6-25019ecf0d6d",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "94a3b26a-c724-4463-acc6-e3fffde7f56b"
        },
        "item": {
          "id": "7ff40728-3d97-4f02-8e34-813dd573e068",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "07afdb05-3676-4951-bb13-f91930ca987f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "7ff40728-3d97-4f02-8e34-813dd573e068",
        "cursor": {
          "ref": "585d9f59-40d0-4c5b-a1a6-25019ecf0d6d",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "94a3b26a-c724-4463-acc6-e3fffde7f56b"
        },
        "item": {
          "id": "7ff40728-3d97-4f02-8e34-813dd573e068",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "07afdb05-3676-4951-bb13-f91930ca987f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "82d0b192-7ea7-463a-92f6-be2ad8f4a9d2",
        "cursor": {
          "ref": "d429ffdd-76d3-41e1-81b8-25d04a9ec7ac",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4f270d53-9c87-4066-a052-8ffd417696d7"
        },
        "item": {
          "id": "82d0b192-7ea7-463a-92f6-be2ad8f4a9d2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "abb1e127-c8e5-436b-812a-55606b4bbb81",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "82d0b192-7ea7-463a-92f6-be2ad8f4a9d2",
        "cursor": {
          "ref": "d429ffdd-76d3-41e1-81b8-25d04a9ec7ac",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4f270d53-9c87-4066-a052-8ffd417696d7"
        },
        "item": {
          "id": "82d0b192-7ea7-463a-92f6-be2ad8f4a9d2",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "abb1e127-c8e5-436b-812a-55606b4bbb81",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "56faf6bc-18d1-4206-a686-4971f7717356",
        "cursor": {
          "ref": "e209b559-1ff6-4f35-a7c8-73c875f9135c",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0064ad91-02f7-4532-8adf-e902658437b8"
        },
        "item": {
          "id": "56faf6bc-18d1-4206-a686-4971f7717356",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f9e7bf29-47a4-4c0a-b28d-75a9c2e00f01",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "56faf6bc-18d1-4206-a686-4971f7717356",
        "cursor": {
          "ref": "e209b559-1ff6-4f35-a7c8-73c875f9135c",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "0064ad91-02f7-4532-8adf-e902658437b8"
        },
        "item": {
          "id": "56faf6bc-18d1-4206-a686-4971f7717356",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f9e7bf29-47a4-4c0a-b28d-75a9c2e00f01",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "6d2c8fea-12be-4a4a-a70f-36fdfb433593",
        "cursor": {
          "ref": "9da2e1cb-f049-42d7-9611-1e2c57e3d8fc",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1f05547f-c0e8-4137-a897-6d0e953846ec"
        },
        "item": {
          "id": "6d2c8fea-12be-4a4a-a70f-36fdfb433593",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "023fa403-2a02-405b-9571-406d0783d4fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "6d2c8fea-12be-4a4a-a70f-36fdfb433593",
        "cursor": {
          "ref": "9da2e1cb-f049-42d7-9611-1e2c57e3d8fc",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1f05547f-c0e8-4137-a897-6d0e953846ec"
        },
        "item": {
          "id": "6d2c8fea-12be-4a4a-a70f-36fdfb433593",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "023fa403-2a02-405b-9571-406d0783d4fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "9bab32b9-a425-427b-9c21-7aaa2d9bb2a2",
        "cursor": {
          "ref": "adbd5f1c-c8fb-45c0-b962-815cbee905f4",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "76a3978f-4524-4f0c-8f77-cffd68ff6726"
        },
        "item": {
          "id": "9bab32b9-a425-427b-9c21-7aaa2d9bb2a2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8d55456e-3ff0-4358-8ab8-aa5b54456daf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "9bab32b9-a425-427b-9c21-7aaa2d9bb2a2",
        "cursor": {
          "ref": "adbd5f1c-c8fb-45c0-b962-815cbee905f4",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "76a3978f-4524-4f0c-8f77-cffd68ff6726"
        },
        "item": {
          "id": "9bab32b9-a425-427b-9c21-7aaa2d9bb2a2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8d55456e-3ff0-4358-8ab8-aa5b54456daf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "2eb90178-7662-4c93-88d1-059dc8a77733",
        "cursor": {
          "ref": "c0c9986d-7708-4eb4-af6a-0a4c257f4943",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cb9f1ac4-34c3-44df-8c53-efe258c7f52f"
        },
        "item": {
          "id": "2eb90178-7662-4c93-88d1-059dc8a77733",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c1abb078-30ae-44ca-b31d-0ba0f2b45a37",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "2eb90178-7662-4c93-88d1-059dc8a77733",
        "cursor": {
          "ref": "c0c9986d-7708-4eb4-af6a-0a4c257f4943",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cb9f1ac4-34c3-44df-8c53-efe258c7f52f"
        },
        "item": {
          "id": "2eb90178-7662-4c93-88d1-059dc8a77733",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c1abb078-30ae-44ca-b31d-0ba0f2b45a37",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "438d23e4-a2a4-4c0f-9a4b-2f7d206df30c",
        "cursor": {
          "ref": "8b1dedc5-ee61-4b96-ab0d-d3356ea03c55",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "196c8a76-7eb8-4da0-b56f-4d2d31d0c404"
        },
        "item": {
          "id": "438d23e4-a2a4-4c0f-9a4b-2f7d206df30c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a4ad4611-9b3b-44ff-a51e-31fb4e08a448",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "438d23e4-a2a4-4c0f-9a4b-2f7d206df30c",
        "cursor": {
          "ref": "8b1dedc5-ee61-4b96-ab0d-d3356ea03c55",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "196c8a76-7eb8-4da0-b56f-4d2d31d0c404"
        },
        "item": {
          "id": "438d23e4-a2a4-4c0f-9a4b-2f7d206df30c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a4ad4611-9b3b-44ff-a51e-31fb4e08a448",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "40ad2457-8f99-46fc-b13b-acd201f628d8",
        "cursor": {
          "ref": "50337788-8563-47fd-a1a4-570f0c60e83f",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "45fe2970-6257-4950-96f5-761d1ce43482"
        },
        "item": {
          "id": "40ad2457-8f99-46fc-b13b-acd201f628d8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "95310b96-b207-42d8-81fc-52fb46d7657c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "40ad2457-8f99-46fc-b13b-acd201f628d8",
        "cursor": {
          "ref": "50337788-8563-47fd-a1a4-570f0c60e83f",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "45fe2970-6257-4950-96f5-761d1ce43482"
        },
        "item": {
          "id": "40ad2457-8f99-46fc-b13b-acd201f628d8",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "95310b96-b207-42d8-81fc-52fb46d7657c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "aebc4810-5b2e-4c98-a2f8-12d0118bfed3",
        "cursor": {
          "ref": "378ca550-cbfd-486f-b35e-5421e909aa73",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1c7e2c2a-3c71-4f42-a3e3-e1e6b21b5345"
        },
        "item": {
          "id": "aebc4810-5b2e-4c98-a2f8-12d0118bfed3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6946c1a5-85af-4dfc-ac6a-65a3d5cb89c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "aebc4810-5b2e-4c98-a2f8-12d0118bfed3",
        "cursor": {
          "ref": "378ca550-cbfd-486f-b35e-5421e909aa73",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "1c7e2c2a-3c71-4f42-a3e3-e1e6b21b5345"
        },
        "item": {
          "id": "aebc4810-5b2e-4c98-a2f8-12d0118bfed3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6946c1a5-85af-4dfc-ac6a-65a3d5cb89c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "ed5078ba-f4ac-41a7-8e81-95aa1154b2d3",
        "cursor": {
          "ref": "b7b74f33-7f09-476e-94d2-357efe51a751",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d88e40c3-1fcc-4cbb-98e9-206b1b123022"
        },
        "item": {
          "id": "ed5078ba-f4ac-41a7-8e81-95aa1154b2d3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "23539161-9bcc-4588-baad-eabdd1e4d304",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "ed5078ba-f4ac-41a7-8e81-95aa1154b2d3",
        "cursor": {
          "ref": "b7b74f33-7f09-476e-94d2-357efe51a751",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d88e40c3-1fcc-4cbb-98e9-206b1b123022"
        },
        "item": {
          "id": "ed5078ba-f4ac-41a7-8e81-95aa1154b2d3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "23539161-9bcc-4588-baad-eabdd1e4d304",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "1c4da01e-7ba4-4b94-9731-cdfc5a97b9de",
        "cursor": {
          "ref": "ef9ff62a-7833-4d6c-96aa-da7e756dd906",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "49091fe4-a731-4bbf-89a2-fd996828e6a5"
        },
        "item": {
          "id": "1c4da01e-7ba4-4b94-9731-cdfc5a97b9de",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "51c4162f-f49c-43d3-857f-16c08bb3fae8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "1c4da01e-7ba4-4b94-9731-cdfc5a97b9de",
        "cursor": {
          "ref": "ef9ff62a-7833-4d6c-96aa-da7e756dd906",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "49091fe4-a731-4bbf-89a2-fd996828e6a5"
        },
        "item": {
          "id": "1c4da01e-7ba4-4b94-9731-cdfc5a97b9de",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "51c4162f-f49c-43d3-857f-16c08bb3fae8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "5ba97945-4187-4040-a1b6-10aa783c87a9",
        "cursor": {
          "ref": "d99cb519-21b1-4d82-b341-c579df253e9d",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "329463ce-44bf-4452-be10-bffdcb6345bf"
        },
        "item": {
          "id": "5ba97945-4187-4040-a1b6-10aa783c87a9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "553fb10f-7882-4411-948d-361aec327fa4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "5ba97945-4187-4040-a1b6-10aa783c87a9",
        "cursor": {
          "ref": "d99cb519-21b1-4d82-b341-c579df253e9d",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "329463ce-44bf-4452-be10-bffdcb6345bf"
        },
        "item": {
          "id": "5ba97945-4187-4040-a1b6-10aa783c87a9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "553fb10f-7882-4411-948d-361aec327fa4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "f48789ce-0d71-42ab-86e6-c657e0be1aee",
        "cursor": {
          "ref": "004f90bc-fba0-448e-b047-633e36a52a56",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2c5c0eb7-9d2c-4aa4-8ab2-fe6ff17093bf"
        },
        "item": {
          "id": "f48789ce-0d71-42ab-86e6-c657e0be1aee",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "453ebc74-368f-4e54-9293-d5c136b8afa8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "f48789ce-0d71-42ab-86e6-c657e0be1aee",
        "cursor": {
          "ref": "004f90bc-fba0-448e-b047-633e36a52a56",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2c5c0eb7-9d2c-4aa4-8ab2-fe6ff17093bf"
        },
        "item": {
          "id": "f48789ce-0d71-42ab-86e6-c657e0be1aee",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "453ebc74-368f-4e54-9293-d5c136b8afa8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "6af0a037-e0d3-401d-b9e5-197c6b93e312",
        "cursor": {
          "ref": "357550a8-4360-4d21-bce8-5c095a9215cc",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "51f0db21-6c5c-4ce2-8880-d3b8e18089f3"
        },
        "item": {
          "id": "6af0a037-e0d3-401d-b9e5-197c6b93e312",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "458c53d3-e1c3-49d3-a733-dd70c91cdbe9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "6af0a037-e0d3-401d-b9e5-197c6b93e312",
        "cursor": {
          "ref": "357550a8-4360-4d21-bce8-5c095a9215cc",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "51f0db21-6c5c-4ce2-8880-d3b8e18089f3"
        },
        "item": {
          "id": "6af0a037-e0d3-401d-b9e5-197c6b93e312",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "458c53d3-e1c3-49d3-a733-dd70c91cdbe9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "65e4ccd5-0876-450b-989b-a056a5c252db",
        "cursor": {
          "ref": "bcd9b4b7-736e-4f1b-8fde-68909e028dd7",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9a29546c-e262-4362-9be4-1a26f69b1cba"
        },
        "item": {
          "id": "65e4ccd5-0876-450b-989b-a056a5c252db",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ec3aa736-588d-44cf-9e1e-7abd3e71a949",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "65e4ccd5-0876-450b-989b-a056a5c252db",
        "cursor": {
          "ref": "bcd9b4b7-736e-4f1b-8fde-68909e028dd7",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9a29546c-e262-4362-9be4-1a26f69b1cba"
        },
        "item": {
          "id": "65e4ccd5-0876-450b-989b-a056a5c252db",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ec3aa736-588d-44cf-9e1e-7abd3e71a949",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "34fa30c5-3388-4da8-a3cc-7cb0cdcb358d",
        "cursor": {
          "ref": "aed59726-1d2a-4382-a4aa-71ad5ac57fb0",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "61c71bb8-778b-4079-877e-40da89b31c12"
        },
        "item": {
          "id": "34fa30c5-3388-4da8-a3cc-7cb0cdcb358d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9c0f7045-ee0c-421e-b35d-7cd78dbf3cd9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "34fa30c5-3388-4da8-a3cc-7cb0cdcb358d",
        "cursor": {
          "ref": "aed59726-1d2a-4382-a4aa-71ad5ac57fb0",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "61c71bb8-778b-4079-877e-40da89b31c12"
        },
        "item": {
          "id": "34fa30c5-3388-4da8-a3cc-7cb0cdcb358d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9c0f7045-ee0c-421e-b35d-7cd78dbf3cd9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "f001323d-6873-4090-b5ea-9baa6d39f938",
        "cursor": {
          "ref": "0fc052d2-b176-4140-8f98-ad4113a73fc8",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b4aa7830-fd27-4b10-8d51-bd9c484042dd"
        },
        "item": {
          "id": "f001323d-6873-4090-b5ea-9baa6d39f938",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6b3b176d-97ed-4bdc-8432-8fdc10118246",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "f001323d-6873-4090-b5ea-9baa6d39f938",
        "cursor": {
          "ref": "0fc052d2-b176-4140-8f98-ad4113a73fc8",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b4aa7830-fd27-4b10-8d51-bd9c484042dd"
        },
        "item": {
          "id": "f001323d-6873-4090-b5ea-9baa6d39f938",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6b3b176d-97ed-4bdc-8432-8fdc10118246",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "e8ec7152-fc2c-49d5-a23b-22e51c07c937",
        "cursor": {
          "ref": "45b03c9d-216f-470b-84ce-021dcc22e96e",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7001818b-d9e1-4eaa-934a-77f26bbd3569"
        },
        "item": {
          "id": "e8ec7152-fc2c-49d5-a23b-22e51c07c937",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7c059ecd-47da-48a3-9734-c7a838b1fd48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "e8ec7152-fc2c-49d5-a23b-22e51c07c937",
        "cursor": {
          "ref": "45b03c9d-216f-470b-84ce-021dcc22e96e",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7001818b-d9e1-4eaa-934a-77f26bbd3569"
        },
        "item": {
          "id": "e8ec7152-fc2c-49d5-a23b-22e51c07c937",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "7c059ecd-47da-48a3-9734-c7a838b1fd48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "22991204-5e2d-482b-9825-d44bb30c0a5a",
        "cursor": {
          "ref": "62fc6571-599f-4ce1-8fba-ef0addf0c613",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9eccb4c5-cdd6-44b7-b94c-d4ff5fd66ae2"
        },
        "item": {
          "id": "22991204-5e2d-482b-9825-d44bb30c0a5a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5237022b-9234-4fcc-8ef1-a471a35d645f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "22991204-5e2d-482b-9825-d44bb30c0a5a",
        "cursor": {
          "ref": "62fc6571-599f-4ce1-8fba-ef0addf0c613",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9eccb4c5-cdd6-44b7-b94c-d4ff5fd66ae2"
        },
        "item": {
          "id": "22991204-5e2d-482b-9825-d44bb30c0a5a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5237022b-9234-4fcc-8ef1-a471a35d645f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "c1dc54b9-7dfc-4b2b-8c38-129b4f02a484",
        "cursor": {
          "ref": "1bdc71de-d563-4c4b-bbdb-c379e697be8e",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "672c7c9d-e483-4fb2-abe4-94d06abcb29c"
        },
        "item": {
          "id": "c1dc54b9-7dfc-4b2b-8c38-129b4f02a484",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9ec69483-73de-46e5-80aa-7ffdf3f28e66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "c1dc54b9-7dfc-4b2b-8c38-129b4f02a484",
        "cursor": {
          "ref": "1bdc71de-d563-4c4b-bbdb-c379e697be8e",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "672c7c9d-e483-4fb2-abe4-94d06abcb29c"
        },
        "item": {
          "id": "c1dc54b9-7dfc-4b2b-8c38-129b4f02a484",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9ec69483-73de-46e5-80aa-7ffdf3f28e66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "83ac288f-7a64-4304-82ba-724ac4efb59d",
        "cursor": {
          "ref": "59dea59a-dd1d-42e3-ad9b-6f0858a90016",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "38f8cf0b-2f63-4299-823c-79c52646fdcf"
        },
        "item": {
          "id": "83ac288f-7a64-4304-82ba-724ac4efb59d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a3c0518d-3eb4-4ab2-a4a4-25c3f24daf84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "83ac288f-7a64-4304-82ba-724ac4efb59d",
        "cursor": {
          "ref": "59dea59a-dd1d-42e3-ad9b-6f0858a90016",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "38f8cf0b-2f63-4299-823c-79c52646fdcf"
        },
        "item": {
          "id": "83ac288f-7a64-4304-82ba-724ac4efb59d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a3c0518d-3eb4-4ab2-a4a4-25c3f24daf84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "a8fc9e0e-5f6d-4238-9e34-3679d3802079",
        "cursor": {
          "ref": "ae2a9dc0-e691-4329-9d1f-2dbe9035af1f",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ac3c3a14-3780-4428-8301-2cbbc90fb233"
        },
        "item": {
          "id": "a8fc9e0e-5f6d-4238-9e34-3679d3802079",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c9e3fb36-a43a-4eae-9b92-c22c1e8869e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "a8fc9e0e-5f6d-4238-9e34-3679d3802079",
        "cursor": {
          "ref": "ae2a9dc0-e691-4329-9d1f-2dbe9035af1f",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ac3c3a14-3780-4428-8301-2cbbc90fb233"
        },
        "item": {
          "id": "a8fc9e0e-5f6d-4238-9e34-3679d3802079",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c9e3fb36-a43a-4eae-9b92-c22c1e8869e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "84789a86-e34d-42a2-ab3d-fe6f1f304eef",
        "cursor": {
          "ref": "267f211c-4e9d-48c3-8616-6ed7cc09bda1",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "502709d6-1df5-4e25-8dcf-6d6c50083b2f"
        },
        "item": {
          "id": "84789a86-e34d-42a2-ab3d-fe6f1f304eef",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1eeae939-5034-4fb6-89f0-f3c258f238ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "84789a86-e34d-42a2-ab3d-fe6f1f304eef",
        "cursor": {
          "ref": "267f211c-4e9d-48c3-8616-6ed7cc09bda1",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "502709d6-1df5-4e25-8dcf-6d6c50083b2f"
        },
        "item": {
          "id": "84789a86-e34d-42a2-ab3d-fe6f1f304eef",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1eeae939-5034-4fb6-89f0-f3c258f238ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "1a2e12c8-a22f-464e-879f-af15fbd9da46",
        "cursor": {
          "ref": "b47cd17c-0fda-4789-a141-12cbcca8de7a",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "07d4b087-6915-4902-9695-46a0b474373f"
        },
        "item": {
          "id": "1a2e12c8-a22f-464e-879f-af15fbd9da46",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ef5cb53e-d961-450a-be74-94662ba345b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "1a2e12c8-a22f-464e-879f-af15fbd9da46",
        "cursor": {
          "ref": "b47cd17c-0fda-4789-a141-12cbcca8de7a",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "07d4b087-6915-4902-9695-46a0b474373f"
        },
        "item": {
          "id": "1a2e12c8-a22f-464e-879f-af15fbd9da46",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ef5cb53e-d961-450a-be74-94662ba345b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "0c44b870-6e73-4f98-b914-ccd2f955868d",
        "cursor": {
          "ref": "f8f49d2a-9cdb-4ee8-895c-9ee3ea49eace",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "04ab2d93-c5a8-420c-988d-5d17f2083c49"
        },
        "item": {
          "id": "0c44b870-6e73-4f98-b914-ccd2f955868d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7bd61b10-e6cd-4e5e-bc37-a0968170dfe9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "0c44b870-6e73-4f98-b914-ccd2f955868d",
        "cursor": {
          "ref": "f8f49d2a-9cdb-4ee8-895c-9ee3ea49eace",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "04ab2d93-c5a8-420c-988d-5d17f2083c49"
        },
        "item": {
          "id": "0c44b870-6e73-4f98-b914-ccd2f955868d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7bd61b10-e6cd-4e5e-bc37-a0968170dfe9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "cdbfe046-ca87-49e1-8eae-e516c994e56d",
        "cursor": {
          "ref": "b9ff197a-b0d4-493f-a5c6-4d1055cf6c1f",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "22dd7102-f301-4890-8f34-9248ae332b1f"
        },
        "item": {
          "id": "cdbfe046-ca87-49e1-8eae-e516c994e56d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "db306cf4-d4ad-4e7c-948d-d6a8df3eb9fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "cdbfe046-ca87-49e1-8eae-e516c994e56d",
        "cursor": {
          "ref": "b9ff197a-b0d4-493f-a5c6-4d1055cf6c1f",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "22dd7102-f301-4890-8f34-9248ae332b1f"
        },
        "item": {
          "id": "cdbfe046-ca87-49e1-8eae-e516c994e56d",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "db306cf4-d4ad-4e7c-948d-d6a8df3eb9fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "c27d2525-a0aa-47e6-a0f5-f097680da235",
        "cursor": {
          "ref": "955aa9ed-138a-4ac6-b8ba-49d4c49ec5f9",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "99e78d9b-5c41-4ba2-8fbf-46ab9efc10f0"
        },
        "item": {
          "id": "c27d2525-a0aa-47e6-a0f5-f097680da235",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "cd98bfe0-9717-483a-920f-f990ea459ccf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c27d2525-a0aa-47e6-a0f5-f097680da235",
        "cursor": {
          "ref": "955aa9ed-138a-4ac6-b8ba-49d4c49ec5f9",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "99e78d9b-5c41-4ba2-8fbf-46ab9efc10f0"
        },
        "item": {
          "id": "c27d2525-a0aa-47e6-a0f5-f097680da235",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "cd98bfe0-9717-483a-920f-f990ea459ccf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "cfd452e3-0310-40a9-bad7-ff5fc4d9d426",
        "cursor": {
          "ref": "9fdf7c10-b1c1-4a88-932e-ac962875fd2b",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "45ab2423-e9f4-4e8a-b0f9-8e8d83831f3a"
        },
        "item": {
          "id": "cfd452e3-0310-40a9-bad7-ff5fc4d9d426",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "cbe36d5b-702c-4d15-8974-99b7ef39b25a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "cfd452e3-0310-40a9-bad7-ff5fc4d9d426",
        "cursor": {
          "ref": "9fdf7c10-b1c1-4a88-932e-ac962875fd2b",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "45ab2423-e9f4-4e8a-b0f9-8e8d83831f3a"
        },
        "item": {
          "id": "cfd452e3-0310-40a9-bad7-ff5fc4d9d426",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "cbe36d5b-702c-4d15-8974-99b7ef39b25a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "5fc0a6e5-82d2-463f-bd1a-9058c70a26a1",
        "cursor": {
          "ref": "6833fb29-cbeb-47ed-8fef-acf6e8bc421e",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "54e42f1e-79e3-4ef5-a233-d30952d808a0"
        },
        "item": {
          "id": "5fc0a6e5-82d2-463f-bd1a-9058c70a26a1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "709e88af-9d36-45be-8ed8-09aabcf918cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "5fc0a6e5-82d2-463f-bd1a-9058c70a26a1",
        "cursor": {
          "ref": "6833fb29-cbeb-47ed-8fef-acf6e8bc421e",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "54e42f1e-79e3-4ef5-a233-d30952d808a0"
        },
        "item": {
          "id": "5fc0a6e5-82d2-463f-bd1a-9058c70a26a1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "709e88af-9d36-45be-8ed8-09aabcf918cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "51244093-a9bf-4291-bbea-843f335b6200",
        "cursor": {
          "ref": "ad147ed7-5ffe-47b5-9681-ec2dabc2f12c",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "805ea93c-181a-4054-bcd0-b36d7f76e7f0"
        },
        "item": {
          "id": "51244093-a9bf-4291-bbea-843f335b6200",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0fde994f-5161-4696-800f-302e3973abb7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "51244093-a9bf-4291-bbea-843f335b6200",
        "cursor": {
          "ref": "ad147ed7-5ffe-47b5-9681-ec2dabc2f12c",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "805ea93c-181a-4054-bcd0-b36d7f76e7f0"
        },
        "item": {
          "id": "51244093-a9bf-4291-bbea-843f335b6200",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0fde994f-5161-4696-800f-302e3973abb7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "ff7fe977-ef5f-4706-a3a2-817c7ff2dbdd",
        "cursor": {
          "ref": "6484ce8a-2c07-427b-bda9-0368e81f6c6e",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4d8e09ef-7be1-4631-9290-0c196964b2b4"
        },
        "item": {
          "id": "ff7fe977-ef5f-4706-a3a2-817c7ff2dbdd",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d17f3179-ca16-48c2-8b19-eb597a555e5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "ff7fe977-ef5f-4706-a3a2-817c7ff2dbdd",
        "cursor": {
          "ref": "6484ce8a-2c07-427b-bda9-0368e81f6c6e",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4d8e09ef-7be1-4631-9290-0c196964b2b4"
        },
        "item": {
          "id": "ff7fe977-ef5f-4706-a3a2-817c7ff2dbdd",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d17f3179-ca16-48c2-8b19-eb597a555e5b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "ae8feee4-28ad-4cd1-9a53-140e7a0125fb",
        "cursor": {
          "ref": "3ae63d7f-fe1c-46f1-94be-872e99e5f3d2",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2d0375f8-b005-4183-9127-36ffb7f6448b"
        },
        "item": {
          "id": "ae8feee4-28ad-4cd1-9a53-140e7a0125fb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5170aec1-9b8c-4b67-b047-3947c38029b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ae8feee4-28ad-4cd1-9a53-140e7a0125fb",
        "cursor": {
          "ref": "3ae63d7f-fe1c-46f1-94be-872e99e5f3d2",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2d0375f8-b005-4183-9127-36ffb7f6448b"
        },
        "item": {
          "id": "ae8feee4-28ad-4cd1-9a53-140e7a0125fb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5170aec1-9b8c-4b67-b047-3947c38029b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "dc6af430-da6d-4fc5-9d14-b5952cc6ad91",
        "cursor": {
          "ref": "2860e915-3e99-41e0-a4f3-8489d43a4e90",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0f8cf0df-c5ef-4af7-88c8-8992132c551b"
        },
        "item": {
          "id": "dc6af430-da6d-4fc5-9d14-b5952cc6ad91",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "20defaaf-0485-426b-95c3-9ba0ef821e91",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "dc6af430-da6d-4fc5-9d14-b5952cc6ad91",
        "cursor": {
          "ref": "2860e915-3e99-41e0-a4f3-8489d43a4e90",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0f8cf0df-c5ef-4af7-88c8-8992132c551b"
        },
        "item": {
          "id": "dc6af430-da6d-4fc5-9d14-b5952cc6ad91",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "20defaaf-0485-426b-95c3-9ba0ef821e91",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "2069617f-ba63-4430-8bda-40bfc046c896",
        "cursor": {
          "ref": "6016e2d1-d098-4bfc-a32d-2a08362fba31",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b7397239-d398-45de-a183-5f717d5ee8dc"
        },
        "item": {
          "id": "2069617f-ba63-4430-8bda-40bfc046c896",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9bddf799-f758-4a82-a355-405117bfd2b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "2069617f-ba63-4430-8bda-40bfc046c896",
        "cursor": {
          "ref": "6016e2d1-d098-4bfc-a32d-2a08362fba31",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "b7397239-d398-45de-a183-5f717d5ee8dc"
        },
        "item": {
          "id": "2069617f-ba63-4430-8bda-40bfc046c896",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9bddf799-f758-4a82-a355-405117bfd2b6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "6686333e-75d1-4aa1-8d59-d0f2c38e07b1",
        "cursor": {
          "ref": "1fad1a1a-20a4-464d-bc90-e5a5cead400a",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "77988b77-70b6-41a7-a2d0-b67567d181c4"
        },
        "item": {
          "id": "6686333e-75d1-4aa1-8d59-d0f2c38e07b1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "673ac70b-1806-4912-80a7-ab5fb2d61d6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "6686333e-75d1-4aa1-8d59-d0f2c38e07b1",
        "cursor": {
          "ref": "1fad1a1a-20a4-464d-bc90-e5a5cead400a",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "77988b77-70b6-41a7-a2d0-b67567d181c4"
        },
        "item": {
          "id": "6686333e-75d1-4aa1-8d59-d0f2c38e07b1",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "673ac70b-1806-4912-80a7-ab5fb2d61d6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "42b03741-fb46-4baf-835b-8eb2de31e419",
        "cursor": {
          "ref": "9b2643ab-4eb0-4112-a66f-b69e96578a9a",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4eeb7e4a-4679-4cde-9bcd-7201ee73f818"
        },
        "item": {
          "id": "42b03741-fb46-4baf-835b-8eb2de31e419",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c3ca86f1-35ea-4c74-92c8-163ef5e13927",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "42b03741-fb46-4baf-835b-8eb2de31e419",
        "cursor": {
          "ref": "9b2643ab-4eb0-4112-a66f-b69e96578a9a",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4eeb7e4a-4679-4cde-9bcd-7201ee73f818"
        },
        "item": {
          "id": "42b03741-fb46-4baf-835b-8eb2de31e419",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c3ca86f1-35ea-4c74-92c8-163ef5e13927",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "112c36f1-cd0a-4de0-816e-6b0e165d18dd",
        "cursor": {
          "ref": "a9c95421-a237-420b-a361-3662d5a4aa50",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "49db1452-fc88-4fa9-a7f4-93a945b08bda"
        },
        "item": {
          "id": "112c36f1-cd0a-4de0-816e-6b0e165d18dd",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8c91b50c-ae13-4c52-840d-67150f98afb9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "112c36f1-cd0a-4de0-816e-6b0e165d18dd",
        "cursor": {
          "ref": "a9c95421-a237-420b-a361-3662d5a4aa50",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "49db1452-fc88-4fa9-a7f4-93a945b08bda"
        },
        "item": {
          "id": "112c36f1-cd0a-4de0-816e-6b0e165d18dd",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8c91b50c-ae13-4c52-840d-67150f98afb9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "af5e56fc-6aaa-4ee7-90dd-4c17761a2d49",
        "cursor": {
          "ref": "4a827572-f29e-4212-ab54-4dbe3392f605",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c9a07ab8-3032-4a26-a686-06b86c3a1473"
        },
        "item": {
          "id": "af5e56fc-6aaa-4ee7-90dd-4c17761a2d49",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "10936c5a-0d48-4ec7-80a0-ca750d79bcd2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "af5e56fc-6aaa-4ee7-90dd-4c17761a2d49",
        "cursor": {
          "ref": "4a827572-f29e-4212-ab54-4dbe3392f605",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c9a07ab8-3032-4a26-a686-06b86c3a1473"
        },
        "item": {
          "id": "af5e56fc-6aaa-4ee7-90dd-4c17761a2d49",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "10936c5a-0d48-4ec7-80a0-ca750d79bcd2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "567543f3-1eae-482c-b92c-08f317b93b57",
        "cursor": {
          "ref": "4d98c4ce-aea3-48bb-b9d1-11a22f6511be",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4f401896-6e50-4222-9b2f-811c1ccb71e5"
        },
        "item": {
          "id": "567543f3-1eae-482c-b92c-08f317b93b57",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a4001fae-1b96-44dd-b626-8d575d5de40d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "567543f3-1eae-482c-b92c-08f317b93b57",
        "cursor": {
          "ref": "4d98c4ce-aea3-48bb-b9d1-11a22f6511be",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4f401896-6e50-4222-9b2f-811c1ccb71e5"
        },
        "item": {
          "id": "567543f3-1eae-482c-b92c-08f317b93b57",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a4001fae-1b96-44dd-b626-8d575d5de40d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "582a6cf0-9c52-48b4-ad82-6f0d8c706121",
        "cursor": {
          "ref": "ebaeb73f-3edf-4b43-b86f-823ff6ac5b2a",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e45a8fad-63c8-4d12-8428-6da2aa5600d1"
        },
        "item": {
          "id": "582a6cf0-9c52-48b4-ad82-6f0d8c706121",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5a00ba5b-c62b-4769-8e40-362bcda3343d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "582a6cf0-9c52-48b4-ad82-6f0d8c706121",
        "cursor": {
          "ref": "ebaeb73f-3edf-4b43-b86f-823ff6ac5b2a",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e45a8fad-63c8-4d12-8428-6da2aa5600d1"
        },
        "item": {
          "id": "582a6cf0-9c52-48b4-ad82-6f0d8c706121",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5a00ba5b-c62b-4769-8e40-362bcda3343d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "5743ccc7-1884-4ab2-aaa2-b1f3e0fbc0c0",
        "cursor": {
          "ref": "888a5f65-dfa5-483e-a579-81ff2a292898",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f0e673a7-ab93-453a-bec7-78ed42376fa3"
        },
        "item": {
          "id": "5743ccc7-1884-4ab2-aaa2-b1f3e0fbc0c0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9a6b08a0-38d4-4b66-a29f-84319ffe31c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "5743ccc7-1884-4ab2-aaa2-b1f3e0fbc0c0",
        "cursor": {
          "ref": "888a5f65-dfa5-483e-a579-81ff2a292898",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f0e673a7-ab93-453a-bec7-78ed42376fa3"
        },
        "item": {
          "id": "5743ccc7-1884-4ab2-aaa2-b1f3e0fbc0c0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9a6b08a0-38d4-4b66-a29f-84319ffe31c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "ef26900e-20b5-41b0-9e08-3180e7351cc2",
        "cursor": {
          "ref": "17c79f2d-b211-4ceb-af1a-1f94f7e4ea42",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f244d8ee-ca2b-413b-8a4e-738106d52a39"
        },
        "item": {
          "id": "ef26900e-20b5-41b0-9e08-3180e7351cc2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8795eec1-0bab-4bcc-b99b-9ff583d59867",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "ef26900e-20b5-41b0-9e08-3180e7351cc2",
        "cursor": {
          "ref": "17c79f2d-b211-4ceb-af1a-1f94f7e4ea42",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f244d8ee-ca2b-413b-8a4e-738106d52a39"
        },
        "item": {
          "id": "ef26900e-20b5-41b0-9e08-3180e7351cc2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8795eec1-0bab-4bcc-b99b-9ff583d59867",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "e608aa5e-787b-421c-a0ee-ad2b2efacf21",
        "cursor": {
          "ref": "0ee9d0e9-a980-453b-b1a2-7a1d755e45c7",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "249de472-8393-4bbf-8467-8f4d746d55d4"
        },
        "item": {
          "id": "e608aa5e-787b-421c-a0ee-ad2b2efacf21",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d42da8bc-9f41-4d3e-a536-582f70646702",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "e608aa5e-787b-421c-a0ee-ad2b2efacf21",
        "cursor": {
          "ref": "0ee9d0e9-a980-453b-b1a2-7a1d755e45c7",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "249de472-8393-4bbf-8467-8f4d746d55d4"
        },
        "item": {
          "id": "e608aa5e-787b-421c-a0ee-ad2b2efacf21",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d42da8bc-9f41-4d3e-a536-582f70646702",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 17,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "4ec54e93-32da-4c57-aea0-41d139cddb98",
        "cursor": {
          "ref": "39119cdc-e3b8-4653-b7f1-dbd7f0e02b72",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7a980d31-5da0-4742-96c1-3c4fbbea6651"
        },
        "item": {
          "id": "4ec54e93-32da-4c57-aea0-41d139cddb98",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3eaac88d-22e9-4015-a200-3deff42d0d08",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "4ec54e93-32da-4c57-aea0-41d139cddb98",
        "cursor": {
          "ref": "39119cdc-e3b8-4653-b7f1-dbd7f0e02b72",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7a980d31-5da0-4742-96c1-3c4fbbea6651"
        },
        "item": {
          "id": "4ec54e93-32da-4c57-aea0-41d139cddb98",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3eaac88d-22e9-4015-a200-3deff42d0d08",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "803fc2fc-b995-4a13-a5c2-0678263349bc",
        "cursor": {
          "ref": "197d867d-33c3-4ac5-8dae-9ac50c755c00",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0b7771dc-d841-44bf-9048-8d81f3961db5"
        },
        "item": {
          "id": "803fc2fc-b995-4a13-a5c2-0678263349bc",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1ee12254-ca59-41fc-b0e3-f604f54a29c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "803fc2fc-b995-4a13-a5c2-0678263349bc",
        "cursor": {
          "ref": "197d867d-33c3-4ac5-8dae-9ac50c755c00",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0b7771dc-d841-44bf-9048-8d81f3961db5"
        },
        "item": {
          "id": "803fc2fc-b995-4a13-a5c2-0678263349bc",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1ee12254-ca59-41fc-b0e3-f604f54a29c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "e37fefdf-cedb-41de-928e-3b76568e188a",
        "cursor": {
          "ref": "151c7cc1-d771-44c8-96ce-b7d3a8156211",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "52e1ce7b-df0d-4301-a3f0-1059ec082616"
        },
        "item": {
          "id": "e37fefdf-cedb-41de-928e-3b76568e188a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9df69382-a099-4521-a190-5a6ab50b0c19",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "e37fefdf-cedb-41de-928e-3b76568e188a",
        "cursor": {
          "ref": "151c7cc1-d771-44c8-96ce-b7d3a8156211",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "52e1ce7b-df0d-4301-a3f0-1059ec082616"
        },
        "item": {
          "id": "e37fefdf-cedb-41de-928e-3b76568e188a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9df69382-a099-4521-a190-5a6ab50b0c19",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "cbc8e2bb-35b0-4b9a-b336-d2a216f62f67",
        "cursor": {
          "ref": "a6636470-3320-4fa0-b663-9050e4e7a724",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "af337801-0ea5-4395-a28d-0a2c5a6f3be7"
        },
        "item": {
          "id": "cbc8e2bb-35b0-4b9a-b336-d2a216f62f67",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d6acf90f-b7f8-432c-9ec8-f5cde2a0ee3e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "cbc8e2bb-35b0-4b9a-b336-d2a216f62f67",
        "cursor": {
          "ref": "a6636470-3320-4fa0-b663-9050e4e7a724",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "af337801-0ea5-4395-a28d-0a2c5a6f3be7"
        },
        "item": {
          "id": "cbc8e2bb-35b0-4b9a-b336-d2a216f62f67",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d6acf90f-b7f8-432c-9ec8-f5cde2a0ee3e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "42dd2481-0912-4ea9-88f2-95a3fd12c1b5",
        "cursor": {
          "ref": "dedb7f91-378f-4ccb-9251-fa2d8d2d4fb5",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ba7bafb2-4964-436a-9e34-4c6923cdaf73"
        },
        "item": {
          "id": "42dd2481-0912-4ea9-88f2-95a3fd12c1b5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d8aa49d3-f850-4372-b969-e7704dc8c702",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "42dd2481-0912-4ea9-88f2-95a3fd12c1b5",
        "cursor": {
          "ref": "dedb7f91-378f-4ccb-9251-fa2d8d2d4fb5",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ba7bafb2-4964-436a-9e34-4c6923cdaf73"
        },
        "item": {
          "id": "42dd2481-0912-4ea9-88f2-95a3fd12c1b5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d8aa49d3-f850-4372-b969-e7704dc8c702",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 14,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "7663704e-4905-41b8-aaff-21c304f768f3",
        "cursor": {
          "ref": "c2e9cd6b-b02f-4430-a1c3-73c04aca285d",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cf2aed6b-2e4f-45fe-a0dc-e3d153d678da"
        },
        "item": {
          "id": "7663704e-4905-41b8-aaff-21c304f768f3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "ff4d2b0c-5e9c-4466-b5a2-cad23e3603de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "7663704e-4905-41b8-aaff-21c304f768f3",
        "cursor": {
          "ref": "c2e9cd6b-b02f-4430-a1c3-73c04aca285d",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cf2aed6b-2e4f-45fe-a0dc-e3d153d678da"
        },
        "item": {
          "id": "7663704e-4905-41b8-aaff-21c304f768f3",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "ff4d2b0c-5e9c-4466-b5a2-cad23e3603de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "75948788-5f2a-4d14-bdbb-0a83d7765a46",
        "cursor": {
          "ref": "8fce486b-f9a5-4a98-b0c7-224acff868b9",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "391d06a8-36f0-4b0d-b210-5e44e95af4b4"
        },
        "item": {
          "id": "75948788-5f2a-4d14-bdbb-0a83d7765a46",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "403a04be-7048-42f6-b9de-3c88370675d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "75948788-5f2a-4d14-bdbb-0a83d7765a46",
        "cursor": {
          "ref": "8fce486b-f9a5-4a98-b0c7-224acff868b9",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "391d06a8-36f0-4b0d-b210-5e44e95af4b4"
        },
        "item": {
          "id": "75948788-5f2a-4d14-bdbb-0a83d7765a46",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "403a04be-7048-42f6-b9de-3c88370675d0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 16,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "70985ea2-01a9-4763-b494-9a01209442d1",
        "cursor": {
          "ref": "7271e097-2851-470d-929a-0369994cf13e",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e1c067b7-c6c1-403f-b465-490e0f952444"
        },
        "item": {
          "id": "70985ea2-01a9-4763-b494-9a01209442d1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ebd106be-78f2-4113-8fad-4f168bfd5b0b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "70985ea2-01a9-4763-b494-9a01209442d1",
        "cursor": {
          "ref": "7271e097-2851-470d-929a-0369994cf13e",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e1c067b7-c6c1-403f-b465-490e0f952444"
        },
        "item": {
          "id": "70985ea2-01a9-4763-b494-9a01209442d1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ebd106be-78f2-4113-8fad-4f168bfd5b0b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "c9e6d938-68cb-4ecd-931d-51ebdb983373",
        "cursor": {
          "ref": "3f510183-588d-4904-8915-28010c595a37",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a5ef62e3-c975-4ea9-b3b0-acf5d9974479"
        },
        "item": {
          "id": "c9e6d938-68cb-4ecd-931d-51ebdb983373",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d1ca9918-af5b-4342-b40a-2954c4063e9a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "c9e6d938-68cb-4ecd-931d-51ebdb983373",
        "cursor": {
          "ref": "3f510183-588d-4904-8915-28010c595a37",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a5ef62e3-c975-4ea9-b3b0-acf5d9974479"
        },
        "item": {
          "id": "c9e6d938-68cb-4ecd-931d-51ebdb983373",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d1ca9918-af5b-4342-b40a-2954c4063e9a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 15,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "cc973c6e-a23b-49ee-8b72-1695de420b5f",
        "cursor": {
          "ref": "a0a52668-2214-4679-b6cb-3cd27eb5c1ff",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "960b1fae-58c2-4c15-af62-0da459a7a0b4"
        },
        "item": {
          "id": "cc973c6e-a23b-49ee-8b72-1695de420b5f",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "cc973c6e-a23b-49ee-8b72-1695de420b5f",
        "cursor": {
          "ref": "a0a52668-2214-4679-b6cb-3cd27eb5c1ff",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "960b1fae-58c2-4c15-af62-0da459a7a0b4"
        },
        "item": {
          "id": "cc973c6e-a23b-49ee-8b72-1695de420b5f",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "cc973c6e-a23b-49ee-8b72-1695de420b5f",
        "cursor": {
          "ref": "a0a52668-2214-4679-b6cb-3cd27eb5c1ff",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "960b1fae-58c2-4c15-af62-0da459a7a0b4"
        },
        "item": {
          "id": "cc973c6e-a23b-49ee-8b72-1695de420b5f",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "b25fd0df-93ab-4bb9-8566-af17d437d212",
        "cursor": {
          "ref": "f6155d33-81f4-481a-ad01-7ba43762fdd6",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "884fe30f-6199-473b-8d2b-150b1c3e0dc5"
        },
        "item": {
          "id": "b25fd0df-93ab-4bb9-8566-af17d437d212",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "b25fd0df-93ab-4bb9-8566-af17d437d212",
        "cursor": {
          "ref": "f6155d33-81f4-481a-ad01-7ba43762fdd6",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "884fe30f-6199-473b-8d2b-150b1c3e0dc5"
        },
        "item": {
          "id": "b25fd0df-93ab-4bb9-8566-af17d437d212",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "b25fd0df-93ab-4bb9-8566-af17d437d212",
        "cursor": {
          "ref": "f6155d33-81f4-481a-ad01-7ba43762fdd6",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "884fe30f-6199-473b-8d2b-150b1c3e0dc5"
        },
        "item": {
          "id": "b25fd0df-93ab-4bb9-8566-af17d437d212",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "3429ff66-26e5-4427-972e-56bde459181e",
        "cursor": {
          "ref": "5c5f8fbb-e5a2-4671-b737-9d21c9b44e34",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "314c2629-664b-4037-8da9-69e21e25e223"
        },
        "item": {
          "id": "3429ff66-26e5-4427-972e-56bde459181e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "3429ff66-26e5-4427-972e-56bde459181e",
        "cursor": {
          "ref": "5c5f8fbb-e5a2-4671-b737-9d21c9b44e34",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "314c2629-664b-4037-8da9-69e21e25e223"
        },
        "item": {
          "id": "3429ff66-26e5-4427-972e-56bde459181e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "3429ff66-26e5-4427-972e-56bde459181e",
        "cursor": {
          "ref": "5c5f8fbb-e5a2-4671-b737-9d21c9b44e34",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "314c2629-664b-4037-8da9-69e21e25e223"
        },
        "item": {
          "id": "3429ff66-26e5-4427-972e-56bde459181e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "7870d5d4-9195-40c0-9254-2bf6d3e62b51",
        "cursor": {
          "ref": "e04a3f6d-3e42-4801-b619-3030adfe641d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4d24b13a-cde4-4306-8e37-7aacb325a880"
        },
        "item": {
          "id": "7870d5d4-9195-40c0-9254-2bf6d3e62b51",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7870d5d4-9195-40c0-9254-2bf6d3e62b51",
        "cursor": {
          "ref": "e04a3f6d-3e42-4801-b619-3030adfe641d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4d24b13a-cde4-4306-8e37-7aacb325a880"
        },
        "item": {
          "id": "7870d5d4-9195-40c0-9254-2bf6d3e62b51",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7870d5d4-9195-40c0-9254-2bf6d3e62b51",
        "cursor": {
          "ref": "e04a3f6d-3e42-4801-b619-3030adfe641d",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4d24b13a-cde4-4306-8e37-7aacb325a880"
        },
        "item": {
          "id": "7870d5d4-9195-40c0-9254-2bf6d3e62b51",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "204c7c9b-b90f-4d73-8552-c232278ee230",
        "cursor": {
          "ref": "d86d824a-33ab-42d8-91e7-489fc7a2b00f",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "01983d53-16dc-4f51-a571-118b1be51fb8"
        },
        "item": {
          "id": "204c7c9b-b90f-4d73-8552-c232278ee230",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "204c7c9b-b90f-4d73-8552-c232278ee230",
        "cursor": {
          "ref": "d86d824a-33ab-42d8-91e7-489fc7a2b00f",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "01983d53-16dc-4f51-a571-118b1be51fb8"
        },
        "item": {
          "id": "204c7c9b-b90f-4d73-8552-c232278ee230",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "204c7c9b-b90f-4d73-8552-c232278ee230",
        "cursor": {
          "ref": "d86d824a-33ab-42d8-91e7-489fc7a2b00f",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "01983d53-16dc-4f51-a571-118b1be51fb8"
        },
        "item": {
          "id": "204c7c9b-b90f-4d73-8552-c232278ee230",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "fdbaa6be-abd7-491c-92e0-a847d2ea4951",
        "cursor": {
          "ref": "812958ae-d939-48fe-bf77-1648bddf8e15",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3ae4e7d6-19e6-4b53-b8a2-6be03b243002"
        },
        "item": {
          "id": "fdbaa6be-abd7-491c-92e0-a847d2ea4951",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "fdbaa6be-abd7-491c-92e0-a847d2ea4951",
        "cursor": {
          "ref": "812958ae-d939-48fe-bf77-1648bddf8e15",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3ae4e7d6-19e6-4b53-b8a2-6be03b243002"
        },
        "item": {
          "id": "fdbaa6be-abd7-491c-92e0-a847d2ea4951",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "fdbaa6be-abd7-491c-92e0-a847d2ea4951",
        "cursor": {
          "ref": "812958ae-d939-48fe-bf77-1648bddf8e15",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3ae4e7d6-19e6-4b53-b8a2-6be03b243002"
        },
        "item": {
          "id": "fdbaa6be-abd7-491c-92e0-a847d2ea4951",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}