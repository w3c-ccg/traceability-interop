{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4ecdce17-27bf-4017-a666-0d0c41643e2d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6e73fac4-4be5-4f81-9df7-011ca0a17421",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7c92498a-fd33-462a-87e5-f91001823ba6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3a57b6f0-1cea-4749-8775-5224df060adf"
                }
              }
            ]
          },
          {
            "id": "672c8cfe-6ebb-417f-a5f3-48f565f515b2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "28fb7b23-c381-4e07-8610-a7279170ed0a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b345d512-c8d6-4c1e-81be-76a5cdb5f672"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2b85f8d4-ac8c-428f-b074-3291e882f54c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "021fa56f-805e-45a4-b300-74a0554fe867",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6e599cf5-d2e4-4c85-a496-5623ecf2cf5d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c001fbb-5152-4f8d-b779-7eb0739fd1a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c673e8d2-05c3-4fa5-8f46-c897d18245ae"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7ad48325-9d14-4723-a460-0b166353e42a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a50c225b-bc09-4f10-a4e1-718fb8b84d97"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7bac25a3-84c6-4dda-9676-c42dae1796b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a1ae704e-0502-4cd4-a185-61342bb5d9d7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0b54e88a-ec4b-40b5-a626-d05ee90bd8f9",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f03c9a1f-adb8-4a40-98f6-4fbf4a0e82cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b641ad5d-f716-42c3-a1d4-2a423adafb4d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d2a324d0-e5e0-4c8a-ad49-e3783142f705"
            }
          }
        ]
      },
      {
        "id": "390cd6a1-cf96-44eb-9f2c-1b1c14d06ff5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "df9aaaf5-b332-4d52-89d7-903dd86ff311",
            "name": "Negative Testing",
            "item": [
              {
                "id": "14348cfe-0177-4a14-9f44-524eafb14ee2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a3784b74-ab37-4e2c-b8c1-7038b6236dbd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "953acecc-5acc-45ce-ab18-09bd10c3e4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef6a76f0-a789-4a98-8097-fb5b6fe85068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62fd07ac-bcfa-4dee-9de3-7e52ee8c485b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "407692d7-86fb-41c0-8e6c-d5b75ab180cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70c44618-5184-483e-a0a6-07cdb45efecf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415b09cd-e119-4f0f-80d5-effd7d5df7cc",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4033f53-bfd1-4147-859f-41a2d285d77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55311e03-4c79-4b59-9820-b6c2d73feff1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "99e00886-6170-46c7-ac95-eeb33207c890",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "290fb6f4-232b-48b9-b9e2-ba82f176be05",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2bc5d20-db1d-4818-8fc9-92e8257a5aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7605bdd-019a-4657-addf-c88890fb14fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "588178ee-4491-4e7b-8cc1-416156bd3142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb3c9ef4-1f1c-4e1d-8d17-36818198f61f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff60c77-2b72-4047-ae74-4dff1ccb2263",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f216e13-985f-49a9-bcd6-f8ed5f500f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "095e989c-d177-40a3-a907-5e34cf766eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e1cee0-a3e1-4531-83e9-69f2a3b0419a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "5319d09a-b53e-45fa-aeac-44dded66757a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bd85ea5a-bc95-49fb-8a01-44ffa7d83915",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ebf709da-a7f0-4849-8782-db4b5df3d4a9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "104859b3-de29-4bab-a55f-a081b8b40caa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "d0eb90b8-07be-41c1-92d2-aec14dd8b40a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "958caa2d-52a8-4a0d-9f9a-f2be06826d5b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "1d11184d-4e5b-4873-bb78-0ac26d61ff78"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05095ba5-a4aa-4e3c-a988-d3e9a3eee2d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "817e261e-59e1-4c61-b315-5d3878db9d77"
            }
          }
        ]
      },
      {
        "id": "e03b85b9-6ee3-4b61-b88d-6b895416f981",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "88ba5b70-6fa7-4a2f-be4d-410bfc9f5f46",
            "name": "Negative Testing",
            "item": [
              {
                "id": "260100f5-81cb-4404-a51c-eecb7be0ee1e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "59d00860-5542-4f13-8daa-b3b004c6f74c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7733e879-7c60-47d2-bf4a-aa1a03031197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aaf7d69-2309-441e-bb06-343aabd2e0cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8e4245-e55e-47dd-853e-d9c484dc3e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc1502a2-6de5-4cdc-befa-7139d5bb1e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b63f436-0faf-4c84-9dfc-f942736493bf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b106c0b-fe3d-4e67-a9dc-a36fc0a91d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "039eae0e-0814-45f5-8387-308c356884fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b7514b-3a56-4aac-80d7-e2a2e5b2ccbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b56631c3-0214-4edc-a733-5e22c1a53090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5dba7b-0140-4b72-9238-617d462d31e8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e88a99-e012-46b3-9e2e-687f7e19fc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "412b5d6b-c5f4-472a-bec0-a09a58994051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34bffd1f-9277-4160-97f1-2c9452a36dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d41f605-b1f9-4085-8f99-4dc64ed40309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bce01fd-95fb-4001-b1bb-b01695253500",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b49d71-0bb4-4c1d-b371-0037a1cda311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1086a6c-70d1-4f7f-8a45-f601ba3f9cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0604d0c-1245-47de-b682-5f7a0044efa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "369915ea-414c-436e-94fd-f5762484c66f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f43d27-abbf-4a10-8cb2-4ccc7bcfb6e1",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50123ede-263d-4a7a-a9bf-2d0fc1d8eda2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca628d4-7f35-4bb0-adb5-e7c781ab9719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3644ef7e-2f6e-4c7e-88e9-9e60b607d591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12ef7ceb-1247-452c-8356-1a835a19e874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1809ac95-d378-49a1-bb88-260c7409d2b7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1cb80a-2d06-492f-8b5c-92fe97b78079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a322fc8-1d3d-4946-b99b-f4e9ffa9990b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63856c27-59ce-4935-8ea0-476a9c286589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "283285f1-4509-44b5-aef5-e9c95ca4f394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186786a2-db9d-44a1-9965-4d57b7b48453",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33337c6e-aa8c-4197-83cb-b0001045907a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec85a26-4912-4208-85a3-0d566c1a98ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8fa4927-693f-4d8e-9a9f-29a4e4891bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "572dffb6-b079-4c09-ab39-9cfb89bcb57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbe73be-066f-4ac4-957d-24254ea04d65",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cbfe7b0-1a35-4183-8c1b-969009ce4232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c4ad4c-99a5-453e-ae0e-372a8acd456a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0100a30-7ae4-4cf4-831a-683fc03e6bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc233fab-6aa1-4323-a4ac-b6623d59d775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ce6194-b1dc-467d-9bca-3577fb12874e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "330e6f8e-135a-4f49-b3f5-5ce3a3cc9049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec63cb3c-e04d-4050-bec9-91836d3edc3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675868be-92b4-4dac-b760-41f397ee4072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ced667e3-b377-4aa4-b373-6a6b96ff1fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7807e50d-a147-4c70-9208-ff22d97e4600",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca641b6a-f7fe-4f14-baec-08ef97c49945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4199631-69e4-4c1f-9ddb-9e808fe9aa5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ba79c5-69d9-4a13-a887-45916522529f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21be1076-193c-4e9f-9c41-4bcfc209e8dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b7730a-b922-4155-ad72-43b1166e5886",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2514a600-9ca8-4c54-87e2-c669cb4534f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f45c56-4b17-4f04-8538-41195bed55cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba38f7b-fabb-4335-a537-70c06912f523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db55cea7-e031-46cb-a730-85f686275702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306bed0c-9377-438c-be24-936522397ab3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264c7567-d9dd-4d31-9110-82a4a2cb5bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d67ec7cc-8cf7-46f0-81c4-31477373ca61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5338cc-bfc7-4481-aaf2-255a71a7f89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee5fa0e5-02c6-4713-b3bb-d58d1af752cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b5f0334-707a-46d5-a45a-e651727d0554",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8dce0f-9826-49b5-8cca-5c4226e1dff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d154f022-2861-432d-aa84-677609590158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31bbb9c-42f2-4c95-b5f0-0ad6bacc33ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed131c47-7f57-4e89-b014-82b1f4cde57e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463490aa-9156-4aba-8021-f99777e99455",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a43002-821d-4e2e-b0f6-50c926680604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "770c2ccf-2b4c-4fd3-b34e-60ef7ca9ec00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b368a2f-29fd-4a94-8dcf-e9da4721f55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b10a767d-bae8-4be5-9533-4389e7325f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19b01a8-9611-4abe-92b1-8db9a7512e03",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31802aa3-e175-4a85-b162-b8be59a9b152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcdd54d9-41a3-4dc8-90ef-ebc6510615a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5087f69a-f9b8-42a3-991e-2d098af1d5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c443350d-2572-4ea3-8053-eaa1b409b94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a317b3-7d1d-486f-aa82-a1e3e73fd99b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfcfe41-9ad5-4e49-b725-d1de1c2f1a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ac010d-ff7b-44ec-bd02-02704821063f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b46d339-285b-4581-a243-6277662d9e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b5e4fa5-03df-4521-a8ff-78452a1cc12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5dab14f-242f-45ce-aa0d-58053cac6a34",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd25e08-5053-4d6b-bf4b-65b22267f2fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f132e7b-6102-4bd9-bc2a-fc5f64075eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368efe98-d979-44bd-9a69-0ebf4f46d3b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c696872c-96f2-4281-8e50-0d7d7664427b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63189bb8-8081-4a5d-befd-6b2ef741d096",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91b3d6a-5eca-48fa-906b-46c340e67878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d480d7e-f010-4260-b955-cebfd5ac7617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21ea153-e1e3-459c-b2db-a33f07f3554d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d56e8d4-faeb-47ed-8c0d-6b4bc0a69515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38512a3-719a-4001-888a-9f169109e15d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba259fc-4aa7-4944-8ead-45fd3f71f107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e38da01-52a1-4ea3-9438-408eb8a25e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1baa3401-39fc-4e1a-84aa-504b72069dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b565acd2-7948-47bf-a56d-9a63e2da30cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8dc16f5-f817-49e6-b43e-1d65b04fe91e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86baa40-64e0-469f-913f-4c8477207f7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9406c1e9-8075-4723-b4c0-2cf26084b092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e83541eb-3135-4cff-aaed-d91bca4aa19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7b0b802-a22a-4641-8fe7-27c574d4bee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a7554d-c995-453a-bec6-8a99f3b4d151",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7758591e-744a-4cc4-8c08-c6911c535559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d09336d6-72c1-4172-ba3e-1984f0bff5b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d025a163-f5da-42e1-9ad4-2c7ccb102984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f06cdf14-a267-4951-946a-068b95463a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639f295b-00bb-4ce7-b706-f4f587e7e211",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a025b8b-3c7a-4c47-a679-3d7d48d571a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da815ac-271a-471c-bec8-73e95522f8d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281de324-d852-4a15-a21a-b0fde0f00362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "831645fe-c832-47f1-807b-cb9df29e98ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7793cc-d271-4f61-8dfe-04ddec5d90d9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aef8b0c-fb87-46b6-89df-4dfc52dbeeb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b49a9eac-2d51-4626-86ef-9348e33333b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a94ecf-39cf-4b92-9e88-676aacde7baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "73001fee-9261-45c3-8d29-ed30068e0f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4332268-06f9-4ebc-a959-39b3226f5009",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dba8e1d-ba10-4b2e-8517-a9eecf2d8120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "136a63a3-a019-4f62-9730-c357795b8647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc53f4b-322f-4020-94b2-9f351152b5de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c1ecca3-7fc7-4fc5-9460-ff1f7c87d57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38cd2543-4dd6-4d37-a12e-60e3347fd838",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ca1f3c-a6e7-45e1-8ab3-21187df900b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0599b9-0d59-488b-9bb5-84cbc97e3197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7067da-32ee-4faf-820a-82991ee649cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e103ba-42c9-4468-b8fb-058fa1834b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a9bbf5-40ab-44e0-a57c-5d35bd5d0069",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297da81d-02e8-4884-a3ce-f03f11453bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce2aa291-bd66-4356-846a-25413483363f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b2d6ca-0a9a-4ccb-b51d-491a29d9a851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "abf8de66-3a36-4bb6-99a9-c78e7fb2cd12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2612e1cc-4882-4f80-a16c-3285d72c75c3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfcc79e-27ec-402d-822d-7870f15f0399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8dc860-624a-490c-b020-4f6c417e0c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66b2e8a-dfc6-45bd-9f7d-ae38fd1422e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e142363-0ea3-453f-9243-058729ede51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b989d4-4403-4d89-ac0e-6867f5a48a5f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a098cc49-9c00-4a43-963e-b1ae2da93e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96f3620f-d749-4a94-b32e-3dba9e8b5c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122f0aa1-0cce-4b5c-851d-19984039f590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f84161ec-18e0-456d-8dd8-a4aa681eaf52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789f69a7-d78f-421d-9611-71cbf5242232",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd70b98-ef92-416e-97e5-2a13e871fd89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a5c3246-54bf-48a2-a971-cce4a79feca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6303959-7217-4c16-88e1-dd95c00ac63c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d5dc540-7bd4-4662-af93-360e96b63587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fa4163-83d2-4aa1-801f-d213e97d59d6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1715f44d-3891-426c-a1a9-1ed9dd63cd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbcc9d39-afe8-41b7-b0bb-21cee0365b5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84785f32-5bc4-4047-a98e-854f3525217d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfc8d739-979d-4b1d-9752-4a60472efcd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44736e4-938d-46ca-8b33-d9e6b6988bbf",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1986fee8-9129-4794-bc69-372d613916e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d14e1a-d996-4477-b9f4-3503fe0a7dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c13ccc7-5bf4-4a5e-832b-6a601c96050e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3c1dc9-5e66-417c-afda-d42480b6cc69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04e3893-80c8-4ecb-8450-3bd794d4cfe1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150b3868-ddec-4050-8ba9-26841a98aebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a25f4e5-d45c-461a-a3bc-56df1e1e6d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3475831-e32c-4766-93ba-9ceba9cd57c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6322833-a701-466f-b212-7f666fd726c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31656f68-6dfa-4e79-bf90-086a4396dbd4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8177c1b8-a205-4063-8474-03da03f07ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a60ef4a9-4060-4df6-ac81-e9b1956adc26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cec5710-8bac-44d7-bd53-4d6a3bf1c56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc992812-52a8-44d6-8b41-3765c3d6320d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e924721-7936-41fb-9d2e-4d92ad1b81c2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e83515-311f-47b4-ae70-1cdd2384d6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e8da75e-9e69-4984-a6e8-961ce2f8d30e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efbc8a41-eade-4cc1-8059-c643d22d50d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "953523cd-8c50-4810-bd1f-427351f804ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e186dace-bc4e-483f-b92c-b88bdac122ba",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b567c2-ab9e-4265-a590-0b009027cc94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383dfcf8-6dc5-42ba-b217-642579b25b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c24566-6e63-49c6-9fbc-7bb7aeec13c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1c5f84-7f6c-4fdc-8281-844b49492902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8ea63b-9b3e-4c7a-af3c-2db27443ff98",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d5b90a-2639-47b4-a237-0673a66ad56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "521b6827-4678-4a06-8472-09d053643505"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c082f444-c8b9-4dc6-968a-fbb6a6b5927e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b07ea6d-f1b9-4323-810e-0d8798a72c25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62f98cb-e6b5-4b51-8b21-e26de766ffe4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "103d2899-4b71-4377-b177-04d3e72134b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24891699-eba6-4a91-b699-b6e2aef5a47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ab96b7-d263-4663-b316-59230da9f855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ab54a5-dcc4-406f-990c-f58d75ae482f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e886dfea-bfe0-4ece-8a24-6f673b5eca61",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "703b74d5-2b1e-495f-a915-889e0b6ea98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeab0ec3-930f-40b0-97a7-11f1d4f00245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28ab520-4bdd-4f18-80d2-b666b27941d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac634a23-86bc-48b5-8445-51a2b6e1d613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc8f08d-f218-4c59-830a-586346edd520",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab599443-107f-4b19-81cc-929680d3ed01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d11184b1-c42b-4805-9cfe-7466b75607f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529cc51e-be14-4a35-8b4a-6d303be3c994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d1dce74-cf0f-4f42-9494-50344eb0853f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d295abc8-6ec2-4983-97e5-64f7161031ec",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12cf24f-cd1c-495e-843f-33590d02d1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "119ed9f1-a680-463d-84f5-d842109812be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23cdfe80-ba25-4007-9876-ce01eeb0acff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d5d38f3-9352-4ba5-addc-9c4e95d70a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86378d84-7e8c-4627-a41c-5e034c83b3cd",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4648173a-7ddf-43db-82f2-d2a808397eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e812eb-3e31-4b5c-be64-e07c872ebd7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e22a0d0-52ed-4218-9ddc-633c9b0c5722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf2614d-5657-45d9-bea0-787c2dee68bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04fc5c35-2bbd-4232-b1c8-edb3f0f79d86",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "272d6c2c-825e-444a-9de6-fb4a1bf3d866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f88a12-2f3c-4da3-9789-a9937f3e7c81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6630c1c6-0102-4403-9edd-f30d472f22ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5d5bfb6b-ab60-44d6-8492-182f18aba08c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36255745-b7bc-4360-8c31-7df9c3ccad0f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec383734-1289-4133-a4d9-cfc518b11ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62a9f8a6-6a2b-43f3-a78c-a93d5ad6d7c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7320605-263b-474f-b6a9-f50274136c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d9ba766-ae72-4a0f-b94c-98424ddc90b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d529b8-0be2-4f82-b18c-e6a113a2e34e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31504007-ef66-4044-b5f8-f8ef5d21274b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5955397d-52f4-4da1-8638-5ad32f6310cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a42074-0d45-4f35-9766-0274d98d957c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "09fd864c-eba5-4879-855f-9706720894b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb18363-e48f-455e-b26f-51ceb66e2394",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "290a1431-2929-43f2-9eed-caa53cb1d801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813ecc6e-9d3b-4299-bb86-090729a4bf9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4281f5b9-7890-457c-b649-6cf878b1e838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "74fad698-0f59-41e9-a192-aa925fbe909a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62387724-0b35-421f-ae5c-dcd951e36388",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80787e3e-531a-4a4e-acd9-1800e66402f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b4074f-c84d-4348-9019-3b54cb850ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48102563-137a-4492-9da2-1ac23706e3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72bff981-72a5-4804-863d-2196b2944b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2939ad-ff1d-4040-9ec4-77ef356cd18f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4c95d7-bcde-492f-9320-304affa4325f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaaee930-7cb5-4cd4-80ad-064e65959015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af98c0a9-f695-4a65-889f-08db9815ee8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a519ae13-f949-4319-bbdc-dddc6ac06c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5ebcc2-6442-4a0e-b0b2-f7fa87e015af",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d7622f-96d4-463d-8607-82087e3f0cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c961176f-76fc-4561-b653-3057b7ce1bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06bad9c0-ff46-46a5-a9af-337896e8fad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41cd41f1-c37a-45ad-9173-553afd2c051d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879be15d-8589-4035-9106-12c2a32629e4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086be72c-d66f-4b47-aa85-9d9dfd01a1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6309f3ad-1fa1-4790-a25e-7c04a8035139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38875c7e-28d8-43bd-8de1-a81a05f13bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a8ad5a8-9baa-4e93-b182-fb73c86ab275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae9b21a-4a5f-4831-8257-d774ae2d18db",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5d16c9-efd7-4a1b-b4dc-51fda34a1446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbb8a085-325d-4563-b8b3-7ae770742c41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fefbfacc-4b8f-4b5b-b8af-be28bb7f4327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "99c7fea7-f9b3-436b-badf-12dc49831a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bc96e4a-0e21-48b4-a138-2171d2d50d76",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f39e8cf-2531-4864-9ea7-779b89339996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4186d032-37cc-4d29-b589-e83cef2e89a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5548f618-d6ea-415e-ba40-e8b2a637bf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a05727a4-adad-4777-8d04-97deb2fa6c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fc9682-3b28-4ac0-a8f5-7b90a74a8f43",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8cb44c1-ebcf-44bd-b16e-7bef8316611c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f4eb699-9ab9-4837-b03b-106e37b8d83b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2999dd-5831-4d9b-ad8f-5a3191ca97be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "03619432-8c07-4ec2-beee-9303dabd595a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2777951-c9c0-45ef-bab8-6b390c632738",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbcde9a-f7d5-480f-8be5-2e0e4c67afd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff06675c-8f76-4ebe-a946-c0f103098803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38815482-53e9-4931-878b-2eb05eb77025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "883c02ff-00dc-4b78-b8b3-3734621284da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f59e6f-edff-4ba3-8266-75fd51ee728a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e390b9-c2f9-4d82-b521-cfa9628077ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c4e614-4667-49fd-87c7-c1b9ece885ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7bf6ac-48b8-431e-8f8c-f76684506a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5bd63ac-0af4-408c-8828-6ad3a752a005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f553e0f-ecea-45e9-999a-d58a44f0b5d3",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59417600-61af-4937-bff6-2c9e73bf1919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a6221f-cef8-4fa7-8b9c-98e99a832047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10966ed1-a4d2-4c43-8bdf-ab774f18ab4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a59e6a53-7c47-46cd-ab7c-bd8ce054b557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56689ae1-4dae-4de5-835e-ac727727d6a0",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335f91ac-ee56-4d5c-90ed-51ea82d6f9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f897375-c9a1-4610-ad28-f7d97abc1871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0311faf3-9507-4e9c-890c-8950bc4d9392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "72fd16ec-9123-4b56-9d2c-0ccb2d53f3c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0970b385-bbc3-4d4f-a3c8-53a0bcd9cd6b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6181e1d-0bbf-4f26-8469-d3cb3d1c0e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea34df86-94e1-441c-b277-97de7e1a52aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07e8130f-df36-4031-8ea9-08f0de9d9816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e42ce50b-c311-4828-aa1b-36161051a8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36be5576-3196-45ab-a006-d1088c130372",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d337990e-002c-40b4-b477-6da406e04d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6ae923b-657f-4527-bdcb-ce08f97296c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673325f2-3315-4e72-afb3-e4cb2071400d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "61f0d299-0c5a-4886-a7f3-31d8628816ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998e3808-9f9d-4964-bf58-15d1aaddb455",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df104a3c-0655-4104-b619-c364a41a5131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709fbf4c-20e8-48a4-9a7a-9f4729110f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdda903-ea48-419b-a7c5-4f117f7e219c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f02c688-599d-48c3-8283-37c23a362bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a74bda-d5c7-41e8-accc-95f2632056d9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2df61c7-eb9d-44fc-a5b3-700ed3f3a9ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551bd0cb-cfc8-4729-a253-e9c9d682a523"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acdfed4a-9bb3-4418-892d-ae03b0f4a805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab6bfc0-bc41-49e6-bd1e-1a4df2f09d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5992628-9409-4694-8a94-d5fff0224472",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e521185-8f25-4858-824b-94836c6511ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea8b246-1cb6-4bc7-be56-8260bdb4361a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae19467-0212-4bd7-bcf8-2999845cbfd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "60065b9a-5782-4d0c-9047-941110ed0474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e8508f-40f8-4d4d-a243-21e32080f948",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "970d09b1-075f-426c-bace-e2654ac0b2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9454051-7387-430a-b21d-abca783e7bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a59f1ca-349f-4885-a9e2-119eae763805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3475ec4-e7d9-47e8-bd3e-e508f4db9b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41aa6fc9-b8f2-4730-a70d-58e541b1e5a1",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "409cf2cd-2080-4e72-9d2b-f0f9e962059a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ec07e3-0e4b-4ee3-8d31-40e0ce0fbb52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7163c597-5831-4d6f-8da3-c169019b0c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fc3b1c6-81db-4b21-8d2b-7c933afb4bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe4cddd8-7199-41cb-a282-d9f50fc295a9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7f0c35-4d4e-4ac5-b115-3fed824834c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c590b779-c3be-4ace-8f4b-d8de69712a64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab7cede-8465-443b-ace2-e67c09c7c0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc38db3-ab03-4cab-b58d-eb0d0a8f2bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5324adac-bfb8-4a1a-92bd-5e2a6eec678c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d58cef-d86c-48bb-be0c-4dfd30afe280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca3138a-c7bb-46c7-9aa4-440bf593fb69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e02bd5c-d09c-4793-b94c-2c52414783e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1514f7c7-9c0e-419e-b07c-33a0511919a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe21c869-a473-4304-ac1e-8647301d5ee8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27ba2b9-77f5-41a7-987c-8dceab40b6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e845948b-d96d-467f-9c6e-c622d0e17ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfe8f02-9ade-4200-8706-9465172d2647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c6db045-54ce-452b-8386-69abe760aed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d534630a-0993-4325-a58c-923a946995fb",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1baecf02-b0e1-4ba8-807f-27359ee3ec21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5217582b-42e2-4815-b3e8-3132195f2898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb1c08f-5ea3-4c32-9403-eb4f501fe5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f49bc74-da6d-4dbd-8751-12ad023f75e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6933101-348d-464c-b23b-994811cf9e25",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c75045-944c-4dcc-8f1c-2e1d999b2572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3f70fd0-ecc8-4ee7-b894-d1d551940144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa20ba2d-7596-482e-a678-c0624e22a205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dfbf2e0-fd59-4466-8e79-f79337af329b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53b157b-6e7c-439c-8faa-83458bfc6a42",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e581b85f-9a5e-4a1c-8440-d4c606268257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63bea54c-a6c9-4489-b8fa-a573d1ca4040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad5fbb7-f2e3-4905-8a65-8c8242c8cbb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd979e9-2f4b-4202-88f8-927262d18c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7240d7-d7af-4046-b510-bc9dd76b62fa",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4a3597-5c8c-4342-b27a-8f7161d20441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "900456d7-b1c6-4360-a02f-f4d90c40d6f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4bc8c7-8ee5-40d5-bf35-0c1f690a2a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a63fb340-4245-4831-ba9f-b9deff17c0b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0cbb5bd-ad50-4e40-843a-610b8aff5e6f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a16ba00-709e-4f4a-9362-26974a331dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5baf63b-8a5b-4f52-848e-e02ab5dcc680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea3dace-395c-416d-91a8-0b61ff30ec7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "adc8d15c-b53a-4c31-8379-0fbf1c89a377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b135f727-5a57-4d8c-b257-8a3fa5854df2",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8247f01a-92f5-47ae-bd3b-185a605e010c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc9d056d-d256-45ac-a0fe-39a614ef8cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9941a76a-38ad-4a4f-a330-b31bc3587d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbfaebf4-a49f-49b4-9d80-57c83c4b8cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2037ab5d-f8a2-4516-85c5-23ac1bd48512",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5918f6-cd33-4d77-aecc-63056ebf2b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d856bc0-b70f-4b82-9ca7-c1cf82cc6cbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0120a194-58ab-409e-8468-ed754b505fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "44697e95-c80f-4bec-b0de-e807f0eb0dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eed98fc-3ad8-40a0-bb20-c4149ef86133",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcee5b46-db9a-455e-a550-6e5b7c6d6258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e388174-aa8f-44d7-8fe2-454980c3c9eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81bcffe-886c-49c4-bc73-c33dbdae32b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "06e76168-b9ae-48ad-89fb-0f39543ab76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b813da-098d-486f-9c64-3fa10f54dde4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed89d36-90a0-4fc9-9fca-9a48917ec526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53fae641-1770-4fd0-89a6-6e482612da5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ce5fdd-29dc-4403-8297-edd4ac77c4f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b12b2381-cef5-4b9d-abcb-6d3d8a0d5cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56b900f-d3fe-4608-8b9d-7b9457b76643",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da9651d-f102-4de2-b7ec-e7a8baf7d50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9a8282-9cef-4a2f-8e1b-08fc46e7fc77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5038cb14-569e-4b86-9c82-1b0f0dadf2e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "262c037d-6b2d-45a7-ba9c-23102a4a327f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802cf573-f111-4b90-9133-56245bd78b66",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0028b633-f418-4b78-9c90-02352bf58408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e796f75-f5cd-441f-a471-8564bebc0640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246f6e2c-b194-4b58-b8fa-b57eeccfd9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d289d4df-c3ee-4670-a4d4-482e2176bc8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a93dbd-918b-46ef-b838-8147ffe760a8",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c358e1-9f26-44c3-8e7c-a71db2088b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15493a6d-b181-4d96-a87b-3c367007f640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2703e643-e82b-41a9-9fba-51717f42963a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b10b39c-525a-4bfc-bb8a-f676ce34c59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee15764-7688-4a38-a9e2-52332ae594ae",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0e59a9-54cf-4dd0-94ad-a0da424a2178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43beaf67-906d-4e2f-80ac-6c9f24c05117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6eead5-d50c-481f-84c4-d043c952ab80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d49f5e1d-d201-409f-9179-3851b5dfec2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289f1dcc-dc9d-410b-9d0c-b3cb38b33ae4",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "533639e5-860e-450e-95f5-b9133e5c094c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb4e3520-66da-4193-99c9-07ff4044f6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a516271-60bf-4501-b62d-bad11108aba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d7a4f5-254e-4150-ba7f-2341dce70e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69dc3bb-9244-4c83-95e0-84fb7923a66b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec6f04a-f0a5-4d91-af90-20acd4c80f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e564c449-6499-44ac-b81d-6c1dbd7f6093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459256a4-aa50-4728-b096-a33fe079e0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ebef43c-d34c-4f38-a501-934cc4db2c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "585790fe-2b83-47ba-a8ae-9a46b9a5441a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193a904d-84e0-4f45-aa6b-2bdde5e5d21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b6b59d-248e-42a9-b6bc-de2e1491cd80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37060fa1-61bb-4e99-8124-51d793f7119e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c778b597-36e6-4064-9e13-e4476ba57d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580d9262-b637-4489-b59b-2c2a65d61bf1",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "651fd93c-efdf-40df-8e5b-7112fcefa842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f07837-d6e6-4c9a-9211-0b81fc3fdce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881381d6-6b64-4921-ba50-601edc2d8d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0eacf5-7822-4522-9852-89a965db3839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6ca15c-6b0c-4846-b65a-0f645e97655e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43e2a17-f27f-4a1f-b6e4-68c1d46b4565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2652c4-5f1a-45ff-a698-79bb08258cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86cb71d9-b46d-490f-9f8c-a1741c7b150d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c55f767f-dff1-46df-a571-4011a36977db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468d4a77-045e-4a68-bfdc-66115d0487c5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17f5b83-d173-4bb7-bb45-b24571bcb740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251ff5db-f200-4422-adfc-e15359c68b33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6589d9-dd6a-4dfc-95c7-93d95e411c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d577c509-3fb4-4b04-bc24-5aea4092dd58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1e390f-3ace-4ab2-afc4-ae6c75f3b1ef",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f830c371-4dfb-4679-87f9-8ee876d4458c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ac4b7c-bedd-4e3b-8db2-77275b919fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a824dc44-0892-4246-a9f7-2132048cf696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c52d8411-616b-421b-9ff9-4300b6d79e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb172bb9-aeb5-47b9-85f7-6ea806552d57",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30ec213-e59c-406b-b7e8-021e01c305c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0fa3514-6f25-4b14-8161-a2d1e202b5e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016c5236-26a1-4268-b1ad-1cc8c1459764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a5ec03d-21f8-4016-83c4-7853de942e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d678f6f-1188-46e5-a0cc-4000b0ef2304",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52e72c1-4dee-479a-91cf-be1757b1da49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44155dea-bbc7-4523-b413-c8d618f8f2cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d85366-ff36-4aa4-a633-e7ac0c326943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "179f72aa-b018-425b-bac4-d892cf441430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcad2869-8ee6-4c75-9e79-f6418bfe64bb",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d623c5-cddd-4037-a80f-0a00ca836168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8cac89e-9112-4c89-83a6-6bdea0e122e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6de06aa-d44c-43e6-bdc4-da560c55266e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4342e9a3-a7c6-45c5-ae9d-4768e3ab2a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5676113-5977-40cc-9e59-b3e06b3bd11c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d5f6ff-138c-4a3b-9956-1d9af0eb8d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8508e4-8af9-4665-b549-b95840c2a549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1dd21e3-bf4e-4d47-b54d-f2b003eee3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "33bd1f39-1dfd-459f-9032-6cb77da76ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440e0a11-e815-41bc-8c2d-eecdccaa89a0",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "767e669b-0918-48df-a76e-bc5475415ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3861e965-10c2-47ce-992e-26c39a0f6474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb1b848-ee06-4241-807f-93e83f902a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6043fd35-633b-431a-8f80-96f0807dc928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc8ce8a1-bec5-4709-b365-a660dcaa1020",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e09918-a4f0-444c-8cba-38f965b898d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fb7a2aa4-cb27-4c73-88d7-c7d8706f292f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70eabbd5-a53a-49ad-8640-31bb573f17ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb42160-0624-4438-8b95-31b7b77edb9b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8d04f8bf-3746-4cda-943c-408b7d58af43",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "14567333-ae2b-4a25-9bfb-63691bb412dd",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ca0200-95ff-47a8-acdb-01e7eabcc412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5c83345-73b7-4ecb-895f-66735a6beff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a82ba80-a1f8-4124-b7f3-f320208bcf9d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b32c25c-8d0f-4ad1-82cd-ac9c69a9c4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbaa1bb8-c872-4e0d-8dc0-90510e735b5e",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a4a4c2-d61f-44e0-900f-57a6e26fdb16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9ac71d3-9839-4577-adcf-a0d6cbf1f38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1adf656-80d0-4c3a-8408-481d33961b65",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9232deff-9806-4685-86d1-c0201ff7c655"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "710bad07-83fa-4120-8437-6a0027e353e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "526d14e7-9397-450c-bc51-307e093c870c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "94123aaf-879d-4692-aa15-775296816a8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8061e778-4d3c-4d99-a97a-b0d810a2042b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bd2f6510-852f-4856-b7bc-265251b3f38d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3679afca-12ca-4a8b-8297-8bfa164dddcc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "90eeaa3a-aad7-4e8a-b8df-4b17b4a91489",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f64d6b1f-d11c-4256-8969-415c28dae0bc"
                }
              }
            ]
          },
          {
            "id": "24152bc9-c7ab-4d45-a0c2-ccea5a4063f7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7db5062c-4e77-42b4-9f98-1175190569c6",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "32c48ab3-12bc-4fb1-981c-6b313b31adf6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26aa9a1c-0a8b-409b-a16c-35377649dd8c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa9a5178-162c-407d-a3e4-ae594dd6e0ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fd4c1d94-5510-4458-ab34-62b8b7bc2501"
                    }
                  }
                ]
              },
              {
                "id": "fcd04f6b-41d7-4514-9476-b6abf2f59d5b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8de36e72-9839-46e9-9972-eaa13e47474f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c4300e0-0d01-4a91-936e-d070ccd2d79f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d64dd2d4-570f-45ff-a24c-169286460a77",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f64aadaa-c6e3-46b1-9b7c-18391f1cbe69"
                    }
                  }
                ]
              },
              {
                "id": "7f97cdd8-98c9-448f-857e-d76c4779a0cc",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "751b6a4e-ad63-4f42-870c-597e97dbaf60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "365d6d9a-5a44-4be3-8ab8-66170139c591"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b106927-712c-4d5e-852e-e681641da638",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "44c36ecf-3e0f-427f-9ca5-d931e3872838"
                    }
                  }
                ]
              },
              {
                "id": "ab6dcc78-f512-42fd-9722-7539b23cf293",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b165623e-604f-4384-b8bb-86ad41070e2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "01eb397f-f3ad-46dd-8d4d-30bad56bab55"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92c744aa-6795-47ee-a4d1-b5d2c6a29d47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7d83ac29-75fb-4f24-b0b0-ca4787452acc"
                    }
                  }
                ]
              },
              {
                "id": "ba2fac3c-9276-41bf-8c59-6b4fbaebbf7d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fc5eb0a-5020-4711-94ea-167800609c25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "56b3b3fc-4326-4909-b20d-498f4c802310"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "965d27a7-102a-4262-bb60-ebf46634792d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2bb67ea0-5997-4b0a-b321-007b1ee81c5e"
                    }
                  }
                ]
              },
              {
                "id": "93c25c74-f289-45e4-bb4e-e854a3d461fc",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f5a7953-e550-4808-a7c3-8822afd17295",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "21f2d4fc-fa4e-40f2-9c6b-9f85302c2af6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7313eea-8457-4e12-88b8-ba7783d483e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a040c1fc-798f-47f7-a599-4c456b2efa52"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "16f05811-0626-4a9d-b04b-d160926c8036",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "12865772-727a-49db-8be8-bd47338d7233"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bcec5084-bcdb-4f84-bc22-fefb7c777488",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8bde533c-d327-4776-ac69-1e95768ed940"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "153de1dd-b1fd-4057-9146-cee9b9f74b44",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "35b02d1c-0806-4aa9-a8e2-74c40a45df44"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76ce7569-33e9-496c-b888-3f1e7b723076",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4729182c-72e0-451e-9d3e-0352d6dd2d2c"
            }
          }
        ]
      },
      {
        "id": "fb5999d4-70a7-4c23-a873-1356dc33fd74",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "dc7a1744-945d-4ebf-bbc3-0e2f2ba929b2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "067f32e3-6157-4478-b612-ce352b888b7c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "16077589-cace-47b0-afbc-62277b014ee4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b08a3d2-d4c4-4a69-84b2-960934819663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4827a960-00ae-4b3a-97c2-3e67d4d85f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f338f2-2c38-4fb3-b435-00b26b71811d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c1c44c9-fa19-40f0-987e-47b6f91b8bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b26eef48-01f3-437e-a82e-97d0450f8496",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e8082b-6799-4c71-963c-782c144fd876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b16a3ec4-f7a5-49ee-bf16-92e94e905218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7fc38f-2266-4131-a06b-91600a61bedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c0609fe-e76b-436b-9348-816ceacdf1a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25a4e7a7-b32d-441e-9af2-8d34cd3d9b33",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c17e31-d7ad-4318-a583-de00c7418e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c83bb72-3138-4233-b7d2-fe2ed79f6417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97495456-596c-480b-8d91-37570c93a26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55590964-bd0d-46cc-b845-22d8eeb90b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d6120a-5664-4630-a492-41cd7a02ab79",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1700294b-58d9-46c0-a31c-8c7608b7c4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435ea4ed-6036-4e84-a798-cde227b92998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d62e4e7-5b62-4a5c-90db-d2fac625a273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dceb5c24-1a4d-45dc-aebf-081b02b777fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f23fc37-58e7-4999-854d-ea03c895cf25",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97efd519-e40f-43be-bc47-8341c2e8f176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a716a0fa-fec8-4fd7-a744-e294db7f74ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557bdbfa-18e5-4f10-99be-e47d982264b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6114989d-5ada-4397-807c-59477e5a6707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063cf70e-0f00-4c2a-bc9a-1c8224ab929d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3b2389-e69e-4ce9-b843-cdb395c67416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c18dcce6-6701-4dc8-a9a9-a7881c88be33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f018ca-6c09-4a9d-a621-5bf0bae37658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9afee23a-e13f-45a2-a524-3e2bb969b6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8a514f7-5f4e-4411-8fc3-916357c50724",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54430a4b-c8b6-4602-825e-77232ed44978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a8c80d0-28bf-4133-bca6-b8bee54bcf7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8f2d0f-9ab7-43ef-8577-bef0856f7385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6bcc562-5f18-4122-b283-eedf6ab05fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2b4e73-aa09-41a1-b669-041c3b054566",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb21b253-8694-4278-a25f-e1c0f526b21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48e32ed-c93b-4bdc-b192-3018a1f0aca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557b6dcd-c812-4e17-83b7-6570e7d2b27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa7b48b7-46df-4749-b677-96200ce0d704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ee1f2d-a164-4d1c-a088-7ef955bddb97",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75d3cd5-9fe9-4b48-b120-f7a6996d9c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ebaaf08-32d2-40f8-a3cb-ceb5939a2a8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53284726-0a43-47ff-9b74-cfa906fd6ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7422777-7acf-4b8f-85d5-42b2f69bf462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1755a8b5-bc52-4306-b553-e367af404556",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7339fd-de20-424c-94e3-676fad1d12d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d1b16ba-d088-4000-abff-07e9500b18c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a038be-8d47-40ef-b86a-3610a7a71b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "27904993-bd52-49cd-8733-fb268e1277e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca226ea-ddf9-4791-8ebb-d7724e159cad",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc25853-1369-4915-bbef-ac1b930d1e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a73f346b-80cb-48f7-b498-d42064a1b584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110f9036-fb29-4804-a0ec-1a65a000639c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a718a6cd-7afa-49f5-8e20-c48fa305bf7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03bab02-1f08-4699-9613-cbd29b2990be",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9156b53-49df-423a-bfad-d8c5947cbf0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff443341-776b-4bb9-85f3-65d9d9518519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fed0572-2529-4e12-a433-d43f3948cbc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3315ab-0b1c-44a4-a5e6-703e189c897b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f04d07f-a47a-44df-8480-7b18279d7e4a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c1be696-da52-45fe-99a8-6cf6c15ba5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf55eff-a271-48c4-9868-011961484db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9a9b71-9f6a-4b03-b749-e9fddda88f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "38e95af2-d8bf-47b4-8051-e8bcb46be2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a7ccb1-ca1f-4a43-be7b-0b2e00f81647",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6475882-7e32-48d3-85f1-4f4362a32fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db3a8022-864f-4b99-857d-2b3869d3d5b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd6c958-1474-4e72-84ac-2b936cd23a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a469abc-0138-4fff-aaad-94011f7c6b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e71957-a1a6-4862-a0ef-c541be114083",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e970c5fc-f0f8-425c-8401-686c89edfb70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a834cdad-424b-4c5f-ae76-28db2d325d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe3a489-2ed3-42bf-9f28-927c50115464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "fadca7b9-5dc6-4c8a-b132-88d548a526e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df332937-a6a2-4c2e-80f6-fcfab7527f97",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a798413f-0632-40ec-9df2-8a9087235878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "676ae79d-6aff-4ba9-8ab1-1cb51ba229f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01dde52e-13e1-4b07-95b4-e7ad92909705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "097ed240-635e-43d1-b5d2-b550185ae737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8298a259-5860-4d51-ac12-e49f44f73892",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3181c1a2-71ba-4cbd-b855-4a02e5cef353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f5cf73-8932-40ca-a9bd-2f308a837eba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c676cad2-6ac9-4cb1-95e3-dcf59f75771b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f56145-0547-4ab0-960d-ca950a766094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645afef0-3aa1-4756-98ec-83977b42d8cb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faebf0f9-84e4-49d6-8d25-c4d76e3c0700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63218570-8cd2-44da-8963-4797ee1feeee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ee5447-dfe4-4aa7-aa98-1093b20ff776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6e3d362-1d09-43af-800a-7ed4aa2af572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d04b63b-acec-4c38-b1b8-24bb25c14ea6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c9465a6-0769-464c-b8d0-34282b318c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea703d9f-b3ce-4cbb-9c48-908e4c68a99c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5398c4fa-b054-4d2b-868d-c0272bc69e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd1480a-96a7-46bb-91fa-9ac66710861d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ce2449-32a7-49ef-93a1-249e833556bf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f136387e-7e58-42ef-86ef-6aecf2e8c088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8eb1a6-6ba1-4ab8-a876-524d7d6c1670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f6849e-6281-4005-8646-9bfc797ec29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac61456c-b5a6-4a36-b726-d09f1f42a0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e59956d-aa33-4b2e-9433-52b347735c16",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c37156-1d9b-435c-a4d9-89b60be9de54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3017255a-3257-45d9-9534-acc86b371f17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e30691-8ec0-4cda-bc63-c57147c129cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5477a29-d0fe-415e-8a7f-b33ef319e5b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abf982a-7c2d-4362-9db6-a644dfaf5b84",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6301ab7-9849-4169-af00-9e9331b83fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a66bfe06-139d-4b4d-858b-e125d2e4d60c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05158ac-cc67-44fb-92d7-8e7e5be897b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "648be121-ee35-4d0c-ab09-bc408e8bd87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81dc7b0e-cde0-4b5a-8ea2-fd4e8d5a45b8",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19e50c5-da9f-4a77-9879-3e4194348bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa6c173c-ef86-47fd-bf95-6e07e725d083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69dc1faa-d6a9-430a-b39e-8f284ef4dc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d650118-02ca-4cd9-b5ee-7f975501f3b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac7d8d9-cc96-4053-ade8-34819ce1799f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f1db2e-ee53-4d60-8ee8-26de3c6e2a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22e575cd-20b8-426c-b871-e774dee35487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79a24e9-830f-4e04-94cf-038a4fe13682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cfcf7f0-fcc5-4df4-9285-18669630303a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398e4077-272e-4de1-9e69-00adaa4acbd0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d19b4a-79d1-446e-a27c-beb41c170dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1e2ad4d-1d91-48cd-a177-2a670b921214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd971c6-a2dc-41d7-aa80-df9081083967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1714ec0e-3b42-4af3-90dd-ead261f0db41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce1e1753-74be-4935-bf2c-cef64a1a11ad",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9baf37b8-eb20-4d70-b270-defff7a3cc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b88ff9e-231a-47fc-ac84-36c1e5a1fd82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a007613-4f2d-4ca5-9629-5d05ee129482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4050827-8ee2-4a46-8557-fbc0f1e65fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c50e98a-17d2-497a-9742-06a7c2fb547e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c82d923-f920-41be-8e84-450e1badc59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa5a1adb-e8a5-4159-ba0b-7c0ae165fcb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b2977c-8c06-446b-822e-c4693a1a8f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5a5fc44-2cff-4558-b37f-2ee47cef957b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8103d23-b5ad-4f87-952b-cf066b5a0e33",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8b8299-6617-499e-844e-578f1fe9ad49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b30db2-32ef-4602-9a59-e09efffd3648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be41e32e-d75c-4b59-98ba-6e69d124a7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc6c1e0-ab2b-49f8-a291-5edb7deff7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c673f7-268a-44cc-97fe-bdc2b3ee0824",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5e45df-7520-4604-9297-c4156f65ee75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ba4dd80-9d85-4b6b-b26e-616a866bc65f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486a4ec2-817e-45ae-a9fc-05ec50f95166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a598360-8181-4706-a303-4643bd2321f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc30be2a-01a6-43b5-8a21-7aa1e3fad183",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea413a73-5c42-45b9-8c6f-2666904224d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c60d30-7d45-493e-b5b6-72e7029109b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cec5454-5b34-4499-b7f9-ae0c67a22ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "596945e6-b508-4b09-90f7-b244fdf38982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cbfc173-6ad8-4afc-b3d8-4b4fa80a0e3a",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7394e626-b599-45db-8f6b-959f218cc1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b832f1b8-379f-4888-b801-5257fa45d15c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede09f80-320d-41a0-a9b1-00ef3a6c89aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1633117b-f300-4c40-b260-c34103b37906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a47838d-e6c6-4060-b5bb-16795429aa94",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d7c96a4-1f17-4459-abfe-d640f16ae3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "357b4d96-3b9e-41f6-a967-645ef6d8ead0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53693d91-93ad-4c2d-8e47-7f50d9693975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bbaf292b-8991-47ef-8d8b-914e60c67d8e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a9502665-720e-49e9-b46c-c5e5c9950c50",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c8fb85cd-f103-425b-a0fe-3370d18c9562",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef31c32-26d8-484b-850f-e5405bdde7ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f2006eab-02ce-4288-8b39-b3e806e7c977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d91fa2-54fe-4fd3-ad01-561156da24e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5443ca9c-fe11-4943-9f50-08b254fd6236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b413fa84-4ae8-4993-8f33-72cd6a6cd719",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2457864-d188-487c-bfc7-d4b141e743a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d646d389-4dae-440b-a5af-01ebb19348b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6954786b-42a9-415b-b80a-072225ecb54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83128ce3-0aef-4395-a5b4-e565b4a3f1d8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37eb58fe-12ff-4d0b-8d7d-be5e3b5ecfc3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a270e26c-86e1-4dcc-b983-ffd5e56d4bf2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "02c6023c-c3f8-429e-b304-29930fe930c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b053bf81-6c4b-45dc-8cca-d19f87f1a97e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8505f2fc-1eae-4271-b07d-7177b9c5b79d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5f69dff0-14f3-4df7-ab59-49f313032abd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "646f98f9-1325-42a1-9814-f47d15db6bd3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f12048f-75e8-4309-94eb-d7506c11fccc"
            }
          }
        ]
      },
      {
        "id": "a4b90250-e63d-451d-8806-000f8ca60c5d",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "1942b256-470b-4fae-ac45-4c0a19b0e421",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b7a22b12-7017-40ad-b5d1-1c14b16176db",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "39468355-84ad-4e4e-85fc-37b54c6b295d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d935065-d2f5-44f1-9584-f9dfe3e8113a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d03f7f-5b1e-4380-8db4-3cfd4756c496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f29ddfa-2997-41dd-b653-e0d6d1f332f2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26fa86f-9217-4328-ae24-41ff1bec0df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f45e95d6-9c9e-4bb7-ac08-b954ad0d213e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62902ac-9e57-44b0-9dc1-afb061213231",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da5b7055-b9ee-4b81-a57a-5185c17fee1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21a89eb-6791-4be4-99d2-da143389ac61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735a6a1f-9303-4388-9eb2-b22f65566e09",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4435e54-6ca9-49f7-b0d5-80c769767d40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b01bce8-47ad-4a3b-ba5a-a93c17b9a602"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c632901-f4a7-4418-8eea-359006e3511b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a220e4-f168-46a1-a31a-11b20fb8617c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82bdb189-0dfe-4bf9-b6f3-119a15e188a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff5764d-59a6-4bc2-a653-eb5efb11efd4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a89a1b-e803-4e9e-9c48-9d91a9574fa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d641b3-4e6d-40ad-b144-ae64cb6dd0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfceaea5-4a67-4290-82c9-1e3a2ada4d3a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b484b40-4664-40de-84ec-fa6b7ef2115c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2aa79c5-f699-4e84-b987-74592d8e9945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca34277-6fc4-4bd0-846b-4b30fc1b2770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e50fdc-3f8b-43c2-b6ad-ba46dbc1adbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1052f7-af03-40a8-a6f1-5bf5d2324f1e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b501ac42-cb69-4c8b-bbb0-905a7ad40bed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09f2b221-93d6-4b7a-b994-c0573f1d8080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd229468-dde6-4d28-aab1-8953c6878597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc14b559-542d-4816-9f5f-3174a6ab57b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d571af6a-1770-4342-9221-a11dc844b898",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d32432-489f-4498-a144-f9606ed0ddcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "431614d8-ea6d-4c91-97c7-7f1ac9feb598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90988eb-4291-45c8-9ff2-789cfb84f115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3bfde0b-3783-4d6b-b6e9-7e8e0c86e80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3192bc9f-32bc-47ca-99dd-194502e31cd7",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "692ef785-9898-4248-a354-8cdc04e3fc01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08c8e14e-1b44-4427-ac8a-44111e6e5ade"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0261c59b-cce8-4f99-a159-52ca60568639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e9147d-8dcb-4188-a540-963656162d10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6676a1ab-aba3-4e37-84a6-0fa9932c6a57",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2a6639-e211-4560-829a-7afa0e45ab6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9357ee0-698a-4532-8c74-01ac2aefef97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f64a3b-c7b9-4107-a6d4-d4c6ffe33045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dea7309-2dd8-4a62-88de-e99166894b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9516599d-cdf2-44af-a619-375cf4523bd2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a83656-2e86-48df-89d4-fc96063060d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "343bb08d-a9d3-41cd-a0ec-5b4a8f1ecebd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a558e8e5-72a7-4403-86ee-caaad6c05dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672b00c1-f353-405b-9342-18a7233f2858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a0fa5d-9f4e-48fe-a79f-407f64b13c88",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b483b7f3-289c-4691-bed4-7ab6c3526500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "386a34f9-b8b0-403b-92e4-2dc445b98503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "771b0872-1c50-491f-8ba4-12f578b0e363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761abdee-e681-4477-8e01-33e5938e7d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b115fc31-3e1e-420f-8a47-0548068e387a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e46247c-d03f-4c50-a4ac-3804fe54f82d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51efefb1-783e-49a3-884c-2e47ed4dc60d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "286231aa-6d1b-40f5-bee5-febdab7460e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb80d617-b061-4b92-b420-98fc76b1b244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bcce6f-e9e6-43be-a59f-f5253158b904",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c036ea7-3ef2-4715-8054-f92b0b367baf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3edc374-8f40-4886-84cf-d6586f747834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8764c51e-da8a-416a-beff-f16da4e8d141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f9a1e10-1591-4d8a-b887-baf10d951af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ab7b35-e837-4429-9bb5-78dd460adef6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a533611d-7d4e-419c-a75e-68738ef9fb06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94d2b6f0-903c-4f86-be92-f629c9b7fefd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29bd0c7e-7445-496d-9485-7af6fa2e0565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6da233bf-07c9-4ebe-98da-8c5be7d2ac8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b34aeae-2ddc-4d85-91a6-5158647c4748",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72694b2c-c6fa-45f6-ad42-90ccec5b5fa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "404158ef-cdb0-490a-985e-ea292d8123bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6893fd0f-4937-4b72-8e06-49d9c6a2b340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34795139-714f-4267-9ca8-bf9b640e00fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6d73f3-c65c-4167-98f6-dc239756d69f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1290f98-e123-435f-9fb8-05304c129c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebc93e0b-244c-49fb-b1e0-aae5723cde54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72ec69da-56cc-41ee-b1d6-1c69c7fa2c78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da3b895-adc2-4e25-91ce-4a7caf535366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d264230-bfc7-4a97-a957-a237984acff7",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745b197a-9622-4f23-8467-96b0e861e036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f038f04-5ad3-4e62-8b9b-6fd52e86bda6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c2e074-6faa-4ebb-9de0-043510ac0012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7baeda1f-285d-40a7-a8d3-078b57ea3204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf1d085-7a7e-4834-960a-5cc972b98448",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24068e9a-7ef0-4cc5-b5e7-e0fb6f7811e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8acb3ec0-7d36-4506-9d57-35538f269dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abfb476-d02a-4379-a2df-19796d455fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15b71a14-cad8-4c16-94df-6d45a0a64ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8733bfa-cb24-4bea-b66d-2da3e5f45009",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ccc46b-49a4-4391-ae9e-a6c27b057967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc7e355-c1b5-4889-b03f-38bac128ece7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff64a82-0eb7-481f-813e-d1b87c06cd66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74ad7280-4078-410e-8a72-f888ca1b4de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091f73b3-54a2-40c6-9862-e9629ef65693",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cf51f3e-0c8c-4da2-a420-4b2cd0d8e707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "068eec3d-9572-4786-8ef4-0b1a2a1d963b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5cd8c0-2a34-4523-9864-8aee893f33d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28b192ae-0d39-4628-89b2-def4b7e475ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ef1317-884d-402e-8d1c-8e67ff74a680",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85c37974-c33c-42c9-b928-0a61236ebfba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e771ad63-db50-420e-9dcc-de700ffd3762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f718a6-e1e7-48f8-bccf-d065de929882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de970d28-0801-4d99-b2f8-e565704458a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3f5f0e-1dfa-4009-9eb1-5d7c9cfe55d8",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f0607c-5718-4e82-8ec3-d5bb34cec267",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7ff7ca8-5a95-44d7-86c7-c1db01bccc4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88ec8b90-6de5-48ad-b29c-b15834726f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55269443-4294-435d-9069-57bf01495133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abc2488-fab5-4358-a3a4-bb7f17454aab",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e89f8b-6a3a-4d56-8e92-242bd3a53c1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60f5032a-2885-45b7-a189-ee7129142881"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f251cf9-fa24-4ebb-b0fb-5207f1fe74ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c17c5cac-b912-4651-aa7f-28aac96ada31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec49bac4-936c-4f3e-a6da-f559b2badf41",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d863cef3-b854-43b0-8cd4-a5a690c231af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bba57edc-dcdd-4fde-8726-7919b6d39a1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23da59c2-1258-43f2-ab4a-7c9501354e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b84330c-374f-4124-805a-911186ee3e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08fe878-f317-402d-88d2-beeb6658c341",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a36c865-9df7-41ff-83a2-67fce64432c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f471f286-f0ab-43e0-a759-d38f1e36108b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60092ff0-45d3-47a4-85df-faf3f6c8a31f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76660139-6403-4075-b80a-f90f13b2b6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0190fa46-0bf9-4ac7-8a91-6914b7fc26a3",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef3a7c84-702c-440e-ad8e-b0a7e101ea35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a2884bb-5ae3-48be-ab03-4612d3427a66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93928d13-c987-41c9-acdf-d96825d4d112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b8472d-b34a-4f24-bbcf-0542b64dd051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017e8594-b58b-41d6-a5a2-ba0cab635bfe",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2d589a-9d9f-4831-a6bf-0db0fdc2aa0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c21c5b9-76a2-4c06-976c-a95d068ee5fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0da29a1-c177-42fb-a866-f61b2005fc6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd708df5-6bc7-484f-af0a-bb961bb032e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5232c3a-488e-4c5b-a8b7-2a41629ba9ee",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2accfac2-9524-4ecf-83ed-dacc7e8e732c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cacdc8de-1a86-4306-a6a4-14cc584259ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b317af5a-ffea-497e-8810-828bb5605420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b099b3c3-eed9-4f5e-9957-2c7f916f478f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5539c085-efe0-4b97-91bc-7eb618c08bfb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88377bf-0fc0-4fd5-b369-ad7e3d3060ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dc0629a-602f-4844-90a4-34ca733c9a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46379349-8946-41c6-bdc2-bdc4534fcd38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e956ed4-ffbd-40d7-8d89-367ea9bbedc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bd18c2-13ba-4901-8633-7d6bf25f2e79",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6cf47c9-e17a-4562-b297-e39f5d96a509",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0282f4eb-ae29-485f-bb46-bf9396db3ec2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb32743a-c00c-44dd-94e8-2783c5b7821c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c7fca03-7129-4ae8-961a-fef2608bc17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d85936-b765-48cb-ae37-c84931be5352",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f379080e-8d2b-406f-b3bb-2cd91c8e3d44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "677bdbc2-0179-495f-bca7-d875afbfa387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b7a229-7b71-4b95-9386-3151b9ddbaa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc639127-3da2-40dd-8b17-6f8174b00516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2cb1f2-aa33-450c-a833-b8329640299e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c293f1e2-482d-4ca8-a77d-1b19a8fb264a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "577646d3-5a4b-483c-9d80-d18b29b6da7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d1ce38-9596-4181-814d-0cb8aaf8be61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54214cda-8f55-40ee-8212-88d5f1fcbdb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3a1e0c-0edc-4a4f-8b71-8cc7c312aa84",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9940b4-73fb-4616-9230-7f3d97bbf729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a530dbe-756e-4c05-87cf-1765aca2991e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1945988b-f980-4244-a62a-08101500cb49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4063d4f6-b330-4975-8fc6-10e56992bbe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d81110-3b9d-4c00-beb5-b917b010f992",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a6d724-086d-4aca-bf40-8781c65a3df3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "870d49c1-527e-40d4-82a0-b06e23b99dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94068903-f0ff-40c7-bbd3-e6f80a70323c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd8aa76-0a0a-4e9f-a5d7-57b07697a3e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267a8bd7-cd82-48f3-adc3-4832b3fe8052",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061084fc-9adc-4765-b9ea-fc36e2d6a34e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f5fd45e-aaa6-4253-abe2-7fbfea415fdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b87cfd4c-531f-468a-91d8-f0f06bd489b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce8cd56d-0e83-4a89-9fea-63d2f24e99ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb42bb4-c4de-4ad7-a7c3-537e2918e2fd",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39763bab-b656-4c9c-854a-a686c29094bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef6f88da-5ba4-4116-85e3-6cd0197606bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ecf5014-d22f-461d-8324-2a1853c7da46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6eba735-883c-4cef-9705-06a6a114d513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc1bee3-e9ff-4e63-96c7-4664a9d07611",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfeae42c-8313-4321-808c-9214ce3f7ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca258694-3616-4446-a9ab-8397f4386cd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6aa89c1-f028-47a1-b9c1-60ed870fd2e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2293aa1b-cb40-4199-b0bd-12076a819969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba984bc-45c3-469f-a292-5689a5458b95",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae5f735-d77f-4a5f-973e-4b1dadc1c1a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7230b0cf-16e6-4ef5-9429-6670cea99ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d22396-cc6d-42db-b8c6-cb67ad5644bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "667ff562-0932-4f1c-9d0a-09bf631d03d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de789d1d-e183-43d2-b037-466e56c03569",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c51b643-34e3-4df1-b64d-03ae27f62809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb68ea02-f0db-40e1-936c-27776f718f72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad10ba7e-5945-4c04-9a40-1600acd4c919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0311a75e-a671-4917-b435-80671d3d523f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108f8a9e-5e61-42bd-8fd7-f88f93e4ecd6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08572480-0bb0-480b-99a4-69e1fbf5d59e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b0c85d-c2d5-4d00-ae10-8da84dbcb506"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df92a35-168b-4365-bf21-4f106a0ce788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "963f252d-fc86-4c1c-9eb1-96f099ca8af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f732ed22-a42d-4925-aa70-32a9f940ebe5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc19b3d9-2e59-4318-a228-53a89d8fde62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45cf0d7-c01e-448c-a190-390164ddc95b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad6476a-41b9-4bf9-9119-551673ef7e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4494e6b8-b354-448a-9683-cfa7b1985b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fff3f81-632b-4f24-9bc0-6df649a335ce",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8930b6fe-84a2-4786-93a3-8a7520e83e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2874f124-afc8-4904-8851-249d22a31ee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "311f13a1-c083-4f5f-91ec-c149aec2230f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee712a2-e24e-48f1-8d74-42c18cb9e405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e792c1-bf3f-4afe-a4de-3f78c76b8550",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f7615a4-0821-434c-bfeb-94611b3db2b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42e75a92-cb21-46dc-adad-fd0097cb2947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb85bde-bcab-4667-bde8-b2dcc4f7b398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d51e252-ae4b-47a7-8b6a-aca8528c7efe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde252db-ba60-46fa-b16b-f3f89b8309da",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ece7ac9-dea7-468a-a07a-4a8977dd8cd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdb7b64f-9b80-46af-a025-4760030c1ffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c06d5e0-fbcd-4e15-af53-9b310ccd8e76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bb9a0da-9fe5-4f62-9765-b1b1ad93194f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342fec7a-81f9-4c9a-8f3a-bb6ec710a0f9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5cdc7c6-c3c1-4022-b18f-2fc20f5db355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4678296f-5f70-4a4f-9c8a-7abdc7b0baa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f3a085-4281-4c55-9e68-b9aee708aab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397a3e63-6d2b-41d3-a062-f1e308f4038d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a17d39-0440-447a-b79c-7263a450ee3a",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac0adca-114d-49f4-bf80-8a3a75e0f2a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "201e0b9a-409d-4bfe-b986-d776a71a97b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a58e54b-b56a-481f-bddb-23f8131dfe9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f770b5-2b39-4941-8425-b80464325c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e27bd96-de46-4a54-a2fe-5911a290c1e6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b2eb52-b278-49e5-ae50-b4e13cb13686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8955fffa-7ff8-4ee7-8890-15c44163b57d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a415b3-065e-4d27-abd9-ce4e97ff7245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8e940d-8853-4954-988c-debe07a68990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f03870-7927-4e45-b086-60dcedf7fe40",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed47d45-655c-4b88-9934-01a0f3eaf8e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08adc2b4-cf89-4971-9b29-2ce711aae9b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c31d8e3-15e7-4644-aaa3-76bac393485e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c090c509-b365-403d-bab1-801593f88702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb110bc-e717-44fa-ad71-00d1898ff943",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef01a66d-45ed-4fe0-ae75-c043a0e59a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7399e3-6c18-4098-af58-97c021bcd357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0b40b3-96b6-48ab-aaf8-ff3e9389c8fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8923299-bdc6-4b1e-8146-27e970382084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71069788-62e8-4f5c-be50-5b794695f78a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47322a1-e270-45f0-a8e8-9f9181756199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b307f899-e4b1-49f6-b30e-fb968ef69479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "343e5715-7e61-43d9-ae10-acb9f466f094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afa15cc8-b990-4a65-b4ca-30bf5dd706d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7723467d-93c0-497b-944f-5ddefb99d26a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb1f1a4-0125-451f-99d1-658a97273f79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6605d9e5-1956-4a40-8887-b8fa8eec532e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f667fb51-9907-407f-b609-4dbe24237609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d8f2951-b2ff-4b66-9c82-16611ac6eea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026aca52-b1c9-4ee4-9357-d346f03972e8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0317ccd-78cd-4498-9da7-0693f044bab4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60269b96-dc1b-470c-895d-3980b9520c2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4942be4-4f40-4e5e-97f9-0e1511881050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "030cbf6c-e162-4555-b998-d7c597787b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9c27db-6b65-4b7c-8ee0-58385f327e76",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2efc0be9-811a-4380-a672-51753a09e535",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2dd58c8-4346-48bc-bdb2-d66031c2637c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50739210-2528-4cc0-8c11-d2523d92d151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e10a01f7-7e2b-48d9-a706-ad487d9e360c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d04cc2e-802f-4830-9626-c677de28ffa3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "537dd645-3e3b-4c44-b4b9-be3c2d594aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07f7ca7c-74bf-4387-8825-d458c1ff1205"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae55829-1fd2-4d9e-9a4b-9ab45e9349ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64873c05-9f55-4a0d-95cb-ba192103c15a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da577907-1a39-4e19-b3cb-9628bd0c9916",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bee5520-bd95-48fc-a4bf-2caba4e93a52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7613563-54ae-434e-8d06-07beb286def9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab783c49-1c2e-4265-8f85-ca5b2915f4c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "800dc33c-f7d5-4eec-b3b7-49357634f724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b69064-4779-40a9-b50a-0517b7765f31",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63035e4f-6c33-47c1-8c0d-af308ed37f68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6721032-4e86-45d5-9edb-6012ff8dbc3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "316a0fd4-8112-4ab7-8843-ded2e752b1bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89afb6e2-1daa-4432-aac3-93bc929a6a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63b6723-9e29-47f5-9f97-8dc469e9a5c2",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4ddf94-9634-4e98-93f6-67ca376627d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f25b89-48e3-44e4-9f41-84eaa82d2615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "351c59fc-8c2c-4b38-bb91-92acaab572f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25167e84-e4f5-45cc-8cbf-2a567ba2f179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46494fb0-7ea8-4ef1-a60d-73a6d52f4446",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134ca44a-250e-42af-86be-440ff291d571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18c04cff-5111-44ee-8475-2e443c99f26e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da533bb-f6bc-4d91-b538-a8a2ad1aefca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045db9b7-ccc5-4d9b-821c-44f512eefe3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88a6bae-30e0-4d81-8911-bf262684912f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e4467f-db85-4e62-be8c-21d5cc61a4e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f411d9d9-1cdd-463a-a286-8f2d34aa5116"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "527d306b-8b0f-4967-8dad-417b92626d0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8b335a2-1c7c-4d8b-83d8-0f0a1e0d4424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30bde93-961b-4da1-8ada-cf5ba5da159c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb77daca-8a2e-4b11-928f-7cfa7b0881fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "befbcbcb-e2e3-4eec-8fcb-b4f1b140f2c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7d7464-b9ee-484e-b6e1-a72c3d275ec2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03e28159-0085-4a65-8d9c-d3fa17dfabf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3731278e-e9e6-4083-a9ea-3004717482bc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32292dc2-0ae0-418d-8df7-0e63dee5db9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ad8c8b-77b1-40d0-a030-e5f9572f0a65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "098ecaf1-d315-4793-bb62-90485584ef14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83629fea-3551-46dd-a97e-6d43d6ab6ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75510c6-11c5-4095-a79e-1540dc8c2294",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e9ab47-60a7-4218-a838-71804fbca752",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5e52a92-32c7-49e1-a354-63eee6173b78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35fa7089-bc14-478f-b850-c8ed7a298ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d74d61-8be3-4f38-b429-017cedd116aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cded76f-b44f-4635-a59d-30733e02142d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9dae307-5724-47da-a628-e7bddcdc7d31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee7d4a52-15c2-439e-a30e-922e4167a081"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb13ec9-90db-4a42-9d5c-a0a708861a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ede75274-856a-4f42-8a9e-c9cb311a651e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ffc286-febf-4e18-b70a-d713698990fd",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea137a9-d287-4d7f-b97a-aeeeb427cfe7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9bd0c65-f9b6-4ea6-8df7-a0df4b2570d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53272c0b-cd2d-47ae-8ecd-f3d5aadfb3a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "818f7ece-357d-4a3c-b3c5-3031efed3f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda8eb08-7f5e-4add-98f9-3d9050e9bd32",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9bcfa8-2208-4a73-92f3-a1b4b3770fdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31095e8b-f607-4263-b42f-c7c66fe9096b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78bd8416-8227-4e32-b070-2c3ea202b243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c83c93-4872-476e-b6d7-5ea50f13e399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39bd488c-8780-4bdb-8c1d-900440dfd9d6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3636a225-3878-4969-8cce-66bd42a3a6fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74506e9b-f4d5-4595-b81d-b3658a788dda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7b7df4-3781-4ef6-b66e-c77e1da5cd86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c6131c-c7bc-4345-ae3c-25117391ef00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "678708c8-2e83-42da-811d-5d4393edd305",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab25c8d7-19a0-4504-addb-f54a99c8f9b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb448be6-8dc7-48c4-bea2-8f3b7401d95b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5a9f1a-c1b9-4082-b257-d2b4b341f0ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99df6b16-09a7-4d44-9fb2-36ce827d9153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359b559a-45db-40bd-ab76-a495409d5839",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0e3362-df8a-4522-b431-128d8a385af2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "091752e9-c2a9-4a4d-9d7b-edbcb3702ba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b1ad06-4aca-445d-8848-631faa3d2470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba9dc3cf-adf3-47be-87ff-2a27af48c39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691b5c48-c3be-4ff3-b757-7d3d30f1a28b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12893335-cb16-4d74-83d6-4e63daad7632",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "599a955d-6e33-4e62-9418-a8354f19e1db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef448343-bb48-4843-96c1-2f800392f881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9009078-13d8-41f1-be06-d44d163be06a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bb0b0e-3eff-4cb1-bea8-61b29e7b7458",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79258711-c7af-444b-9686-1463942b0b6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a71095b-3a3e-4d7b-879c-b92492a6db4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a402e188-1c56-445e-b1fb-503839219830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78cffeb3-1bf1-4b7a-8436-2d58c89aa169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9aa5692-0ec0-40a0-b87f-ae626efdc255",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718f0396-2029-47ae-a5b2-d4b6dfcde486",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "417dc555-5d02-455c-af0c-b851755f45a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "901e9bad-4ac3-45ca-a7ec-01a590f34deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98647f5c-874c-435b-a9e0-feef95762139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc56319e-8f05-4093-99cf-6b4a92083dac",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52b483f1-623d-4e38-9ef2-106cfce12d0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d05ac900-4c6a-4d64-8e6d-66f443b82dec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89aa61ce-de17-4958-8a43-2792a4bb0fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e62df9e-6ca2-4cf7-99a6-8ba56e22b257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3cd3ee-b9b1-47ab-86da-1b45dcc4c436",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21195382-1605-4660-8151-c10e382457d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a1c1779-ac1a-4b70-8ef3-91d4bb7d2307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce9fa48-a6f3-401c-9d57-02ea602e8aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af08da8b-fea5-4b26-8888-b65767684045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ef35ac-e868-4142-981d-3077784beb82",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352f4716-90eb-439a-84c0-38d21759af88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82e388d4-da06-47af-a889-a757272c7969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd35691-166f-42ae-9907-ef818f1a99aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5add88-d75d-4601-be31-166b7ca3aec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06029bc7-0ab9-4021-a44e-aea8be8059ec",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9f979b-a2b8-474b-bb08-6f2d7a714bb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c89fc696-c764-4aee-b4e8-3a87639d2765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0806634a-b86d-4ec1-bc16-0ed0b1197652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2e95cb6-2ca5-4ca5-9b7c-9c768c93252f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e5ec3a-5623-40c1-9aed-0ed2ba2eedfa",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef40cd7-7843-46b0-8fa8-19416ff94947",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "104d46a3-d6ff-4658-8395-eb0fecced920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c051f5f7-c25e-400f-bd5e-a2a62a6a1184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f42cad3-1a8d-43cb-a507-106663a601e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5da8a06-851b-499d-83cb-9c246433517e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132ff976-cf08-401a-be74-f695caa7cbee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cfb9633-256a-4ab8-b056-02800fee388b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1740061-61d4-44b2-87bf-cfb295f66a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aedcf115-3433-45b3-b0fd-ca058697c7d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f023c1f-4550-4a7b-a3b5-59ae4cd14b65",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "975ee425-a06b-4c8d-aaac-f57dbf072d16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c61008d-162f-4bea-9ff0-b4a08adb0419"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f63b9a0-2d4d-488a-99ac-d12f43580bdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c12d075-11e7-4ca5-9265-4939c418945f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5262343-6c85-47c1-9c24-68d30d2c000b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7c5841-b451-465a-9651-ea34a0021a30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6062e1b-eb7a-446c-866b-b5cb6d45f4df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db30a9f-0320-4b3f-a611-de38c8c9361f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "707594e1-5416-4176-a088-7cffb3c5f6ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cc5b900-2954-4768-82de-2bea0372293a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec52fd3-dc18-4132-80bd-7778ff7edebc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a273ca94-c1bc-4738-b59b-61225b270bed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d74cb21-fd0c-4223-b03b-4db8ad0dbf4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a559e4-abf5-4514-bbb0-6ff1613296bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e98460c-c0a0-4424-8554-d5e9427b6eea",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba5f8b9-f813-4dc3-98f5-df0def6c4a95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2ebce6c-ba1e-442b-9f81-909dcf9038c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07375a16-644e-498f-8bd4-b189689c6303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e4555c-c021-4490-8ff6-680453846889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0843d8e-7aea-45d3-bf86-fc7e56599459",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7ec94b-2c05-42f3-99da-2ec5c73e6ddb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "427797b5-ee8f-4dd0-b4ec-092e2e2a4088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a11783c-38e2-49e4-981f-99c0bf2fce2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2cf1618-618f-434b-9dea-8151f6a03293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f16051d-9b13-4ae0-9b64-6d526162a290",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3175861-2b0d-4916-a7e9-3c5d47afe00b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2aea482-575c-4313-908f-269641f5aabc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec9d2f1-f85b-475d-8a00-eb643be38c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76411958-f27c-49ac-888a-9921c03126ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86a7a577-65ec-46c2-aa28-7bf30c96d153",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "412c0a60-e143-4d4f-958e-b0abcacade05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13141f99-d778-4ac1-8f6c-b86c0120c9f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d851fc85-3079-435d-920b-1e56abceedd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b06a0467-6fac-40fe-be7b-b037f7bbb077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f724c6-92f5-4906-8a40-f91379dc3b92",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccd7b25-ab17-4a3b-8087-b0fecc6b5a9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39adf161-8e56-40ff-9b8c-18e9bee8778a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1f4446-7733-4a28-9a39-6b79793269aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6821fc4-e0af-4599-a653-6f9a4487f348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afa72fb-2c83-4317-852b-f459cbe2fd41",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694376ff-de56-4577-bf62-144f7c5e119b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16980a65-be4b-4a3b-85fc-85cf36e066cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e90ea7-3a2e-47f5-be4d-471dcd1a60e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b550284-f995-4789-ac4e-36884e6c2c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05abaa2b-3577-4148-82c9-dc6e7c0f007d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294c61c0-c69a-46c3-9bbb-d72d1623eda5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0980e158-d35e-4de1-b16e-22507169ce39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a41a1d-182b-4e1f-9300-41db82f2bc81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf0da152-f45e-436e-ae24-065b95d9e2c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618179a8-6966-48be-8097-131c55a91803",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94e01c4-f4d4-4580-9388-5306641ccb0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbb03d69-e581-4853-871c-a0125170a955"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "059a9f86-f8d2-4539-b40f-8b1c5962dbe2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d262e87-4267-4875-bdac-2cc577672966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d920ebd6-e551-40c6-ae6d-58ed53e10764",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e860831-ae0f-43be-94d2-25b66ce0647a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb8afb0-635f-4afc-99da-e7b7d81c92f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56456ec2-1230-45be-8eb5-97f16819f6bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56117baa-df82-49b4-b607-8880e82ff3ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec01b67d-e4d8-41b9-ba12-1a96f190a79d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da551f7f-94df-47ef-8e38-f2e129fe6385",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1de1e094-6400-43b5-aad5-0f57ca292f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd14c42-39c1-4121-9818-a8f065bb6e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e441c342-25ba-491f-9970-b171117d8b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a278cab6-b7d4-48fe-b9cb-4b7972ee3fd9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a6cdaa-4470-4ccb-bc2d-275b13c2ed1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56ad07e7-ca0e-4b37-bf9e-c5c8d1ee82a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "597052b9-a611-45e3-85e4-cf06214f3c72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4b1f552-4cc5-4707-b619-87c43bc96388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6cc615-e299-4135-a77a-ea53fbcee5b8",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cac2031-bb63-4fa2-90af-92d356cce615",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "348b1e9a-685e-4d55-baab-3ddd74b6336e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5787a3-cf50-41b8-82ef-f608e8056ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b796d9e-38b2-4dda-b9a7-8a0f0a7f5982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a1f523-3014-4609-8e0f-3ce1d5a1e059",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caff5836-1918-41ae-8660-e44c02bf3f9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2696307d-dd6e-4c72-845b-9e7d09267122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08427996-d058-4fad-86cd-b04d31d2ec61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c217666-c826-437e-834c-80d0855016dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976ee877-66a4-4920-a231-0a51e03030a2",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079fd7b8-9b76-4771-a990-12f5580c36fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16a6d5ee-53c8-4683-b0fd-f555d70ebc91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "648cc07b-7308-45c2-b8c7-a7ed550ae071",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c3a3db1-61ea-40b4-98c5-a3d4e2dee8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022e167c-1cbc-4ae5-9bfa-7ddd24d556df",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69f7182-27cf-4c86-a0a9-f4058da569e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6b13b2d-a0f1-4fea-9ac6-7762b920c31f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "771ca653-a829-4f46-8d42-d5501ef39978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c916870-aba3-466f-94fe-69ffa7a29122"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95555b0a-79dc-4b41-adfa-88aa090ff52e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04941802-25c7-4ac8-9661-791796c908aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5162b9e2-1301-4f1a-b904-17297bd5275b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6f0fb7ee-dfba-4b40-be8b-3fe1fca19331"
                    }
                  }
                ]
              },
              {
                "id": "bd29e8b5-a73d-484a-ba69-affa484f6b51",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74bc43db-6a1a-43c6-a2d5-a6859cc2d4d1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea33f3f-049d-4e0c-ae37-993708feae5c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "609fe1be-2c95-4c25-a748-78d601398690"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83975015-ac79-4c75-a419-aa89fb163759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff44f2d0-86c9-402e-b19a-e73133ce0a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f3d7d2-061b-450e-92ed-014878bb2b95",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268bb05f-36a2-40a4-b2b4-857f98b5c3db",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4ab7a2a2-1758-4106-8a16-58905ccc3e90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2b2024f-8236-431c-bf68-2c584ff29b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df68a50b-1bf8-44e4-9b82-bb389d3989cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b901edd-9a55-43f0-b493-e1b259a2d6af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "393dc2aa-d989-4fbf-bdf6-c08e08d67351"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4dc8bcc8-290a-4301-9b95-aa8fa8017755",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c47c535d-8979-4dd3-ba73-c28adb3cbe13"
                    }
                  }
                ]
              },
              {
                "id": "0325b41a-1838-4307-844a-f51d6b087a5e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "10349fe3-5221-4b80-9486-6b03b6429dd0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f145b5-d83d-4a1d-9849-58c8063927e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "40ff71f3-70f3-47e5-b69a-65b3ef1f45ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08c22db-5339-4bec-9bf2-88fbd5ff6698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693deb9a-2c1e-4022-bdb2-5c89f2cf83f1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8f236624-eb29-4add-89cd-dd20ee75ca19",
            "name": "Positive Testing",
            "item": [
              {
                "id": "03c78457-328f-4835-9b2e-0f2f422a572c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9158765-5ea7-4fc2-a239-d220c6825a92",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "235b5765-a455-4018-9776-ba4151a99455"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "db6c5ad6-89d5-464c-b59d-d09e96f61004",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e8e34f1-1e21-4266-a962-f36e1fa99c7e"
                    }
                  }
                ]
              },
              {
                "id": "9a0d5221-5da3-49a2-9197-9cdec0ce50c8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0829e36-6288-4421-bf26-f301a487e128",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "add5520d-5725-45c0-857a-8dd57e84ecd6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8883a60b-bf0e-4c39-a712-f162476fceba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64b8c612-032f-4855-96c8-06b5a0844bc0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cee290b0-4ec6-495f-bf88-412198bcd884",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d21bc822-2c3d-4359-98c1-900381a75d5e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f5a54967-bb64-461c-be78-8866760eaad7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f6558d4-a417-439c-a489-7e840ad4916d"
            }
          }
        ]
      },
      {
        "id": "152ac945-a4db-49e8-861b-6d8e4e7b1646",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "71a7958c-9722-4ed3-8505-fec8dd67acf1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5c4ecaf-5706-4adc-927c-40218f1857b8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d71bd707-5d33-4258-8e43-19e15c2eedc7",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36cddca-ee01-4e76-8be9-c70cad69c14d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3ee52378-e28d-4333-b51b-ff496773a9f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa6524e-053f-43dc-a1ca-537c1f41d1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1f5d080-725a-44b5-87dc-5cb9ad3fd978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174381d3-efbf-4fe4-aab0-92561d484c8b",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2c9d5b-3aa6-49c9-b5e1-81b41e2dad70",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0a28491b-3ac7-480d-ad33-2612757f9519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25639cf-9339-4365-951c-d7bc35c7a3fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "319320bb-95cd-4b8f-9148-24ffaf3a5e87"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d3feef3-754b-4eec-88da-2797e7c39a54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13768a5d-77ad-4f04-af40-aeff7524a4b9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34bb9787-8c7c-4992-a124-bb2d4c87ae50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "500dcbd9-e391-4a6e-bb06-c3b5077c5270"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79357a5c-542c-4951-845f-989b1ee2df45",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "beefa7ec-256b-4db5-8eb3-a70c6fe6ade1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a2fb940-7385-4911-acd2-d4b92f693c5f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fb21e8e0-f788-45a9-9087-3a3c17e85bcd"
            }
          }
        ]
      },
      {
        "id": "cea08bef-b0f5-4ab8-b4f4-a2245a31c2eb",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "35f3fded-8eed-4fdc-a9fc-545190b1155e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5e16bd4-9c73-4710-925e-96c4d9dcdd17",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf3f3736-981e-43a1-9ae2-2019df4dae8d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5581e023-31fc-4ce6-ba86-801284c28d0c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5129a00-ce04-4465-9349-e74a16c3beae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c24bf0-3f49-41da-9cd4-cff586eb300a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5b91b70-918e-47fa-a3b2-69147b10eec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141461e7-978f-4249-9e77-aa6cf528f8f1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d47c288-9cad-48d9-aa51-46fd4b1d00a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd19861-150b-49a9-8a76-a4cbf130720a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caee2b6e-da24-4fea-bd62-92e44e526750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a95917b-c84a-47ae-938a-13aa7cfc2e44"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32a1532f-30f4-496e-8b3d-862b9d8e24dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15182e24-9aea-4fde-8cca-3b325c1dc836"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1218d94d-aa53-4b4d-b3f6-2d38255347e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5231a1f3-51f3-4a78-b48e-34319085a5d4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f35746b-5e62-4c7f-aa59-ee39f115beb1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3588efda-8629-4536-b5d6-2aacfbb114e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12002048-bca0-454e-92fa-c2bafe6c7e91",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "efe12c51-730a-4da4-9025-544b5ff50c21"
            }
          }
        ]
      },
      {
        "id": "86a2ea79-aa58-44f8-82fb-8d729f09d131",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2ee24c1c-e337-4203-8061-44d3531d0729",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0c11382-c1c9-42de-a780-0882c63a7712",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9b1a5855-5dc0-473e-a875-c47034adca23",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ab97c6-f112-4dc5-a49a-c94c1f5bc58f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "25f8396e-c80a-43d7-bdfe-4ddc62051740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c2fe50-881b-4423-84e0-8c115936a4fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7093466-5edf-40a8-b4e8-fac2ae2541f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c90a68c5-30e2-4235-a4eb-9a396b36324b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81da526-8508-4bec-8294-617a45aeee2f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ea2deb92-64fc-4be5-8240-e6719ab21509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3906ede8-12ab-44cb-bbfc-4e0a73b54242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b193660c-c47a-468e-97c1-6f379a63c6c2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de8fcbb5-0369-47c4-9407-b8d54927aac4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4059cd6b-77a6-4138-8ec6-6ce4489b2f45"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "64219232-a41c-4335-8c26-8de28ea9b1ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "304c6bb9-6c2e-4b02-a6a8-5e5914a27d6f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5a75aea-e78b-49bf-a273-19a5986bad88",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6670b67e-0174-45dc-b55b-048a514e895c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77d1de6b-5033-4e71-b0bb-eb648addbb89",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e0fb17c-7157-4f00-aec9-abaa3cb3477f"
            }
          }
        ]
      },
      {
        "id": "e6ce1ca9-d721-4242-939d-32de2b014c3f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2bad187c-b5f0-4d5e-bde5-4ab3f05dc1c2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a737d58-b011-43d7-a097-86b5d594d342",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ce70f775-da6f-4842-b12d-20bb71dfae30",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "23b5d8f6-b839-47ab-8198-7eca64ac984e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57973229-4aff-4300-838b-40778e1a4b96",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 250.6038461538461,
      "responseMin": 5,
      "responseMax": 6175,
      "responseSd": 695.854124291075,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681864674117,
      "completed": 1681864750237
    },
    "executions": [
      {
        "id": "6e73fac4-4be5-4f81-9df7-011ca0a17421",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "21a85d9a-1e57-47da-8607-5fdb9e8c06eb",
          "httpRequestId": "fda0ef3d-18f6-44e2-bf60-da61283acdd1"
        },
        "item": {
          "id": "6e73fac4-4be5-4f81-9df7-011ca0a17421",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ad026787-3584-46e5-8179-9b57ef028ac8",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "672c8cfe-6ebb-417f-a5f3-48f565f515b2",
        "cursor": {
          "ref": "d922c701-75e3-4b9b-9cd7-d7c65d00fc03",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "98ee3a4b-93b3-406a-95f0-bd801f054af0"
        },
        "item": {
          "id": "672c8cfe-6ebb-417f-a5f3-48f565f515b2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "3ec6c150-a4fc-41a3-80ca-e66e26cdcfbc",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "6e599cf5-d2e4-4c85-a496-5623ecf2cf5d",
        "cursor": {
          "ref": "8a52f914-865c-4d4e-b253-c1cfa2d2ccf0",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "07a84524-cda9-4617-9c68-edd52eff2128"
        },
        "item": {
          "id": "6e599cf5-d2e4-4c85-a496-5623ecf2cf5d",
          "name": "did_json"
        },
        "response": {
          "id": "c3d518de-02e1-4370-ae7d-d48b941eab30",
          "status": "OK",
          "code": 200,
          "responseTime": 388,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3784b74-ab37-4e2c-b8c1-7038b6236dbd",
        "cursor": {
          "ref": "f034ae86-ec39-4983-a385-e52fd866b6a4",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f8b8cef5-1436-4aac-9dc6-4a999617b129"
        },
        "item": {
          "id": "a3784b74-ab37-4e2c-b8c1-7038b6236dbd",
          "name": "did:invalid"
        },
        "response": {
          "id": "af906ec9-6e1a-4879-b6a0-3a5b09fabfb8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1124,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a3784b74-ab37-4e2c-b8c1-7038b6236dbd",
        "cursor": {
          "ref": "f034ae86-ec39-4983-a385-e52fd866b6a4",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f8b8cef5-1436-4aac-9dc6-4a999617b129"
        },
        "item": {
          "id": "a3784b74-ab37-4e2c-b8c1-7038b6236dbd",
          "name": "did:invalid"
        },
        "response": {
          "id": "af906ec9-6e1a-4879-b6a0-3a5b09fabfb8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1124,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "62fd07ac-bcfa-4dee-9de3-7e52ee8c485b",
        "cursor": {
          "ref": "e15d2c0f-93ad-4c8b-afd5-50aa7f69d068",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a8f4c706-66d0-4866-bb0c-a4897be52865"
        },
        "item": {
          "id": "62fd07ac-bcfa-4dee-9de3-7e52ee8c485b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "6642ee24-029c-4524-8c8a-a9a2cd49b3b9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415b09cd-e119-4f0f-80d5-effd7d5df7cc",
        "cursor": {
          "ref": "972be750-2c4d-43ee-a770-0f985e423943",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9b9765b9-abd3-4b97-bb57-ad725a1b3c61"
        },
        "item": {
          "id": "415b09cd-e119-4f0f-80d5-effd7d5df7cc",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "89e7273b-afc6-4577-b9aa-227ba6c89aae",
          "status": "Not Found",
          "code": 404,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290fb6f4-232b-48b9-b9e2-ba82f176be05",
        "cursor": {
          "ref": "1dcfe952-2709-4e71-96e1-01f360cd7854",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3a555799-e3e0-4820-9978-eabeaf4133b3"
        },
        "item": {
          "id": "290fb6f4-232b-48b9-b9e2-ba82f176be05",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "90e04520-3a6f-4b2a-91f8-cf08967eec1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "dff60c77-2b72-4047-ae74-4dff1ccb2263",
        "cursor": {
          "ref": "a02d5f39-b7e4-498c-9b78-09ee1a1b6193",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "80507362-b650-44f5-9900-ac4bfdb27db9"
        },
        "item": {
          "id": "dff60c77-2b72-4047-ae74-4dff1ccb2263",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "057c40ee-f484-4541-951a-e4d29f567687",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "dff60c77-2b72-4047-ae74-4dff1ccb2263",
        "cursor": {
          "ref": "a02d5f39-b7e4-498c-9b78-09ee1a1b6193",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "80507362-b650-44f5-9900-ac4bfdb27db9"
        },
        "item": {
          "id": "dff60c77-2b72-4047-ae74-4dff1ccb2263",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "057c40ee-f484-4541-951a-e4d29f567687",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ebf709da-a7f0-4849-8782-db4b5df3d4a9",
        "cursor": {
          "ref": "fcf0a8ff-73f2-4315-bb9d-420513d5d881",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "04ca7c24-8647-479f-ab29-0bd32896784b"
        },
        "item": {
          "id": "ebf709da-a7f0-4849-8782-db4b5df3d4a9",
          "name": "identifiers"
        },
        "response": {
          "id": "50b4df38-14ed-4efe-9721-6490aa5f22d4",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d00860-5542-4f13-8daa-b3b004c6f74c",
        "cursor": {
          "ref": "42a3daba-8d1b-40db-a45a-46927d7b2f2e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "325fb08f-061d-4dfc-9d77-ac277410ef74"
        },
        "item": {
          "id": "59d00860-5542-4f13-8daa-b3b004c6f74c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "04cb38aa-e91c-474c-adc4-3184e342db7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d00860-5542-4f13-8daa-b3b004c6f74c",
        "cursor": {
          "ref": "42a3daba-8d1b-40db-a45a-46927d7b2f2e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "325fb08f-061d-4dfc-9d77-ac277410ef74"
        },
        "item": {
          "id": "59d00860-5542-4f13-8daa-b3b004c6f74c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "04cb38aa-e91c-474c-adc4-3184e342db7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b63f436-0faf-4c84-9dfc-f942736493bf",
        "cursor": {
          "ref": "ca78c689-4011-4a59-991d-ffe0d031620f",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0a4b82bd-9462-432e-8bf6-5090673e0924"
        },
        "item": {
          "id": "1b63f436-0faf-4c84-9dfc-f942736493bf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "f399b704-a8b7-40bd-b736-d35d2973af49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5dba7b-0140-4b72-9238-617d462d31e8",
        "cursor": {
          "ref": "4d65878d-60f3-432d-813c-20641957adc1",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "d57ca357-1eb3-476f-9fff-62fb9b05fd00"
        },
        "item": {
          "id": "5d5dba7b-0140-4b72-9238-617d462d31e8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7b2c903d-9fe0-459c-8dc6-f0fa59c11d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bce01fd-95fb-4001-b1bb-b01695253500",
        "cursor": {
          "ref": "20ef33bd-cece-49e5-813a-e78ef57c8e40",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4348adfc-2e53-490a-8012-1ebc89b8efed"
        },
        "item": {
          "id": "5bce01fd-95fb-4001-b1bb-b01695253500",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ce16f185-8c5a-449a-8911-ea8e947b382e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f43d27-abbf-4a10-8cb2-4ccc7bcfb6e1",
        "cursor": {
          "ref": "97226fdf-a0e3-41f9-ba34-1eb876818f28",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "afb83f62-7269-4ce1-b0b0-34b1e8f9ea93"
        },
        "item": {
          "id": "c1f43d27-abbf-4a10-8cb2-4ccc7bcfb6e1",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6901508a-b0fa-4385-8b00-4115e87a8217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1809ac95-d378-49a1-bb88-260c7409d2b7",
        "cursor": {
          "ref": "20315c2d-2478-497f-8d5f-26c705378184",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "89a5b75f-7dbe-45cf-9371-bc5e75bdbf37"
        },
        "item": {
          "id": "1809ac95-d378-49a1-bb88-260c7409d2b7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "fe3d0349-c091-4b14-8e7f-8cec65acc26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186786a2-db9d-44a1-9965-4d57b7b48453",
        "cursor": {
          "ref": "14031cd3-8f51-4255-bd30-f2aa6be9226f",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "83f5478d-99a7-4136-893e-000a0c458632"
        },
        "item": {
          "id": "186786a2-db9d-44a1-9965-4d57b7b48453",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "99d8daf1-2aaa-474e-b750-811ae0b4e7bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbe73be-066f-4ac4-957d-24254ea04d65",
        "cursor": {
          "ref": "542a0fa4-811a-4747-a254-0a24174299d5",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cc7e7277-c501-4215-bea7-4316d86d78d5"
        },
        "item": {
          "id": "6cbe73be-066f-4ac4-957d-24254ea04d65",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "99696a1f-ac14-448d-acb5-235da7431d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ce6194-b1dc-467d-9bca-3577fb12874e",
        "cursor": {
          "ref": "b4861f61-5684-48f1-bebc-155d85eafb59",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "be0de06c-e5d0-4e42-9f69-62efa109013a"
        },
        "item": {
          "id": "42ce6194-b1dc-467d-9bca-3577fb12874e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "de962975-ca13-4d1c-87c9-99fee363d4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7807e50d-a147-4c70-9208-ff22d97e4600",
        "cursor": {
          "ref": "6c75f767-709c-41ab-a8e6-cbca0208bbc3",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6f942f95-dfee-406d-b526-7bf8664b76f8"
        },
        "item": {
          "id": "7807e50d-a147-4c70-9208-ff22d97e4600",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d8016108-cfd4-4c97-b93f-11faf413ed26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b7730a-b922-4155-ad72-43b1166e5886",
        "cursor": {
          "ref": "310fd256-e347-4a9a-b89c-f9e6189c1b5c",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "ca815df1-8fa8-4079-8b52-1b72282d36e6"
        },
        "item": {
          "id": "d4b7730a-b922-4155-ad72-43b1166e5886",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ae770358-c171-4839-ba8e-59a0d506217e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 394,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306bed0c-9377-438c-be24-936522397ab3",
        "cursor": {
          "ref": "299fe471-99cc-4354-8121-f82298881fbe",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "89287495-cca7-4952-803d-e8e4df1c1939"
        },
        "item": {
          "id": "306bed0c-9377-438c-be24-936522397ab3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2e3a6fe1-6c22-4914-9732-fca5d203f30a",
          "status": "Created",
          "code": 201,
          "responseTime": 1168,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "2b5f0334-707a-46d5-a45a-e651727d0554",
        "cursor": {
          "ref": "a8a9507b-5859-4531-aadf-d6be29f649ba",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8b063a2f-bb5d-40d4-a8bb-93c7584c2815"
        },
        "item": {
          "id": "2b5f0334-707a-46d5-a45a-e651727d0554",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3e38153c-5ffa-43ab-998c-8a5457e216cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "463490aa-9156-4aba-8021-f99777e99455",
        "cursor": {
          "ref": "7b03a617-5698-4ad4-9cad-f6fcc8b68da9",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ea8c0ffc-7de3-45b7-804c-25160872d6d0"
        },
        "item": {
          "id": "463490aa-9156-4aba-8021-f99777e99455",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2937c198-c334-49f6-b995-8b71e4743532",
          "status": "Created",
          "code": 201,
          "responseTime": 6175,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "f19b01a8-9611-4abe-92b1-8db9a7512e03",
        "cursor": {
          "ref": "71892593-2085-4bff-926d-b1d54ea6f216",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f6e8301f-4ba5-4296-b6d0-7b7790d8ef03"
        },
        "item": {
          "id": "f19b01a8-9611-4abe-92b1-8db9a7512e03",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "930c0357-0d4b-4601-bbd7-32f5d30084c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a317b3-7d1d-486f-aa82-a1e3e73fd99b",
        "cursor": {
          "ref": "9f35279e-7e22-4a4c-873b-055733a5478f",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "30ac86eb-42f4-4986-ab99-b701f8db5eb7"
        },
        "item": {
          "id": "d9a317b3-7d1d-486f-aa82-a1e3e73fd99b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2eabd52a-bea0-4928-82a0-ac549ce82093",
          "status": "Created",
          "code": 201,
          "responseTime": 3206,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "f5dab14f-242f-45ce-aa0d-58053cac6a34",
        "cursor": {
          "ref": "9788fcb3-28a6-4df3-be52-115f3391f62c",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "86e61cb4-0b07-43b0-bf66-9aefcf1ed419"
        },
        "item": {
          "id": "f5dab14f-242f-45ce-aa0d-58053cac6a34",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f2e58b47-e7c9-411d-8cf0-a237a952ba81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63189bb8-8081-4a5d-befd-6b2ef741d096",
        "cursor": {
          "ref": "bf25568a-983c-4aae-a037-eb08b122e8ba",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "63c4a48a-fea1-4364-90e4-b3d76c472ecf"
        },
        "item": {
          "id": "63189bb8-8081-4a5d-befd-6b2ef741d096",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6cfb6dc2-e1a7-4c45-93bf-b3880e0b3e5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38512a3-719a-4001-888a-9f169109e15d",
        "cursor": {
          "ref": "d2330457-4fa5-48dc-8968-b0c2794fe555",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "06124a62-5839-41bc-b862-aea57932940b"
        },
        "item": {
          "id": "b38512a3-719a-4001-888a-9f169109e15d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "053d837d-f2fa-4786-b305-6875a743c3f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8dc16f5-f817-49e6-b43e-1d65b04fe91e",
        "cursor": {
          "ref": "84606094-f95c-4b75-ad57-463628be6799",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f8d1a382-d3f5-4772-9f55-67cc7fa718e4"
        },
        "item": {
          "id": "d8dc16f5-f817-49e6-b43e-1d65b04fe91e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "afb0e01d-4e31-43f3-9a21-beace0c42daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a7554d-c995-453a-bec6-8a99f3b4d151",
        "cursor": {
          "ref": "af6ef6a1-0012-417a-a972-232db5a29a8b",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5ee61471-892e-4360-a734-ffe66aee6403"
        },
        "item": {
          "id": "55a7554d-c995-453a-bec6-8a99f3b4d151",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9073c316-6859-46ff-b59b-20698e50eb8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639f295b-00bb-4ce7-b706-f4f587e7e211",
        "cursor": {
          "ref": "78beb9f0-1c68-40ab-8f01-481a32dc90d8",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6f79f1c7-eac9-4163-9a04-71a974697028"
        },
        "item": {
          "id": "639f295b-00bb-4ce7-b706-f4f587e7e211",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ba81cf1b-b825-4ea7-8ded-254be5d9bf28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 140,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7793cc-d271-4f61-8dfe-04ddec5d90d9",
        "cursor": {
          "ref": "53907000-2c9a-4172-9a99-14ad7625864c",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fc114718-e54c-47a6-828d-ae162429aacf"
        },
        "item": {
          "id": "fd7793cc-d271-4f61-8dfe-04ddec5d90d9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "90d71606-82e9-4aae-99ee-caafc2dc9379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4332268-06f9-4ebc-a959-39b3226f5009",
        "cursor": {
          "ref": "2cd94224-e37b-43a4-b6ae-b63b997223cd",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0f4fcda5-fe43-4968-ad5b-28dc975f4c48"
        },
        "item": {
          "id": "c4332268-06f9-4ebc-a959-39b3226f5009",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "83fb894e-00ee-4490-8545-81547c22a3e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cd2543-4dd6-4d37-a12e-60e3347fd838",
        "cursor": {
          "ref": "39c14303-edc6-40c5-942f-395cc1154284",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "473f2bdb-3cad-43a4-be49-4d2b5dc767ed"
        },
        "item": {
          "id": "38cd2543-4dd6-4d37-a12e-60e3347fd838",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ca59816c-d747-4ac2-af7b-f2333adc0e5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a9bbf5-40ab-44e0-a57c-5d35bd5d0069",
        "cursor": {
          "ref": "7c482b41-f4ce-41d6-8715-b1b6a1c324cd",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "99bc4f32-d049-41df-9a70-1f770592923a"
        },
        "item": {
          "id": "40a9bbf5-40ab-44e0-a57c-5d35bd5d0069",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3db0f275-95d5-4e8e-95f5-ccb30ed6e3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2612e1cc-4882-4f80-a16c-3285d72c75c3",
        "cursor": {
          "ref": "9c97713c-b185-496f-9c31-2f3d72932bbf",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "6ef84961-bac4-4eaa-be6e-77cf4eb22f31"
        },
        "item": {
          "id": "2612e1cc-4882-4f80-a16c-3285d72c75c3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3fd2f80e-5ec1-4fcb-a519-2070bcf1e954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b989d4-4403-4d89-ac0e-6867f5a48a5f",
        "cursor": {
          "ref": "6baf4b84-d2e2-41ed-81ab-b5caabcfb183",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a8d5a18f-137b-4d84-9b4d-bbe64cd73c6c"
        },
        "item": {
          "id": "c7b989d4-4403-4d89-ac0e-6867f5a48a5f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ce9d5f3e-b7bb-4195-84f0-f9856744413d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789f69a7-d78f-421d-9611-71cbf5242232",
        "cursor": {
          "ref": "fa406015-f2f9-4009-851e-a9f482f63876",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "dcf82acf-d3d6-4ea6-b650-05f36ebbf7e2"
        },
        "item": {
          "id": "789f69a7-d78f-421d-9611-71cbf5242232",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "5c23b247-6818-47bd-a89a-ef3f648658d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fa4163-83d2-4aa1-801f-d213e97d59d6",
        "cursor": {
          "ref": "88fc0f01-f125-49fd-b697-16b84e25fa1f",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1a5f6a73-c2a2-4dda-bf80-d54699496736"
        },
        "item": {
          "id": "b0fa4163-83d2-4aa1-801f-d213e97d59d6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "29b310b8-cb31-4e00-8fce-caf8d5b381b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44736e4-938d-46ca-8b33-d9e6b6988bbf",
        "cursor": {
          "ref": "a7d27347-fe35-4630-9bdd-6c06581622b5",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5653bd62-45b4-40bf-9356-fe29ee9493cb"
        },
        "item": {
          "id": "f44736e4-938d-46ca-8b33-d9e6b6988bbf",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c85d0b99-f8f5-49a7-922d-5c8db1036bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04e3893-80c8-4ecb-8450-3bd794d4cfe1",
        "cursor": {
          "ref": "0f6b6739-f9e0-4649-a18f-c88dfe774e5d",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d8f990b4-a1e9-4e02-9940-7890712a0af8"
        },
        "item": {
          "id": "a04e3893-80c8-4ecb-8450-3bd794d4cfe1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "d70b95e8-73ea-481b-9dc0-b69257508186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31656f68-6dfa-4e79-bf90-086a4396dbd4",
        "cursor": {
          "ref": "71bb37d2-8680-4f51-8075-202f542f4798",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "943c8a5b-0a10-44ba-8ef2-e682c862c1b3"
        },
        "item": {
          "id": "31656f68-6dfa-4e79-bf90-086a4396dbd4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "64765994-8a21-41ef-8f9c-4bd2334ac69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e924721-7936-41fb-9d2e-4d92ad1b81c2",
        "cursor": {
          "ref": "487026d1-200c-499a-bdcd-1530105f5feb",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "4fc1e2c5-50c8-4a3d-8e6e-c6435e8f01c9"
        },
        "item": {
          "id": "3e924721-7936-41fb-9d2e-4d92ad1b81c2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6b6710d7-e604-4dec-b7e9-ca23d0339ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e186dace-bc4e-483f-b92c-b88bdac122ba",
        "cursor": {
          "ref": "895d9748-c311-4b93-acea-be776920b1c6",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5c46c51f-e150-48b1-ab56-f1b25d62bbd2"
        },
        "item": {
          "id": "e186dace-bc4e-483f-b92c-b88bdac122ba",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "63b51e8e-303d-47d4-a048-7af0f40a2b7e",
          "status": "Created",
          "code": 201,
          "responseTime": 2494,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ad8ea63b-9b3e-4c7a-af3c-2db27443ff98",
        "cursor": {
          "ref": "48810231-57e8-49f6-94e3-9f0f83ea4f83",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "08406596-39b9-4a06-8c17-fa80f714a60f"
        },
        "item": {
          "id": "ad8ea63b-9b3e-4c7a-af3c-2db27443ff98",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "04b519b5-3855-4cb8-9921-00052b47db10",
          "status": "Created",
          "code": 201,
          "responseTime": 2923,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d62f98cb-e6b5-4b51-8b21-e26de766ffe4",
        "cursor": {
          "ref": "af0d8c60-fc9a-4fae-95b0-89b7345d8834",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "596218a7-00e7-480b-8d74-99944b51fd95"
        },
        "item": {
          "id": "d62f98cb-e6b5-4b51-8b21-e26de766ffe4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "74b7e031-ef29-4cf8-9c61-69dca22d0488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e886dfea-bfe0-4ece-8a24-6f673b5eca61",
        "cursor": {
          "ref": "28c1ca0d-25e5-4774-b017-7de41b6a1b51",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f9088105-05d0-4e28-bafe-e7cd339ce6ff"
        },
        "item": {
          "id": "e886dfea-bfe0-4ece-8a24-6f673b5eca61",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f45f45cc-5565-416b-8958-cbf1923bb793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc8f08d-f218-4c59-830a-586346edd520",
        "cursor": {
          "ref": "c35cc498-3fcf-415f-9b6c-5164675a1ab0",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "5bcb193f-7e0e-4bce-94f2-d13fa110cd66"
        },
        "item": {
          "id": "bcc8f08d-f218-4c59-830a-586346edd520",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "63dc04b3-04c7-4437-9580-fcb5d17b739e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d295abc8-6ec2-4983-97e5-64f7161031ec",
        "cursor": {
          "ref": "b1da9a7d-c26f-4afe-8aa7-d55494fb81f5",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "18970229-06c8-4574-a427-5840fd61c4ce"
        },
        "item": {
          "id": "d295abc8-6ec2-4983-97e5-64f7161031ec",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8f4f8ed2-aff1-4527-9d6a-10885e196e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86378d84-7e8c-4627-a41c-5e034c83b3cd",
        "cursor": {
          "ref": "d5b7ac42-a0ed-40ab-a036-1a4eae6add63",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "593de09b-9f7e-4120-979c-d6d5b4c9111e"
        },
        "item": {
          "id": "86378d84-7e8c-4627-a41c-5e034c83b3cd",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e0ab5fe6-cc0e-441b-bd15-2a3d5c2c75e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04fc5c35-2bbd-4232-b1c8-edb3f0f79d86",
        "cursor": {
          "ref": "4bcfcc29-e314-4fa4-872d-4a4169b9cf1b",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d5622bab-e13a-4070-b35d-77de93f8da01"
        },
        "item": {
          "id": "04fc5c35-2bbd-4232-b1c8-edb3f0f79d86",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "698cadfb-16bf-41ac-8484-5b21c2e8601c",
          "status": "Created",
          "code": 201,
          "responseTime": 2471,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "36255745-b7bc-4360-8c31-7df9c3ccad0f",
        "cursor": {
          "ref": "e4a6ca7e-e044-4faf-8d6b-b808e21e2ba8",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "dde084c6-2de6-40ff-910d-c80083b9bbbe"
        },
        "item": {
          "id": "36255745-b7bc-4360-8c31-7df9c3ccad0f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b342af99-ab46-4d88-99bb-2e8260456a95",
          "status": "Created",
          "code": 201,
          "responseTime": 2312,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "f0d529b8-0be2-4f82-b18c-e6a113a2e34e",
        "cursor": {
          "ref": "62871a01-6bd8-4562-866c-72deda1ec951",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "258f5b60-09de-4c95-96e9-e519473d7501"
        },
        "item": {
          "id": "f0d529b8-0be2-4f82-b18c-e6a113a2e34e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "aa2835a9-cd69-4a35-8eec-98cdaf63a51b",
          "status": "Created",
          "code": 201,
          "responseTime": 2259,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "cdb18363-e48f-455e-b26f-51ceb66e2394",
        "cursor": {
          "ref": "fea7ebb4-da8c-4a61-9d20-453a205ed635",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b86f04ce-d077-487d-bf36-ee5a44d55dea"
        },
        "item": {
          "id": "cdb18363-e48f-455e-b26f-51ceb66e2394",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b426d502-fda0-4e46-b9c1-03d21d0db1f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62387724-0b35-421f-ae5c-dcd951e36388",
        "cursor": {
          "ref": "a8c0cbac-99b6-4ec0-ac9c-dc94402e9351",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1c453523-9766-470f-91e8-c1af8166597c"
        },
        "item": {
          "id": "62387724-0b35-421f-ae5c-dcd951e36388",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "5e103d93-2ab6-4e9e-8985-a439ed4c94ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2939ad-ff1d-4040-9ec4-77ef356cd18f",
        "cursor": {
          "ref": "033cd855-4251-44f9-a70e-031c4a416476",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f610fde5-22f1-4f88-b671-0c96c95347b6"
        },
        "item": {
          "id": "ec2939ad-ff1d-4040-9ec4-77ef356cd18f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b43c865f-d996-4b18-a62f-82d55ee5fe04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5ebcc2-6442-4a0e-b0b2-f7fa87e015af",
        "cursor": {
          "ref": "4ad3a5dc-ddec-40d5-bf1f-3aabaa0f2f69",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2b687aed-5816-4b6e-9871-25b809555a67"
        },
        "item": {
          "id": "5a5ebcc2-6442-4a0e-b0b2-f7fa87e015af",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "21a54c30-9861-44a0-bbae-2190a12c8e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879be15d-8589-4035-9106-12c2a32629e4",
        "cursor": {
          "ref": "b7e95e26-3166-4f46-bb31-427511d3de10",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b8d8c72c-4660-4e1d-ac04-d5ed5f5fd2a0"
        },
        "item": {
          "id": "879be15d-8589-4035-9106-12c2a32629e4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2bf2c312-ed5d-432e-b0b4-6481dfcc0943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae9b21a-4a5f-4831-8257-d774ae2d18db",
        "cursor": {
          "ref": "b2c65e67-1745-44b5-ac5e-5b65676af167",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4d59361a-a318-49bc-b3a9-b576ba24d9ab"
        },
        "item": {
          "id": "dae9b21a-4a5f-4831-8257-d774ae2d18db",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "ef7254c6-a6ff-4678-b919-5af2336553bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bc96e4a-0e21-48b4-a138-2171d2d50d76",
        "cursor": {
          "ref": "14fcbd09-a746-45df-b996-244f03e7986a",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "da8f714e-df37-48d7-87a1-145c34fac27b"
        },
        "item": {
          "id": "7bc96e4a-0e21-48b4-a138-2171d2d50d76",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1e9c1151-cd4d-4411-af80-04218390a94d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22fc9682-3b28-4ac0-a8f5-7b90a74a8f43",
        "cursor": {
          "ref": "bc6e5f39-aefa-4bc5-86f3-4280caf758b0",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3d2af9ce-f72e-4d8b-bffd-214b09e226cf"
        },
        "item": {
          "id": "22fc9682-3b28-4ac0-a8f5-7b90a74a8f43",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "18e26e1d-8fc6-47f1-aa01-4fe3da2f0717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2777951-c9c0-45ef-bab8-6b390c632738",
        "cursor": {
          "ref": "b284c9c7-45f2-4dcd-b564-1552b1633f8e",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1e6fcbaa-c963-4162-8d14-56faa318459b"
        },
        "item": {
          "id": "a2777951-c9c0-45ef-bab8-6b390c632738",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "923a02c5-afca-4de5-b683-7941043894c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f59e6f-edff-4ba3-8266-75fd51ee728a",
        "cursor": {
          "ref": "fd722098-88c6-4ef3-81bf-7e592d3a2fd6",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "be8ebb3b-d8c8-48fc-9648-9238e9e0947f"
        },
        "item": {
          "id": "91f59e6f-edff-4ba3-8266-75fd51ee728a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bdb3972f-34bc-4d4c-86e6-d4cd1e3c83d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f553e0f-ecea-45e9-999a-d58a44f0b5d3",
        "cursor": {
          "ref": "40c37df7-2734-433b-9e04-d8903907b05b",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "620cf698-3002-424b-a9ea-e4a4e9fd29bd"
        },
        "item": {
          "id": "1f553e0f-ecea-45e9-999a-d58a44f0b5d3",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "771c0519-b26b-40db-adaf-81fcab522339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56689ae1-4dae-4de5-835e-ac727727d6a0",
        "cursor": {
          "ref": "596d43de-7fed-4d83-9156-a30234284590",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f61f5ffe-b2e2-4a8d-b6df-e061a8af4d17"
        },
        "item": {
          "id": "56689ae1-4dae-4de5-835e-ac727727d6a0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c99d6f09-225f-4ad9-a635-97c4fcce9e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0970b385-bbc3-4d4f-a3c8-53a0bcd9cd6b",
        "cursor": {
          "ref": "2f1c6387-cf83-4d9d-a246-c8be5cb7330f",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b4499f7a-60c5-4f75-9b16-33abafe7136e"
        },
        "item": {
          "id": "0970b385-bbc3-4d4f-a3c8-53a0bcd9cd6b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "43096f03-bb97-4c58-a351-34cfad494009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 810,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36be5576-3196-45ab-a006-d1088c130372",
        "cursor": {
          "ref": "5d6345b1-4803-4e39-acce-3abd9dc83319",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9f4fb2f4-2fbe-4d48-81e3-eedd3fd155b6"
        },
        "item": {
          "id": "36be5576-3196-45ab-a006-d1088c130372",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d6cdb043-2d86-437f-a6d8-1323e20881d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998e3808-9f9d-4964-bf58-15d1aaddb455",
        "cursor": {
          "ref": "06ccbddb-ca4e-415c-b5c6-6b79cdf95a90",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "99730faa-6c48-469f-90d9-59bd23a71692"
        },
        "item": {
          "id": "998e3808-9f9d-4964-bf58-15d1aaddb455",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "215f99e0-13bb-4d43-a009-8b93920d7f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a74bda-d5c7-41e8-accc-95f2632056d9",
        "cursor": {
          "ref": "6640f878-cbda-4274-9024-4f5541bfdc5e",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f002f3a9-3506-494c-8594-27b3792b76f4"
        },
        "item": {
          "id": "26a74bda-d5c7-41e8-accc-95f2632056d9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "bbecb23f-78fc-4b30-8555-9122905c5063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5992628-9409-4694-8a94-d5fff0224472",
        "cursor": {
          "ref": "a1eb4b91-52ee-451e-b633-cfd2e90b5826",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c71c3140-653f-4a09-832f-cbd381b93b4f"
        },
        "item": {
          "id": "e5992628-9409-4694-8a94-d5fff0224472",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "82025b01-3829-40bf-a1db-908baed6e00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e8508f-40f8-4d4d-a243-21e32080f948",
        "cursor": {
          "ref": "29cef4b7-e43f-4932-941a-ef64f8ddcc19",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e03201bb-eea0-4906-bbfe-a40804b0ecea"
        },
        "item": {
          "id": "13e8508f-40f8-4d4d-a243-21e32080f948",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5c3e7af1-6211-4164-904e-1c00c9db4ac8",
          "status": "Created",
          "code": 201,
          "responseTime": 2821,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "41aa6fc9-b8f2-4730-a70d-58e541b1e5a1",
        "cursor": {
          "ref": "40ee9c77-500a-4a37-b302-6384224fd170",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3a050cd3-816a-406d-9d8c-3a102fa59afa"
        },
        "item": {
          "id": "41aa6fc9-b8f2-4730-a70d-58e541b1e5a1",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e34e4b63-e172-4dd3-966a-05c3faa0bb58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe4cddd8-7199-41cb-a282-d9f50fc295a9",
        "cursor": {
          "ref": "456e0468-dc59-4f6f-b410-f5155c09666a",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "dea30370-6b62-4962-bdc5-252d05d7e497"
        },
        "item": {
          "id": "fe4cddd8-7199-41cb-a282-d9f50fc295a9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "06ea8873-9f37-4271-9c51-caae5b3b2794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5324adac-bfb8-4a1a-92bd-5e2a6eec678c",
        "cursor": {
          "ref": "5836dee2-d51b-4c81-87e6-34a829f69cf4",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "497c3898-7d5d-438d-a99e-b2ef7dd8fbb5"
        },
        "item": {
          "id": "5324adac-bfb8-4a1a-92bd-5e2a6eec678c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "94c69ea7-7cfb-4cf3-a3c5-76b8459388e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe21c869-a473-4304-ac1e-8647301d5ee8",
        "cursor": {
          "ref": "e3fc45d4-411f-4bb1-b942-dd93bdc2ec94",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e5d9c415-ed33-4ef3-a062-211d00cb5d2d"
        },
        "item": {
          "id": "fe21c869-a473-4304-ac1e-8647301d5ee8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cc51f67f-4760-441c-962e-5c1a238881a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d534630a-0993-4325-a58c-923a946995fb",
        "cursor": {
          "ref": "abebc200-e9df-424a-b430-694d558ee85a",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ceb661ef-ba5b-49eb-8ad6-8109a0cdc8f5"
        },
        "item": {
          "id": "d534630a-0993-4325-a58c-923a946995fb",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "96f7bab2-f096-4cfd-aebf-81a4acf4e3f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6933101-348d-464c-b23b-994811cf9e25",
        "cursor": {
          "ref": "ec25165c-cbb5-40cd-bf94-6e3a57913820",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f93dc47f-62b9-4dbc-a323-2088475b2b77"
        },
        "item": {
          "id": "f6933101-348d-464c-b23b-994811cf9e25",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0331d58a-17a7-4024-94d1-9e6315882cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53b157b-6e7c-439c-8faa-83458bfc6a42",
        "cursor": {
          "ref": "0fb398c7-a9bf-4200-8889-54875199dc89",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "66092a05-8d3c-4167-a2d9-1bb74c4a0ca8"
        },
        "item": {
          "id": "d53b157b-6e7c-439c-8faa-83458bfc6a42",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a164283f-ff1a-4ed5-8f23-fc784381721a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7240d7-d7af-4046-b510-bc9dd76b62fa",
        "cursor": {
          "ref": "1d7635e3-a925-4ba3-9110-9d447b57e3a7",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "f9125b4c-b0b8-49d5-90c7-bf0973b11766"
        },
        "item": {
          "id": "0c7240d7-d7af-4046-b510-bc9dd76b62fa",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "70d0cdcd-5427-4580-b5ac-ebf348c449c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0cbb5bd-ad50-4e40-843a-610b8aff5e6f",
        "cursor": {
          "ref": "838344fb-fe91-40b5-bc13-a8392aec3a39",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e92d0900-09b1-4eb5-b8cd-5295999aee57"
        },
        "item": {
          "id": "e0cbb5bd-ad50-4e40-843a-610b8aff5e6f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7dad1390-7fd5-483e-8f7d-fac9c6148d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b135f727-5a57-4d8c-b257-8a3fa5854df2",
        "cursor": {
          "ref": "7b3d496c-e7f8-45c2-8862-5c8d47df6ed8",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "83e7f3ad-d3bb-4649-88d6-2296d76fcbd1"
        },
        "item": {
          "id": "b135f727-5a57-4d8c-b257-8a3fa5854df2",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "945d7418-9eac-4835-8569-675a25ef5f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2037ab5d-f8a2-4516-85c5-23ac1bd48512",
        "cursor": {
          "ref": "96b67fb2-9304-495c-b723-e6a1b85fd32f",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6b0f9ca9-2bc9-44b7-8a0e-f54c159e682c"
        },
        "item": {
          "id": "2037ab5d-f8a2-4516-85c5-23ac1bd48512",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3c592510-df33-49ab-8c15-7874fc477956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 654,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eed98fc-3ad8-40a0-bb20-c4149ef86133",
        "cursor": {
          "ref": "0df4441c-c404-4aa4-ad2f-556260bc64dc",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cbb094d0-f2c7-4b1a-b45e-f0f626cba3e8"
        },
        "item": {
          "id": "6eed98fc-3ad8-40a0-bb20-c4149ef86133",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2ba718c6-7da2-475c-9d65-8d915651c742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4b813da-098d-486f-9c64-3fa10f54dde4",
        "cursor": {
          "ref": "93101c07-9482-425e-87e1-9392e3441678",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "47f0af93-22d9-4354-b1d3-9c84ff47cc61"
        },
        "item": {
          "id": "f4b813da-098d-486f-9c64-3fa10f54dde4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "fda0e9b0-346d-47df-a55a-fa49dd0bfc16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56b900f-d3fe-4608-8b9d-7b9457b76643",
        "cursor": {
          "ref": "449969a8-07c6-4d18-901a-80b427092349",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c4b04ca2-5156-4d02-9ee5-622ebd61014d"
        },
        "item": {
          "id": "b56b900f-d3fe-4608-8b9d-7b9457b76643",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "16ed9033-fed5-4aae-85c0-efe9dc03967f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802cf573-f111-4b90-9133-56245bd78b66",
        "cursor": {
          "ref": "4184727f-eeb1-40a4-8dba-39289aee1e08",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "bbc9fc09-9d77-45c4-a6a3-4e93d38a2375"
        },
        "item": {
          "id": "802cf573-f111-4b90-9133-56245bd78b66",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "33c9255a-6938-4233-a836-653ceabb515a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a93dbd-918b-46ef-b838-8147ffe760a8",
        "cursor": {
          "ref": "80f8fc3f-b184-48d6-9626-902b3aa3faad",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "48ab782e-f863-499f-9bfb-29749eac9ba3"
        },
        "item": {
          "id": "f9a93dbd-918b-46ef-b838-8147ffe760a8",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "617cd2da-1c0a-4c66-8baa-7258b673e213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee15764-7688-4a38-a9e2-52332ae594ae",
        "cursor": {
          "ref": "f6e7f985-b90a-4eae-acf8-0c7faf480a1d",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ad6981e2-7639-4037-b5de-dba09d3b17d3"
        },
        "item": {
          "id": "5ee15764-7688-4a38-a9e2-52332ae594ae",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7776dcf1-3be8-4f91-a7e0-6e2af428a77c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289f1dcc-dc9d-410b-9d0c-b3cb38b33ae4",
        "cursor": {
          "ref": "b0b4ed99-8d0b-4b38-99a8-84f23e5e8abb",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ab7daa3b-0629-4f80-ae01-83d7a58ac8ca"
        },
        "item": {
          "id": "289f1dcc-dc9d-410b-9d0c-b3cb38b33ae4",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7540cb94-065d-4f2c-90f7-e8de119c9920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69dc3bb-9244-4c83-95e0-84fb7923a66b",
        "cursor": {
          "ref": "f0feedaa-3425-45b9-97cc-7896038786e6",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4ec9e58f-0075-4648-a6de-da93dc87ad05"
        },
        "item": {
          "id": "e69dc3bb-9244-4c83-95e0-84fb7923a66b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "3bfa48d8-d58d-4957-b60c-00d9db299bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "585790fe-2b83-47ba-a8ae-9a46b9a5441a",
        "cursor": {
          "ref": "fed185e5-6d36-4677-a50f-a3b43f990c20",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "1b5744b5-d961-4cc6-86f7-817fcda97456"
        },
        "item": {
          "id": "585790fe-2b83-47ba-a8ae-9a46b9a5441a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c95e0dd2-24f2-4326-86ed-86b89403736f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580d9262-b637-4489-b59b-2c2a65d61bf1",
        "cursor": {
          "ref": "7a58ebc0-c82a-4c25-9a58-75d77b5ec9ff",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "851b5041-ae7c-4135-87e3-3fd269b442b7"
        },
        "item": {
          "id": "580d9262-b637-4489-b59b-2c2a65d61bf1",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a190ddc0-7cf3-4ef7-99c6-5d66f1e2e235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6ca15c-6b0c-4846-b65a-0f645e97655e",
        "cursor": {
          "ref": "1699f6bc-3f53-4932-b89b-22e6d89e3696",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b78fab90-71a1-4896-a620-6bac212738e3"
        },
        "item": {
          "id": "0d6ca15c-6b0c-4846-b65a-0f645e97655e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "05bc07bf-8479-4bf8-af4a-d45353980382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468d4a77-045e-4a68-bfdc-66115d0487c5",
        "cursor": {
          "ref": "b85d5f46-642b-46df-b5c0-abf219c9106e",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3715f105-6e66-4097-bfa6-0531de489f02"
        },
        "item": {
          "id": "468d4a77-045e-4a68-bfdc-66115d0487c5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c5b263cd-ed0c-416e-ba87-13a33dfb7f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1e390f-3ace-4ab2-afc4-ae6c75f3b1ef",
        "cursor": {
          "ref": "df8300d7-d5fc-4c7b-812e-75277b32df90",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "995cd5d6-d3d3-4c13-b9f0-516bb8318790"
        },
        "item": {
          "id": "2b1e390f-3ace-4ab2-afc4-ae6c75f3b1ef",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c795e8ac-e3c4-4948-9d3d-dbae486de96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb172bb9-aeb5-47b9-85f7-6ea806552d57",
        "cursor": {
          "ref": "11390046-4427-420e-a95e-d0ad683594ce",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "51db9fc3-823e-4272-9dd2-a1060bfcc741"
        },
        "item": {
          "id": "bb172bb9-aeb5-47b9-85f7-6ea806552d57",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7f2c989d-acd3-4102-b446-42c75abc973a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d678f6f-1188-46e5-a0cc-4000b0ef2304",
        "cursor": {
          "ref": "8e84b24a-c0eb-4637-a348-36c4ca0653d5",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "90c52556-7edd-48ab-af5b-7057e6cc92a6"
        },
        "item": {
          "id": "8d678f6f-1188-46e5-a0cc-4000b0ef2304",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f9a72e0b-d2dd-4ebd-b8c3-84e78e7ff364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcad2869-8ee6-4c75-9e79-f6418bfe64bb",
        "cursor": {
          "ref": "dd3ccf74-f260-4d5e-b770-c911ef94824d",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ee044a4b-d019-40ad-bb18-5bd1dca39534"
        },
        "item": {
          "id": "dcad2869-8ee6-4c75-9e79-f6418bfe64bb",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9a43c5e1-7447-4b7a-bb78-acd0ab64dacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5676113-5977-40cc-9e59-b3e06b3bd11c",
        "cursor": {
          "ref": "a9a2b29e-11e0-4235-96bf-a649352696c6",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "a5e0f055-91fa-403b-bf9f-f894f9498b63"
        },
        "item": {
          "id": "f5676113-5977-40cc-9e59-b3e06b3bd11c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "50397ca8-7649-4a81-b4a7-622d8f8d15c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440e0a11-e815-41bc-8c2d-eecdccaa89a0",
        "cursor": {
          "ref": "a449f2d0-b8e6-4ac4-a0c5-df2299fe2967",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "09ccc78f-0232-4f5a-bc42-b2e37efa733f"
        },
        "item": {
          "id": "440e0a11-e815-41bc-8c2d-eecdccaa89a0",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ab72dc4d-30d1-486b-a789-fd35b19ae825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc8ce8a1-bec5-4709-b365-a660dcaa1020",
        "cursor": {
          "ref": "e2870ae5-2465-4f28-b3c6-5d4bdcd58b3a",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4956f6fd-55d8-48cf-8353-86096c33414a"
        },
        "item": {
          "id": "cc8ce8a1-bec5-4709-b365-a660dcaa1020",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "21c81bc4-1c0b-4086-b6a6-1426bdfc98ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14567333-ae2b-4a25-9bfb-63691bb412dd",
        "cursor": {
          "ref": "185fd56a-3bf3-45f8-aaf4-f27fb820d0dd",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "cd3f20da-0ca6-46fd-8699-769478b90f05"
        },
        "item": {
          "id": "14567333-ae2b-4a25-9bfb-63691bb412dd",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ea1e9bac-299c-4c36-9381-23fd774de2c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "bbaa1bb8-c872-4e0d-8dc0-90510e735b5e",
        "cursor": {
          "ref": "76068ca2-26ec-4403-83a3-8e12d9dabc54",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "23482f7a-4a73-4771-9a3e-1ad368c9688f"
        },
        "item": {
          "id": "bbaa1bb8-c872-4e0d-8dc0-90510e735b5e",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "c3126b9d-a33d-4920-9ddb-b3bdd82c4aee",
          "status": "Created",
          "code": 201,
          "responseTime": 1874,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "7db5062c-4e77-42b4-9f98-1175190569c6",
        "cursor": {
          "ref": "275ecec7-b39a-464c-860a-447b8301578a",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c547dd9c-c03f-46e6-a078-2711cf6bdb9f"
        },
        "item": {
          "id": "7db5062c-4e77-42b4-9f98-1175190569c6",
          "name": "credentials_issue"
        },
        "response": {
          "id": "eb9b2605-7367-42ab-8341-43b7bfc2d9ac",
          "status": "Created",
          "code": 201,
          "responseTime": 2515,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd04f6b-41d7-4514-9476-b6abf2f59d5b",
        "cursor": {
          "ref": "4c73b37c-68e8-4eb5-84c7-8b55c53f30b4",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "341895fb-d6f1-4639-952c-3be7cf38da88"
        },
        "item": {
          "id": "fcd04f6b-41d7-4514-9476-b6abf2f59d5b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "22b2d5ef-ef6e-45a4-a4c9-1c541a3b4aeb",
          "status": "Created",
          "code": 201,
          "responseTime": 1871,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f97cdd8-98c9-448f-857e-d76c4779a0cc",
        "cursor": {
          "ref": "3fbc594f-04f3-408a-9aae-a581a66b02f9",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c254b4c9-01fc-444d-a777-e8d6337d40d3"
        },
        "item": {
          "id": "7f97cdd8-98c9-448f-857e-d76c4779a0cc",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b761b4d6-94a9-4a8e-a068-6016bc7c809d",
          "status": "Created",
          "code": 201,
          "responseTime": 2427,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6dcc78-f512-42fd-9722-7539b23cf293",
        "cursor": {
          "ref": "302d8713-3d37-4a73-898d-4415b321edf3",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "54ad5077-1e2d-4a19-8bd8-86c9a4f1852d"
        },
        "item": {
          "id": "ab6dcc78-f512-42fd-9722-7539b23cf293",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9b227d31-f332-4651-a40f-35ebb1e2c5a9",
          "status": "Created",
          "code": 201,
          "responseTime": 2153,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2fac3c-9276-41bf-8c59-6b4fbaebbf7d",
        "cursor": {
          "ref": "714937db-adba-4335-935a-22dcc11ddbfb",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "25b43456-d2e1-447f-82a4-e434785bfd4b"
        },
        "item": {
          "id": "ba2fac3c-9276-41bf-8c59-6b4fbaebbf7d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d6af2443-560d-4360-9ac5-ca19e3560c6d",
          "status": "Created",
          "code": 201,
          "responseTime": 2855,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-19T00:38:46Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-19T00:38:46Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "93c25c74-f289-45e4-bb4e-e854a3d461fc",
        "cursor": {
          "ref": "245e6d92-c935-4104-a3c7-40bbf08eae2b",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8dbe1980-c2e7-4a59-9ff9-05ab69a080a1"
        },
        "item": {
          "id": "93c25c74-f289-45e4-bb4e-e854a3d461fc",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6e1a690f-2aaf-4d65-8962-98b37dc1a997",
          "status": "Created",
          "code": 201,
          "responseTime": 1818,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16077589-cace-47b0-afbc-62277b014ee4",
        "cursor": {
          "ref": "523e1990-8e25-4da7-acd7-f9f7efb67205",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7add9974-362a-40c2-8074-5c1846dcf4e5"
        },
        "item": {
          "id": "16077589-cace-47b0-afbc-62277b014ee4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3c0816c6-bad6-4ec5-878f-1cdc2b7d500e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16077589-cace-47b0-afbc-62277b014ee4",
        "cursor": {
          "ref": "523e1990-8e25-4da7-acd7-f9f7efb67205",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7add9974-362a-40c2-8074-5c1846dcf4e5"
        },
        "item": {
          "id": "16077589-cace-47b0-afbc-62277b014ee4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3c0816c6-bad6-4ec5-878f-1cdc2b7d500e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 333,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b26eef48-01f3-437e-a82e-97d0450f8496",
        "cursor": {
          "ref": "3f058b03-cf0f-4c7f-9b8a-49a1a5e03b16",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "a004c9be-1f66-4cda-b438-f357aa955e4f"
        },
        "item": {
          "id": "b26eef48-01f3-437e-a82e-97d0450f8496",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ec3961aa-04a5-4284-a7c2-807c03552d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a4e7a7-b32d-441e-9af2-8d34cd3d9b33",
        "cursor": {
          "ref": "dc2dcafd-2f3b-4c95-90fa-de6fcece5704",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "89e42e3e-5929-4de6-865c-9a4dfb66376a"
        },
        "item": {
          "id": "25a4e7a7-b32d-441e-9af2-8d34cd3d9b33",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a46576ea-7ca1-4aa3-98fc-d338705471b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d6120a-5664-4630-a492-41cd7a02ab79",
        "cursor": {
          "ref": "9128b91b-cfe0-4b3e-a292-1eeb5aea0e76",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a1166776-a423-45dd-8667-92867c2fb377"
        },
        "item": {
          "id": "31d6120a-5664-4630-a492-41cd7a02ab79",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a4a33f4e-cd50-4025-8fea-51089ade15cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f23fc37-58e7-4999-854d-ea03c895cf25",
        "cursor": {
          "ref": "ea7a5acc-90db-494b-b148-2f78c30c4166",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e1eb36c3-48a4-4102-9caa-abe4a0775413"
        },
        "item": {
          "id": "7f23fc37-58e7-4999-854d-ea03c895cf25",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "67a8d8fc-a810-4d00-afc7-a48e1fb6027f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063cf70e-0f00-4c2a-bc9a-1c8224ab929d",
        "cursor": {
          "ref": "1f0522d5-89b8-48c5-9458-01fcd6aac508",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "428a5256-69f4-493f-8dbe-9f623bfc4f0f"
        },
        "item": {
          "id": "063cf70e-0f00-4c2a-bc9a-1c8224ab929d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d923d975-f7f8-4dd7-85e2-163248664755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a514f7-5f4e-4411-8fc3-916357c50724",
        "cursor": {
          "ref": "9cb7d848-bbbe-4335-8ab0-bfac19e2683b",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3817f928-d580-4857-9257-75a148098c3e"
        },
        "item": {
          "id": "b8a514f7-5f4e-4411-8fc3-916357c50724",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2ccbfe91-43b7-4d76-9e41-89471b6f8197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2b4e73-aa09-41a1-b669-041c3b054566",
        "cursor": {
          "ref": "d72f0faf-0eb7-4b1b-b245-4e0d729591a4",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7b041984-6f8f-49e2-88ae-58f67abcd967"
        },
        "item": {
          "id": "dd2b4e73-aa09-41a1-b669-041c3b054566",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7bac7c0d-34dc-48d3-9459-b84c72c932e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ee1f2d-a164-4d1c-a088-7ef955bddb97",
        "cursor": {
          "ref": "23df4830-af45-4333-b6d6-9f88cecf52ca",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "233482d2-69a3-425e-8fa0-7e4b3e550570"
        },
        "item": {
          "id": "45ee1f2d-a164-4d1c-a088-7ef955bddb97",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "dfb4e784-b5bb-4c24-bd28-f98ed2c0bdf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1755a8b5-bc52-4306-b553-e367af404556",
        "cursor": {
          "ref": "1fe49cea-e226-4eba-979c-3966fa819220",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "90bfd25d-414b-4387-ad6e-1e247bf993dd"
        },
        "item": {
          "id": "1755a8b5-bc52-4306-b553-e367af404556",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "19349a9b-6554-41c4-94cc-3e5d4a7fdd45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca226ea-ddf9-4791-8ebb-d7724e159cad",
        "cursor": {
          "ref": "cdc2e86c-dd28-4450-a7d9-5ab041a7274f",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3d23ff16-d785-4f06-b9fa-c43025356742"
        },
        "item": {
          "id": "9ca226ea-ddf9-4791-8ebb-d7724e159cad",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "88783ff6-b9fd-40cb-8838-ea1ea38bca5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03bab02-1f08-4699-9613-cbd29b2990be",
        "cursor": {
          "ref": "0fc8aea8-cf2d-4405-87d9-31aac95f7d17",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "48a3740b-77a1-4806-93f9-14a965de173f"
        },
        "item": {
          "id": "f03bab02-1f08-4699-9613-cbd29b2990be",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c97250e5-a157-44e0-a357-4f861869c63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f04d07f-a47a-44df-8480-7b18279d7e4a",
        "cursor": {
          "ref": "9e3215f7-07d3-44d8-934f-3a8ab20ae113",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "4aacd450-f44e-406d-ae3b-108345d50f7e"
        },
        "item": {
          "id": "3f04d07f-a47a-44df-8480-7b18279d7e4a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "17687dba-0cec-4d04-8b30-c6b5b171bd3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a7ccb1-ca1f-4a43-be7b-0b2e00f81647",
        "cursor": {
          "ref": "5221f97e-dbba-40e9-ba70-33187851e399",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4e12e5f3-9ad4-4215-9030-b1507bf6f04c"
        },
        "item": {
          "id": "42a7ccb1-ca1f-4a43-be7b-0b2e00f81647",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "092f6f8a-f62a-47ab-9d0b-2f93be66e69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e71957-a1a6-4862-a0ef-c541be114083",
        "cursor": {
          "ref": "91995661-ed2a-4c80-9362-3de26ea6c39d",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4df4d67d-302f-4a27-ab68-6ab982d5870d"
        },
        "item": {
          "id": "59e71957-a1a6-4862-a0ef-c541be114083",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "aa7519b8-4f8f-4703-9def-925372df30e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df332937-a6a2-4c2e-80f6-fcfab7527f97",
        "cursor": {
          "ref": "80c0b1c3-5b39-4cf1-9b3d-a3fd136ab68d",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f025f529-b09e-4f35-804a-310b98a62abb"
        },
        "item": {
          "id": "df332937-a6a2-4c2e-80f6-fcfab7527f97",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9153ef0a-caf3-46b9-8ec0-10c547d64a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8298a259-5860-4d51-ac12-e49f44f73892",
        "cursor": {
          "ref": "56a71938-82b5-430f-bb1d-b55f6e5372f2",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b5ba3c12-4dba-4da8-a96c-93a1a90a922f"
        },
        "item": {
          "id": "8298a259-5860-4d51-ac12-e49f44f73892",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b5a1293a-d139-4f70-81d8-beda5a4c174b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645afef0-3aa1-4756-98ec-83977b42d8cb",
        "cursor": {
          "ref": "2f5092cd-8740-407c-82df-0e09da759bbb",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "19150bac-c338-4c79-b141-344a7ff3db38"
        },
        "item": {
          "id": "645afef0-3aa1-4756-98ec-83977b42d8cb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c2f21b1c-a8c3-4573-90ce-489bf225e0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d04b63b-acec-4c38-b1b8-24bb25c14ea6",
        "cursor": {
          "ref": "9efca599-3405-4341-aff5-ee19bc85c930",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "474381cf-bfe5-4d0e-913e-584db7440c18"
        },
        "item": {
          "id": "8d04b63b-acec-4c38-b1b8-24bb25c14ea6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "7529fbf1-9b63-4e30-ba82-7b80434c04d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ce2449-32a7-49ef-93a1-249e833556bf",
        "cursor": {
          "ref": "7f227fd1-3afb-4995-98f4-be97913a34ee",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "c52d0eec-a255-4e0c-866e-bb7574a67f86"
        },
        "item": {
          "id": "b1ce2449-32a7-49ef-93a1-249e833556bf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "eae35a23-dd71-4017-85b9-b46b7ada79c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e59956d-aa33-4b2e-9433-52b347735c16",
        "cursor": {
          "ref": "84760d0f-7cc8-433d-954a-8b53026fbb44",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4f80fdc3-dc1e-474f-ae25-8c4efed8388b"
        },
        "item": {
          "id": "3e59956d-aa33-4b2e-9433-52b347735c16",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a3b52351-0e11-4184-9f20-895d1ed08db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2abf982a-7c2d-4362-9db6-a644dfaf5b84",
        "cursor": {
          "ref": "50e81fb7-6e75-4b01-987e-13c1bbce8453",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "35a0065b-42e0-4548-a765-a6dcfea25176"
        },
        "item": {
          "id": "2abf982a-7c2d-4362-9db6-a644dfaf5b84",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d7de03bb-568b-471b-b9e3-eceb321b3c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81dc7b0e-cde0-4b5a-8ea2-fd4e8d5a45b8",
        "cursor": {
          "ref": "d9709779-b4de-4968-acd1-ab28cde9353a",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6e2fb8aa-135a-46a5-8a96-c11287cb9e49"
        },
        "item": {
          "id": "81dc7b0e-cde0-4b5a-8ea2-fd4e8d5a45b8",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4d59f9cd-0565-4e6b-9501-d5cf3aee0cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac7d8d9-cc96-4053-ade8-34819ce1799f",
        "cursor": {
          "ref": "2c58d70a-383c-4e75-94d7-27d8d15f3821",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "79ea4195-2b42-4093-aa04-72ce36166d0a"
        },
        "item": {
          "id": "cac7d8d9-cc96-4053-ade8-34819ce1799f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "201f09ab-2107-4597-9250-56f45cdee2d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398e4077-272e-4de1-9e69-00adaa4acbd0",
        "cursor": {
          "ref": "a80e0831-116c-466f-b4cb-e13d61240928",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "81d5777f-674a-4527-a783-a2b30c341b65"
        },
        "item": {
          "id": "398e4077-272e-4de1-9e69-00adaa4acbd0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "388539b7-2b67-4c8e-ab93-58415cae2241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce1e1753-74be-4935-bf2c-cef64a1a11ad",
        "cursor": {
          "ref": "6cb540f1-6a24-43c1-9a4b-5fbdca8dd757",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "729bdf00-76a5-45e5-9a95-2acea94e8c9a"
        },
        "item": {
          "id": "ce1e1753-74be-4935-bf2c-cef64a1a11ad",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1306df62-028d-4c42-bb52-2f35ca19cabf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c50e98a-17d2-497a-9742-06a7c2fb547e",
        "cursor": {
          "ref": "8327e73d-f4f4-43ea-b371-ecf83ccfac55",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "f42ec522-0594-4c9c-a318-8580fee7705a"
        },
        "item": {
          "id": "3c50e98a-17d2-497a-9742-06a7c2fb547e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "53685704-3a17-454a-8fdb-092f568df77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8103d23-b5ad-4f87-952b-cf066b5a0e33",
        "cursor": {
          "ref": "c2bca305-e488-446b-975e-ec0871c883e0",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e26a7903-21d3-4f74-98f6-c7d7db0f17fb"
        },
        "item": {
          "id": "a8103d23-b5ad-4f87-952b-cf066b5a0e33",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4fafc0b8-7f03-4568-95c7-2ded09a8c00f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c673f7-268a-44cc-97fe-bdc2b3ee0824",
        "cursor": {
          "ref": "05f083ec-715a-43e0-ac1b-8eb77b7c3201",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d116f1b5-b0e1-4ca2-975f-177a503a2274"
        },
        "item": {
          "id": "86c673f7-268a-44cc-97fe-bdc2b3ee0824",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "5f942d3f-9072-4576-b63a-372e8cd13a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc30be2a-01a6-43b5-8a21-7aa1e3fad183",
        "cursor": {
          "ref": "a80f0460-51db-452d-adbe-10bcb97e9bca",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "170732cf-ab20-4e41-9afa-638ba7f8de09"
        },
        "item": {
          "id": "bc30be2a-01a6-43b5-8a21-7aa1e3fad183",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "42781eaa-48c4-4765-bf96-b93ae32af307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbfc173-6ad8-4afc-b3d8-4b4fa80a0e3a",
        "cursor": {
          "ref": "0db731dc-7ac2-48fa-bc9b-dca54e076476",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "049daa36-899d-4534-b7c3-b612cc8088b2"
        },
        "item": {
          "id": "5cbfc173-6ad8-4afc-b3d8-4b4fa80a0e3a",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "33fa65ec-af79-4f7e-8f10-a2c07f8a3c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a47838d-e6c6-4060-b5bb-16795429aa94",
        "cursor": {
          "ref": "534cf0ac-9c02-4bd9-b7dc-1c1f6da2d126",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "63198ce4-df57-462e-9a00-ec3b00111f02"
        },
        "item": {
          "id": "4a47838d-e6c6-4060-b5bb-16795429aa94",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "54daa4a4-796b-46a4-8b64-67dd89ec90c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fb85cd-f103-425b-a0fe-3370d18c9562",
        "cursor": {
          "ref": "2e8d8d2d-afd0-4345-9f5f-f8ba24fb0c01",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5c4512ac-08be-42dd-9007-b8172a988b8b"
        },
        "item": {
          "id": "c8fb85cd-f103-425b-a0fe-3370d18c9562",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2b9537cb-29d2-4a55-9599-4aeaff85543b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b413fa84-4ae8-4993-8f33-72cd6a6cd719",
        "cursor": {
          "ref": "9044678d-7810-4193-b012-1f86a6c3399b",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0838d008-6598-4c63-8b52-9213b9e09efc"
        },
        "item": {
          "id": "b413fa84-4ae8-4993-8f33-72cd6a6cd719",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "67c2591a-fda2-4d28-a478-7be8bccb279c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "39468355-84ad-4e4e-85fc-37b54c6b295d",
        "cursor": {
          "ref": "f5a9a8e0-5126-484c-984c-0bd4d23174e5",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f3e31a9d-a108-4e93-b01b-47955a14952a"
        },
        "item": {
          "id": "39468355-84ad-4e4e-85fc-37b54c6b295d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "acb3a791-5405-4933-a4fb-29567634a896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39468355-84ad-4e4e-85fc-37b54c6b295d",
        "cursor": {
          "ref": "f5a9a8e0-5126-484c-984c-0bd4d23174e5",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f3e31a9d-a108-4e93-b01b-47955a14952a"
        },
        "item": {
          "id": "39468355-84ad-4e4e-85fc-37b54c6b295d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "acb3a791-5405-4933-a4fb-29567634a896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f29ddfa-2997-41dd-b653-e0d6d1f332f2",
        "cursor": {
          "ref": "2deb79e6-7c5b-4b3f-8fe0-a36b52e77f77",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "63f2ff91-496c-4e7a-a281-fe2c2ff4d42a"
        },
        "item": {
          "id": "5f29ddfa-2997-41dd-b653-e0d6d1f332f2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ff7dd9e7-ea46-42d8-8b4c-2442f964df88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f62902ac-9e57-44b0-9dc1-afb061213231",
        "cursor": {
          "ref": "f095f5bd-7579-4cf2-abc5-9097cb340e6c",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "224d8be6-4fa3-4dc1-b683-4dd2dab692eb"
        },
        "item": {
          "id": "f62902ac-9e57-44b0-9dc1-afb061213231",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1ac57173-7af2-4fcd-8b4c-1160633661e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "735a6a1f-9303-4388-9eb2-b22f65566e09",
        "cursor": {
          "ref": "4ea45713-9d5f-487b-9531-f2b3e95fd059",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "48064d35-2de2-478d-adbb-2c0cbda2cb29"
        },
        "item": {
          "id": "735a6a1f-9303-4388-9eb2-b22f65566e09",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a0baee0a-587c-4725-a2ab-2b6621c0ba93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c632901-f4a7-4418-8eea-359006e3511b",
        "cursor": {
          "ref": "ee6014a7-9a57-4e19-8ce1-141856789ca7",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "faa42f1d-8ed2-4a5f-b269-d5db084ccb0d"
        },
        "item": {
          "id": "7c632901-f4a7-4418-8eea-359006e3511b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "bff76408-eff6-4b55-8315-52ef6018094b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff5764d-59a6-4bc2-a653-eb5efb11efd4",
        "cursor": {
          "ref": "690c8553-7aa7-4cde-b76f-1893f7e559c5",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "38da25bd-a220-47e3-ac2e-0aadbec12ccf"
        },
        "item": {
          "id": "0ff5764d-59a6-4bc2-a653-eb5efb11efd4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "af08b823-c6e9-41b9-aa65-bf68aa151b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfceaea5-4a67-4290-82c9-1e3a2ada4d3a",
        "cursor": {
          "ref": "b8d51db8-e075-46aa-8034-b7f94d4292e6",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4b82ed14-83c4-40ea-9224-a83ce3cd0fdb"
        },
        "item": {
          "id": "cfceaea5-4a67-4290-82c9-1e3a2ada4d3a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "cbb34464-403c-4db1-abe9-7c5238511cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c1052f7-af03-40a8-a6f1-5bf5d2324f1e",
        "cursor": {
          "ref": "bb90e76a-cd72-4493-937d-ba60722a7855",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "812c945e-5001-41fa-9c75-9c35482ae2c8"
        },
        "item": {
          "id": "1c1052f7-af03-40a8-a6f1-5bf5d2324f1e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0a607e21-9526-409a-9354-1381d4504ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d571af6a-1770-4342-9221-a11dc844b898",
        "cursor": {
          "ref": "e3564034-9937-4594-80cd-5975419faaa7",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6cb3c9ac-1ba6-4f97-ac80-8a76b485f90d"
        },
        "item": {
          "id": "d571af6a-1770-4342-9221-a11dc844b898",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "16c24810-8470-4123-8063-48fbebc3497d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3192bc9f-32bc-47ca-99dd-194502e31cd7",
        "cursor": {
          "ref": "0fc68414-2eb1-4a15-adb4-4c88f1c28ddb",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7dff48eb-1bbc-4299-9918-aa3bf30fa5c1"
        },
        "item": {
          "id": "3192bc9f-32bc-47ca-99dd-194502e31cd7",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "131e95dd-f6e7-412b-9d05-fd5eb8ef1d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6676a1ab-aba3-4e37-84a6-0fa9932c6a57",
        "cursor": {
          "ref": "61aa90e1-2ecb-4860-907d-0bace966751f",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "fcf733ab-1662-4a92-b5f7-16bdcfd5d4b8"
        },
        "item": {
          "id": "6676a1ab-aba3-4e37-84a6-0fa9932c6a57",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a363cbce-7c9b-4e69-8b93-6599b7d16f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9516599d-cdf2-44af-a619-375cf4523bd2",
        "cursor": {
          "ref": "8b52e215-a5a1-4b1c-81ce-ad1cdf49ee36",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "968c3c63-4182-4b63-bbf2-aab6fa9ab6fc"
        },
        "item": {
          "id": "9516599d-cdf2-44af-a619-375cf4523bd2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "cf7e3987-0f21-4dbc-8f4a-d3665859f438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a0fa5d-9f4e-48fe-a79f-407f64b13c88",
        "cursor": {
          "ref": "90fcec40-5925-43ec-8674-c79df1f5945c",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "fdecdf2b-4ce6-468d-bbda-a37a4c4d6e1b"
        },
        "item": {
          "id": "36a0fa5d-9f4e-48fe-a79f-407f64b13c88",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "66974bb3-2ea8-44ee-9b8d-21dd17309ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b115fc31-3e1e-420f-8a47-0548068e387a",
        "cursor": {
          "ref": "b276af8f-ffe0-45f2-a12b-4c61921fd722",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5bbd1177-f460-4921-91a9-4e0e600335cf"
        },
        "item": {
          "id": "b115fc31-3e1e-420f-8a47-0548068e387a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3c3c49e1-1db6-4e51-b5fe-744d92cb6a38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1bcce6f-e9e6-43be-a59f-f5253158b904",
        "cursor": {
          "ref": "b6ab4690-b4dd-478a-8595-e8a8a5a276b6",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4de2e7f5-cbd0-47a0-ac9f-5e25919b84db"
        },
        "item": {
          "id": "f1bcce6f-e9e6-43be-a59f-f5253158b904",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "72ac4d16-0815-4b67-b8ab-488888a28b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73ab7b35-e837-4429-9bb5-78dd460adef6",
        "cursor": {
          "ref": "09475cc9-a394-4b3d-8a0d-3a925f01127b",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "40667d53-1249-4e49-8106-a52ad03555e6"
        },
        "item": {
          "id": "73ab7b35-e837-4429-9bb5-78dd460adef6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "10122b2d-5d7e-47da-b803-baedb5733b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b34aeae-2ddc-4d85-91a6-5158647c4748",
        "cursor": {
          "ref": "c1ff0cb5-f8f2-400a-8dda-f806afa9cfff",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a78f349b-8419-471d-bec4-16b42822f4c8"
        },
        "item": {
          "id": "7b34aeae-2ddc-4d85-91a6-5158647c4748",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e49d800d-6e15-4928-848d-9c6b37707d6f",
          "status": "OK",
          "code": 200,
          "responseTime": 573,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "6f6d73f3-c65c-4167-98f6-dc239756d69f",
        "cursor": {
          "ref": "be9e93d5-1a43-4ff3-a798-5105468b908a",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0b0738a3-a768-4b94-9edd-e744b2b3e786"
        },
        "item": {
          "id": "6f6d73f3-c65c-4167-98f6-dc239756d69f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b2192b44-a98f-4a89-b141-2025582a12fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d264230-bfc7-4a97-a957-a237984acff7",
        "cursor": {
          "ref": "2a9fe2d7-7a65-4c1c-aaf2-dbffdea1c9a9",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5210a42a-86ad-4e94-ad97-eb271f13ff26"
        },
        "item": {
          "id": "0d264230-bfc7-4a97-a957-a237984acff7",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "8e9a5fac-5795-40ec-bdeb-680a491dab8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf1d085-7a7e-4834-960a-5cc972b98448",
        "cursor": {
          "ref": "2b1bf0ee-81d7-40aa-964f-8c8fd69dc43a",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "666db365-fcfb-4b11-80a1-d486cbb40c7f"
        },
        "item": {
          "id": "8cf1d085-7a7e-4834-960a-5cc972b98448",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "64d93f6c-d33e-48b8-8644-a3977792f4eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8733bfa-cb24-4bea-b66d-2da3e5f45009",
        "cursor": {
          "ref": "6887740a-a66c-4086-93bf-8bdcbd293573",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "11b64128-25ad-4f24-9f4c-a277e8629c67"
        },
        "item": {
          "id": "f8733bfa-cb24-4bea-b66d-2da3e5f45009",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2064f315-1f74-4323-8ee5-43b56588bf93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091f73b3-54a2-40c6-9862-e9629ef65693",
        "cursor": {
          "ref": "29752c1c-3550-4ca1-8144-31f4cfbb3703",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9251bffa-ee63-4e6d-bde6-ba263980239b"
        },
        "item": {
          "id": "091f73b3-54a2-40c6-9862-e9629ef65693",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ca38a90d-841c-4520-8381-962c6565fb50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ef1317-884d-402e-8d1c-8e67ff74a680",
        "cursor": {
          "ref": "c01f35de-940c-43a2-9c9b-4c89ce129203",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "12e97d77-b033-44ec-87bf-2ae6818ff88a"
        },
        "item": {
          "id": "81ef1317-884d-402e-8d1c-8e67ff74a680",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d63d8523-4be9-402c-9c68-04a79b004c45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 569,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3f5f0e-1dfa-4009-9eb1-5d7c9cfe55d8",
        "cursor": {
          "ref": "179dab4d-7523-4130-a5cd-01f045d07c7e",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "40c3e0db-dd40-495d-90ff-f50171863760"
        },
        "item": {
          "id": "9a3f5f0e-1dfa-4009-9eb1-5d7c9cfe55d8",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3fa6fb96-ddce-44ca-a54f-4e5914441c52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7abc2488-fab5-4358-a3a4-bb7f17454aab",
        "cursor": {
          "ref": "49fd92d7-a2fc-4167-b10e-f26b47fdfa1d",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "932ff724-904e-45ab-9973-d64e05d472d4"
        },
        "item": {
          "id": "7abc2488-fab5-4358-a3a4-bb7f17454aab",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "68f56a69-4fc1-458f-b8c7-0fd40908e96b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec49bac4-936c-4f3e-a6da-f559b2badf41",
        "cursor": {
          "ref": "8f8e7ac8-cb04-40b0-a836-6a487ce9a33c",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8a6f2acb-4a63-44bc-9b51-143e8dbda24a"
        },
        "item": {
          "id": "ec49bac4-936c-4f3e-a6da-f559b2badf41",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2292a657-8f79-4218-a75c-573c7ec01a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08fe878-f317-402d-88d2-beeb6658c341",
        "cursor": {
          "ref": "1e05d9a3-4193-4e5a-8d51-2400eac7e750",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d1d8f8c3-5484-408d-b86e-f2c4d02d22eb"
        },
        "item": {
          "id": "f08fe878-f317-402d-88d2-beeb6658c341",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0e511077-755d-4ab2-a813-a782230a16b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0190fa46-0bf9-4ac7-8a91-6914b7fc26a3",
        "cursor": {
          "ref": "bbe68ad5-6e46-447c-b96a-c31229928fa0",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1775d5a5-09d4-4148-8b4f-8bf07df48426"
        },
        "item": {
          "id": "0190fa46-0bf9-4ac7-8a91-6914b7fc26a3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "cd122bd6-ec64-4b5b-b175-c79c0e454b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017e8594-b58b-41d6-a5a2-ba0cab635bfe",
        "cursor": {
          "ref": "6111fb8e-9edd-42d2-873d-48c1ad627242",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "37da0981-ee4f-4f0a-9d4d-c06c419a3892"
        },
        "item": {
          "id": "017e8594-b58b-41d6-a5a2-ba0cab635bfe",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "16ce6604-a102-43bb-abde-47b8ab25d0f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5232c3a-488e-4c5b-a8b7-2a41629ba9ee",
        "cursor": {
          "ref": "9116cb69-cdad-49de-aa88-83e81d267a84",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "be77bf9b-c604-410b-907b-980138834c12"
        },
        "item": {
          "id": "f5232c3a-488e-4c5b-a8b7-2a41629ba9ee",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cd4ff130-8b6e-489f-a3e9-c65aed14ec3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5539c085-efe0-4b97-91bc-7eb618c08bfb",
        "cursor": {
          "ref": "896ea11f-04db-4901-a96e-9f57c09e7708",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f7211d86-0b45-4d2a-b505-9e2f4e0a0e93"
        },
        "item": {
          "id": "5539c085-efe0-4b97-91bc-7eb618c08bfb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1a64634f-8fe5-4da6-bf77-74ac017020c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bd18c2-13ba-4901-8633-7d6bf25f2e79",
        "cursor": {
          "ref": "1a011bb9-48ab-4f8a-861a-42b67d180796",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ac1b3e38-570e-4664-9278-c3699627f94e"
        },
        "item": {
          "id": "05bd18c2-13ba-4901-8633-7d6bf25f2e79",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "31b98795-9d04-4e17-b163-5255a18e502c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d85936-b765-48cb-ae37-c84931be5352",
        "cursor": {
          "ref": "81d15d37-3860-4065-af9b-e634f222a443",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f4a91c6f-a95f-474b-8cd6-4d97db9eab5d"
        },
        "item": {
          "id": "f4d85936-b765-48cb-ae37-c84931be5352",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bf049353-c129-4e19-86b5-16a3f3fcb037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a2cb1f2-aa33-450c-a833-b8329640299e",
        "cursor": {
          "ref": "d5e25c92-238a-4629-be6f-fa878441823e",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "422b3884-fe93-420a-8a10-495dcaf45c1f"
        },
        "item": {
          "id": "8a2cb1f2-aa33-450c-a833-b8329640299e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c2b77988-7bfe-44c3-a459-d81db147f484",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c3a1e0c-0edc-4a4f-8b71-8cc7c312aa84",
        "cursor": {
          "ref": "5f72da44-754f-4b2e-b541-cd71f27ae951",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f9a03de9-bd69-443d-a5d8-b5c5d19559d7"
        },
        "item": {
          "id": "8c3a1e0c-0edc-4a4f-8b71-8cc7c312aa84",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a7f011e7-1074-4495-a33b-fe648e2f50df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d81110-3b9d-4c00-beb5-b917b010f992",
        "cursor": {
          "ref": "4a7d5ad0-4904-4070-a20f-9bb394be5429",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "80db7288-fa2b-400e-80de-4eeeb7651e4b"
        },
        "item": {
          "id": "96d81110-3b9d-4c00-beb5-b917b010f992",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ee2d1832-3ed7-439a-af8c-624a4c4fcad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267a8bd7-cd82-48f3-adc3-4832b3fe8052",
        "cursor": {
          "ref": "0f493ec9-b9f6-43a8-b8f4-20d9f439ad99",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c3d06d01-d5d0-4ebb-a717-6f7081fe0ce7"
        },
        "item": {
          "id": "267a8bd7-cd82-48f3-adc3-4832b3fe8052",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7b58f4bb-f8e9-40ae-98ef-af736b94da72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb42bb4-c4de-4ad7-a7c3-537e2918e2fd",
        "cursor": {
          "ref": "7b0b01e5-2158-42a3-b2fd-3b58edbee24c",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1bc9d52d-140b-42e8-be81-8b6314f5f3ef"
        },
        "item": {
          "id": "dbb42bb4-c4de-4ad7-a7c3-537e2918e2fd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8ab611a2-06b9-439d-b4ff-24a3216bd6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc1bee3-e9ff-4e63-96c7-4664a9d07611",
        "cursor": {
          "ref": "5bd34edb-ae83-403d-a594-2b1533afced3",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "64ed661e-133f-4557-8e8d-37fa189349f9"
        },
        "item": {
          "id": "9cc1bee3-e9ff-4e63-96c7-4664a9d07611",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "daea0a0f-da2f-447f-a5df-141b9f5b317f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 425,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba984bc-45c3-469f-a292-5689a5458b95",
        "cursor": {
          "ref": "1b4abb26-d622-40b7-897a-7ac88f6786c4",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b1f74c45-596f-4c50-b2ee-4b2c8678ee06"
        },
        "item": {
          "id": "4ba984bc-45c3-469f-a292-5689a5458b95",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "81e8e61a-e15b-4c69-81b7-ab16fe823cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de789d1d-e183-43d2-b037-466e56c03569",
        "cursor": {
          "ref": "ac288d40-9764-4b70-b0de-676af0d6ef35",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1ef62ad5-1be4-4cf1-8a81-d65542e069a4"
        },
        "item": {
          "id": "de789d1d-e183-43d2-b037-466e56c03569",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "beda55a2-d5a5-481b-9ebe-fc3891aa3fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108f8a9e-5e61-42bd-8fd7-f88f93e4ecd6",
        "cursor": {
          "ref": "fcc447ff-c4c2-4193-a470-af901ff43da2",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2efc7fdb-91f2-4276-a81f-91f32327e312"
        },
        "item": {
          "id": "108f8a9e-5e61-42bd-8fd7-f88f93e4ecd6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0dbb6a97-5ef4-40db-8730-cf4763781e1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f732ed22-a42d-4925-aa70-32a9f940ebe5",
        "cursor": {
          "ref": "bb1d8b4b-3bc5-49dd-a379-75fe906d6938",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e8ba1f94-6d1d-4a5a-b56e-d1e61ba9b444"
        },
        "item": {
          "id": "f732ed22-a42d-4925-aa70-32a9f940ebe5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "48e1f9af-7b90-45a8-a00f-42109276b64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fff3f81-632b-4f24-9bc0-6df649a335ce",
        "cursor": {
          "ref": "2527ead5-ae47-493e-a9c7-abed4d086fe8",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6453524c-e73e-4e04-80dc-72c8db857da3"
        },
        "item": {
          "id": "6fff3f81-632b-4f24-9bc0-6df649a335ce",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "d610c38f-9c5a-482d-960a-683031179f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e792c1-bf3f-4afe-a4de-3f78c76b8550",
        "cursor": {
          "ref": "aa5313f7-58e1-437f-9313-fcd040060bc2",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7623a2a3-d417-4af5-b8e4-1493b4e1dad1"
        },
        "item": {
          "id": "52e792c1-bf3f-4afe-a4de-3f78c76b8550",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5d9cad24-3485-4bc5-93a3-0c40bcd00ab7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde252db-ba60-46fa-b16b-f3f89b8309da",
        "cursor": {
          "ref": "31a86270-5f14-4a8f-a2da-c155457e6a85",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4da672e5-6938-49e7-b4db-12feba4d5798"
        },
        "item": {
          "id": "cde252db-ba60-46fa-b16b-f3f89b8309da",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "af634a00-d648-4a3e-9297-27a705ae19bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342fec7a-81f9-4c9a-8f3a-bb6ec710a0f9",
        "cursor": {
          "ref": "454653c3-e422-485b-b6a6-886e21b587b8",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "08f3713d-18d7-4731-8d19-9aabc81b250e"
        },
        "item": {
          "id": "342fec7a-81f9-4c9a-8f3a-bb6ec710a0f9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c2d59af1-b528-4670-ab2f-71136ec59f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a17d39-0440-447a-b79c-7263a450ee3a",
        "cursor": {
          "ref": "eebc5fb6-7ffd-4619-8c2d-6cff899db01f",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "471048de-ac77-4b17-a61e-6757235f9f72"
        },
        "item": {
          "id": "84a17d39-0440-447a-b79c-7263a450ee3a",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "915a66cf-044c-49c5-8d59-d950e1564906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e27bd96-de46-4a54-a2fe-5911a290c1e6",
        "cursor": {
          "ref": "ff6841ed-16cf-46c0-a8b8-7c9e3072545c",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b584e526-9fba-4ea2-b8a6-876c2eab4aea"
        },
        "item": {
          "id": "2e27bd96-de46-4a54-a2fe-5911a290c1e6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ea8cca57-8ce5-4317-b61f-6d687158f62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f03870-7927-4e45-b086-60dcedf7fe40",
        "cursor": {
          "ref": "646fcc5f-c146-4068-a69e-0b2597c8ce65",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "79536908-dab6-4cb3-81bf-875a9151bb36"
        },
        "item": {
          "id": "d2f03870-7927-4e45-b086-60dcedf7fe40",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3772e567-70ba-4243-a3ba-82f4f66b8afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb110bc-e717-44fa-ad71-00d1898ff943",
        "cursor": {
          "ref": "2b8fdf3d-80fd-47ef-8bfc-c0aa7fa14713",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "12a8c8a3-614e-445d-ad97-33f6b9109c2c"
        },
        "item": {
          "id": "5fb110bc-e717-44fa-ad71-00d1898ff943",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5ff3de91-43b6-4c7a-9b25-19386c14f349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71069788-62e8-4f5c-be50-5b794695f78a",
        "cursor": {
          "ref": "6867f1aa-7981-4789-aab1-602522062789",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7532f9cc-c2e3-4f96-ae7e-7c97f37720cd"
        },
        "item": {
          "id": "71069788-62e8-4f5c-be50-5b794695f78a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4f810aa8-f713-4d82-b15e-b7018174db96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7723467d-93c0-497b-944f-5ddefb99d26a",
        "cursor": {
          "ref": "0f45d04f-defd-474c-8b00-259d8c9b7073",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0d6b6ff5-a6cb-4a93-ad39-ff998e8ffa9b"
        },
        "item": {
          "id": "7723467d-93c0-497b-944f-5ddefb99d26a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "040db392-911d-4e4e-ac6b-a677e34506de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "026aca52-b1c9-4ee4-9357-d346f03972e8",
        "cursor": {
          "ref": "3fc6bb55-a0ef-433e-86d6-9a120807410e",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7daeb48f-a80f-4d51-a31b-07ac2350d22e"
        },
        "item": {
          "id": "026aca52-b1c9-4ee4-9357-d346f03972e8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3081fbeb-3c18-4546-8a8a-8636f3a9467a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9c27db-6b65-4b7c-8ee0-58385f327e76",
        "cursor": {
          "ref": "55941ae2-8bbe-4984-adf4-46c05c80a5c4",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "58165ca3-35d1-4e50-914b-be841b9a2da8"
        },
        "item": {
          "id": "0e9c27db-6b65-4b7c-8ee0-58385f327e76",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2b141181-ad69-41c1-b334-a73d0fcdff42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d04cc2e-802f-4830-9626-c677de28ffa3",
        "cursor": {
          "ref": "7708b526-d657-4d70-8646-41b307693241",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "69aa6c7b-4ca1-4d32-a8f3-096e9d998a14"
        },
        "item": {
          "id": "3d04cc2e-802f-4830-9626-c677de28ffa3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c9f15ed0-1a5b-4465-9eb2-da6315f802f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da577907-1a39-4e19-b3cb-9628bd0c9916",
        "cursor": {
          "ref": "d39a9293-3d69-41de-91da-803789e07b45",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "be3932da-a46c-4703-887f-b928dcc640f8"
        },
        "item": {
          "id": "da577907-1a39-4e19-b3cb-9628bd0c9916",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ce8aeecd-4d03-4435-812d-34e2e00c9428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b69064-4779-40a9-b50a-0517b7765f31",
        "cursor": {
          "ref": "f3e9b475-533b-45a9-b8e9-7971637b64b3",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "77088444-5e05-4e1a-b704-7b4e3fa01fd2"
        },
        "item": {
          "id": "57b69064-4779-40a9-b50a-0517b7765f31",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9c8e6d08-e804-44e1-8a3d-62827ceac78b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63b6723-9e29-47f5-9f97-8dc469e9a5c2",
        "cursor": {
          "ref": "ee2df6db-3b9c-48f2-a047-9fec7e65020f",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "bb75d57c-7fde-45b0-a34e-375567dc8032"
        },
        "item": {
          "id": "b63b6723-9e29-47f5-9f97-8dc469e9a5c2",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7ee5c0d4-6507-4b1a-bffa-59e66f2b4405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46494fb0-7ea8-4ef1-a60d-73a6d52f4446",
        "cursor": {
          "ref": "ac0a1a6e-7a71-4bf6-afbc-f9b7ea4637ac",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8e787348-3460-49ad-9987-183fd8f8691d"
        },
        "item": {
          "id": "46494fb0-7ea8-4ef1-a60d-73a6d52f4446",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "92a7aa44-076a-4065-9ca9-f6cced3967aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88a6bae-30e0-4d81-8911-bf262684912f",
        "cursor": {
          "ref": "9913b83e-867b-4982-b1f7-a664fee84b38",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "68b2b338-f750-4297-9704-b9c95b9ac5a6"
        },
        "item": {
          "id": "b88a6bae-30e0-4d81-8911-bf262684912f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8bfd4649-bba6-49e4-a9bf-055c2d788656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30bde93-961b-4da1-8ada-cf5ba5da159c",
        "cursor": {
          "ref": "78a253ca-f24e-42e5-bbfc-5cb4cef33387",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9f343e8d-14f3-45fe-b0a0-35f6a4006a4a"
        },
        "item": {
          "id": "b30bde93-961b-4da1-8ada-cf5ba5da159c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d0eb1ae6-db9a-4d71-8bd2-b10ad5beec4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3731278e-e9e6-4083-a9ea-3004717482bc",
        "cursor": {
          "ref": "b91b0c28-48a5-40de-af48-75e5f9f6557d",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e82fac01-aacc-4214-94fe-8867cf788cc0"
        },
        "item": {
          "id": "3731278e-e9e6-4083-a9ea-3004717482bc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8d94c3d0-fdd7-45db-a042-bdb4721b6829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75510c6-11c5-4095-a79e-1540dc8c2294",
        "cursor": {
          "ref": "14aff566-72c2-4ba3-9de6-5a72d13dd62c",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6345696d-a9f9-4c8c-af3c-25425eccafe4"
        },
        "item": {
          "id": "c75510c6-11c5-4095-a79e-1540dc8c2294",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c3dbf7f8-d92b-4386-812d-8d29e88e8e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cded76f-b44f-4635-a59d-30733e02142d",
        "cursor": {
          "ref": "dac4aa63-25cc-49b5-bde6-415a28d12071",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "df657af5-acb4-4707-9efb-ed52d45a3dcd"
        },
        "item": {
          "id": "0cded76f-b44f-4635-a59d-30733e02142d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8179d0a5-9fc3-4a21-aa33-2b9e7b4d87d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ffc286-febf-4e18-b70a-d713698990fd",
        "cursor": {
          "ref": "403c6d9e-8eaf-4c5f-b8dd-0e9c6cf2f22e",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e1e7ca2c-391b-4c17-b69f-603f1e8a6478"
        },
        "item": {
          "id": "13ffc286-febf-4e18-b70a-d713698990fd",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1773f732-0afa-4dbe-817b-d58c839d56e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda8eb08-7f5e-4add-98f9-3d9050e9bd32",
        "cursor": {
          "ref": "49e0b3e3-1134-473c-a0a9-ebc53e4489db",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "557a9559-62b5-42f1-9e90-540dec28aa3b"
        },
        "item": {
          "id": "bda8eb08-7f5e-4add-98f9-3d9050e9bd32",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "a290c208-d94c-4d1f-89b2-dff29587cdc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39bd488c-8780-4bdb-8c1d-900440dfd9d6",
        "cursor": {
          "ref": "43280ec6-ed8b-4ced-ac2c-170d36687dc7",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7550e4a8-9a44-4a02-9dce-d942c839d90f"
        },
        "item": {
          "id": "39bd488c-8780-4bdb-8c1d-900440dfd9d6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a7d4578f-9cd0-4604-ad1f-82a074fb8a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "678708c8-2e83-42da-811d-5d4393edd305",
        "cursor": {
          "ref": "4be86088-3e9c-4b78-9fe5-c0b4c97cfa2d",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ac47b060-e4ad-4f24-99f1-87c87c4bbef1"
        },
        "item": {
          "id": "678708c8-2e83-42da-811d-5d4393edd305",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "79753d1b-84ec-4a28-a424-84225899480f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359b559a-45db-40bd-ab76-a495409d5839",
        "cursor": {
          "ref": "22f0ad42-ceac-4520-8d7a-c4f257dd6c33",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8bc7b982-f454-4044-8e3d-918b527e814a"
        },
        "item": {
          "id": "359b559a-45db-40bd-ab76-a495409d5839",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "a602c7f8-4416-43b6-a091-64a6675408ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691b5c48-c3be-4ff3-b757-7d3d30f1a28b",
        "cursor": {
          "ref": "9d8abe94-b053-4499-862e-50042e0bbbc2",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d251f51c-271b-4223-a095-f13de288d015"
        },
        "item": {
          "id": "691b5c48-c3be-4ff3-b757-7d3d30f1a28b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3eefd9e5-f900-4232-bea3-d7b6a0fb8313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4bb0b0e-3eff-4cb1-bea8-61b29e7b7458",
        "cursor": {
          "ref": "4310ba2a-30d9-4f81-9c52-9c04567d1acc",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3c6b859c-2465-47d6-96dd-5c10f40b8715"
        },
        "item": {
          "id": "b4bb0b0e-3eff-4cb1-bea8-61b29e7b7458",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7b0fc0ea-40ca-4e0b-90cb-da0b2d974782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9aa5692-0ec0-40a0-b87f-ae626efdc255",
        "cursor": {
          "ref": "e3f96577-e6bb-4653-ae67-fd9938831f4c",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "81d3e4b5-ac5a-4de2-a620-50a9ccb637f7"
        },
        "item": {
          "id": "a9aa5692-0ec0-40a0-b87f-ae626efdc255",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "bba56c3e-1059-4e32-afb6-39461c6748a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc56319e-8f05-4093-99cf-6b4a92083dac",
        "cursor": {
          "ref": "d15bd23b-f116-45b5-b730-57f31681477e",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b972b5fe-8d0e-418c-88b3-1d50524217b7"
        },
        "item": {
          "id": "cc56319e-8f05-4093-99cf-6b4a92083dac",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6fd13408-d7ee-463f-aadd-c8dc4a593b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3cd3ee-b9b1-47ab-86da-1b45dcc4c436",
        "cursor": {
          "ref": "5934fd03-c15e-4772-a8a6-51245291bfd4",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "9f142422-49a4-467f-871d-e7cb51b524cc"
        },
        "item": {
          "id": "ab3cd3ee-b9b1-47ab-86da-1b45dcc4c436",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "5764dce8-2678-466c-9601-3536ea36b754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ef35ac-e868-4142-981d-3077784beb82",
        "cursor": {
          "ref": "455f888d-59e9-4a88-9372-2675ce2f9321",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "40d871e8-07bf-4790-ba47-ad87f77954a6"
        },
        "item": {
          "id": "12ef35ac-e868-4142-981d-3077784beb82",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b25519fa-d3c6-49cf-9928-1dcf792dbcd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06029bc7-0ab9-4021-a44e-aea8be8059ec",
        "cursor": {
          "ref": "c5d03c1f-3c42-4239-8626-50518c3f206b",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "bd9ac048-3444-498a-8c35-0509512ad08b"
        },
        "item": {
          "id": "06029bc7-0ab9-4021-a44e-aea8be8059ec",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8bcdcdfa-a159-49bf-846d-e48083a7ac85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e5ec3a-5623-40c1-9aed-0ed2ba2eedfa",
        "cursor": {
          "ref": "82948c33-1f9e-4487-994b-49cd667151e6",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5a9cd458-8229-4328-899c-53527949a744"
        },
        "item": {
          "id": "16e5ec3a-5623-40c1-9aed-0ed2ba2eedfa",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6da9ab87-d426-4b0a-abec-68a0062bc00c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5da8a06-851b-499d-83cb-9c246433517e",
        "cursor": {
          "ref": "6261928c-da3d-43a3-b411-315a214a63f1",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "95d88725-c3e6-44c9-a764-d7dd477e14ae"
        },
        "item": {
          "id": "c5da8a06-851b-499d-83cb-9c246433517e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "554bb39d-cdae-4f0a-ae8c-8489d22bf87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f023c1f-4550-4a7b-a3b5-59ae4cd14b65",
        "cursor": {
          "ref": "144592a4-15cd-42d1-97d1-78ad6cf905a4",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "617c96c4-35b6-401d-a5e7-9b9fde7cbaf0"
        },
        "item": {
          "id": "2f023c1f-4550-4a7b-a3b5-59ae4cd14b65",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "cd1107ff-275d-466c-bfc0-c867f4de7126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5262343-6c85-47c1-9c24-68d30d2c000b",
        "cursor": {
          "ref": "161c289f-182b-4de6-bf1b-b4dd628f8633",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "636e01b7-a753-4adc-ad01-b9380ab1d906"
        },
        "item": {
          "id": "b5262343-6c85-47c1-9c24-68d30d2c000b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a1c81734-1b7a-4107-9606-d3a3402d9139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cc5b900-2954-4768-82de-2bea0372293a",
        "cursor": {
          "ref": "c56d62b0-c2c3-4c95-afe6-9153c878e8e0",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a50f206a-66aa-4c26-a72b-bd82f905f638"
        },
        "item": {
          "id": "8cc5b900-2954-4768-82de-2bea0372293a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9c6656ad-aee8-47a2-9ce0-45825e2883ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e98460c-c0a0-4424-8554-d5e9427b6eea",
        "cursor": {
          "ref": "2bd5b3ee-d7b5-4d6c-9e6b-a3f4632a094a",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "fa03d036-fb10-434c-8d39-fbd3919a64d6"
        },
        "item": {
          "id": "3e98460c-c0a0-4424-8554-d5e9427b6eea",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ba4649c9-e262-4e14-9dab-c89ecdcd1a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0843d8e-7aea-45d3-bf86-fc7e56599459",
        "cursor": {
          "ref": "9e58480b-cd36-4f35-83ff-b0cc1d69bd57",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "042ffb0b-4099-45a2-b403-3c3bf1b47b7b"
        },
        "item": {
          "id": "c0843d8e-7aea-45d3-bf86-fc7e56599459",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9088aaf4-5c23-4550-b530-f789728cb992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f16051d-9b13-4ae0-9b64-6d526162a290",
        "cursor": {
          "ref": "4949df37-e306-4da5-ad02-b779f98d1692",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5016802f-4f8b-4002-9b8b-fb4bc85ef79c"
        },
        "item": {
          "id": "1f16051d-9b13-4ae0-9b64-6d526162a290",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "34733436-6f23-4fb6-a3a8-ec34a2b57e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86a7a577-65ec-46c2-aa28-7bf30c96d153",
        "cursor": {
          "ref": "1712ccc7-fcec-42f9-8c29-dfea5b141756",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ab200e4d-4ed9-4ba4-b9e2-852b3c9b6c95"
        },
        "item": {
          "id": "86a7a577-65ec-46c2-aa28-7bf30c96d153",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "6aae4ed6-37c6-4116-847c-060a333b3764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f724c6-92f5-4906-8a40-f91379dc3b92",
        "cursor": {
          "ref": "5b95681b-390b-449f-98da-a1197191a088",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6e1bcc5d-2698-45d9-be6e-322f1f77b125"
        },
        "item": {
          "id": "c1f724c6-92f5-4906-8a40-f91379dc3b92",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6c960878-a686-4517-aa0b-b0b1615410c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3afa72fb-2c83-4317-852b-f459cbe2fd41",
        "cursor": {
          "ref": "0f3042b9-c637-446f-a2ff-aa14989d977e",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d344b11c-33a6-401c-b299-bb15aeb0f47c"
        },
        "item": {
          "id": "3afa72fb-2c83-4317-852b-f459cbe2fd41",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "552d8818-881b-463c-bac8-6871ca303c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05abaa2b-3577-4148-82c9-dc6e7c0f007d",
        "cursor": {
          "ref": "919eab5c-e00d-4244-837f-9a099b95fd1a",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e6f19227-63ff-4cf1-9e86-2a7f21b773d9"
        },
        "item": {
          "id": "05abaa2b-3577-4148-82c9-dc6e7c0f007d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cefdb41d-40a5-41c3-a9fc-cea748e8079b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "618179a8-6966-48be-8097-131c55a91803",
        "cursor": {
          "ref": "25c67c15-c102-4547-aa1f-210e9249a1d5",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "dd3a4961-2e98-482b-979a-ede8c54b0797"
        },
        "item": {
          "id": "618179a8-6966-48be-8097-131c55a91803",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "73921180-284a-4509-9c36-967bdaa2d2cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d920ebd6-e551-40c6-ae6d-58ed53e10764",
        "cursor": {
          "ref": "8c28d238-b05b-461e-915d-3d85e3c2f655",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3ac01ace-95e5-4636-8587-601828562891"
        },
        "item": {
          "id": "d920ebd6-e551-40c6-ae6d-58ed53e10764",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "38748816-a278-40e6-852a-19a2d365ab26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec01b67d-e4d8-41b9-ba12-1a96f190a79d",
        "cursor": {
          "ref": "4a700761-146d-4bee-8671-b585039684d6",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "196fabeb-5851-4317-8bbf-bdb813c414db"
        },
        "item": {
          "id": "ec01b67d-e4d8-41b9-ba12-1a96f190a79d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c71a55e6-c5af-43ed-b3e1-c16240ef4e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a278cab6-b7d4-48fe-b9cb-4b7972ee3fd9",
        "cursor": {
          "ref": "44e39958-72b9-4114-b32e-85bcd404dcc9",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3e87693c-df6e-4a83-9823-4cffb3b91cd3"
        },
        "item": {
          "id": "a278cab6-b7d4-48fe-b9cb-4b7972ee3fd9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2ca8daab-8c3c-4e56-9e50-2d0b9456752b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6cc615-e299-4135-a77a-ea53fbcee5b8",
        "cursor": {
          "ref": "af13848f-a423-4de1-8360-1c89aef5c3cc",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bf584233-d8dc-4da9-8b75-aa44b07a2b77"
        },
        "item": {
          "id": "4d6cc615-e299-4135-a77a-ea53fbcee5b8",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "48965824-d14d-4219-8769-68d8109a8c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a1f523-3014-4609-8e0f-3ce1d5a1e059",
        "cursor": {
          "ref": "67341713-45fb-4835-a44e-7c7dfd28abcb",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "03389446-f08c-44ea-9faa-7c3ec07b65cf"
        },
        "item": {
          "id": "94a1f523-3014-4609-8e0f-3ce1d5a1e059",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a7267e88-afa9-419e-b3f5-633cd84e2fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976ee877-66a4-4920-a231-0a51e03030a2",
        "cursor": {
          "ref": "5dc3acf8-52cd-4105-aba1-126f0e84df7e",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cbf84d72-76fb-4504-b65f-ff4ab6748d0c"
        },
        "item": {
          "id": "976ee877-66a4-4920-a231-0a51e03030a2",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "718b0c83-a2f8-4b09-9ff5-e24a8ee541d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022e167c-1cbc-4ae5-9bfa-7ddd24d556df",
        "cursor": {
          "ref": "a7a9b9b8-d99a-4cc0-a7c0-5c8b68c2391d",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "00a692fb-6892-4527-8b1a-5c205601cb8c"
        },
        "item": {
          "id": "022e167c-1cbc-4ae5-9bfa-7ddd24d556df",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "868e2cec-1ad1-48d1-a466-d05a3ecfb8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74bc43db-6a1a-43c6-a2d5-a6859cc2d4d1",
        "cursor": {
          "ref": "cb9bfcbf-a1be-4a2a-8b4e-03bf4cbf70ab",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3b6abe92-9ffe-410d-8360-e607719c805f"
        },
        "item": {
          "id": "74bc43db-6a1a-43c6-a2d5-a6859cc2d4d1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f5e0cd5d-40b9-4c1c-89a9-cf718a913247",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "e5f3d7d2-061b-450e-92ed-014878bb2b95",
        "cursor": {
          "ref": "0d27ac15-03ff-425b-be3c-a8a0d963109f",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "52ade912-2cb7-4e28-a8bf-4eeae4efbca2"
        },
        "item": {
          "id": "e5f3d7d2-061b-450e-92ed-014878bb2b95",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "32882982-a321-4a07-8a1c-bbffde8fed42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "10349fe3-5221-4b80-9486-6b03b6429dd0",
        "cursor": {
          "ref": "0150368b-066a-4ecf-b733-661b1393593a",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7c40040d-650d-47db-a7ee-6ec7ec62984c"
        },
        "item": {
          "id": "10349fe3-5221-4b80-9486-6b03b6429dd0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "64b89a65-ad66-4704-b3b8-6fc63de83bc0",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c78457-328f-4835-9b2e-0f2f422a572c",
        "cursor": {
          "ref": "e8447c88-b432-438e-9e6d-b5a081c4a0d3",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "206e2ff7-1295-42aa-95a6-453e3e304a43"
        },
        "item": {
          "id": "03c78457-328f-4835-9b2e-0f2f422a572c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2119aa5d-01c0-40cc-9809-e0a07b862872",
          "status": "OK",
          "code": 200,
          "responseTime": 1881,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0d5221-5da3-49a2-9197-9cdec0ce50c8",
        "cursor": {
          "ref": "9c6fcf47-8ab9-4c38-b408-1c4ad241e86d",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "717ee733-c181-429e-a09f-2c346171704d"
        },
        "item": {
          "id": "9a0d5221-5da3-49a2-9197-9cdec0ce50c8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "c11d2b13-c8ee-4a79-a3fd-da6986d5989a",
          "status": "OK",
          "code": 200,
          "responseTime": 2389,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71bd707-5d33-4258-8e43-19e15c2eedc7",
        "cursor": {
          "ref": "0717de00-34f1-45e2-8a78-ede6b9385b3d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "573c5366-d80e-4806-907f-310ff8cfaf15"
        },
        "item": {
          "id": "d71bd707-5d33-4258-8e43-19e15c2eedc7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "12c6e0ae-c712-4a1a-ad1a-a7f66672d227",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "d71bd707-5d33-4258-8e43-19e15c2eedc7",
        "cursor": {
          "ref": "0717de00-34f1-45e2-8a78-ede6b9385b3d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "573c5366-d80e-4806-907f-310ff8cfaf15"
        },
        "item": {
          "id": "d71bd707-5d33-4258-8e43-19e15c2eedc7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "12c6e0ae-c712-4a1a-ad1a-a7f66672d227",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "d71bd707-5d33-4258-8e43-19e15c2eedc7",
        "cursor": {
          "ref": "0717de00-34f1-45e2-8a78-ede6b9385b3d",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "573c5366-d80e-4806-907f-310ff8cfaf15"
        },
        "item": {
          "id": "d71bd707-5d33-4258-8e43-19e15c2eedc7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "12c6e0ae-c712-4a1a-ad1a-a7f66672d227",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "174381d3-efbf-4fe4-aab0-92561d484c8b",
        "cursor": {
          "ref": "00509daf-7b13-4ac6-aba7-7e3bd7842f5a",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "be3d6d1c-7553-4f5c-9ba9-96b297f9be8c"
        },
        "item": {
          "id": "174381d3-efbf-4fe4-aab0-92561d484c8b",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "a27be76a-7165-4ccb-9c97-c8805d2dd635",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "bf3f3736-981e-43a1-9ae2-2019df4dae8d",
        "cursor": {
          "ref": "71b1c9af-4920-479a-aa70-27dc2b23d2fb",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "285ef81c-f636-47f9-81b2-4d503190c90f"
        },
        "item": {
          "id": "bf3f3736-981e-43a1-9ae2-2019df4dae8d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e84b012c-25ce-48a9-b32f-519964dd4f5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "bf3f3736-981e-43a1-9ae2-2019df4dae8d",
        "cursor": {
          "ref": "71b1c9af-4920-479a-aa70-27dc2b23d2fb",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "285ef81c-f636-47f9-81b2-4d503190c90f"
        },
        "item": {
          "id": "bf3f3736-981e-43a1-9ae2-2019df4dae8d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e84b012c-25ce-48a9-b32f-519964dd4f5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "141461e7-978f-4249-9e77-aa6cf528f8f1",
        "cursor": {
          "ref": "647ae10d-56a6-4b84-bbe0-f963a13c5100",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9207971c-7a27-4ba9-b3f2-2076bf1ed733"
        },
        "item": {
          "id": "141461e7-978f-4249-9e77-aa6cf528f8f1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "805758a9-6813-4c95-9648-df44fa002094",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 134,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "9b1a5855-5dc0-473e-a875-c47034adca23",
        "cursor": {
          "ref": "f51f0d8f-1c87-4bf9-9960-65223d0eb796",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "26e74c4b-23ab-42bb-9d81-357bb94fbdb9"
        },
        "item": {
          "id": "9b1a5855-5dc0-473e-a875-c47034adca23",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e78c4b92-da60-4402-8a0c-a6d5096128fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9b1a5855-5dc0-473e-a875-c47034adca23",
        "cursor": {
          "ref": "f51f0d8f-1c87-4bf9-9960-65223d0eb796",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "26e74c4b-23ab-42bb-9d81-357bb94fbdb9"
        },
        "item": {
          "id": "9b1a5855-5dc0-473e-a875-c47034adca23",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e78c4b92-da60-4402-8a0c-a6d5096128fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c90a68c5-30e2-4235-a4eb-9a396b36324b",
        "cursor": {
          "ref": "bc9f95e0-3e1c-4320-901b-15bd95d52bed",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "94ebf535-b164-4c08-bd06-e478e9726be8"
        },
        "item": {
          "id": "c90a68c5-30e2-4235-a4eb-9a396b36324b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "36af954a-4deb-4d0a-bb71-dc6abc97bc6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 63,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}