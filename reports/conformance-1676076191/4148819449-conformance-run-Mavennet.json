{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "81e0c978-c178-4e75-ab62-42cb459ac5ed",
        "name": "Clear Cache",
        "item": [
          {
            "id": "efba58bf-b41d-4836-ba94-83e928ca306f",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a1950293-b469-4195-9f02-e737dc1e891c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a44e77ed-8854-495f-a2c3-2805faa01122"
                }
              }
            ]
          },
          {
            "id": "d93d2a34-773d-46d7-bebd-304e4f72fca1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "107e356b-e299-4318-8cb2-20072b7a9205",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "735d9f89-1c50-465f-a121-2ca040a24506"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "924fc47d-acf7-40c5-85f9-7cf61d8166a1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0c1411ae-40e8-4ce9-b501-f15472dcc6aa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "879e21ce-222c-4357-be6f-1703b7c0f640",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40239235-b0ac-4363-90c8-3dd4b29bc4b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b465ce4e-6734-4964-9024-6fab11e33dbb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5b107b92-db6b-46a2-9102-bb26c14c0ee2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b5d3bbbc-bf4d-4ada-b64d-224550e06b2a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "304735d9-50a3-4333-a8c4-6b94a4231b7e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3881bd96-c11b-4a94-854b-f18ac95e601b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35569f3f-921e-4bdb-ab17-40898088fbdc",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f14e3ae8-7959-4800-a9b6-05b571258759"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a232ad0-5017-406e-a07e-072ebdd65ae1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bdd5eb35-042a-4e61-8340-f18db52257ec"
            }
          }
        ]
      },
      {
        "id": "e2a9c514-4061-4a6c-b7e7-bbbeda6b55aa",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "eb511536-6e13-4108-84da-a26ce7bfb742",
            "name": "Negative Testing",
            "item": [
              {
                "id": "478c5343-4eca-4c2c-b67a-1e72fc71a40f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0397d98b-a162-4ec5-9cad-fd948618f990",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97712428-2411-4f38-802d-3a618df590f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e40a792b-687e-4270-9b30-ca70cf1a1163"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff4d991-042b-4139-a305-f3d118c924d1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f9db45-b507-4944-a137-298a03372b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a3399de-2365-4fa6-964c-a24a4f13f002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846e6312-d9cc-405e-816c-6f9b2ecb807c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aeae7bf-2991-4095-8c79-c48b942de11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88adcc46-a7f0-456b-bbcd-815bdc64647b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ae707140-901e-44e0-b84c-f9c386878241",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "375b4b9b-6338-427f-8d03-ed99586e8a9d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe4590b-e756-4bfb-9377-c142ac8bc54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6092908e-4eb2-40e1-924c-f4aba3a4cde4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a85ead9-e144-40d5-907d-9d06bcc4f71b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42867f88-212d-4b43-96df-6c0c231b81f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddaf1b8-ab56-4ba4-b47e-dd1fdb0b1516",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146a1734-0ffb-48d0-9b28-8f49f0f4e6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af7815f5-ed21-464d-8718-568535ed2f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecc63ee-c8c3-49f6-9727-c0672326d246",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "3142f5a0-4bac-4c80-9ba3-f04b21103491"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9ddb3488-8bd7-4002-8f2f-8740826366a2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0ec9c390-dc32-427c-9368-e4bd29e602d4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c04c39b3-46ea-4769-8851-dbad5935f748",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ad32667e-355a-4359-b4e9-236157a65244"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c03d620f-1506-4d98-befe-8a742852dffb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "7cef21a0-c974-4fe1-9c3d-9ae49f8a60e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7771daf8-b25a-4dca-a626-1f6cd715e3b5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e4d91127-fafe-4e14-ba6b-3897091a2a9f"
            }
          }
        ]
      },
      {
        "id": "ebcea1c5-059b-4793-8c8e-e8e8d81d4ce5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4063682a-de2d-4ddf-9df3-33b4cffc8624",
            "name": "Negative Testing",
            "item": [
              {
                "id": "10eb68ba-a107-4047-b469-0bb41f17c138",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "569d1c0c-266f-42f6-a766-ac4cc0f7ffa5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fada152-a739-4cfe-a782-fd01a137f647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521b7ce1-486c-4b61-8b4a-67fe3ed1ba6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7607e40-f34a-4eca-bc0b-2c00d82f32e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "404423d7-5de8-4434-ae60-a31bd60a6b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606a8a68-3c6a-4f82-9a04-865692c18d55",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efd404e-0b11-40a2-ab90-456cc37f2ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ebd7a57-4bcc-4a0b-a4cc-fbef205acd98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87d24a93-f066-467a-bf53-00ee0db77477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37260379-2509-4caf-962e-bbc7375e33f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8235e879-8296-450a-ac39-60d0068adb33",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f69258-9d4d-4d13-aa36-6d5cd5d4aaa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59d62560-2ca4-4fce-8753-646b5c914a2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e197348d-913a-4f1a-8112-0efc906db2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3dd4b229-007c-45c3-8147-be7444303ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d123ad20-a14f-437e-90d0-a35340c51882",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6177ad7-c5b3-4334-bf83-3a38d5e6d29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0922a3f-1f9b-4b80-9476-b6204fcb0482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5472fbaa-933b-4536-b5c9-8319a588f97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f2d1c18-8a09-4d31-9ce4-f8d2ed84b517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e441b27-9054-4dab-bd67-30721c61da7a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1e2b24-5293-4424-9212-af8015877dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d307d3ee-c20b-4af9-a66a-efaebe46979e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e075cc5-d617-4a76-b517-18e4f5e86fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e89c6902-22d3-4505-b875-ef43707dc2bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9311d1-2a47-424d-899f-af1e5f696156",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e091c2-096e-47e2-aa0c-8011bbe51b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a6f233a-b0cd-40b0-a0c3-6b252187723e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2d8d12-55d3-43f3-be8f-368dfd92915b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dd3187d8-2e7b-4ae2-8431-b169eda20f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad778cfb-f56c-4def-8cc5-adef1bc4e34b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4841ccf3-2d73-4a45-930c-2b3df4d172e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f144ec3a-b504-44b6-b66d-ac26ac0557ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3e10f9-7e19-4b67-a516-6fa9738597d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91aee92b-f124-43f1-b5bf-9290a29aae57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a3a8b9-7f84-4288-b33b-82bb5905a21a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cafe2506-625d-4dca-9c32-1054d303fd15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef8c7c6-0669-4dd5-a95d-aa576a03e68a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee835068-0af1-42a3-b54b-2fb15a77535e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46949ed7-0df5-48d3-9560-b69de78910d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8dc5700-0bd0-4fa4-83d9-24910e3c33fc",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e5984f-6eaf-4b89-ba98-2bbb3c74df19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ece23edf-bb89-4647-afd2-ee96f5ddf373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b7eeda-1571-42f6-ae8b-e1115082aa9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6421eee3-0bf4-41ae-b588-e5f6abff3960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56f73b8-12c6-477d-aa19-f973f3f83412",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b12c3d-684a-4007-bb80-5a926efec42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da29af02-cc4e-437d-92d0-42e0c8f729a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95203d13-b4ea-4959-9c46-21d6de7ec8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4a97f1c-100c-461d-9908-bf45b5bf91b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa8f383-7028-4d2a-a24a-077e4901f023",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf351179-4aa6-4abe-83eb-3c5bbdfd9c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95ed6133-8dd3-4da7-9bbf-86a30120761a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "104c0a50-9340-41b2-9247-d2989390760c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb1cccf7-770a-4144-974f-f4040ef5f259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4eb758c-b9ea-408d-8acd-7e0fd7574c04",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3cd784-9df6-47d2-b3a8-eed174f8742c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8bddcc-ee3c-4f78-aaed-6ce0dbf4940f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791a0bfa-42cf-4a5b-9ece-9511e0607a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d34986fb-d973-4d22-9b94-485c411bcc09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6240d2d-8af9-4b99-acfc-2be0df3355e0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60021dfd-d709-4add-b180-1416f9fa3c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0138282d-6d17-48c7-8ab0-1bbe51a346e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f9f702-6fb3-4f1c-b457-c93c99b09412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5b44399-ba19-463f-ba3e-9f18844d0e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d85fd8-d78b-44cb-b466-140795178f0d",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33709fcd-6b39-4286-abdb-4527920cd336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "515526b0-35c6-4eb4-9fec-005fab7c7067"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfd3a14-4dac-4384-a214-563aefb1e64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec59c68-3e8b-4ec0-bb1d-ada6c8a34fd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e28ee4-9392-4593-b00f-198708165f59",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0284fed5-3e5c-4055-a9e3-1f0c84e77d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c518daee-dedf-40c9-95ea-dfcf66ede11e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e31f2c-4394-4928-b8d0-56486e850647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3143acd-fc17-4a6d-a12e-99db1a4e4e33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c401e47e-4116-4124-85f6-6e13fc2d94ac",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7773af-7853-43d7-9833-0eba73a923ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17ce1db-e639-4ff7-b71c-7cf6dcf6e6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c229d599-3472-403b-98ce-7b4599ce81b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e892a94-1489-4786-9f60-02b1f7a7d99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e896c3-87f1-48d2-b50f-1a254f417dec",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9aa4cde-f070-4570-8de0-911ef54e59cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cc0f2a6-a544-4dec-9429-97af0578815a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e5b5ef9-4ae2-4b39-ac1e-d18807218ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ec33380-badc-4b7e-a612-8b0911941664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d00c694-d38b-4e86-af23-b84df1581397",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6302b298-1fbc-4bae-a6c4-73f455f908e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab48654a-d5ee-4e01-93dc-e954384e2ceb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ba6ebb-315d-403c-bf2c-7c311c715120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5ebcf0c-1acc-4e5c-b687-84ab78a9d924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b4b910-916f-4f2a-8b06-972018c60dd5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a702ac24-9b63-4009-b032-24dd5c5dd7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd2f539c-afed-43b0-9b4d-449c8ca8f92c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0af891-e47b-482a-a83f-8494d571acfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf65a4bd-aaa4-4a34-90ae-8fac61c39783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9589fd8f-55d8-4a3d-9244-651a0eff4bc9",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9db6b40-d406-4692-93cc-704314be5bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94cea133-2789-4476-a2b4-545a8328244e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9899a6-e4a3-4fc4-801f-283f963b5e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "31110994-f85b-4806-b344-ae3cd8e2cd07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fd8bc6-ca06-494e-b174-3a84958a6e1e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b45c20-5080-4bdc-8a08-b6171b8a3fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd0f8c5a-42c9-48c8-95b5-3881c96962fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3fdac0-9768-4fb4-9c29-4d44dd3edbb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64d77c76-f3a8-4bf6-aac2-08634917dc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776b91d1-6fbb-42d1-bccb-c19853659fb2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b611c1-f65a-4d4b-a014-74641ecac3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76043738-759c-4738-aad0-a5a3c6312e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d80175e-6ae1-4389-a6f5-9dc09f1b1ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe9bb586-cdd1-41db-9222-2cf957affc00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cbbc27-bdac-45da-ba6b-de429d3e898c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a230b7-4250-4e54-891f-82895509eb38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "789ad064-f193-46ba-9b02-18161074eaeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6718a490-8006-4dc2-9edd-cc67e0fa868f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88b752fb-e77d-4245-ad84-963f8ae0a649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a68cf2e-fc92-4577-9781-fd17446e94d5",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1a26cd-2e45-40d9-843d-29d245bc314b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c8feb7-2652-4c67-be33-d6e33fac2482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639b839b-34ab-43a4-94c2-669fbf37072b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5c68325-a9f6-494d-991c-1a3aabbde4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b578d4d3-7325-409d-a4a5-13e69932e78c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea43745-a4b0-4e63-a78f-459d5650cfa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da547521-fedc-4494-b603-4cb0dd1f5f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7733c061-f91e-4e0a-a4b3-de3a4e8019d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9b1a06a9-3a29-464a-8d35-263227967924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9e2c37-3a06-46a9-8d0c-4cc2361006cc",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22aa246b-a37d-45ba-96b3-eb654102fe6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24bd8d3-937d-485e-88c8-6e05e2d38bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28320432-4eab-4bc5-b250-aa83dc97b481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "05125f1d-1a34-4ba1-8f01-423e828ee8b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6cedada-348f-4209-acc6-3982a44ebfcf",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c467b77a-b0fd-4809-b63c-4a78f3d46be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695aa8b2-f335-4166-8b2a-3cfff55241dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcaf65a-86e7-4edf-9274-66ab8f4faf0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "33efbca7-14e7-439f-9330-0863fecd5113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030e79e3-31b0-46da-9be6-9be17653658e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67972023-91cd-4a61-9f25-bfa7f8b474fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aba29d0-09a8-4175-ae89-396cb898e8a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87dafb15-335d-48bf-bc32-64bdcadc9c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e97c7d1a-ccf8-4bc9-a801-f181b0da6a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712bf6fb-2840-4aef-8365-7d9f469ba31d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192f004d-4ef7-4a28-a094-2c972341f999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7a015a-534f-468a-81ea-ca400db43ff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97622ab-c162-4eb9-a7b1-7f8d71d2b5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "defc43dc-adac-428f-ae8c-0b5c8d24f189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475fb9cd-2089-4133-b971-a92169f0ca63",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221d140f-420c-4ee2-88f5-70fcc0744679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c305667d-754c-4abd-a25c-fb78b3fa635f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8149727a-f630-4978-84b0-01c37240d205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c1ed3bb-c7cb-4b68-bf71-1beb8e798777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14dd301c-c19f-4387-880f-e044e06f1808",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddaf034-0269-4f0f-bab9-dd9c9cfc187b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5341653c-30ca-49d9-bc6c-dbbbb23eaeb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "520ad08c-44f2-479f-bd47-645f0be91328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c313adf-2aa3-4086-bdb2-04a2afcfe8a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e703b7d-53e5-4f98-bdd2-32f8866edd03",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08238c5f-49da-4376-bf8b-b499961188d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760146af-77ed-40db-b24e-7d448ca213e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c41369-2f75-4d65-9c09-0a67b4a6d568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3045943-efe9-49ae-b0fa-5fbd6b93bc1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a77807-5b65-439a-a3f8-2be3ca5922f5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1e5ca2-f7ac-40e4-9dcd-befab6e7b51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d6c91d-c148-42ea-8c56-00d79668a7a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5fa8b0-f1b6-4154-bf06-1fae5836ed3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b90532b0-4e7f-4126-b50b-ad898fa932b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdd90ce-6c1f-4701-9f5e-a6878412b33a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce963cb9-10c9-4fa5-b5af-9c3d0181cdb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e1450c8-624d-4d86-9674-045ef188304b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3701eafc-c976-4f94-9f10-67799c9bbc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b4fe7d1-7eaf-4764-ae6a-793f2a0f43f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f525d6-6cc4-492f-a323-f3aadc4b7b3a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4931e8b-dd61-4385-b7df-da666ef76db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c92f81ad-d2df-4ed8-8e87-0bb51e5f4e72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4020ae7e-28af-4029-97e8-17d5934da062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0896cfc8-4f01-46af-9d0a-8c1eba46a158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e862cf61-2284-42e5-896a-fad570fcd6f4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d232cf31-2d1e-472d-929b-afb3edad47d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "212433ae-c45e-41cd-abdb-66028407c421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09747fa1-e552-4f35-bb06-ad15ebcb15ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5100198a-aa05-486a-89b8-382e300af4ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f02729a-964f-4b85-8f73-8f8fe075ddf8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e14439-4c1c-4dc0-9485-ace1a08d3080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5320d2d6-c305-4607-be5d-baa5711d89ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac73d8c0-9fda-48fc-b77f-58921c52ef4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7de1733d-5f8a-4b5e-ae8f-7d75862c1ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876f1c7c-8ce1-44ca-96a6-d43e2c804572",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a42e90-1b40-4319-b844-f5147572ca9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5f39451-567d-427c-941b-de485e7da34c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2548f5-b59c-45de-9445-3d5b5f923ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "807e858e-4f06-4580-8130-13a76fd82d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5caeb6-f786-4d36-9462-287700c14fc2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62411db7-360c-4581-8ff6-3c1177a83e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c54f7bbc-1a16-4344-a2b0-ec794f14e847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c3a7de3-a76c-438c-a87b-166a618f1fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "872b5595-2eee-4f63-8bfa-c5f6cbf7c31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fff91d5-1587-41b3-9bc7-d34570b771ce",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "388b6fe4-199a-4f57-9894-4e828281421c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75dc6e64-52e2-48ae-b279-16481f1e0ad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15543a0e-c1f6-4c38-93a3-40e4f611ebbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "abc2d2c4-363a-4d51-be06-8a7cbc18a3a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5740161-592c-4ea5-8253-91f89c380d56",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "377afed9-b6db-4a30-9fef-1fbb4b698f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c718b170-4b86-4617-b274-1cfda0e72f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b75052-67a8-470d-9837-6485a845c946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d143acd-4072-44ab-a7ad-451beac912c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82dbe3c3-8b21-43ab-bd86-f588fb851521",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9f3135-b859-463b-bb0a-525b97b73518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21015f79-d654-4750-93bc-c88bfef90131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f73fcc2-5c40-49a1-bb0c-bdce378ad1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "59150dbc-bdcd-4d90-ab32-aaa7401fe42f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f0d617-c0f7-4bc2-a9f5-7b09d47abbdc",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ede025-db51-48b5-bfcc-8ab49c284c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25f5262f-9cf2-4641-8337-b9aa10060167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9569844a-4fc1-4f0d-bf4d-353fce5bb5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb8e00fb-fab6-4983-978b-9fea6f85e953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3651df23-03cf-4940-afe4-7b03d4060ead",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e252e5-b499-4832-818e-5d6c1f4551e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010a4ab0-0ab2-49c6-9061-c2110e1f5c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae9784ec-120f-4372-b837-2538559023ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "749b88ad-765b-4a35-a638-f920feedaa9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bcba404-8ccd-476d-8163-181923493c66",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11964d91-bd52-41f7-847a-02a46123dbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8256cd6-d3bb-45d4-9fa0-4e79d5bcfe08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c26ff6-3013-4964-b804-35fbf29bcc89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "82edf5a9-d492-4478-a3ef-687759a4ac7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680e59ef-ed7e-4e5f-a529-d45010db71df",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00a175f-6959-4b3c-a033-f47bcfbdc07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e34be017-16df-4d20-b61b-a8ca0728d07b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a067c81e-cc5a-4304-a222-44517cdae231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f98dd44-06b5-46f5-901f-415beac75cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f887c48e-1f09-4bc1-8108-3475531fbfcc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c32081-cb2d-4392-a2ba-8f1f82bbb90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1872337-f17d-4510-b56e-65a21288457b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8734cc4-dc67-4c12-87ea-8ef9241a1251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c05e0fa7-95d9-4025-b1e8-4c239aeca5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a944238-d712-4375-ad5e-99a280b3d51c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a437c678-3382-4b94-a256-c96026c13b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61aa5cf4-9d47-4235-a455-424493903936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30007f64-1204-43a1-a56c-784c2891c534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ac48207-4fa7-4684-8803-ac5b83705111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297a24e4-fdb3-4cfb-b76f-534ac5283334",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "391eb6fb-c236-4b6a-9dc2-1640c47461f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4c7f629-3bfa-4781-92af-72d6a9055276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "599313d6-e266-41ae-8c60-0af7dbb7b73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bec5d91e-a192-4e15-95bf-a179e63b846c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c5ba97-be11-4a87-a083-3b5ae84b2d3f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be723c8-81a0-4460-a430-954c6dcd2e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6db2cec0-63a7-4c9d-b221-2e517cf9dc85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cbf848a-5b98-4ecd-8695-8765a68ded7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67c0bf50-6a98-4fe5-96f3-615772d97597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366737ff-64cc-43ac-a54b-4fdd5851e26b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb9e736-4763-4e47-a029-182fc3233ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a75121c5-788f-40da-872f-346a31f64a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a105d3-0899-4752-854f-6ed805b9b3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0517e322-7975-4642-899e-a090414c1e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6577d46-ae32-4241-b4e7-cca24ada58ed",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd99086-7292-4b66-9727-893d2063a332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c14212-c05c-43c5-b7fc-11902438afe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8dec246-3033-41df-a25a-ce84eaf534cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ba10bed4-a0dc-4a2b-a860-349eff2e19a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3f531d-0630-4ba3-93d3-d905bed05a10",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b67362-eae7-4dfe-8809-6d500a09cf2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b07291a-89a6-4bd2-ac09-298c1ce9aba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733c537e-a21a-4c71-9bea-d7f822b39d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "abd82c1e-97a1-432a-9f23-8ce8b221b758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286b0c28-dc51-4d57-9dda-fc87ac7ca5a0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40039ff-9b6f-4e6f-a76e-f937b4dc7e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8b5a1b5-aec2-475a-9968-a98153f9418b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d40a50b-8fad-42c6-b18e-e64c38274a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "90b02cd1-c29f-4d80-b141-d6c9963694fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c6f3b3e-edd8-4f1e-8708-c11ae4207b8d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bbd427-0746-4940-be50-2d8a5031a81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9779a0da-113b-4283-9cdc-9d658c3bf986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a62f40e-54f3-4031-9fc8-ff2a48df7310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f653a34-7167-4793-b951-2fabdbbbd4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9ca4c6-a5b2-4588-8b74-336bcc09d017",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f87480a-7390-4216-bd64-77ba69a91e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5761b11-46e5-4a99-ab04-c94b275dca5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3d0da7-97d6-4b34-86e4-ace054ddf8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bb008c9-6431-4d07-baa0-5d1ac0e85803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0354ed5-324a-4f34-b34d-f9d7b27aeeef",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be1c11e-ded9-457d-978b-65a7624c35e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc68333f-5dd6-4658-8d26-0a36a2d0a9e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be973866-b6f7-43e8-bdfd-5f223e8175e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f29a484-9159-4ede-bd08-744dfddb7f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ec3cb1-3413-4990-a367-281bbb2c8376",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1741a5-4e7e-40aa-b8de-d15f90aa69b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14518d6c-9cb4-4098-9036-097b4770df5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327576b1-c537-4e57-a945-d50cbc436fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ca79a013-035d-4944-9a64-66b5f43f6baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff7f477-3eb3-4e77-988b-dc74bda0d14a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fe559e-9e35-44ad-ba50-565859bb3ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed197e46-0084-4098-833e-179f03962b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15b86b0-8a7b-4d5e-8807-b1bcadce3d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4535b60f-b419-491f-91e9-1a2e40ce3b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d65e17-737a-430e-a6aa-d49641663ed2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18cd6331-92f9-4674-80b1-5f0fd4125374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9835d4a4-a87e-4bff-9f8f-c8d3d09996af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c4c3dd-7d9f-45ea-91ff-2f106f449945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b79fe4a-77da-4f37-bfb4-3cb6104c644c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc875a5-c193-4f73-a099-140d6f98f1f2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39282a75-7561-4adf-86cd-250af2859b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "319b0f98-6d99-4d3f-ac56-35efa01651d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6743cdd-a2a6-44c0-a84e-f3675c012f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "825940c8-d3e6-41fe-816a-97e12d503ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f6c9dc-598c-4f58-aa2b-90aa5b8de274",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc10df0-80dc-4442-93b8-12f54e8425a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7430e6-7893-4dfb-982b-913d3c93e567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee616ee1-7d8f-4f42-a0e8-761bb26ca540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "34e831d6-5476-43ad-a346-2258be886525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e390600e-6526-46da-af0e-65093bc5afd7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28367862-6455-4ad6-8559-6e3edd2934d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d25c2685-bdd5-44ef-be2f-24cbc4f67b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73931ca-955a-4061-a973-63742c1307e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7156120-680a-4626-80b9-f82202415319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fde42c7-cd62-4422-b4bc-46d4c86bfd5d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8db46c-da5d-4dd3-a6ea-2244e527748c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36da7921-c049-42f2-bac7-2eff2dbbfd87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff6b0df6-91e6-4018-8734-ef321852c334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc6f3a2d-64d6-4dd2-80d1-52b6f8324abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc01e074-a47e-436b-aaa4-9a8bc65560d8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ceb54a-953b-4ce1-b2e9-fbaccaf1ae7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705d12b5-091a-4be5-8e56-b90f48e901d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c87451-de79-4a01-a484-b23091e6893c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0fe832e-927e-4045-8eab-50849f819f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb95454-46a8-42e9-84c1-3d981b780c4a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1210acad-c499-4303-b33e-d6c17df96216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ec1ca40-1e82-419e-a959-a0646a397982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9e4eb8-561e-41a3-af51-ed0b22fd58e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29ace848-cff2-4ce3-8df5-2fa255666513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76b93b8-d989-4b44-a367-bbfaaf943ffe",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c96bec8b-9104-4af6-a6f2-3a4cf69e051d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc42d14b-34b8-46f8-bca1-a908ee2d52d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b85ffde-bbef-41c6-9cab-92b2f75175aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b830a345-7055-45b9-849d-740e369bc0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25309e3-333b-4c42-a55a-2d9d681c3ed3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b021870-8441-422d-a593-694a2560e6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a50f07be-a4c7-437c-8300-5fec821dc7c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c1f3b2-5895-4cc7-858f-5c13acf7bfd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60fe7249-8230-4918-a198-2a7707bb2b56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90094b5e-9e89-4a9f-bd72-299c270efaf9",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18607da-17b9-4f46-98b8-2a693e27ebd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f15540-e6ca-49f9-8838-0148d7d994cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d48ef8-d0e0-423c-a37b-9f4a5531e76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "73d111e5-1bee-4e94-9e8b-241f7bd4e9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff70e3c2-3086-4ee0-95b9-5992fdf09b53",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c13861e-76da-49f6-848f-dc306393159e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930d10d0-4227-44b8-9b60-e2349675067e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1940b591-6cf7-4f07-8a36-0f82fd95172e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a41706-4d05-4465-bb53-fe3672151825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5330c7-9bae-4848-84d9-baacb9ffc052",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c79c87-7af7-430a-b812-48165660e1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cacdf1c2-996c-423b-bd10-1d02ddf66960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f300401-34a5-4da4-8039-56af672c57c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4b4a19c-b9b0-4b3b-b23a-a5284eba3718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e431e4-65b2-46b0-8cff-171e0fe5c59a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9742d9c2-0b00-4272-ac9c-51c9e438c8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05d9003c-dcaf-4e50-af7e-67daa95d5303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b2b1a0-7e6a-4c88-a2b3-33c88625d029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40d5b51d-0d89-4f1c-875f-50c59e1b8372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b73f52-783f-415f-b69b-12e2cd037e21",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "105c483b-fbf5-4175-8efc-e2033f22f95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b87369-d3a8-4db8-a076-0a41f6d615f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c500bd36-e7ff-4483-ae60-0038cd9c59fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0edead1-4e60-44d6-a7c2-277ffe69a4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "906e9f88-16e4-4d23-a5c1-ecccb6e9ab25",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b63f77-7287-4a63-b818-041a140e5330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6499075-3514-4441-9337-9a2fcb0c72de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c835895d-24e1-4269-b784-92f7742214b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7109264d-8799-4eba-968e-1879f87938c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728590a5-43e2-4445-bfa7-8f90ebfc5136",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4924eb29-a055-448d-9b54-bc110843e89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a20028f-6835-49a4-8098-6861fc7ecae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f40ff05c-6df2-4f9d-b5ef-e9594a6c1dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "78687372-c943-41b8-9cbb-02385d9fe6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a12baec-91bb-4fc1-b87a-0c717bc44f0a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f37a52-d3ce-4998-9f1f-6a3e817a33ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc15895-d482-4a8a-83a5-6a201bbbc6b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f590bc-f91f-4e1e-a52d-d17379e8aca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "269547ee-dc58-4635-b291-e8d2e70a1107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a5dede-575a-4b11-a4b6-0ca05058bda1",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5162f0e3-dca7-4acd-abb3-755830ef5d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e91be6-72f1-421a-88a6-4a369050048e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cf7e75-2a42-4527-bd86-e4dba9516abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fda95c95-85e7-45e1-9886-079e7b406533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e62a445-e861-43a1-b9b2-0b77a72dc027",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f82d44-9a8b-4cc3-b760-1838f946cfcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923c47b8-a205-4477-a7f1-2783f2d3c8e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "926c18f7-cec9-47f1-8a58-dafd01bc7986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9439fad0-b399-4dd9-9dcf-d110e6b9b9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63aab652-db0b-4398-8bdc-7ada5ef9f357",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78136cdf-eb00-4242-9f7a-44ff67f3a427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5299491c-cb07-4b12-9f61-77d9212c33ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29a78310-1d96-402b-9091-45e16de0d9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "91e7296c-5770-4393-9573-43e1143b837e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70986f4f-febe-4b2f-9d8b-db570c145b3b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd2a440-c2ba-4a0a-a041-b1a83e35e104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2902108-a752-45cf-b68b-aea5f25f9434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08174442-677a-4566-83a0-5350af368cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d809c481-5bb2-48b5-be5a-c753f8f0ce35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8751afa6-1893-4c9b-9f03-8af88b723187",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb4ee0c-3710-451a-806c-2b0e4a2e9a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4498926f-45ae-468c-a509-79fc382277d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8dfb64c-ec46-4f57-98d3-f024528eaa60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f2ff17d-8191-4fe0-a8aa-49a24b89d5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f97384-2a20-470b-a9f7-19976625c718",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f025aa4-6ac7-48f8-a9dc-8b9bbdd43001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c677a77e-3cde-4732-a7ea-aed937db78b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77d16d2-4c6b-477f-bf4d-2f659b5c7e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "af824436-878e-4066-8190-6514cc917ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1bb052-b642-4c40-95d9-7d5b8c798a17",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6926bdcb-14d8-494e-aaf5-5bfda654faf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "952fd35a-576f-41b0-951a-de46fa2e67d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2106fd-08fd-4445-8e85-7296c345ac95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7259d4f5-f38a-4fec-bf4c-47bb3dbdff52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee7fb13-b1b4-4463-87ad-391eba3a74cd",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812a527d-80a5-47de-a1fd-661d127559e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3e03de-b28f-46ca-9894-b5f13b468555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db677d7b-c818-4025-9e58-3b0393076184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f85a59eb-96c8-4a72-8162-c84e5747c7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f08901-0b1c-439c-aa8e-795defeed2d9",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836f6823-dce2-4ff5-92b9-03ddfc879cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54383c7e-0225-4ddb-8f66-0df9cbc66511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d027c6a-f040-41c7-adc6-528327ccbf72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07a03368-9aed-4800-9919-52f0c1e99782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2549b3-e260-4123-84d1-2834141903a1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f172296-a6f5-4cfb-b960-18a4f7120e76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1812145c-8204-4e51-bc4f-edd4f44b843b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41687b14-0ded-4e27-a240-78a65435a8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e22822e3-c8c1-447e-bf83-93e0b44d8efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c9eda0-54dd-4152-8716-916acac0c126",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fddfaf6a-c604-41e1-8d7a-17e4f15232c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c65550-34c0-43d6-8242-546b238bdb28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08bf6e2d-d277-4136-bed5-7181a86809ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0ae636-b857-4c82-8fa5-94ad82bbd897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b58ece-b7df-4c5e-b69d-4967011dec8e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f80449f-6e05-4c6b-9545-1edf06f14261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0605dd98-f1c8-4d56-b3b0-8ef1d618cb6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994ce13b-7c11-4065-ae14-64d53ec8c0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "73e3680b-f9ee-4851-a2c0-831bced2f473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334b9531-8a33-4b49-845e-433ed18b4ae2",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea86065-6e32-4fe4-a54b-73da5e7daa74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4d0d59b-6416-46c3-92d5-4e9512d1a2c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df7ba31-5f9c-4a28-bd93-3428ef77c6cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc105bba-5fe9-4d92-a87c-c97d0c3418b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e21ed6a-281b-4459-9cec-1c29c27995b7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "883e300a-783c-4fbb-9602-736c032fad3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f93472a-d9b0-4873-9a84-27311ec5703d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310e99d3-e6eb-4330-afad-83d3b21602bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e03646ad-0eba-4444-b870-ff8e98641b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ccb6ae-64e5-4119-a53c-dbbf6f50373b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f86704c-08f0-4663-b94f-7da8089b856a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5c97aee-ae90-4653-9fbc-e239e20d7d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcf3742f-d719-49dd-a42f-2ca249d68bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8dbd5e09-2711-466f-b377-f142ba4ad07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b852c614-397f-45a6-8ba0-3b7c55738b26",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1bdfc38-08b8-4ef1-ab0a-ba6b52fb1fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9cc6f3d-54c5-4d3b-8930-7e82050ed0e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0c8216-2567-4474-949c-c9f29149b88d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "68a86dd1-b003-4f17-bc5d-1475c2772ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bafc0e2-8332-45ee-9d6d-1eee67d3af78",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc609b8-d79d-43bb-b470-15c878795be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d235c828-6737-4a45-8b67-6829337c4666"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba4ccca7-bba4-477a-bf36-475b488072fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "53d32fe2-45e8-4f26-8a6d-2fa398d803b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3dcc85-3c69-46d5-97ce-e4d6012926b2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f632a37-0ee0-41ac-9325-16ec4f3167ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7a7217ca-9f56-406f-97ea-26ddebf9cd28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3aa9042-2318-44b4-9734-362d72620f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2ed4ce9-de86-40c2-8922-3b2629fdbc0d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8cebcb57-884e-48fb-8aed-d508e284aa7c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ea65a87a-03ce-4435-a008-118d6b47058d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbfcc931-e93e-4ffb-ab2c-406c01dffcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a65629b-d60f-4a62-b168-902d2e29548a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79add695-6635-4a47-b758-224b1c2472bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0453a340-5bae-4313-bacd-4b27b7039333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2c63b1-94f3-4fd4-9435-b4cadbc65e96",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d291550-dd94-43e3-bc64-aa0a04875d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e54ac39e-9638-413a-a6f6-f2ea5fd14682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbea47c2-dd53-4d6c-b633-155202f6547b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2497092a-307c-4644-9791-4cca68d201b0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a739f61a-d67c-4e22-b18a-ab590a20fef7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f233205-e48c-4969-8ef9-61be0f0e7a4d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ec55c14-badf-4824-94ab-24115c8207eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "384dcda6-e5fb-4eca-9e42-58daebc422f9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b326bda1-6589-4e44-a702-0a02f4f4a964",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0f393018-3c6a-4a8b-a0ba-90e25c9dc55a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f23e8aec-4cc2-4269-88b9-0c6272bfecce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0101d69e-7506-4dff-94d6-043b1a2c5c13"
                }
              }
            ]
          },
          {
            "id": "ef41829f-c94c-49bf-a6e7-7ffb8e07589f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "061efa62-3606-47cb-a803-8cf87a7a98d8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "de4d43cd-d28e-4ae5-945e-8216d9a15d4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "90753ff9-b8c9-46ec-a9a6-66b72a44c0df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cabb18c3-53ee-42de-9613-2bdc0b683a63",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "99dd55db-9448-45fa-8d51-87bb60fc9e64"
                    }
                  }
                ]
              },
              {
                "id": "43c75575-21eb-43c2-9fae-fb7144b49457",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6f79685-2ef3-4ec3-a6d0-7b5891eca43d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f5be4aef-5ad9-4f24-b8bd-f1c02b1b852a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3eff3d2-e03c-40a3-b62c-461cfa9126df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b44059d8-3987-44ce-9bb7-e50c88b73960"
                    }
                  }
                ]
              },
              {
                "id": "bf10869e-9db8-4452-b91a-b45421143fa7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a5e4a32-bf42-48d6-80b7-49278580a9bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91df2aae-7659-405a-bf9f-fbc6af190de2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f711bfc-43c1-4796-9046-052ad9531011",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5ef375b5-440f-4210-9d95-2e755f183c64"
                    }
                  }
                ]
              },
              {
                "id": "4e31dca1-fbb7-42b8-b728-bf5119a09b13",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12481cb8-fb80-49d0-afd0-dc408462ada6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a17f620a-0d50-4cee-9b56-750cb60d0b1f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0134f0bf-5f3e-4687-b914-7923d428c1d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7eae0d4d-a63d-4bbd-8d7f-2ed440aa48ac"
                    }
                  }
                ]
              },
              {
                "id": "425839bf-5c66-4a1b-bf84-472438956b69",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68ddc684-7061-4711-98cc-df269b909f96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f306e4b4-a9da-45a7-aa42-0bb9188844b9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc9d251a-f244-4af1-90b9-db7779c40f28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "160a7ad0-a758-4bfe-86e5-e2bf75d40592"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cf5a188c-35d8-4e8a-9585-a7b4a329e778",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b75800ec-2bee-4884-aa00-0202033ea795"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "991289dd-2c69-45a3-b2e2-52192dd95597",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c821d3b6-6232-481c-9dc3-a9cd94f47084"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e49857e-8b1a-41ae-9fd4-2190c5e358e2",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "368483c5-2d5e-4a0a-a327-f46a507fb5c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab67a5dd-67cd-4881-9b8f-daf8c46e1a69",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fabc6e24-758d-4d5d-8d7e-f7f1cf7a1195"
            }
          }
        ]
      },
      {
        "id": "51f3603f-5054-475f-8777-e0d20b30f746",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e98a56a0-aff3-4818-93d5-99ff7da65c35",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fb831929-3c77-413f-9e0a-2dc99ee4d88c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dfb18462-3956-4369-8f41-54a3ad2d7f4c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a76e10-342f-4f58-b436-134e41404593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7c65be0-3268-4813-9f50-c5f074fc1c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342d24d3-3257-4244-baad-f535d48d0eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c58c6142-3c14-4487-b156-740b052b2f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd05544-4a0f-4db4-806c-0450cea71735",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46491ceb-fae8-4397-95f4-b56ef1529242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb2a7a7-8473-4738-bf2f-08cb9701e23e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937d8c70-de4d-4d11-90d6-3f17c7ca4e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "11c466ca-c622-4a50-b534-6a7373662e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0eaa07-acac-4910-85aa-fe08b423d245",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adccde32-9985-4499-ba64-bc682b0aca4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d768d1e-ca27-4bdf-ac61-1324d0bebb2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cec143d-2661-4421-b77d-34cd7d333e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5565598c-220e-4c0d-8ed1-327dc5466fe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae0239f-5db0-430e-b413-f09128a705dc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4baa4e9-3322-4a19-9636-1a1c1b3d6799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "494a8a1c-cb71-4474-bdaf-d82bb349a132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85feaa5-8e07-441b-af81-a63f1ce45ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da225132-cb62-4e90-87c5-c5f0ff0c644e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47411b04-de19-4988-a874-109fa11ff126",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d5fced-b92d-43e7-b74e-4a77f7f761aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ecb90e-9a1e-4268-84f4-36e2d291fe4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4430ac84-1216-4e56-8767-944fa2d98a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b1b108b-5930-4cd5-a05e-0bdfba013041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ec3866-7373-4e1d-a6c0-f4c8ee089966",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff03e7b-02ea-4e41-876a-81c829000da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b87cf2f-0dca-49d1-b98f-c03032b2a67f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e225b8-7ba5-470b-8f26-279dc451af62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b0eeaf-dfb5-475c-b645-d0ef43962a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701c03cf-8085-4d60-beb6-b7887b478f58",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e7f621-d717-4e8f-8477-730bf79df42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca84a8a-c9c2-4bab-afe8-ed97f70d8513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ca8092-94e8-4fa8-9a45-d8db0eac4a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9218d6a-685e-4a9f-98da-f91ef24d0980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4708647b-04ff-4e6a-abe4-97d4b60c3ba6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b61118cb-5f5c-4b12-8ba5-c0a4c9429193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9e975e8-ddda-42c9-964f-92a4e9945257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26bd0b91-77e5-44e1-81c8-cff6e712e5e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7057c1c1-8cbf-47a6-b120-6639597f2608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebac4834-9b6b-4749-b329-2517ceab06d6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6984f87-885d-4ca7-b3a2-4ac7bb232655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fec91e9-6e15-464a-ab17-3cf30d12fd85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f51f70-5d29-4ae2-9e7f-ad08fbd1f810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "460d6a8a-7616-4d2c-bc29-1bdc109ff8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207d9c53-8152-4740-8bc0-49347225f60a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80cdc5f0-5408-4e70-bfcd-479bb9e6c6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0437f729-f9a7-41d8-8ee0-f57d8664c32e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408fabea-5731-4db5-9802-9dac975cc348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a734b220-7371-4bb7-b5da-991fee6d8681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4999fae1-e3a6-4de6-b822-09a31e0fa068",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a51f65-890a-42a9-9928-fb72049c4869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0628014f-7f56-48b6-8f6e-7958fa819c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a570a7a5-d1b5-4cbe-a9ed-848447a80320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6ceeb35c-6a28-4b57-adc7-dcecf58305fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb5278a-39e4-4cc4-a95a-01ea8f5921d1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ee11fb-96e4-422c-93ef-0d1146dfd405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd6e1807-3e23-4ba6-bcd4-e1dc1053f4c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9d125b-023d-4492-95ae-64a92a1ff328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "08a878c2-4d56-491e-818c-5d69f5c99833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d6c295-ef83-4656-b97a-d33caae1c67c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05ad662-0b2d-4adc-a8a0-778a9cefa166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e866b0be-fa00-4060-b8a4-ac9bd4763c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935eba8c-001c-4885-a899-7efa3bfe524d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b71ea43e-af0a-4da5-84a0-2d9b448b23d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925bfd0f-0959-490e-8654-8173a30c3dd1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20126714-6b97-46b6-99f5-5d0a1d43a177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d550ac-296b-4ca9-b606-10d32a6b1c71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9f3f9c-f40a-408b-a15a-323e526b2076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "be4e3d6a-2c05-483d-8b1f-e50843f09586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2caf3c37-0c2a-4760-ae1c-0a05db2852dc",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ccdeced-3b4d-4865-99fa-a20eef6d3842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f028a8-18ce-43b2-9c67-903a241a86f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b06d78-199a-43f8-9876-fa42d02c523d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5760974d-dbc2-42a9-a344-d9b1b3bbdf25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dde438a-2cbc-4ace-99ae-9af86f6bf128",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ddbe4eb-cd1d-41b6-bb55-b6d4491238ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a515d8dd-812e-4a18-9ff2-6c34dd430c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aaf8f98-b981-4b34-b97a-cd0d7b98fe94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c97a053c-cacf-44f3-87e7-0d2b18ed01b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc58bb1-c8bc-4bb5-9a98-ca2529ea223c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077fbe5b-2015-4da5-8a11-c0b920f64b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d13961-4cc7-4fcc-8231-6bb9f9807b68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d0e81d3-e4b4-4f7c-a469-14985d8bd086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "eedacd8c-6b20-4439-bd36-de47ebd5aad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fd4190-8611-4a07-b6ad-b81a03789092",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6cd790-4443-4ad4-9209-86820cd4b218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c43d1a35-7218-4c7f-ba57-a285d555b981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf76af1d-e70a-41b0-88d5-54afaeb8d9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1720018c-c24b-4e7b-821e-737f3e65bdc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0dc286-1fe5-4254-851d-bf6b39ee83a0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916f3323-28d7-423b-8eee-eb41e4acf932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833e0e48-f940-4408-bd46-7d91c8883a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51dbeaea-1727-4167-97a6-95c11f35ba90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98fc3a55-891b-4f78-a8d6-c85e5dcba3f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b166bf-1c43-4a0d-be83-4a39bfe324ed",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9100da4-5678-4c30-b946-fc525a3131cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ff8b75b-109d-42a7-9195-cbaf448ffdc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2e39bc-04e0-4ccc-836f-863dff5d60ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b2f6b77-4b16-4a23-874e-bc2d33734772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53582715-6b30-4a1b-a2ef-ad6ea4194a84",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f121ad04-ce06-40a9-9bd6-be08f8098a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f9c655-ac71-4579-b115-b1d6cd7aa7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49240962-1e92-4a26-9308-4efec1d7eca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad7b7363-24c8-4a11-97f9-c15ef7839bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816d41bb-461a-4766-b833-2a8330ecd729",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62265352-7f64-40e0-b52d-f5fbef1b8283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8977ac3f-00a1-464c-94db-74e8a8fda080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433da6fc-24ba-4690-9482-2caf5a31d765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f88df741-5874-4319-a696-17df398c003c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a75219-9e51-4b7c-9860-0d8cef9573a5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e1fcdb-7e7b-4c52-9cb3-a526a5e778c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64db2213-0a25-48c3-843d-8bc166d70bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0594d22c-966e-49dc-9e6c-e570c2fa77ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42fa5edf-69de-4e0e-b5fb-e1f663d804c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "687b0582-3188-443e-8fb4-915bc6846704",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5f1895-84fa-468d-b8a8-d6ea76c9bef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0061591b-b3b3-4db0-8d9d-ebe413c20a66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba72ba5-873a-4b63-8710-c03121391895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5295ac5d-cde7-47c8-979b-b63d6764388f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f51c38-19f3-475a-870e-6a37f237ea25",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413d1754-a3b3-4686-9758-6f0c35f43dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77539ae7-e219-4da8-981c-4924bf6ec5f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2db49a-3d50-485f-8104-430f5f8f5c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5333d3d-f9f9-4eee-b1ca-e4df712edb77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779c6b6d-aef9-47ae-b5b4-96123eb0f956",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b2023f-5620-4994-a9d8-aff052dc1f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5640da3-5f80-4bf5-add1-f6abbfc72287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4aee39-5d49-438e-be17-d13a8742cb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d263ee30-fe7a-41cd-9c49-435d1962c9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30eb08b3-bfbf-4d33-843f-e36b0a7975d9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69540e7-b83a-4c74-92a1-bac84d50e72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac5f92c-104c-4c8b-a3ae-55fbe54da31e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb65099-9950-41ec-a0d6-879376aba36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "247512bd-f8a7-4e45-9656-4361c17572a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295a12c5-83a3-43da-b1f1-3552ad4ff589",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c54b41-fe9b-4ae7-b7db-6b6ddb8447ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceaeeb85-8e9b-4c74-96b4-59625d3dfdd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd0ccb3-3133-4539-aa4e-fa0966614b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48d9d250-6f1b-4cde-9917-61aec815b06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68893418-4333-404d-8dda-97bb4511dad7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0353948d-3e5b-4085-ad81-e6e6498eeef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b434d469-beaf-49d8-b948-12c9b82b8bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bec8573-d6ad-4f38-a5fd-fd1aedbae221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd91c638-a216-4e98-9eec-18da4c5638d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566ea00b-a511-48ec-bf9e-5ca073b5a0a7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ddb435-d161-4902-b742-0701af055575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de38f5aa-4d62-486c-a406-ed6e0a28d6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd433a3-1590-4e2e-8196-cf2f1b5d907f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18b8deb0-5654-46de-9d25-4874b6142244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacf2706-74aa-4f60-8c09-280d891bb350",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70027e6-e30c-4f73-8d64-a226870e4add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ee1d41-86ff-4299-94d5-b8603c416c6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2435d61-2330-41e9-8f02-d2916e40349a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2edffa7-8f80-4753-bec6-fc0377235c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a374996-77ea-417a-832b-60e3d53f3c01",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2eb5c3-1135-428b-8559-c53ac9037515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e74b3e01-8832-457b-99ad-66219ab518a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763bd585-8dae-428b-85c0-52ffec3d4c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b9acefd-b0d7-4bb7-a961-32ed32ed20f5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ed93c644-e4ad-4ad1-a6a0-63a4d0de873c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "54e9e8f7-8c35-47ef-935c-b333401584d8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49826f6b-b20d-49dd-878a-1fefafaad64b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33818613-ab2a-4fa2-afea-1c078a7d9865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a270727-fb25-4c4c-ac92-a95a94ce8492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2cce780-1049-44f8-afc1-56d5d2e7b6e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec194935-e2f6-4a53-a357-9aaf3520fecb",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46657732-8cb8-47c6-82b5-511692307836",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f62dda86-0718-4b75-8e52-b090f65f9659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61f54b8-1c27-4d41-998d-96df4d8aaeb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33cf483a-7a2b-4d76-af18-f59eaa761dcd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b105bf7-21ba-4e5b-80c8-1335b34873d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9df0611-ed13-4fac-af22-41e06b9c036f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4e92fb3-42f9-4cb1-8c94-651e8384f19f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "095d3c6d-f12f-4476-a46f-a14f8754bb7b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a72e2f0c-e8c7-4304-9f35-d430a78795be",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cc3c76e1-a35a-498f-81c3-a37e26758a9a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65d8146b-005f-44ad-985d-8e2aa78cba4a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95ce4d12-5340-4243-8f4b-3c282e12456a"
            }
          }
        ]
      },
      {
        "id": "2352ae8f-6a03-40fa-a42a-e3b3d28dc1e2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ffeedb50-1702-448c-9a95-f3cf3e4689a9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f253c384-ae22-4ce3-9a85-5b9cdf4b85f3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f5814db6-4129-43d9-9b3b-adbe6b3ea04b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf532d9d-0c0b-4685-9357-7b49f1c04bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c977025-d0cf-4ade-9396-bfd2912fc2c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88857762-fe7f-44dd-8780-6ca6cebd9ad4",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a312ee6e-84eb-4146-91c2-0610bb770ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f295d7-2d86-460f-823e-ae44b54502ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979d5e6b-11fe-4a55-a49d-6a087b94372f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16eb457-206a-4a15-8d7a-73903836bd3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0b3db0e-0b23-4182-8aaf-708d4cd867d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34a53de-15ad-4010-b7af-c4e7aad73b7d",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760322f0-5f8b-4502-b11c-b3884f9a6f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd968c9b-2b7a-4fef-bb51-3dee5b6b0fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f7d1d8-1054-4566-9a7b-2b36289b5059",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17d4c32-3341-4808-9290-f7840f6ffc0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "331c683e-edcf-4be9-9ae3-21243f57b5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7b5c8d-16dc-4767-b487-2f0f4316418f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06918a8a-7c0a-40ca-8f6d-6dab3c024951",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d0924b2-d717-4d3a-b47a-6b2c3ec3fc7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b95001-9926-44e4-9800-112713c01061",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67db8534-a371-478b-be1d-18d504f0e1c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12fdc4e0-14b6-48b9-b06e-9dd33a691844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31de8403-1b43-4971-aaf5-2c5a61a1f016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691af607-b299-4931-a9b6-66cff117f745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ee046e-65cb-4365-afbe-10b76044d785",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846bb9b7-f8ef-4da5-afa1-e3b274862a19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "111b3884-befa-497a-8b3e-e8def5b7f0fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1548f5-4b17-4992-94d9-780a45ac0704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbb6688f-3ef5-4bc6-9ffc-f4dcd7f0f9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbcbdf9-2303-4b7a-a1fb-f38f03154263",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76023cb-35ac-4916-ac0a-214d1268c05e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aef032b8-2234-4112-869b-720774f528a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46f504fd-60e3-4e72-b4a8-3e017feba22e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78222210-48f7-4f99-ae6f-04bcd3713024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40639491-f4f9-4258-a589-310b860b2ace",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b4c96a-5699-4d43-a1f2-bac6779ff89b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa054ebb-c95f-4f5d-a376-e6bd598fd784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9514488a-cfc0-47ec-a81e-361b4e3bdb5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8abdebe5-f24b-4abf-995a-704d5b87e2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53779c6d-9ba2-45f2-b3f0-fbfea46a668c",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dada4e8-301c-4882-ae65-9aad8b642994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "935a35f6-2791-4bb3-9167-2234c3f46781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb5035b-16f0-4272-b4c8-05f3585e3496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c62d578-20cf-4167-aca4-844881446961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208afe77-13b4-4afb-9dd1-2b792eb31d89",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e83a5a-dd62-4a6d-a606-0f30f433bf2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da94c54-bdc1-4985-bc7d-fe8ce6d2987a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "479cfda2-5da6-4ac5-8187-072de948f95c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0d1086d-39f4-4f7e-8b0c-60c6cc1790a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3279e4-d885-4f3a-a629-85f7e8ad5074",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db02b793-0611-4a7f-871c-c1e39a5f7e33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7199119-7e8d-4411-8eb9-746ddd886cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba4d35c0-c987-4a46-a6a1-c119938a80c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98652434-6c8a-4b4a-8120-cc090bc9e014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28ef6b8e-a61f-44d9-98c5-1f3d37b58042",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8625d6ab-ddcd-4895-b834-97c8751bbb5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cffdbd2-5eab-491e-97d7-899e6ec11b4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd50ada-866c-471e-8025-77508f48e099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c1d2439-b113-42db-8fcd-cbdd72132dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2ae30d-06a3-4397-a554-97fdfb92bcba",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec440bff-96be-48f3-b786-bcbbfa5bd767",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d4282f0-5764-405d-bf38-0a0d8abd1882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf58ba3-6fbc-45c3-912a-630c47040270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e49141d-bc7f-43ea-96eb-19212fd420e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ffebe4-9df9-4399-8ff2-2d749e8ac7f6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b234d8-15f2-4e4b-90a7-8d55fe459483",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e771a7a-bdfc-4e8d-9f0a-7a451f7ec13f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8a370b-c5ff-437b-8130-51b59aef0782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aac0800-92ab-4165-b565-cd9b33275b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61470b2-2777-4be4-a607-da5eee0134e1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4acfbd-a812-4b81-b833-484bef3481c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc5b21e5-3cf5-4786-869a-3700c1ef14a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c86644-df89-4045-98a6-ae57784d1cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ae71ea-9c1f-4876-9c55-4ebaecfbbbe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366c0591-036e-4a32-9ef3-c38def2cdd5d",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f32c410-15ec-40cf-b93b-6ed631bba201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "355dea0d-f815-4bb8-9ae9-8cf35a4e6d76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c24413-46d0-4f51-9b8c-5a5cd2059c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35269a1f-7759-4307-b76d-dc8d234006bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095c885d-6749-4470-a1e2-cab515067d9e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd44464-fa28-4e36-b8ad-5a5bedf55eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d2dc5f9-46ce-4b70-9d16-431273482b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14be0a7a-b957-40dc-9d8b-d8196a0db7e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7e56f5-1939-4905-9fa7-9d30e60893ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda80b66-e73c-4b51-a5df-ada40764cf43",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef30e0f-7f97-4853-a4db-c490459e518d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc977a91-e16a-42ac-8866-73920747db99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c690d8-ad6e-4730-b808-a43c0527ef1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c042e8af-09f2-4769-8ff4-72b1a8c26beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4f2448-2c58-4771-b586-66ec39e2702b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f14c31-2a80-497e-887c-3eb888d0b23b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9ede2b8-0fcb-4070-b077-c737efea621d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae28124a-919f-43ce-9a02-522487272f03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888931f3-3ec9-485f-b06e-1fca78ff6001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce406bf3-09d0-4b26-a770-83d2de17819a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b56b7a93-85cb-4ba5-8cf9-305d9ac557fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbdaf76f-a152-4340-b984-05653930c189"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f2233b-577e-4ce9-9f9e-56a186a27b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c4a22dd-a38f-4bd3-838a-a5dbe495de33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ed68e8-9e2c-497f-a641-d9652121f5ed",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073a35a4-3361-43ed-a06f-42c4f9ee78d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd1ef54c-ec79-40d2-ab7f-e0e9f4bbc19c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b7e059-93ab-4145-b901-f31dcc8a67a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf20866-58a7-4c01-9e24-35fa712d5796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a133309-9a98-427c-9306-551eeb83d560",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e86524-be17-4dec-80d7-da2f958e46e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1260348-5a23-4889-a897-915f8ab5c4f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4b9627-2592-4572-9288-76afe6aca55b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dee94cdd-5a7e-4fd8-a6e6-799744468335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca22cac-53da-4927-b668-f9a6331bc245",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aeb80b7-27f9-45bf-8457-6bd7f87428b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f89a65f-57be-4b0a-93d0-11c1908af269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d008ef3-cb5e-4240-b18a-d5ab22da0d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e996c0fa-e3da-4f35-9249-f87364a0e0fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a40122-d742-4ab0-b92f-490ffafb45f1",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc3274c-5b06-45c0-adb9-681096fc12c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d12ce0c8-1ffc-4444-88fe-3b55f14ad475"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f9336e-93a7-4a11-bfb7-acd702760162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c5a735-49ca-4207-8a89-db368c1e2320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b08114-57c2-460d-a0e6-df015f89e9c5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb48acf-7519-4e54-a63a-45a03c46b1c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f18647bb-4940-4c85-b5bd-b253699acf91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b65cbd5-264e-4154-ab8c-53274219e475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40792488-f205-4cb2-ba30-19af21f1630f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758669a5-04e9-4f38-84ea-8aa66da5d242",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89bff20c-90cc-43de-a3c3-6ca2ceaa363e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de68889a-8c22-45a5-8fc2-4b1926d66a50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1a7c86-91fe-498c-aa0b-c7eec4393c7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c3ad1e-8993-430a-8c4c-99f96f1e28b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36397199-846b-4137-bd95-d80f57581d1c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21656694-484a-4020-a0cc-a36ff01eccd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8e8cb38-4821-4121-a00b-9bed81a4bbf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87d3896-26e4-4018-b5fc-4761170dc6b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898b14d1-aaeb-4b60-87a9-ff0512a37ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eed61be-ec28-4e36-a395-185b057a8004",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407baddb-54d2-4c62-be84-58981a3ce8d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa7cd4ce-8eab-4d1f-8817-09a2f8ca56ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32eb526c-d8f5-465e-bf19-e334944338eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2547a8c1-a362-495c-9456-5f537b736057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bca27fd-ed3e-41ec-9277-9d95dc509a9f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5640b38b-8167-456d-9164-7d3614a14754",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2ba6759-1fc2-4d1c-a848-24117c94e673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01364ea7-76f4-4ee1-b49a-611cb4d472ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7283633-42b3-4e61-90eb-da387d56cdc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84acd70-ccdb-4d7f-9b85-f4c8b18b34b6",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a23fa18-fef7-41c4-b6c5-c3ee6ac848aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cb78676-f4a4-44cd-8161-953fa562ec32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d31e54f-7d4f-4ebe-a510-5337fdbd8e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1cf2cbe-aa75-4399-aeff-0e63b35bbd2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c2ffd5-9c86-46fd-a7f0-a76ea97d6342",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b73a63d-854c-4eb5-aa4c-e8b82a83be4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56dd1c87-50e2-4d37-9df5-d1e8b9cfc222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa47238d-aee9-4b06-9c91-f05d54b70b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b982453f-1e91-4f28-a689-023c064f9fc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89121d3b-91a5-459b-b6c0-4496a274c62f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03f9b78-d8d2-4ef5-b1b8-c69b78958c0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e18b49d4-b4d2-44d5-953c-de90c1dd701d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484fc145-fa7a-4dd9-8663-3027139c5391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "225cf06e-58b6-4e54-8128-22bbe272db81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f460208b-fd83-4c15-98f5-d32cd5e9253e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f10613f-e6f2-472d-9a16-94c9b968501b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b2e28a3-4d6a-4417-8ea9-f76c8b514f42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "051f8639-1595-46da-b9ef-092189c2c8a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4857464-d864-4261-a9c0-9d6307ebc40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec48f62f-5e20-4e39-a437-5a7aa23f1b49",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb40f32e-6ba2-482b-b56e-1ae0f300332a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e63cc7ff-6893-468b-a59d-f0f82cdc04de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee1b66e-2e25-4fa2-ad97-41b36cbce064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64925ff7-5889-4ff1-9440-78a870565149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbeeba5-eada-4097-9783-2a0ff6859114",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3789f85e-5240-4d83-89f0-85aa30970da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9deac6cd-bf0a-42a3-8865-aaf97e82bffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d16bff-9c3b-435d-9b7d-c57e4fc884d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b0832a2-913d-45e3-979a-89b2d819feff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b2cc2d3-30c8-491e-9177-1f3ea747bf6f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "373f1fb5-e60b-426e-b092-e663b7170517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e563681-d046-4d85-bc8c-61b75b495458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f83d6c0-7de6-465a-9b30-eb4ad0931abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca570256-3121-4204-933e-a5028523e9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4e05ee-9025-47b1-acc6-c9dda23bfa4e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3914c3df-69ec-49ba-8e8d-a6a998a69def",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33a1d2ed-ec89-4a29-8f00-51b6d08a5a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b40db22-e8f0-4787-a51e-473776045987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94764c2c-500c-4632-968e-cceb7496b777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5cab9ed-0602-4f6c-9b7b-3267a97efc1d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343125c8-48b5-4ece-bd57-73034e5e2142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dff004a-94a3-4ab5-a236-50b600775e8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "613e5eda-89d5-47f9-9bf5-dc37b350e65a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71c41222-0b5c-43d3-bfeb-cef8d2113bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5acc0fbb-e556-4705-af0c-a21bcef3339a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6ca69c-f390-4e14-a043-5e11a603186b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78996be9-1fdc-4b25-b3d6-392cfb2919e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01967f87-3770-4853-91d4-b161dc71fd79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d26693c8-7338-4ad3-8493-5ed1fbdc96ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c866c4aa-2f97-4bfa-a634-f7e443e5bdbf",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecbd9a2d-96fa-4290-bc82-2f861fba6f83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f03ecc61-2e3b-4b3b-854c-80de35e79660"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1eddd28-732f-44c8-a70f-e5771300ce78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76d5e3e8-9554-4da4-9bb5-d606ea3fddfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68c820b-ddab-44f4-9c31-c06e29fb174c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82d4581e-cd59-4a2d-a654-607f7de461af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a522c4fd-78f9-4174-b719-29dbe4fe09b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d1611e-bc72-4161-8df2-a16f9fc152b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd7a008d-baf4-42e2-8063-afad8dec214d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc23baf-1849-461c-a0a6-99f6bd8fdc2c",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f3cd0e-4ff5-472d-bb26-4bc815779ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc79dcd7-70e3-44bf-bd46-2c0517c8bb57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "093b6fa8-19e6-43dd-9ea9-5a1ca94eaff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57aa2315-a9bc-429e-83a4-db5c727be2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8f86f5-c68d-4514-8912-b88b63ccba5c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e5cadf-f352-4baf-a77b-408ee5f90307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1caa50-be69-47c4-82f2-21337680c517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60db6853-b54d-4d42-9e52-5a3f0182b8db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb48de2c-099b-4b8b-b63c-b0e547fff23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0026b484-90a6-41a6-bec1-cc730d43e11a",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d7626b-5189-431c-8ef6-25d4bc55f94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb88172-0127-4c27-9229-a557cab39d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5ed6cc-4a7b-430a-a6ef-6e5bf37870a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f7a166-c65f-44cc-9fd1-cfa25ea1fb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605ba5e4-e08e-40d0-acf1-e430c63c724c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b016ab-fafb-416f-b97b-aa8515fb6900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e3d2c8c-06ec-4ddb-aef9-b8bc1091d289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a1f8c0-5f62-4349-892f-70d947a8ab73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48087ef1-25f5-4a34-a0e1-1e32fee342ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f558b29-7b64-4b29-abe0-f6a9c8a98241",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15e001a-acdc-4c01-a40b-640b7cb7c60c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "927745f3-2618-4c89-bf1a-26319f79fa95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f69ca91-3399-479c-9f89-ddfc0068d716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158e3050-493d-4eda-8bb3-ce24108531e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43846504-95ee-4b50-9afb-eecc37da9627",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bc8bca-1c8d-46bf-8679-642d6608c873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f5ccb5-3fc6-4155-b917-536883183040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de64ffef-1553-448d-b97e-8d57df63b3a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b132b47-d217-4be9-9ba9-97695380f0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a957e2-2f0a-4a60-880e-6871229f24d4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb535a87-8fad-4b65-948d-b94f3d6b5cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a581c924-482f-4e29-958a-f5803922668a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02dc820-fbad-404f-b2b7-4ab4c86e7c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f229037f-c18d-4659-ae43-6d0879f192c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "841eddae-6cbb-4916-b58d-bb933c0c1d20",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41eabce1-b741-4e1a-b746-7393e8ecd4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0edfda6-7077-4fc9-8fde-23e021b0cb86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c580a4-ca6c-44fe-ab0d-baa3fd305c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f95e9e-735b-466b-91aa-78374d75e0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48325963-d344-4cf7-8289-11ceffc9d795",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c18ba0-65c2-42b6-a8bc-82225e99be3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dad37f5-73e0-4e3e-9411-0c2b10756483"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28dfb62-44b1-4daf-947d-fae233bb7e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "229c4989-195e-4aaf-a26a-9f5d41737598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2601a0-7b12-4abb-b2d2-f44ffbeb0377",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50edb7a-20ed-4fe3-9dc0-d96f3fcc88e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b6f103-2931-4034-ad9f-f8b9f072de29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0b78e6-806f-4a68-a18c-39b756a40cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e131da-c77d-4779-ae3d-2e2a760fe876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec0c3a0-c73d-4a44-a635-aa8a447ac3cd",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eccfeac-44ab-416c-a661-acd17b58880c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346b3033-b0c7-4c13-b5f6-e19cbccc7e76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ef498d-961b-4610-918f-630892963232",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb2f7938-9e87-4bf5-841a-223fe6287ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5349609f-78c5-4c17-9118-09cfe2504cfd",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e461ada4-b1bb-438b-8b6f-96a64401e487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be69db8-77f6-4250-bc17-e742216b2220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "928a74fe-703f-4db6-b5fc-a331632276fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481ca6e5-057d-4aa5-bec6-186bdfe8df05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74143765-23fd-4ee7-8931-c06901191bb3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf3ff7b-b0c5-4eee-b0fa-aeca189c27ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85ec429b-f319-4525-92f2-59e4a3f9b5f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3758bc27-db3f-4c78-bc2a-aa0001a1bd9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e71f5b0-3770-470f-882c-34ec768c7804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df01c04-93e0-4daa-a0a8-a6a29e53c7bd",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ea70ce-2d16-49d0-a696-703770981b2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "887125c1-b397-49c7-a334-c46abfb876fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd40f71-e205-45f9-8436-438d924cd181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e684eb-54bb-429d-a67b-9c0f0ad7be88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62ed02f-defd-4755-aeb4-c2205c92c388",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18440fa-83a6-44dc-992d-55a7dc7a0555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd772b99-5e71-4352-a6e3-acb53ef6030b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cfc3a9a-980f-4135-aa51-207e3ef25ad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3e9af8-4108-40b2-a166-3502b54dd5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f480e71a-339c-4789-a2cc-d3048df7295d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2d2912-6d94-4612-ab63-ac9f8e4a808f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c5222ab-2970-4ee5-9814-faae1b697e94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d38db2-a77d-4a20-b41b-94062bcea8e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70e58509-dc41-4321-94f5-8939f2ff53be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd33376a-da12-4208-88b6-91ee97734311",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a507db-6335-4b91-a04f-8955d1407356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80cb5c1a-e831-4727-9f90-053ae9f3b263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c274db4b-899f-458a-a080-2497e8f6cde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "958fdb0f-82ea-4e19-9a8c-90431ba65d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fa287b-1e79-4251-b0af-2a1c19a9558b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dd8d9a5-747d-46f4-8427-ce83c57ed582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e72f4b-3769-472b-a6e7-8ed189480408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2496b01d-6ada-44d5-be59-d404f2b26566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b856978d-d39f-4b40-8c4d-130021d4ec25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f1f77f-73f1-424b-84ff-696ee2e1efa1",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ec28839-b54e-47a8-af01-4392839d6412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d49f4270-3363-478b-9dbd-1b149c63b6d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae2f21d-a1a1-408c-8dbc-3dc4802e152e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b0834c-7ebc-4dd7-90cf-3a1a0bbc3274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10f65a26-b9f1-49f7-95a4-e0b95b1fda10",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97219f5b-06a9-4f97-9912-9bd86fe12cd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac160b32-bac2-4576-b279-138ffce412c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "601d3678-4b90-4818-9e35-adc62c77e10e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac8b1c38-bc76-4f2c-8b4d-e4c1f5f75fb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545f1fe9-7b4c-430f-8793-95eb7f24b481",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e84fc8-9c7e-494f-a6d1-218895b64017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3e6a460-221c-4e47-be3c-d575f32c08c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2029db2-27a2-42b1-8a6d-afdb03bba7cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7231ea44-fdc7-4eb4-a3a4-ef15fb272fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe912aa7-db84-4a6e-b384-952294f027b0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954104d8-184c-4bba-a21b-6c4c2324e8f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d45c3931-d7c6-49ce-aa7c-ae0bed7cec97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b6d8d1-edfd-46db-9008-2344212cb351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb7bd1d5-8072-4727-8f14-86fd112faed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7fc6a7a-38f7-4fab-8b03-c6ff262c9ac5",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e676a95e-e230-4f63-b91a-923d61338c68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92a255c6-359c-4b6b-a177-b5f9cc21dd9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df6e842d-77b9-499b-88b6-21bb73f20baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f4558c-ce3b-47a0-b234-931340cb3504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc2dfa7-6b6b-48ca-99b6-8ee98e84d1b3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33dd9bc7-177e-401b-97d5-144ac56b122d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4619a41b-f0eb-48b3-8180-3fd6e58011a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6c1462-b204-4047-9d71-8b29619efd61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "764b04b1-24cc-47cf-acee-2042919f4411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee257f3c-f744-4229-9449-848da56161ea",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae68ee5-449d-4639-b922-1f734b7903cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "826f234e-a808-4605-b1d8-98886e65952d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9daa5849-460f-4afa-ac7b-f9e85832d029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66853988-1f77-46f9-8818-b2d76d347060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a88f9b-169d-4823-b4a8-9cc976f22c19",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6a03a6-a5da-4107-b49c-598d1690494c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0706d403-1043-4b10-8673-ccf48c81991c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f202463a-880b-4ff8-8f3c-4288291ef90f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758f491b-1088-459f-ba7e-14da9ab3178f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bdbb40-80b8-4fc5-87c1-f310f03c29b0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f482a4d0-f0b9-43be-92e7-4993377af29e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd430f3e-07aa-49c8-8bdf-6d061935e12f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b26ea5-b586-4793-9e1d-93a6aa6aa101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5e523d-0553-4fe2-8a8d-7e5a70ff4ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e5e32f0-a5e4-4425-91ce-ca245eb204e9",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50519c8f-d085-48d1-a843-c94be3f62126",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0deb70e3-8de4-4cd8-bc04-bfd20b0b2ae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90678195-3c91-408d-8b47-0780ac799795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9d5c5da-8a08-405a-a76c-1f6d7697a667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da31546-4db0-4e92-9ef4-a6c0cfdf76fe",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d002eb14-3c6d-42da-bd99-8aa8e0d517f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fecd7141-4c39-4a6a-a351-4643ff47a82c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c881bf-0394-4056-b563-528e2d17bcde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "803a0d4b-19d7-4ce1-8740-d5297c93b808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f2801d-31db-44b2-b123-c89b9a9f28a7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb593a1b-34d9-4e60-a4cc-ee94d7f2c143",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d63b63e9-416b-41f6-b097-c937b261c582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4987ad-0934-40c7-afc8-219438ea9b26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bec874fc-bb94-46a2-81b3-5d608899057e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cc634bb-7b74-47fe-b361-54c408686331",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c28910e-d941-47c2-bb39-1a93b3206ede",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be738a6c-cba5-4f60-85ea-b816f8c1c888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79aea188-29df-4205-9a1b-c3514886467a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2117f08-9b9d-4cbb-a5b7-54b4efd05fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3ec80e-949a-4848-a7de-2c70b323b3e4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffc9b85-e8a5-4a07-af1f-e7ef768d1d09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76c9ee42-d94b-4adf-b92e-0285fd6976c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3bc91cf-5b73-4bde-851b-f1c4f68d3dca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a9ca8cc-fa7b-47c1-a17d-9dc750433c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93f8206-6179-4b4d-a720-418b559ad421",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89e1c85-2980-4326-8170-17bf3ac9b69b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4958278b-34f7-450b-b4e9-3d766c8e1ba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2005c15a-2312-46d1-a812-c1b0e30f5ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4714dfe-d7df-420d-8130-aaf90a130889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e744f4-0518-48f1-91e3-fb6506a334ae",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ba940a-c6bf-4536-9806-0ee992a0e7fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71fb8fe6-b102-497e-9a7b-be6aae587402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb9a36c-8703-49eb-8057-9b8eabe5af57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "546724b7-5042-4a15-81f6-520283544ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05764521-88fc-44fd-9b5d-40c8034f026b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f3c8d3-439b-43a7-8daf-16756b9a0f72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bf0d170-2969-41f3-bd49-6e04a37880b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e945428-9a19-4fbd-bce5-a269716a7d16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5b5046-3944-45ff-b74d-4e93c792b54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540423c8-bd6d-4f9c-b781-cea18afcf215",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1169ca1-cbd0-4904-b733-e2021e6894d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b27dd6da-549d-41ec-b1ef-2bbd8a1b08b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c00af6-fc3f-4326-a125-ec044480de25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94aad8e1-f23d-459a-934f-5fa8d1ea2452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b41f85-b6aa-4995-803a-22790334306c",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722a17d0-1647-431f-9f2a-0873649bd65d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99307ea6-3c24-4c84-be7f-9111938cf6d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522598b3-e34c-4883-b47d-f5cd0893bdc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cecc79eb-c3e6-4ee4-87f1-aa8a83270431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3093fa3e-69f7-4e19-8a12-6d75c248d4a6",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d091197-d874-4c9b-b55a-a73a06d2dccb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aebc20c6-e88b-42c2-be68-40a9244abf23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14c3916-aedf-469b-b014-5e6b81749dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f127d7e-c21e-487a-9405-60cef3262e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e99a3b-7113-4d42-ac4c-fd17a7ea0055",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097db344-129c-47ad-90b4-f023ab6ba1be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83074dbe-1eab-4b04-aac2-0605f65e916b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d2ca9b-625f-49de-81cc-bfe630333e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64018f45-e8fa-4a64-9973-c002c26af8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95d22ce-9b47-416f-8118-96f6bf88dd69",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d89ead-3aa7-4050-9771-8a67c0675063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80128349-3ebb-4416-9f19-530c39af4774"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8163644-37ed-41d0-a79f-a70cdaf3bffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51db474a-2993-4c45-ab5f-7b879fa0a46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b169062-bc66-44b4-af53-d6c6f484bacc",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac7341c-55d9-4c3f-8e81-9f765536f302",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9077de95-d9e9-4b29-9bac-80bba6c6c267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb246a3-0cd4-444f-baaa-dc69f9739cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7d86fbf-b073-472e-ba4f-7fbc6989faaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137df564-a535-4c57-8d16-c767be9bd7b8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33282527-f920-4927-9038-12c88c89f6cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d526db6-1d42-4482-8bda-709022d3f9e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a368aed9-c720-48b3-b664-a80bea4deab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf68a370-df37-4d2c-a7ac-15eae05eb3e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b892aa-f96f-4ecd-b42b-2cc064fc3fcb",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a45b62-3bd6-45db-98d8-4b8552fa3124",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5938026-38d8-4fdd-83fb-a712634e6fe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a00bc3-1b02-4afa-8847-019e1ad16c0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "071bb5db-480a-4e0d-8c17-287f1b9181a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a55dd0-818f-43df-9cec-931eaae70c11",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27799a9-c45b-440b-9994-2df770ba0154",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed76fbe4-d0f3-409b-a252-4afa1ab63935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e0bd3f-cb51-4bcf-99c3-52230d7747bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c50edbf9-93cf-4019-bd02-e0b6ac1bb994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d782a6bd-f9ee-44f1-af88-041f9d93f24f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e670cb3-c4a3-4be1-bea6-2c65d4207e6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5416f8ee-3708-4b4a-a71a-0471aafc15bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7625c3e-198c-4e01-a921-d06fe41e9a90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa51080-f68d-4c83-981e-d67abda56d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a400b844-8dae-400b-85a9-86a863f8d6f4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7036d3-f2fa-49a2-8959-d4aa5335558d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "415bbabe-6e5a-49b1-a050-1fec1942d4fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e32d95-d8b2-4f81-863a-cf8531fc1183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d680a8f0-b9c3-4a8a-bc87-9d9a2fff15f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8614a65e-d670-41b0-b657-3cf5b27a37ef",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f433c2b-2f1a-4cc8-9f0c-d852c578c577",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5670851-e041-470a-b387-2c4cabeb81fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbb5e9a-8d6e-40f0-807b-aec79d8fcfd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90fe78fe-e397-4ac6-a59b-e783fcaf1a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cb24f1-b6ff-4e23-8f54-c3b31de8e56d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "febc3504-c4e5-4e26-93db-e5a8e0e63101",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e83b23bc-4737-49e3-8425-b4b117c80964"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c1b16cf-7010-4a92-b53e-3a31856cb2c7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58226e7-25e7-4e92-9d75-f945a9adb88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a55b2b8-4003-4896-be94-c31e48ecbcf8",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ce6d60-ef6a-4d01-be6a-f6f201379e8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81a2b313-1b42-49f4-bfe1-d561413fd8f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "125fc966-1417-4a54-a9b4-cbcd2350c9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d09cf93-ac06-4639-9d65-55e361008560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3aa88b-9dec-44b0-a224-3a72403e7aea",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b0791b-42e4-456d-9aae-81fa8d366f48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58e7f2c5-0cc9-48f1-9467-4a580d101560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a3cb4c-61a8-4462-9792-2f9bf4d36641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03a200cb-c4c4-4244-bc62-17caa21ad46a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f3c876-7c87-4fb1-b8ea-b93d40bd7ff9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2178e0-7308-4a42-aebc-91cccf91dd02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da1a0bb8-2560-488f-8900-48994f458ddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c283fd36-0ab4-4236-ba2a-669aafb47e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d4135b-501b-4022-84e9-2150e767ca36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21f1dac-3914-462f-8897-da04202d7324",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3668cb-e20d-4019-9072-cd4a26b9ee98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "889a74db-1200-4237-8b0b-1e4ba53f3ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db67265-fe46-4c3a-b907-a8fb61335572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38354cd8-616f-4b26-97a7-38549348751f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c559d4fa-e516-44f1-be56-282ebb69c750",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e861f27c-32c2-4c48-8ec8-b2b6849d5535",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ac02a26-aeb0-464d-adfd-7fe16e1fa767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9302a6-817b-4b36-9503-3cde913159f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b29581-90e0-47fa-9517-186730917a09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a0a852-dc16-45be-8d7b-bbc77c78999f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7845e6-40ff-4c23-b841-17ddb8d84dce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fac3fda0-b795-4278-9e0a-54885357cc06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d817f5f3-a07f-44f8-a87f-11f7ad9b966e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa41be0-cd03-4155-8e0e-5f08ce607970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9fcd81-9c79-45f1-8920-fe12b722ee43",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996a4757-9b8e-40c6-b73d-b7abfaef6df7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "561c6a83-37fd-4df5-baea-7eb07ec82a96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a1ecb6-650a-42e5-9b98-bdecb582ef44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a24d0fb-7cdc-4ef0-9d24-25ac0022688e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "607997d7-3cd4-4bb8-acd2-e9abfd15a9d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "83b045cc-2158-4775-b08b-5a33b1c5e9d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c28d7012-52d9-4cff-a74d-466e87ba7066",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ba29aa19-0dff-43de-ba38-5012cff7ead3"
                    }
                  }
                ]
              },
              {
                "id": "e0597790-85e5-4a2c-b6f3-70e7a187f330",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a87f4a2-d826-4c29-ae6d-e8592a3a36e6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb32fee2-52b7-4c0a-85bb-a8279d839e38",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5e3b9daa-7cd8-4d01-8452-75a4afcd55ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e254f69-e1fc-4edc-9d13-57c481c1b22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae431154-05fc-48f6-a6e5-5deff9f86eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601ac84e-a984-4d4b-931c-14a6c415d394",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799e8a23-ff97-4131-a8d5-43f8a89c0a61",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b33b5ef4-389c-41cd-889a-583566fcc889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32a9d87-deac-4146-92e1-20689e006fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d42ec28-c1f7-4774-ae11-c46ddb1bb7ff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32250856-7d07-4c06-b4b5-0026c0bd1a1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7956612f-9280-417a-9e76-a88adde28fa6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf6c43ed-bafb-4d0c-a7e8-7be77080c14d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d1de8d5-23aa-41c9-b0b3-a87e0d0150cd"
                    }
                  }
                ]
              },
              {
                "id": "95f95bbe-8031-45b9-a8f5-6bef712b0f27",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4cf9a73b-7e90-4d06-83cb-26e8ca9b4c5f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb10c41-d132-4688-ba3e-b199e1d3a5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "81d4eaf0-a097-46b2-b249-8ca6100d8809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885fdaf5-07a7-407e-a2ed-5449941ebb42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77f61455-3ff8-414c-89eb-306afde01a2d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "db173b92-7104-4a82-ad37-fda55b141cbc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3292f16c-bd7c-4073-a306-32c399d1e7be",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb0942f8-6be5-49a6-9396-2d1128e8d020",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4ba5726d-4055-4c9c-8628-077ca204a2cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e699c727-ef6f-444b-95c7-ce72cf715a2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d553a9df-a73c-41b8-8f17-36ab63d95e03"
                    }
                  }
                ]
              },
              {
                "id": "e0120394-18f8-405b-a693-1265e3bc2c0c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38d9f147-04d3-480c-b89d-30fd69c53a2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a188e012-a252-4c1f-9f84-2afdbfc4610a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f67c3b6d-3992-42c3-b5e3-bd7cb8e31bb4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41378fb1-fed9-4c67-b42e-300b80644a29"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "22c98766-c3d6-4ef1-8695-e7d0bb70c2bf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e2306bfe-1fb6-4d0a-98f8-84a0a93dccfe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12e7bf2e-57dd-4d51-887a-4b7afce803b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "14e3cb60-9d39-410f-b93f-898ff9317bc7"
            }
          }
        ]
      },
      {
        "id": "cb79cb30-0b5a-4f5e-85d5-6911cfad59f5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "419f8bf6-e08f-4f7b-ac05-8d6b38610e5b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "02e1353b-3b53-41ff-acde-a78f7509e71b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "95339d6d-1f93-4a1b-83be-4a974f2e4734",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0d7633-1dc1-420d-83ad-1492704ef55c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "19935a30-9f25-4051-96d1-f188526b8b53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11b4f77-8230-4b09-91df-75f8c96ab258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3795aa2-6709-413b-8637-5d0725f6f310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e8f43b3-58a7-4d2a-80ee-42f807640521",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c0783d-add7-439c-9b79-95ec29001837",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "21008717-9004-44d1-aeef-16740dca9652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba2c57b-1999-49da-85e7-13c7f4df7d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3a24b4d-6033-499e-9e96-055dcd724592"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "855e2bdd-b40f-41fa-947c-d3a84640ddd5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e40e207f-58ed-4dca-8ea6-7d542d8a0ac5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1cbf676-0d52-4053-928b-8dcc69f0bd0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e669a8fb-72d6-4371-bb71-e2f9611ede43"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd703bcf-6767-4b56-945d-ffceb30db23b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dfbd83b8-3027-4d93-a53c-2f816629f400"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "164b4c02-def6-4747-9b1a-1816769c39ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a0a6091f-bbc7-41e3-bc62-2d5c018230b5"
            }
          }
        ]
      },
      {
        "id": "b9d1330f-0f8e-4e5c-a14a-5ca3d5233c1a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "936fc032-0418-41d5-a166-c469904511e0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d5a69eb-0170-4ee2-b68f-377ee0580ac1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a26993bf-2e03-4423-9afc-35821d58a7d7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5ad471-b927-4d8c-8c40-0779afd3299d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "745fc942-ce31-4ccc-a359-34c39f4622a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4872aed2-50f1-4454-b502-edb8f65111e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3feba683-fb4d-4ff7-b22b-ff320347707a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53a77d6-0b2f-490c-be6f-2749dd6480f1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b0f520-895d-45b4-b6bb-1d31f20eec7d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3d52a1f2-f4b5-4023-8485-cb4d09ef4cf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3feff78c-5a08-426e-8293-8adc8d60d1de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "668f35b8-879d-47da-87ad-974a16193534"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "151fecc1-bcc6-438b-aec9-dc9c2d288fef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd87aa55-f436-4013-9882-c0984dafbd42"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9be0b68d-11a2-4cfb-b58b-ee4928291301",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c93c26b9-c55e-469d-b624-77f7bd67c0a9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b754e60f-1f35-45f6-9ca8-1fdbf19f7ae9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3b9cb1d0-26f9-402c-815f-786d04d622d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "acaaac90-ba75-4b07-add6-67be1d462df8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b483567-690f-4849-988d-ae876005ca22"
            }
          }
        ]
      },
      {
        "id": "1d5224d6-2fc8-4b4c-990e-bd5a1f6c2b7e",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "bb3a0322-2ea2-41da-b820-242432be0ac3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f926ecc-8bb0-44ba-9729-e814682f336b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3652dc05-7c7d-4f40-8fec-a1e3e120dece",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d67b6191-bac6-46a5-b3dd-08176d12f095",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0d2ffdad-4567-4f72-adcd-e452351ab469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf063e5-d0af-4630-88d8-fe692a4819a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9fc946c-4c83-457a-8a86-a6f6f09c3b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a4f423-113c-42c0-aa4b-182a7ae7f156",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652cb6f7-25c4-43d1-b2e6-b3d383e1879c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "46b88f05-460f-44c7-ad6b-8c00dcf3e2e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97057ae-1c6c-42b0-ac43-eadd90bf2837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cce583f-40bb-4732-a56d-6a50103b082c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f55b734-f64a-4fbc-ae59-678ce7c26e70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f2baa83-9a32-4c9d-a325-b7cbfef293d8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4776c076-69c7-43f1-b7c9-30851e511c4a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54be9584-ae05-407e-b879-e1c092843c93"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ecd637c4-683c-417d-9776-b96cd5ba4c74",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cab103cd-7cc9-4bca-a4a5-bb04d348fdd8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "efbe4ba2-5dc5-48d2-abcb-2896c81231b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a0022ca3-60f4-4f76-9bb8-2371f412c1ad"
            }
          }
        ]
      },
      {
        "id": "474e0d5c-1469-4c73-96d7-3de2c12997aa",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e70b5b8f-9ecc-4809-b2b2-8f94dea61aaf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0db2140-244b-43ed-907b-8e3dde3b5151",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ac3f7eab-033a-4c6c-a0af-49f64f43f7f3",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14348152-724c-4f40-ac3d-ea66f7568d82",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c03ce3fb-7c0f-4a83-a870-5f6078ebad37",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 431
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 673.5292119785174,
      "responseMin": 9,
      "responseMax": 10312,
      "responseSd": 1923.9175677249714,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676075739653,
      "completed": 1676076023607
    },
    "executions": [
      {
        "id": "efba58bf-b41d-4836-ba94-83e928ca306f",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "17086e56-156a-488d-946c-83d8a5b32135",
          "httpRequestId": "d3c75af6-1508-4c31-a0f1-90aa5ec10e53"
        },
        "item": {
          "id": "efba58bf-b41d-4836-ba94-83e928ca306f",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "bed066d8-1814-46e9-a810-350f179e0976",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 0
        }
      },
      {
        "id": "d93d2a34-773d-46d7-bebd-304e4f72fca1",
        "cursor": {
          "ref": "6b28aa8e-f6be-40a5-b549-fd826c6624e1",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "52d45411-99f9-489a-be4c-e84db4428cc7"
        },
        "item": {
          "id": "d93d2a34-773d-46d7-bebd-304e4f72fca1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9aaef412-c7b8-4a1e-93c9-ecc499dcf8de",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "879e21ce-222c-4357-be6f-1703b7c0f640",
        "cursor": {
          "ref": "a0eced55-5b8f-4a2b-90ef-eeb8f05de3df",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "509f1682-24f4-41a8-9c62-0b13f9bd3aeb"
        },
        "item": {
          "id": "879e21ce-222c-4357-be6f-1703b7c0f640",
          "name": "did_json"
        },
        "response": {
          "id": "3f9bfab1-822c-444c-9923-4dd2774d5c82",
          "status": "OK",
          "code": 200,
          "responseTime": 328,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0397d98b-a162-4ec5-9cad-fd948618f990",
        "cursor": {
          "ref": "18c905e5-dec5-4128-bdaf-da704b6f9322",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "73d2302c-e24f-4963-b096-fe89fc5c5736"
        },
        "item": {
          "id": "0397d98b-a162-4ec5-9cad-fd948618f990",
          "name": "did:invalid"
        },
        "response": {
          "id": "db663cac-75ab-437a-bff8-4c2872deb850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0397d98b-a162-4ec5-9cad-fd948618f990",
        "cursor": {
          "ref": "18c905e5-dec5-4128-bdaf-da704b6f9322",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "73d2302c-e24f-4963-b096-fe89fc5c5736"
        },
        "item": {
          "id": "0397d98b-a162-4ec5-9cad-fd948618f990",
          "name": "did:invalid"
        },
        "response": {
          "id": "db663cac-75ab-437a-bff8-4c2872deb850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ff4d991-042b-4139-a305-f3d118c924d1",
        "cursor": {
          "ref": "56b7ec43-e367-4ec6-b097-131f3c85f392",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1a75a24b-d3e9-4c07-9cc6-ec4575b01f21"
        },
        "item": {
          "id": "5ff4d991-042b-4139-a305-f3d118c924d1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "a3698787-921c-4e8c-ab57-24c885a92ef1",
          "status": "Not Found",
          "code": 404,
          "responseTime": 182,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846e6312-d9cc-405e-816c-6f9b2ecb807c",
        "cursor": {
          "ref": "2d27a7d0-fd5e-4682-a819-b658506e555d",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "2cca4149-e220-4b9a-aa0b-c7e9cff54033"
        },
        "item": {
          "id": "846e6312-d9cc-405e-816c-6f9b2ecb807c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "186f7713-beba-4392-9948-12c23e0a9a71",
          "status": "Not Found",
          "code": 404,
          "responseTime": 91,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "375b4b9b-6338-427f-8d03-ed99586e8a9d",
        "cursor": {
          "ref": "4cca582f-b8ae-4ff7-be86-6345e255dca5",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "76a4c666-4a68-43a3-b82d-cd6e99b1f180"
        },
        "item": {
          "id": "375b4b9b-6338-427f-8d03-ed99586e8a9d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7ff21f60-828e-4a26-8102-edba0bb557a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddaf1b8-ab56-4ba4-b47e-dd1fdb0b1516",
        "cursor": {
          "ref": "95281190-9b40-4aa2-b9ba-5801aef5e047",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "32e73a7c-57db-4eb2-b068-a8df0c823c2d"
        },
        "item": {
          "id": "7ddaf1b8-ab56-4ba4-b47e-dd1fdb0b1516",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "603142e4-56e3-4d40-b168-6cd8ba3c7574",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "7ddaf1b8-ab56-4ba4-b47e-dd1fdb0b1516",
        "cursor": {
          "ref": "95281190-9b40-4aa2-b9ba-5801aef5e047",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "32e73a7c-57db-4eb2-b068-a8df0c823c2d"
        },
        "item": {
          "id": "7ddaf1b8-ab56-4ba4-b47e-dd1fdb0b1516",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "603142e4-56e3-4d40-b168-6cd8ba3c7574",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "0ec9c390-dc32-427c-9368-e4bd29e602d4",
        "cursor": {
          "ref": "20f42b57-d0ea-4f91-9494-c90c7e6e95bd",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d8a7f9b3-47fb-4e5d-a81d-021f562ef3a4"
        },
        "item": {
          "id": "0ec9c390-dc32-427c-9368-e4bd29e602d4",
          "name": "identifiers"
        },
        "response": {
          "id": "4a2c7bf5-bb13-4194-8f3c-5b0547d90afa",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569d1c0c-266f-42f6-a766-ac4cc0f7ffa5",
        "cursor": {
          "ref": "fa700622-7db4-447e-81fa-7d6a0823dea2",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "05165536-778e-4135-8f4e-3d0d10132586"
        },
        "item": {
          "id": "569d1c0c-266f-42f6-a766-ac4cc0f7ffa5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "855e7b95-7227-4849-a604-4dea3a85d82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "569d1c0c-266f-42f6-a766-ac4cc0f7ffa5",
        "cursor": {
          "ref": "fa700622-7db4-447e-81fa-7d6a0823dea2",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "05165536-778e-4135-8f4e-3d0d10132586"
        },
        "item": {
          "id": "569d1c0c-266f-42f6-a766-ac4cc0f7ffa5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "855e7b95-7227-4849-a604-4dea3a85d82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "606a8a68-3c6a-4f82-9a04-865692c18d55",
        "cursor": {
          "ref": "78266f81-f77b-4cfb-954c-365d968977fe",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c17800d9-82cc-4508-908d-d377c2f109fa"
        },
        "item": {
          "id": "606a8a68-3c6a-4f82-9a04-865692c18d55",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "3e995feb-bc8f-4aaf-8129-bf67db12063b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "8235e879-8296-450a-ac39-60d0068adb33",
        "cursor": {
          "ref": "506f5e15-8408-41d4-9fff-1f3a2d91c2e2",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3530b46d-9db7-4e01-8e67-a246a386c2b5"
        },
        "item": {
          "id": "8235e879-8296-450a-ac39-60d0068adb33",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "614a73d7-83e8-449e-a7fe-ad9b3038e2e9",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "d123ad20-a14f-437e-90d0-a35340c51882",
        "cursor": {
          "ref": "dd778d70-29c6-42ee-9097-25c8fac07272",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4d63c4bf-8751-42e1-902f-fa8531d14532"
        },
        "item": {
          "id": "d123ad20-a14f-437e-90d0-a35340c51882",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "592b390a-e72a-439d-a378-543c2e4b4963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "3e441b27-9054-4dab-bd67-30721c61da7a",
        "cursor": {
          "ref": "a0119ff4-c005-4f8c-a02d-a417c673a442",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2778953e-c694-4e80-9209-793ff7618c83"
        },
        "item": {
          "id": "3e441b27-9054-4dab-bd67-30721c61da7a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5f966174-c3fa-4ede-b923-a7df3c664b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "ae9311d1-2a47-424d-899f-af1e5f696156",
        "cursor": {
          "ref": "b3510ce0-cd91-4255-bb6a-54f8a716a5ec",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0b25adca-b652-4a92-96a2-4b2f3e41df43"
        },
        "item": {
          "id": "ae9311d1-2a47-424d-899f-af1e5f696156",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "466ac400-8513-4d77-a5bc-7b77eca9d9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "ad778cfb-f56c-4def-8cc5-adef1bc4e34b",
        "cursor": {
          "ref": "b83cbe0f-6653-4c30-922b-0c67bbd11893",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e87e7daa-646a-4ffa-b500-bb85e7a56095"
        },
        "item": {
          "id": "ad778cfb-f56c-4def-8cc5-adef1bc4e34b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f1bceab8-32d3-40d0-b95f-e19a32910195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "26a3a8b9-7f84-4288-b33b-82bb5905a21a",
        "cursor": {
          "ref": "f4a4bed2-13fd-4811-9b25-c64825eee90f",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d7d131a4-33fe-4ae4-9c33-dcb3ce0c231e"
        },
        "item": {
          "id": "26a3a8b9-7f84-4288-b33b-82bb5905a21a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c8df7d4e-ac3e-45bf-ac1b-aa4b43f1ea26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "e8dc5700-0bd0-4fa4-83d9-24910e3c33fc",
        "cursor": {
          "ref": "6f6a2d9a-d3b5-4ab1-8bf1-f481ab8aa1e8",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ac6f647d-f6cd-47cd-b3da-444104a8a319"
        },
        "item": {
          "id": "e8dc5700-0bd0-4fa4-83d9-24910e3c33fc",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d1fd5a6b-71a3-47ae-b028-70f1688ccb7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "a56f73b8-12c6-477d-aa19-f973f3f83412",
        "cursor": {
          "ref": "5d2d2aaa-c19a-4acb-a730-8ee70d5bb0ab",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7981cd4c-ea87-4ada-8f5b-8e2d5d6706ad"
        },
        "item": {
          "id": "a56f73b8-12c6-477d-aa19-f973f3f83412",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7939f6d8-8ed3-439c-9160-b7323e493d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "3aa8f383-7028-4d2a-a24a-077e4901f023",
        "cursor": {
          "ref": "3220bbe9-67c6-458d-b8a8-23e873a9a8e2",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0eea6e56-168b-4c26-9599-662cab27b57e"
        },
        "item": {
          "id": "3aa8f383-7028-4d2a-a24a-077e4901f023",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a81ce311-4fe0-4359-bbcf-fdd4a85c2d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "a4eb758c-b9ea-408d-8acd-7e0fd7574c04",
        "cursor": {
          "ref": "f458a378-ce23-4f77-acb3-1595eafac46f",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d9ea4f3c-861e-4a75-8f3f-e32b5508cd13"
        },
        "item": {
          "id": "a4eb758c-b9ea-408d-8acd-7e0fd7574c04",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "49997072-3dbc-4363-978c-c1de60f47bac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "b6240d2d-8af9-4b99-acfc-2be0df3355e0",
        "cursor": {
          "ref": "2d3cebde-7fda-4b7c-971d-5b3eb095404f",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e1bdfafa-04fb-4a84-a92b-76001a846a51"
        },
        "item": {
          "id": "b6240d2d-8af9-4b99-acfc-2be0df3355e0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "279259fd-5584-4576-98f7-118ccaa946e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "10d85fd8-d78b-44cb-b466-140795178f0d",
        "cursor": {
          "ref": "8e73838a-5625-4010-b003-9c744e718528",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "cd11c316-16ea-492a-b8ae-a085ab1d2103"
        },
        "item": {
          "id": "10d85fd8-d78b-44cb-b466-140795178f0d",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "aff04485-be61-422a-9f22-f40c5c4b864a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "b4e28ee4-9392-4593-b00f-198708165f59",
        "cursor": {
          "ref": "9dec3098-11dd-494d-9672-db5488c55b3a",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5e4c2f9d-3cdf-44fc-8f31-e552f4fe172b"
        },
        "item": {
          "id": "b4e28ee4-9392-4593-b00f-198708165f59",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "450b5981-7ea1-41c4-b3e1-2b6cf20b1389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "c401e47e-4116-4124-85f6-6e13fc2d94ac",
        "cursor": {
          "ref": "9bae642e-734f-44c2-a320-9deecd0b6f61",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bedabab4-a506-4868-9380-12c8eb2e7482"
        },
        "item": {
          "id": "c401e47e-4116-4124-85f6-6e13fc2d94ac",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "06776a81-bc40-413f-84eb-b016ff25a87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "a0e896c3-87f1-48d2-b50f-1a254f417dec",
        "cursor": {
          "ref": "334f5ae7-31e0-4bec-829e-e4f02aafbb30",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e705c1da-4db0-44a6-9a3a-8bb0ba376439"
        },
        "item": {
          "id": "a0e896c3-87f1-48d2-b50f-1a254f417dec",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "259ab230-3ba6-4b7f-a200-8aabd376ccdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "4d00c694-d38b-4e86-af23-b84df1581397",
        "cursor": {
          "ref": "2b2f609b-41d5-403b-8283-19c8e4bfb31b",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2ed6ae7c-5b1e-4f9d-b935-e7c29453b2b3"
        },
        "item": {
          "id": "4d00c694-d38b-4e86-af23-b84df1581397",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "26e4e602-a750-45ed-b8b1-beb1d3d4f564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "99b4b910-916f-4f2a-8b06-972018c60dd5",
        "cursor": {
          "ref": "1e9955eb-fe4a-4e8a-8b31-de97904414dd",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a33b2793-e481-4b9c-890f-ecdd59f5b5a8"
        },
        "item": {
          "id": "99b4b910-916f-4f2a-8b06-972018c60dd5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "389d9f6e-a4fe-4442-a6dd-cf01ecdc6f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "9589fd8f-55d8-4a3d-9244-651a0eff4bc9",
        "cursor": {
          "ref": "a5ff34ba-dd80-4e34-a3a4-5a858c013d62",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "548154cf-a748-4a74-bb96-0908c6d67ba5"
        },
        "item": {
          "id": "9589fd8f-55d8-4a3d-9244-651a0eff4bc9",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "efb22269-4cb5-433a-883d-e8a0b5222937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "56fd8bc6-ca06-494e-b174-3a84958a6e1e",
        "cursor": {
          "ref": "5f06f0c5-faa0-41d3-9af1-2b764d3d140d",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6e209f8d-376c-4446-9834-cd7f396c7f79"
        },
        "item": {
          "id": "56fd8bc6-ca06-494e-b174-3a84958a6e1e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4b83310c-4606-4072-b052-9a5b85c0a754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "776b91d1-6fbb-42d1-bccb-c19853659fb2",
        "cursor": {
          "ref": "4b470367-a24b-45a3-b2c9-0f9eeebb3dd8",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c39d3ec5-61d7-45a6-88f6-8b76310af83d"
        },
        "item": {
          "id": "776b91d1-6fbb-42d1-bccb-c19853659fb2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6e5da76d-d444-4094-a27c-0a63df973cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "e7cbbc27-bdac-45da-ba6b-de429d3e898c",
        "cursor": {
          "ref": "6d3b893a-fb41-4038-8533-9bffdd76317e",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8efb34c9-e7d7-4de6-863c-e7f1442b35a4"
        },
        "item": {
          "id": "e7cbbc27-bdac-45da-ba6b-de429d3e898c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "19107e72-d083-45f7-8ade-fb0a8fd67455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "5a68cf2e-fc92-4577-9781-fd17446e94d5",
        "cursor": {
          "ref": "8ce4e8e2-1f35-4e12-8a55-dd09dd876f4b",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "daccbf8b-ef10-4558-a599-a06444bc88d3"
        },
        "item": {
          "id": "5a68cf2e-fc92-4577-9781-fd17446e94d5",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2f04c1d3-b305-4f02-b074-49ed8b479ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "b578d4d3-7325-409d-a4a5-13e69932e78c",
        "cursor": {
          "ref": "6638a651-0dcf-47b1-afa3-abe1ac1f112a",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "48636f8b-bd8a-40fe-9ce3-75d3adb981ca"
        },
        "item": {
          "id": "b578d4d3-7325-409d-a4a5-13e69932e78c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0b9060bf-d461-4393-bad4-2a9da6d2c62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "7c9e2c37-3a06-46a9-8d0c-4cc2361006cc",
        "cursor": {
          "ref": "0f2ea276-49bb-46dc-a5f2-d856ffcc8afd",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "574f7314-9b47-40ac-af0d-f3ae7027dacb"
        },
        "item": {
          "id": "7c9e2c37-3a06-46a9-8d0c-4cc2361006cc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "cf19f9ab-5efc-44c0-b5ab-e9e8fb02353c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "a6cedada-348f-4209-acc6-3982a44ebfcf",
        "cursor": {
          "ref": "fcfbe896-e1a2-4cfb-8307-3d108346ce9b",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e8d885c2-1507-4641-8b82-ae14d5556bd9"
        },
        "item": {
          "id": "a6cedada-348f-4209-acc6-3982a44ebfcf",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6295ca12-0f1c-4420-b107-f83f5a059ed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7263,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "030e79e3-31b0-46da-9be6-9be17653658e",
        "cursor": {
          "ref": "ab0fe962-6949-4eee-9fab-fe34ed4e03a3",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "131ada91-2767-4f2f-a15e-66b5515bde07"
        },
        "item": {
          "id": "030e79e3-31b0-46da-9be6-9be17653658e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "63281a22-a3f9-44a7-8515-6200e2cb8c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7330,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "712bf6fb-2840-4aef-8365-7d9f469ba31d",
        "cursor": {
          "ref": "e0406623-5d46-4d5f-9a23-3e8a7a499216",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5622ade0-cafa-46f9-9191-04ddeca25e6c"
        },
        "item": {
          "id": "712bf6fb-2840-4aef-8365-7d9f469ba31d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "51d17a57-98c7-4d1c-a9e3-ad56e65d6a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5230,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "475fb9cd-2089-4133-b971-a92169f0ca63",
        "cursor": {
          "ref": "c2fee80f-3fca-4ca9-9d4f-e8bde368236e",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c07253f4-7983-48ec-ab6e-24d83365112b"
        },
        "item": {
          "id": "475fb9cd-2089-4133-b971-a92169f0ca63",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "593c97bb-9ec7-4c3c-baad-507749e29c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6724,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "14dd301c-c19f-4387-880f-e044e06f1808",
        "cursor": {
          "ref": "330a4001-50ef-407e-9215-c1c71f4f6bc9",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "079260bd-21cd-474a-b758-0ae7b00cb380"
        },
        "item": {
          "id": "14dd301c-c19f-4387-880f-e044e06f1808",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "05544416-125e-4e3e-a1be-2cd11fbfc666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4748,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4e703b7d-53e5-4f98-bdd2-32f8866edd03",
        "cursor": {
          "ref": "15e05b23-749a-4010-a771-51b34b671b77",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d31bb869-8821-4ffc-9fa3-999b22e59c4c"
        },
        "item": {
          "id": "4e703b7d-53e5-4f98-bdd2-32f8866edd03",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5e14168f-af1d-4358-a2f4-8c9f46ae94af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "70a77807-5b65-439a-a3f8-2be3ca5922f5",
        "cursor": {
          "ref": "b8db02d3-e9c2-4faa-920c-f2f4eb049cd8",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "3202c8d4-7497-429b-ac19-a12ee1bb60c3"
        },
        "item": {
          "id": "70a77807-5b65-439a-a3f8-2be3ca5922f5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "202c81c9-1896-4787-b1ce-fb4589330560",
          "status": "Created",
          "code": 201,
          "responseTime": 6695,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "8cdd90ce-6c1f-4701-9f5e-a6878412b33a",
        "cursor": {
          "ref": "caf78bb7-c436-40ad-b66a-05373b9a0cf3",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2237c156-1213-469d-91ab-f91f0e522425"
        },
        "item": {
          "id": "8cdd90ce-6c1f-4701-9f5e-a6878412b33a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4155d608-5353-407a-a85c-8aee97a9de2f",
          "status": "Created",
          "code": 201,
          "responseTime": 4833,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "01f525d6-6cc4-492f-a323-f3aadc4b7b3a",
        "cursor": {
          "ref": "ab2130fa-ab3d-4462-bd00-db0431ddd00c",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3bcfb0fd-5d3f-44f8-ad31-95ca082a8853"
        },
        "item": {
          "id": "01f525d6-6cc4-492f-a323-f3aadc4b7b3a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "dea1d122-93b7-418e-b05a-3f4e1768f87b",
          "status": "Created",
          "code": 201,
          "responseTime": 6905,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e862cf61-2284-42e5-896a-fad570fcd6f4",
        "cursor": {
          "ref": "a7cc7952-8e26-4e5f-8922-5502f676f41d",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "be13c727-9387-46e9-906c-e819dd449ca3"
        },
        "item": {
          "id": "e862cf61-2284-42e5-896a-fad570fcd6f4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e09aaf41-8abd-4c3a-aa2b-23426eb37a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8f02729a-964f-4b85-8f73-8f8fe075ddf8",
        "cursor": {
          "ref": "f518f24d-5872-4b53-bfdd-e7277c16aeef",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1537a298-26b4-4f23-b8d2-c5f0f9e0cdd7"
        },
        "item": {
          "id": "8f02729a-964f-4b85-8f73-8f8fe075ddf8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9e3836f0-da63-413d-ab92-80dd97e24313",
          "status": "Created",
          "code": 201,
          "responseTime": 4655,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "876f1c7c-8ce1-44ca-96a6-d43e2c804572",
        "cursor": {
          "ref": "0991f3cc-0f2e-4263-afea-ec881c8f3e2c",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ace1e398-5c32-4cb8-9d8e-24cee87cbfa1"
        },
        "item": {
          "id": "876f1c7c-8ce1-44ca-96a6-d43e2c804572",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f5903926-8bd2-4ba4-b34d-347dacc9f915",
          "status": "Created",
          "code": 201,
          "responseTime": 6672,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "4f5caeb6-f786-4d36-9462-287700c14fc2",
        "cursor": {
          "ref": "ec8cd1b9-0913-4635-b856-57cd164fe65f",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "01ddf7a4-e12f-4cd5-9f43-b77bb37b9378"
        },
        "item": {
          "id": "4f5caeb6-f786-4d36-9462-287700c14fc2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1cac3c55-8967-4e81-a32c-d73b935e4d2a",
          "status": "Created",
          "code": 201,
          "responseTime": 4648,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9fff91d5-1587-41b3-9bc7-d34570b771ce",
        "cursor": {
          "ref": "2a92440e-fd31-4ba3-a5c2-f53dd042b858",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d37b9c09-394a-4002-a9cf-b488f3b59c90"
        },
        "item": {
          "id": "9fff91d5-1587-41b3-9bc7-d34570b771ce",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "aa59f07d-9ac5-49d0-ab54-0e480f68a78a",
          "status": "Created",
          "code": 201,
          "responseTime": 7134,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "d5740161-592c-4ea5-8253-91f89c380d56",
        "cursor": {
          "ref": "83c9c48a-4610-43bd-a81e-97b55f2dfa1b",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "32cb5864-fc24-4f46-9bbc-4a1671d6d8a0"
        },
        "item": {
          "id": "d5740161-592c-4ea5-8253-91f89c380d56",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "81603d85-0927-49a8-935d-3d40e4542f4d",
          "status": "Created",
          "code": 201,
          "responseTime": 5077,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "82dbe3c3-8b21-43ab-bd86-f588fb851521",
        "cursor": {
          "ref": "a0ed16e6-8c39-484c-9fb5-4e928e97901e",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "1958632d-c084-49cc-a11f-0ea256485213"
        },
        "item": {
          "id": "82dbe3c3-8b21-43ab-bd86-f588fb851521",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0656eba9-5715-4dc9-950f-4c07f050f892",
          "status": "Created",
          "code": 201,
          "responseTime": 6448,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "06f0d617-c0f7-4bc2-a9f5-7b09d47abbdc",
        "cursor": {
          "ref": "dc49ce27-539d-447c-b69a-f5879307963d",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e02e51b0-0bc0-4469-bca7-34e3dd140dad"
        },
        "item": {
          "id": "06f0d617-c0f7-4bc2-a9f5-7b09d47abbdc",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "341ea172-378a-491b-9a1f-850da364c9ec",
          "status": "Created",
          "code": 201,
          "responseTime": 4822,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3651df23-03cf-4940-afe4-7b03d4060ead",
        "cursor": {
          "ref": "a736284d-6a68-44b6-8b2f-7883780d85e6",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5e88ac3a-5baa-4cb5-902c-8ce31292c9f0"
        },
        "item": {
          "id": "3651df23-03cf-4940-afe4-7b03d4060ead",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b3eb4563-9b9d-427f-a816-dfb54bc07ed5",
          "status": "Created",
          "code": 201,
          "responseTime": 6539,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "3bcba404-8ccd-476d-8163-181923493c66",
        "cursor": {
          "ref": "52e18b5e-c246-4f1d-adae-25f04d74ff32",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9aaf6392-8e5c-4586-b677-13fb1c1ba65f"
        },
        "item": {
          "id": "3bcba404-8ccd-476d-8163-181923493c66",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ec3ecfd6-5460-46d3-a944-f0980173123e",
          "status": "Created",
          "code": 201,
          "responseTime": 4527,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "680e59ef-ed7e-4e5f-a529-d45010db71df",
        "cursor": {
          "ref": "e6d234d6-e37a-4a4d-9599-88142351836c",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1c484d72-4b77-4e4f-b97f-4df50f4c2673"
        },
        "item": {
          "id": "680e59ef-ed7e-4e5f-a529-d45010db71df",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "16be089b-0e5e-445e-9309-ef5e0298c47b",
          "status": "Created",
          "code": 201,
          "responseTime": 6631,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "f887c48e-1f09-4bc1-8108-3475531fbfcc",
        "cursor": {
          "ref": "49f24cb5-5ec5-4bc5-a25f-59af37077304",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7c837434-5a2a-48b0-9e5a-b05f0b57c1c2"
        },
        "item": {
          "id": "f887c48e-1f09-4bc1-8108-3475531fbfcc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "193c495a-89ac-4c6e-8dc6-face06e6ca43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "8a944238-d712-4375-ad5e-99a280b3d51c",
        "cursor": {
          "ref": "1e8c716b-c8a6-4c7d-89ea-0c6a1021cf15",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "9cb4e876-bacd-4431-87f3-78546206d9ef"
        },
        "item": {
          "id": "8a944238-d712-4375-ad5e-99a280b3d51c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c84e3887-4c5b-490c-8698-64e1c250ced6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "297a24e4-fdb3-4cfb-b76f-534ac5283334",
        "cursor": {
          "ref": "019c9526-f74a-4c05-8171-4bee907577d3",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c2be0711-aef4-43e8-bf5d-fb986972f04f"
        },
        "item": {
          "id": "297a24e4-fdb3-4cfb-b76f-534ac5283334",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "21da82a2-4afb-42ae-9b59-cd268823568b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "71c5ba97-be11-4a87-a083-3b5ae84b2d3f",
        "cursor": {
          "ref": "42e09866-fbb7-45a0-97bc-0f4c07f7b161",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0ff71571-d4a5-485a-83c4-6f4ad9b44cc1"
        },
        "item": {
          "id": "71c5ba97-be11-4a87-a083-3b5ae84b2d3f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d9bf38c3-26a8-4313-ae29-4cb8fb6dd18b",
          "status": "Created",
          "code": 201,
          "responseTime": 4352,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "366737ff-64cc-43ac-a54b-4fdd5851e26b",
        "cursor": {
          "ref": "3de3c8ba-7c9e-47a5-9c6e-eaa7f125e7d4",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2a203368-7a3f-4755-9dd6-787003001717"
        },
        "item": {
          "id": "366737ff-64cc-43ac-a54b-4fdd5851e26b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9676521c-9af1-456a-8c80-9e1dfcfcd42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "a6577d46-ae32-4241-b4e7-cca24ada58ed",
        "cursor": {
          "ref": "c1754a3f-f6bf-4b2f-ab0f-b768f81a0629",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "24880131-21a2-47da-8197-dc675c480868"
        },
        "item": {
          "id": "a6577d46-ae32-4241-b4e7-cca24ada58ed",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d8994209-e33a-4a8a-a1e0-91dc1b6b4861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 224,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "3b3f531d-0630-4ba3-93d3-d905bed05a10",
        "cursor": {
          "ref": "b520bdef-2686-4d04-a770-cfb636d091a5",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ae037d6d-a042-4846-9419-4953abf51fb3"
        },
        "item": {
          "id": "3b3f531d-0630-4ba3-93d3-d905bed05a10",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9d839f72-eded-4966-b774-7b55ba4675c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 524,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "286b0c28-dc51-4d57-9dda-fc87ac7ca5a0",
        "cursor": {
          "ref": "8db6de4c-6857-4cb3-8a0e-f0c7be6a62f1",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f6ec2ddf-9836-4c28-829a-89800e0333f0"
        },
        "item": {
          "id": "286b0c28-dc51-4d57-9dda-fc87ac7ca5a0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "288d43b4-3217-4d49-9cf4-f144f688567b",
          "status": "Created",
          "code": 201,
          "responseTime": 5490,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "4c6f3b3e-edd8-4f1e-8708-c11ae4207b8d",
        "cursor": {
          "ref": "786c3723-6471-42e5-af28-84dc38893bdb",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9c3b62b3-e74d-4b02-8141-2b19021ff809"
        },
        "item": {
          "id": "4c6f3b3e-edd8-4f1e-8708-c11ae4207b8d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "cf477ae8-14c1-44c7-8455-06c42a4ffb7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 74
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "9c9ca4c6-a5b2-4588-8b74-336bcc09d017",
        "cursor": {
          "ref": "4bd89d09-c62b-4355-b483-402da8312a34",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "609419ad-1129-416d-ba1a-472b48f491a4"
        },
        "item": {
          "id": "9c9ca4c6-a5b2-4588-8b74-336bcc09d017",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1861d4a5-4c6f-4a51-9864-3cfdc29b71f1",
          "status": "Created",
          "code": 201,
          "responseTime": 6622,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "c0354ed5-324a-4f34-b34d-f9d7b27aeeef",
        "cursor": {
          "ref": "4051c614-7744-4c90-a793-54ea3fb722ec",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f6bc7035-9418-437f-a61c-6cbcf416bd9e"
        },
        "item": {
          "id": "c0354ed5-324a-4f34-b34d-f9d7b27aeeef",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "44c5eebb-2325-4547-b3ac-ed51e5562340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "b1ec3cb1-3413-4990-a367-281bbb2c8376",
        "cursor": {
          "ref": "5f85543b-abdf-4bef-afa7-ad08123ac100",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "09da2db7-73a6-4d6c-8368-6c1669130af7"
        },
        "item": {
          "id": "b1ec3cb1-3413-4990-a367-281bbb2c8376",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0c14a8e8-ffa2-4937-8a25-d9ff0e5454c7",
          "status": "Created",
          "code": 201,
          "responseTime": 4876,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "eff7f477-3eb3-4e77-988b-dc74bda0d14a",
        "cursor": {
          "ref": "17399929-7770-4815-9f71-a398701564ba",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "23112fcb-77dd-4a8b-8c00-cd54c0a694b2"
        },
        "item": {
          "id": "eff7f477-3eb3-4e77-988b-dc74bda0d14a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "18f49f8f-dcdb-45dc-955d-123f7c81aa5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6303,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a8d65e17-737a-430e-a6aa-d49641663ed2",
        "cursor": {
          "ref": "77b014d0-52c6-49dc-aa5d-b3ab837a78e3",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b8397a20-cab7-42f9-aac7-967346d538a3"
        },
        "item": {
          "id": "a8d65e17-737a-430e-a6aa-d49641663ed2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "094a8908-1d9a-46b8-bb1c-e151b1b87866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5328,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "5dc875a5-c193-4f73-a099-140d6f98f1f2",
        "cursor": {
          "ref": "b7380ef0-11f6-43e1-ace2-a5b20a1f1529",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e2090b33-8c12-4b74-9d50-d18928a2362c"
        },
        "item": {
          "id": "5dc875a5-c193-4f73-a099-140d6f98f1f2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "da31bc93-ab4f-40ed-8591-9c0a1416fe08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 78
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "53f6c9dc-598c-4f58-aa2b-90aa5b8de274",
        "cursor": {
          "ref": "ae5ba7ad-1535-447e-9c2f-0e80764b6b31",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "489d55dd-af97-4e4d-906a-7dd0183b9c67"
        },
        "item": {
          "id": "53f6c9dc-598c-4f58-aa2b-90aa5b8de274",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e2eca380-4a4e-40a6-b5d9-789333e94cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6163,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "e390600e-6526-46da-af0e-65093bc5afd7",
        "cursor": {
          "ref": "423f8248-7542-4da3-88f3-2ca8bafc3c32",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8636fd72-eca2-4d0f-b196-a50243366fb9"
        },
        "item": {
          "id": "e390600e-6526-46da-af0e-65093bc5afd7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "98f0881e-1223-4ec4-98ac-a0871287c2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 327,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "3fde42c7-cd62-4422-b4bc-46d4c86bfd5d",
        "cursor": {
          "ref": "1f69bd3b-1427-47a6-97f7-77b9cb080628",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f27de20f-c90e-4e63-a7c5-760665a31ffe"
        },
        "item": {
          "id": "3fde42c7-cd62-4422-b4bc-46d4c86bfd5d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "03d4703c-dbe7-49ca-a362-673a5c9a6b20",
          "status": "Created",
          "code": 201,
          "responseTime": 6386,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "bc01e074-a47e-436b-aaa4-9a8bc65560d8",
        "cursor": {
          "ref": "18302abe-5dd1-4ca5-ae7f-0b0f5658d698",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e6092e24-4998-4966-bd06-0aa87070d383"
        },
        "item": {
          "id": "bc01e074-a47e-436b-aaa4-9a8bc65560d8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2d3b3980-5437-4b01-a1c2-702ef20ecef8",
          "status": "Created",
          "code": 201,
          "responseTime": 8906,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "2cb95454-46a8-42e9-84c1-3d981b780c4a",
        "cursor": {
          "ref": "81ca8e2e-8232-4e9e-9f35-ab5a61b123a1",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a72e1c49-03dc-4a24-b5e0-16d4797d1ebe"
        },
        "item": {
          "id": "2cb95454-46a8-42e9-84c1-3d981b780c4a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "ff5aae2e-3ac9-49bd-b154-785d56c67cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "e76b93b8-d989-4b44-a367-bbfaaf943ffe",
        "cursor": {
          "ref": "57ddaf56-fa19-4975-976e-f305dc4d4dc8",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "81e36a2e-f16f-4323-9e01-d9d51e1943b0"
        },
        "item": {
          "id": "e76b93b8-d989-4b44-a367-bbfaaf943ffe",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "105c1aaf-292f-4ef3-935a-9822790c511c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "b25309e3-333b-4c42-a55a-2d9d681c3ed3",
        "cursor": {
          "ref": "09b71f71-4e20-40f8-9e8d-56912edece9c",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "7363bb1e-4962-48ea-a5bf-64cb117daa51"
        },
        "item": {
          "id": "b25309e3-333b-4c42-a55a-2d9d681c3ed3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0cea1f0b-a2e8-4755-b6e0-a23e55669fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "90094b5e-9e89-4a9f-bd72-299c270efaf9",
        "cursor": {
          "ref": "cd4cb1f2-138d-44c5-8729-ab8c2593345c",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "19c5185f-683d-40dd-9ef8-b6ac4476013d"
        },
        "item": {
          "id": "90094b5e-9e89-4a9f-bd72-299c270efaf9",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6620d063-ac6f-4fd6-b65e-8ab496daa735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "ff70e3c2-3086-4ee0-95b9-5992fdf09b53",
        "cursor": {
          "ref": "e322d637-0b63-4761-8030-306baf8517cf",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a3b40b75-1304-48fc-bf5f-8ef94dec8f7a"
        },
        "item": {
          "id": "ff70e3c2-3086-4ee0-95b9-5992fdf09b53",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7af14989-64a4-4ba6-9c79-662841a5ecc8",
          "status": "Created",
          "code": 201,
          "responseTime": 8472,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "bd5330c7-9bae-4848-84d9-baacb9ffc052",
        "cursor": {
          "ref": "97bace48-ca52-480b-866f-b4e902e633c3",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7252304c-8642-4285-849f-4301447d482e"
        },
        "item": {
          "id": "bd5330c7-9bae-4848-84d9-baacb9ffc052",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "cc8e9ac1-282a-45e8-a708-80401468f481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 156,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "83e431e4-65b2-46b0-8cff-171e0fe5c59a",
        "cursor": {
          "ref": "99a0aebc-a42c-4d1f-b892-82cbb152fa49",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d4cdb398-0ff7-44f2-aeea-dac7154052e2"
        },
        "item": {
          "id": "83e431e4-65b2-46b0-8cff-171e0fe5c59a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "31a42fc1-eac6-4a47-8c5d-589cf9b76139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "15b73f52-783f-415f-b69b-12e2cd037e21",
        "cursor": {
          "ref": "7804a2b7-f24a-4d1a-816a-043909d02d92",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "139562e9-be83-474b-b538-92a571854d2a"
        },
        "item": {
          "id": "15b73f52-783f-415f-b69b-12e2cd037e21",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "bd79cae2-182a-4961-b5f3-fb764d91ff22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "906e9f88-16e4-4d23-a5c1-ecccb6e9ab25",
        "cursor": {
          "ref": "a2b86d54-7583-4f1c-a626-08fab632dfda",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "98817a5c-7272-4016-8a99-b44da8cfd9a4"
        },
        "item": {
          "id": "906e9f88-16e4-4d23-a5c1-ecccb6e9ab25",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f79d9b65-f3a5-4768-a89d-45f15086e63b",
          "status": "Created",
          "code": 201,
          "responseTime": 8347,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "728590a5-43e2-4445-bfa7-8f90ebfc5136",
        "cursor": {
          "ref": "7a23dd09-91da-4764-b5ea-8f97a70bc3c0",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d7e1bb49-51ab-4374-960e-4d1e8605e3b9"
        },
        "item": {
          "id": "728590a5-43e2-4445-bfa7-8f90ebfc5136",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "589e9de6-426a-4c8a-9612-4a09b8a9ddc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "8a12baec-91bb-4fc1-b87a-0c717bc44f0a",
        "cursor": {
          "ref": "093915d4-8d86-473d-a071-06354b287793",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "12d93409-a760-450d-bdd6-62956ce04d68"
        },
        "item": {
          "id": "8a12baec-91bb-4fc1-b87a-0c717bc44f0a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "0d44ef6c-8cbc-4c1f-94a8-ffa156b04899",
          "status": "Created",
          "code": 201,
          "responseTime": 9227,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "e4a5dede-575a-4b11-a4b6-0ca05058bda1",
        "cursor": {
          "ref": "957c8b58-2c8c-479e-b22c-b4875688344a",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2953d38e-c7e3-4d09-ac32-554156b0012c"
        },
        "item": {
          "id": "e4a5dede-575a-4b11-a4b6-0ca05058bda1",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "bb72467a-9371-4fb9-9df2-af144cdfe680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 821,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "5e62a445-e861-43a1-b9b2-0b77a72dc027",
        "cursor": {
          "ref": "fd2802bb-3c63-4745-a08a-5b7a1e3c4247",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a4d53ad3-a80f-47a6-87dd-c3d7436519cd"
        },
        "item": {
          "id": "5e62a445-e861-43a1-b9b2-0b77a72dc027",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2e446747-d7c3-49c6-8913-7fc59d51e431",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 440,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "63aab652-db0b-4398-8bdc-7ada5ef9f357",
        "cursor": {
          "ref": "be560927-98bd-4345-a30c-1b51ad43417c",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9b64cc51-d42d-4f62-a511-c93260997f4d"
        },
        "item": {
          "id": "63aab652-db0b-4398-8bdc-7ada5ef9f357",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d1f92794-4f96-44bf-9273-30cb63d130b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 624,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "70986f4f-febe-4b2f-9d8b-db570c145b3b",
        "cursor": {
          "ref": "fd3cb506-0be6-4789-8e6d-a5ce587f3fb2",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "bd478ff8-596e-4d6c-85ee-c0569b43a08f"
        },
        "item": {
          "id": "70986f4f-febe-4b2f-9d8b-db570c145b3b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "24041c65-8b6e-4700-9dad-05a79b2fee0a",
          "status": "Created",
          "code": 201,
          "responseTime": 10312,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "8751afa6-1893-4c9b-9f03-8af88b723187",
        "cursor": {
          "ref": "09e7540d-c1a8-4476-bcb7-6d5afb8012e6",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "21ed7787-edac-4615-9be7-a515192f1a67"
        },
        "item": {
          "id": "8751afa6-1893-4c9b-9f03-8af88b723187",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "63c979aa-260e-4d8a-b11e-beffe4484db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "08f97384-2a20-470b-a9f7-19976625c718",
        "cursor": {
          "ref": "e795511b-f3d7-4409-aff7-aa71ffff28f8",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "bd762936-cafa-4c5f-937c-7c8cc25cf122"
        },
        "item": {
          "id": "08f97384-2a20-470b-a9f7-19976625c718",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e5133071-4b4f-4a31-939c-2979d12234a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 626,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "7b1bb052-b642-4c40-95d9-7d5b8c798a17",
        "cursor": {
          "ref": "a6259235-7987-40a8-a957-318a9d5bcda7",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "31f724a7-8e6e-4167-afae-33cf34519743"
        },
        "item": {
          "id": "7b1bb052-b642-4c40-95d9-7d5b8c798a17",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "39d8d2c5-db3e-46cc-ac5c-016f49617e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 442,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "4ee7fb13-b1b4-4463-87ad-391eba3a74cd",
        "cursor": {
          "ref": "82d40f5d-bf8a-4191-b8c3-b06b2190f400",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "51fd57a8-7e75-4c54-9571-6de491ec2c48"
        },
        "item": {
          "id": "4ee7fb13-b1b4-4463-87ad-391eba3a74cd",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bf728ff3-e0e7-4e36-8c7c-427af7fb2e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "a7f08901-0b1c-439c-aa8e-795defeed2d9",
        "cursor": {
          "ref": "9c512a3f-2bde-46c3-864c-f0311e755418",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "44e0924a-c1d9-4420-b308-f997bb5d42ad"
        },
        "item": {
          "id": "a7f08901-0b1c-439c-aa8e-795defeed2d9",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ce1b9f42-04fc-4238-b72f-64f2e11546d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "7e2549b3-e260-4123-84d1-2834141903a1",
        "cursor": {
          "ref": "221f0e2c-bf45-42c7-a31b-f5908b398fb6",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "292b6f5b-5ef6-49b6-b91a-b402b2cfccf2"
        },
        "item": {
          "id": "7e2549b3-e260-4123-84d1-2834141903a1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2e7129c6-255a-4df4-be79-d477a8747247",
          "status": "Created",
          "code": 201,
          "responseTime": 8935,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "74c9eda0-54dd-4152-8716-916acac0c126",
        "cursor": {
          "ref": "54349d1b-ce80-4c3f-8c87-47df709e35b0",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8e83a2e9-c011-4662-9720-25bdce1c2063"
        },
        "item": {
          "id": "74c9eda0-54dd-4152-8716-916acac0c126",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ecc292f5-ee4b-4cc9-907c-423dfda5fe0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "28b58ece-b7df-4c5e-b69d-4967011dec8e",
        "cursor": {
          "ref": "394ba29e-6bbb-4216-b0e6-540875ccfbfc",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0ad4798e-62fd-4340-9df7-0bcc4ac9a38a"
        },
        "item": {
          "id": "28b58ece-b7df-4c5e-b69d-4967011dec8e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "651ef5d8-fc91-4f7b-b38d-4d87d84a8cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "334b9531-8a33-4b49-845e-433ed18b4ae2",
        "cursor": {
          "ref": "39575622-eb11-41d2-b3e6-3d0899e20854",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9bb991f8-e95e-43da-b5bc-31a80bf3b07e"
        },
        "item": {
          "id": "334b9531-8a33-4b49-845e-433ed18b4ae2",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "0b8af614-dd18-4499-99e2-e12c825d3216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "1e21ed6a-281b-4459-9cec-1c29c27995b7",
        "cursor": {
          "ref": "09c56ad1-9177-4223-9dac-91d2c30ee8c8",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2b45691c-695f-4ad1-9a9b-a0b60e424ce9"
        },
        "item": {
          "id": "1e21ed6a-281b-4459-9cec-1c29c27995b7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a80460e5-7855-495b-8fed-c1b80a81c77a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "04ccb6ae-64e5-4119-a53c-dbbf6f50373b",
        "cursor": {
          "ref": "87f6cc22-6fdb-4250-a911-433f88b4fcba",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "17ba701e-1d2e-4e4e-afd3-7c3aab82c3be"
        },
        "item": {
          "id": "04ccb6ae-64e5-4119-a53c-dbbf6f50373b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3a6344a3-748f-4065-849e-d38f03516234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "b852c614-397f-45a6-8ba0-3b7c55738b26",
        "cursor": {
          "ref": "fdc2b18c-a4de-4298-9063-1b5ef210dbae",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2529495e-a2a7-4a89-a243-51a9d75da47a"
        },
        "item": {
          "id": "b852c614-397f-45a6-8ba0-3b7c55738b26",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bb70e2bb-5bae-48b4-a33a-d844a099adaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "1bafc0e2-8332-45ee-9d6d-1eee67d3af78",
        "cursor": {
          "ref": "9b79f772-0c6a-49c0-aa75-21ad632b9c5a",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f4fe35c8-3093-4a74-912d-a8bd767ec174"
        },
        "item": {
          "id": "1bafc0e2-8332-45ee-9d6d-1eee67d3af78",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ac52ce18-8103-4c1d-9f5a-b5489b7619b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "0c3dcc85-3c69-46d5-97ce-e4d6012926b2",
        "cursor": {
          "ref": "19ba345c-06ac-447c-ad0f-abce9d410985",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1d2fdfed-8e0b-4075-9d8b-695f0d2a8237"
        },
        "item": {
          "id": "0c3dcc85-3c69-46d5-97ce-e4d6012926b2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "fcf135dc-a3d1-4133-8ee3-b955631f2411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "ea65a87a-03ce-4435-a008-118d6b47058d",
        "cursor": {
          "ref": "01a2195a-aef0-4b32-8c10-59b21fe5879e",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f0865568-134e-4975-961c-6bdb4c282131"
        },
        "item": {
          "id": "ea65a87a-03ce-4435-a008-118d6b47058d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b795f5c3-632a-4515-ab46-341dbef5164b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2c63b1-94f3-4fd4-9435-b4cadbc65e96",
        "cursor": {
          "ref": "967025f2-357a-4a8a-b96b-198526665920",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9891325d-1e01-429b-94db-8a522a88c5f6"
        },
        "item": {
          "id": "ff2c63b1-94f3-4fd4-9435-b4cadbc65e96",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "8c2323e1-99f3-4acd-bdae-4f5fb099613e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "061efa62-3606-47cb-a803-8cf87a7a98d8",
        "cursor": {
          "ref": "013757f4-ea04-4ff5-83da-690bc1568986",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5b40c9b0-a50c-47b6-867e-a65bb7207792"
        },
        "item": {
          "id": "061efa62-3606-47cb-a803-8cf87a7a98d8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f2f7bbde-5d7b-477f-a870-b7f2b5353280",
          "status": "Created",
          "code": 201,
          "responseTime": 9210,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "43c75575-21eb-43c2-9fae-fb7144b49457",
        "cursor": {
          "ref": "fdbefe51-c5a1-46ae-84fb-e331e919336e",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7f2422e1-9854-4381-86e0-b0138731b240"
        },
        "item": {
          "id": "43c75575-21eb-43c2-9fae-fb7144b49457",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e61b42bb-5584-44b1-96cf-e55e311441ad",
          "status": "Created",
          "code": 201,
          "responseTime": 8539,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "bf10869e-9db8-4452-b91a-b45421143fa7",
        "cursor": {
          "ref": "fbfe84e1-1165-4f66-bfa0-3a10a313ad7d",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "126fb8a7-1d67-4913-baf0-6dd5577ee7af"
        },
        "item": {
          "id": "bf10869e-9db8-4452-b91a-b45421143fa7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "42e54b67-bb55-46c3-a917-c50be8e97d5e",
          "status": "Created",
          "code": 201,
          "responseTime": 9081,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "4e31dca1-fbb7-42b8-b728-bf5119a09b13",
        "cursor": {
          "ref": "35c8f0aa-bcfd-4d93-a0f3-55917e6de085",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "89e05d69-890b-4b2d-b86b-d006b45630a2"
        },
        "item": {
          "id": "4e31dca1-fbb7-42b8-b728-bf5119a09b13",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "aaf8e7ba-3532-4f46-8323-83a8cb09e34e",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 1516,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 502",
              "stack": "AssertionError: expected response to have status code 201 but got 502\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "425839bf-5c66-4a1b-bf84-472438956b69",
        "cursor": {
          "ref": "34b658b1-c39d-4236-a1c3-34299b68da25",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "953f8f99-fb2c-408c-8b3e-36c2b88afffd"
        },
        "item": {
          "id": "425839bf-5c66-4a1b-bf84-472438956b69",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "719f269c-323d-4f94-b2a4-ebb4b8cb81e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "dfb18462-3956-4369-8f41-54a3ad2d7f4c",
        "cursor": {
          "ref": "f1891465-9e28-41c4-83c6-3d7bddff55eb",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0dcf30cb-6921-43d4-b3f6-e4dc73c55ac3"
        },
        "item": {
          "id": "dfb18462-3956-4369-8f41-54a3ad2d7f4c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "45d2ef5d-fde9-414f-9c9e-dc4feaeeddbd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "dfb18462-3956-4369-8f41-54a3ad2d7f4c",
        "cursor": {
          "ref": "f1891465-9e28-41c4-83c6-3d7bddff55eb",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "0dcf30cb-6921-43d4-b3f6-e4dc73c55ac3"
        },
        "item": {
          "id": "dfb18462-3956-4369-8f41-54a3ad2d7f4c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "45d2ef5d-fde9-414f-9c9e-dc4feaeeddbd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9bd05544-4a0f-4db4-806c-0450cea71735",
        "cursor": {
          "ref": "2d4e2cda-cb17-4aa5-b22f-e4ab3ee12c32",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1907b0cb-b3c8-471e-93e4-a30deb1cd44a"
        },
        "item": {
          "id": "9bd05544-4a0f-4db4-806c-0450cea71735",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5fa7f43b-238c-4e10-a10c-160dbc566f41",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "9bd05544-4a0f-4db4-806c-0450cea71735",
        "cursor": {
          "ref": "2d4e2cda-cb17-4aa5-b22f-e4ab3ee12c32",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1907b0cb-b3c8-471e-93e4-a30deb1cd44a"
        },
        "item": {
          "id": "9bd05544-4a0f-4db4-806c-0450cea71735",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5fa7f43b-238c-4e10-a10c-160dbc566f41",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "ea0eaa07-acac-4910-85aa-fe08b423d245",
        "cursor": {
          "ref": "a7fe9977-6e47-4364-8655-7ef02ea2f597",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c4bc0e99-03ea-4fdc-b0bc-89b46ca2473e"
        },
        "item": {
          "id": "ea0eaa07-acac-4910-85aa-fe08b423d245",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f987b576-c3a1-4a04-96a6-28b8018aa190",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "ea0eaa07-acac-4910-85aa-fe08b423d245",
        "cursor": {
          "ref": "a7fe9977-6e47-4364-8655-7ef02ea2f597",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c4bc0e99-03ea-4fdc-b0bc-89b46ca2473e"
        },
        "item": {
          "id": "ea0eaa07-acac-4910-85aa-fe08b423d245",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f987b576-c3a1-4a04-96a6-28b8018aa190",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "6ae0239f-5db0-430e-b413-f09128a705dc",
        "cursor": {
          "ref": "90fd37f0-33d0-43c3-b1a0-e64bff1c4a1b",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2dba2fbf-7dbb-4eab-8f27-75944c6dc968"
        },
        "item": {
          "id": "6ae0239f-5db0-430e-b413-f09128a705dc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ebb3dcbb-04a1-419a-a96f-0d74e7c670a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "6ae0239f-5db0-430e-b413-f09128a705dc",
        "cursor": {
          "ref": "90fd37f0-33d0-43c3-b1a0-e64bff1c4a1b",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2dba2fbf-7dbb-4eab-8f27-75944c6dc968"
        },
        "item": {
          "id": "6ae0239f-5db0-430e-b413-f09128a705dc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ebb3dcbb-04a1-419a-a96f-0d74e7c670a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "47411b04-de19-4988-a874-109fa11ff126",
        "cursor": {
          "ref": "ec9b6c7b-381c-4b2a-960b-e81cc4eb48fd",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6dfebdb0-63f6-40f4-b3f9-50cbe96943b1"
        },
        "item": {
          "id": "47411b04-de19-4988-a874-109fa11ff126",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1bdd76f7-4edf-459b-86ce-2f5a9ad4e0b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "47411b04-de19-4988-a874-109fa11ff126",
        "cursor": {
          "ref": "ec9b6c7b-381c-4b2a-960b-e81cc4eb48fd",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6dfebdb0-63f6-40f4-b3f9-50cbe96943b1"
        },
        "item": {
          "id": "47411b04-de19-4988-a874-109fa11ff126",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1bdd76f7-4edf-459b-86ce-2f5a9ad4e0b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "02ec3866-7373-4e1d-a6c0-f4c8ee089966",
        "cursor": {
          "ref": "9c324d76-8e59-4951-b603-b65fc154b13e",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1ec5c96a-9b38-4536-b437-c24676d9385a"
        },
        "item": {
          "id": "02ec3866-7373-4e1d-a6c0-f4c8ee089966",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bbf572c5-46f3-4822-a5d5-c4cc08f0654d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "02ec3866-7373-4e1d-a6c0-f4c8ee089966",
        "cursor": {
          "ref": "9c324d76-8e59-4951-b603-b65fc154b13e",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1ec5c96a-9b38-4536-b437-c24676d9385a"
        },
        "item": {
          "id": "02ec3866-7373-4e1d-a6c0-f4c8ee089966",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bbf572c5-46f3-4822-a5d5-c4cc08f0654d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "701c03cf-8085-4d60-beb6-b7887b478f58",
        "cursor": {
          "ref": "763a1559-043d-459e-b9b5-71743b49d591",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2d3096a7-69a1-4466-9d66-8e3b6c8f2596"
        },
        "item": {
          "id": "701c03cf-8085-4d60-beb6-b7887b478f58",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8ab19704-a116-4cb7-9c6a-858af00116fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "701c03cf-8085-4d60-beb6-b7887b478f58",
        "cursor": {
          "ref": "763a1559-043d-459e-b9b5-71743b49d591",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2d3096a7-69a1-4466-9d66-8e3b6c8f2596"
        },
        "item": {
          "id": "701c03cf-8085-4d60-beb6-b7887b478f58",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8ab19704-a116-4cb7-9c6a-858af00116fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "4708647b-04ff-4e6a-abe4-97d4b60c3ba6",
        "cursor": {
          "ref": "22cdedcf-7561-49ae-a46e-bc847cd4473c",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a702cab1-df74-4192-91fc-145bc7748ef8"
        },
        "item": {
          "id": "4708647b-04ff-4e6a-abe4-97d4b60c3ba6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9f6dcd25-24b7-4e0a-9628-34033ca480af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "4708647b-04ff-4e6a-abe4-97d4b60c3ba6",
        "cursor": {
          "ref": "22cdedcf-7561-49ae-a46e-bc847cd4473c",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a702cab1-df74-4192-91fc-145bc7748ef8"
        },
        "item": {
          "id": "4708647b-04ff-4e6a-abe4-97d4b60c3ba6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9f6dcd25-24b7-4e0a-9628-34033ca480af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "ebac4834-9b6b-4749-b329-2517ceab06d6",
        "cursor": {
          "ref": "0c0c0357-993c-46a7-940c-0e9a2e021320",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d6f63b5f-503d-4fb0-bd1a-f742f300b602"
        },
        "item": {
          "id": "ebac4834-9b6b-4749-b329-2517ceab06d6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "35d67ef1-54e7-4897-9126-b788b7e27bed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "ebac4834-9b6b-4749-b329-2517ceab06d6",
        "cursor": {
          "ref": "0c0c0357-993c-46a7-940c-0e9a2e021320",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d6f63b5f-503d-4fb0-bd1a-f742f300b602"
        },
        "item": {
          "id": "ebac4834-9b6b-4749-b329-2517ceab06d6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "35d67ef1-54e7-4897-9126-b788b7e27bed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "207d9c53-8152-4740-8bc0-49347225f60a",
        "cursor": {
          "ref": "3535f15e-e43e-49e6-85d1-049af93aa778",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "599ca52e-8791-4e50-bf27-f5665df881b7"
        },
        "item": {
          "id": "207d9c53-8152-4740-8bc0-49347225f60a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7b3682d2-4392-4357-b83f-abc3b9f92300",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "207d9c53-8152-4740-8bc0-49347225f60a",
        "cursor": {
          "ref": "3535f15e-e43e-49e6-85d1-049af93aa778",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "599ca52e-8791-4e50-bf27-f5665df881b7"
        },
        "item": {
          "id": "207d9c53-8152-4740-8bc0-49347225f60a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7b3682d2-4392-4357-b83f-abc3b9f92300",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "4999fae1-e3a6-4de6-b822-09a31e0fa068",
        "cursor": {
          "ref": "d8318e42-6c81-4045-bedf-739d86caf23c",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1e566491-3091-4742-8048-0b2ec6e9733e"
        },
        "item": {
          "id": "4999fae1-e3a6-4de6-b822-09a31e0fa068",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f73be649-17d5-4d11-b756-455d03b6f701",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "4999fae1-e3a6-4de6-b822-09a31e0fa068",
        "cursor": {
          "ref": "d8318e42-6c81-4045-bedf-739d86caf23c",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1e566491-3091-4742-8048-0b2ec6e9733e"
        },
        "item": {
          "id": "4999fae1-e3a6-4de6-b822-09a31e0fa068",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f73be649-17d5-4d11-b756-455d03b6f701",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "1eb5278a-39e4-4cc4-a95a-01ea8f5921d1",
        "cursor": {
          "ref": "10fb7f9f-3164-45ef-b993-12966d5d6631",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a4e0ecb2-f88c-4bc4-a1f3-909bfd7baa95"
        },
        "item": {
          "id": "1eb5278a-39e4-4cc4-a95a-01ea8f5921d1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "64842e7d-047b-4c3b-a9fc-0d2b8e3f769d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "1eb5278a-39e4-4cc4-a95a-01ea8f5921d1",
        "cursor": {
          "ref": "10fb7f9f-3164-45ef-b993-12966d5d6631",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a4e0ecb2-f88c-4bc4-a1f3-909bfd7baa95"
        },
        "item": {
          "id": "1eb5278a-39e4-4cc4-a95a-01ea8f5921d1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "64842e7d-047b-4c3b-a9fc-0d2b8e3f769d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "68d6c295-ef83-4656-b97a-d33caae1c67c",
        "cursor": {
          "ref": "6b9daaaa-3180-4891-814f-1e1061e8840c",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "31665793-0710-4c90-8417-ecef14bddb43"
        },
        "item": {
          "id": "68d6c295-ef83-4656-b97a-d33caae1c67c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d6d98eaa-ad29-45bc-b2b0-1852d2867649",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "68d6c295-ef83-4656-b97a-d33caae1c67c",
        "cursor": {
          "ref": "6b9daaaa-3180-4891-814f-1e1061e8840c",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "31665793-0710-4c90-8417-ecef14bddb43"
        },
        "item": {
          "id": "68d6c295-ef83-4656-b97a-d33caae1c67c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d6d98eaa-ad29-45bc-b2b0-1852d2867649",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "925bfd0f-0959-490e-8654-8173a30c3dd1",
        "cursor": {
          "ref": "fe7c1752-af23-44ba-be41-3444c2517a84",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "970766b4-86bc-446f-a988-957a7ffcbf6b"
        },
        "item": {
          "id": "925bfd0f-0959-490e-8654-8173a30c3dd1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8cfcad90-6099-4fd6-8a3e-7de9f9eaa382",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "925bfd0f-0959-490e-8654-8173a30c3dd1",
        "cursor": {
          "ref": "fe7c1752-af23-44ba-be41-3444c2517a84",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "970766b4-86bc-446f-a988-957a7ffcbf6b"
        },
        "item": {
          "id": "925bfd0f-0959-490e-8654-8173a30c3dd1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8cfcad90-6099-4fd6-8a3e-7de9f9eaa382",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "2caf3c37-0c2a-4760-ae1c-0a05db2852dc",
        "cursor": {
          "ref": "32524498-b03d-45dc-be97-2a3553e2d8e0",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0fe6ec4e-1199-4fba-9fd2-6d3bbe00005f"
        },
        "item": {
          "id": "2caf3c37-0c2a-4760-ae1c-0a05db2852dc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "87fbe457-0cae-44a6-82ae-e96892d2e7a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "2caf3c37-0c2a-4760-ae1c-0a05db2852dc",
        "cursor": {
          "ref": "32524498-b03d-45dc-be97-2a3553e2d8e0",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0fe6ec4e-1199-4fba-9fd2-6d3bbe00005f"
        },
        "item": {
          "id": "2caf3c37-0c2a-4760-ae1c-0a05db2852dc",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "87fbe457-0cae-44a6-82ae-e96892d2e7a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "8dde438a-2cbc-4ace-99ae-9af86f6bf128",
        "cursor": {
          "ref": "d3c6772b-7c69-4754-9684-0eced9225406",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d1252f17-3dc9-4218-ae3e-cc946a1a1bf7"
        },
        "item": {
          "id": "8dde438a-2cbc-4ace-99ae-9af86f6bf128",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "24b82fce-6476-4a0e-9035-3f9af6555543",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "8dde438a-2cbc-4ace-99ae-9af86f6bf128",
        "cursor": {
          "ref": "d3c6772b-7c69-4754-9684-0eced9225406",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d1252f17-3dc9-4218-ae3e-cc946a1a1bf7"
        },
        "item": {
          "id": "8dde438a-2cbc-4ace-99ae-9af86f6bf128",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "24b82fce-6476-4a0e-9035-3f9af6555543",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "5fc58bb1-c8bc-4bb5-9a98-ca2529ea223c",
        "cursor": {
          "ref": "c78219b8-c926-4e2d-9a79-7119457d858a",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "822480ef-e711-4ae7-aac1-0e374525e6fd"
        },
        "item": {
          "id": "5fc58bb1-c8bc-4bb5-9a98-ca2529ea223c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e6089ed6-d338-4315-88a6-5e3f5dae6b69",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "5fc58bb1-c8bc-4bb5-9a98-ca2529ea223c",
        "cursor": {
          "ref": "c78219b8-c926-4e2d-9a79-7119457d858a",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "822480ef-e711-4ae7-aac1-0e374525e6fd"
        },
        "item": {
          "id": "5fc58bb1-c8bc-4bb5-9a98-ca2529ea223c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e6089ed6-d338-4315-88a6-5e3f5dae6b69",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "08fd4190-8611-4a07-b6ad-b81a03789092",
        "cursor": {
          "ref": "85959436-6514-4311-b765-96e97ca3ce3a",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "13c1af6d-bda1-45e6-8e91-1000ed7cc9ca"
        },
        "item": {
          "id": "08fd4190-8611-4a07-b6ad-b81a03789092",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fc9a76ee-85c7-45ca-8cbc-eb93ffc62dff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "08fd4190-8611-4a07-b6ad-b81a03789092",
        "cursor": {
          "ref": "85959436-6514-4311-b765-96e97ca3ce3a",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "13c1af6d-bda1-45e6-8e91-1000ed7cc9ca"
        },
        "item": {
          "id": "08fd4190-8611-4a07-b6ad-b81a03789092",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fc9a76ee-85c7-45ca-8cbc-eb93ffc62dff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "ba0dc286-1fe5-4254-851d-bf6b39ee83a0",
        "cursor": {
          "ref": "f45f747c-2658-47fa-84b0-c7e5df6d1a29",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7cf896d5-06a4-43e2-adf0-ac4d31b6ea6a"
        },
        "item": {
          "id": "ba0dc286-1fe5-4254-851d-bf6b39ee83a0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6e09bb61-637c-48d6-9f09-7533d6a84e94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "ba0dc286-1fe5-4254-851d-bf6b39ee83a0",
        "cursor": {
          "ref": "f45f747c-2658-47fa-84b0-c7e5df6d1a29",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7cf896d5-06a4-43e2-adf0-ac4d31b6ea6a"
        },
        "item": {
          "id": "ba0dc286-1fe5-4254-851d-bf6b39ee83a0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6e09bb61-637c-48d6-9f09-7533d6a84e94",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "41b166bf-1c43-4a0d-be83-4a39bfe324ed",
        "cursor": {
          "ref": "4d232902-8980-424b-89d3-a608c011f16c",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3e881d63-63b4-4f55-a43a-c79af133e779"
        },
        "item": {
          "id": "41b166bf-1c43-4a0d-be83-4a39bfe324ed",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7f10e7cc-65fa-4005-b292-1bc09781eca6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "41b166bf-1c43-4a0d-be83-4a39bfe324ed",
        "cursor": {
          "ref": "4d232902-8980-424b-89d3-a608c011f16c",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3e881d63-63b4-4f55-a43a-c79af133e779"
        },
        "item": {
          "id": "41b166bf-1c43-4a0d-be83-4a39bfe324ed",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7f10e7cc-65fa-4005-b292-1bc09781eca6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "53582715-6b30-4a1b-a2ef-ad6ea4194a84",
        "cursor": {
          "ref": "61e0ce32-5353-4a60-b201-d8f1cf983b40",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8b843a23-3223-426b-9cc6-473ed8327fd8"
        },
        "item": {
          "id": "53582715-6b30-4a1b-a2ef-ad6ea4194a84",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "58f64ad9-6174-43a0-a5f8-b3c903f68b3e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "53582715-6b30-4a1b-a2ef-ad6ea4194a84",
        "cursor": {
          "ref": "61e0ce32-5353-4a60-b201-d8f1cf983b40",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "8b843a23-3223-426b-9cc6-473ed8327fd8"
        },
        "item": {
          "id": "53582715-6b30-4a1b-a2ef-ad6ea4194a84",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "58f64ad9-6174-43a0-a5f8-b3c903f68b3e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "816d41bb-461a-4766-b833-2a8330ecd729",
        "cursor": {
          "ref": "c4ce604f-036b-470a-9c9e-cdfb9913b3fa",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4ba84679-357d-433c-804b-d241764a3e6c"
        },
        "item": {
          "id": "816d41bb-461a-4766-b833-2a8330ecd729",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9fa0b69e-7528-4e5f-98cc-fb980342fa59",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "816d41bb-461a-4766-b833-2a8330ecd729",
        "cursor": {
          "ref": "c4ce604f-036b-470a-9c9e-cdfb9913b3fa",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4ba84679-357d-433c-804b-d241764a3e6c"
        },
        "item": {
          "id": "816d41bb-461a-4766-b833-2a8330ecd729",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9fa0b69e-7528-4e5f-98cc-fb980342fa59",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "77a75219-9e51-4b7c-9860-0d8cef9573a5",
        "cursor": {
          "ref": "2ad0eb29-72b6-42d4-8881-85e1101f84c8",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "62bba11e-61c2-45f5-91f3-954b0cc7d26c"
        },
        "item": {
          "id": "77a75219-9e51-4b7c-9860-0d8cef9573a5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "86044710-8da9-4a65-9b43-57d4e1e21608",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "77a75219-9e51-4b7c-9860-0d8cef9573a5",
        "cursor": {
          "ref": "2ad0eb29-72b6-42d4-8881-85e1101f84c8",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "62bba11e-61c2-45f5-91f3-954b0cc7d26c"
        },
        "item": {
          "id": "77a75219-9e51-4b7c-9860-0d8cef9573a5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "86044710-8da9-4a65-9b43-57d4e1e21608",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "687b0582-3188-443e-8fb4-915bc6846704",
        "cursor": {
          "ref": "5c01b5d7-0e28-4f9c-b46c-b8fe66d40cd0",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "80796438-1394-4dfe-a3a7-41419bd70ab1"
        },
        "item": {
          "id": "687b0582-3188-443e-8fb4-915bc6846704",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7e4bf99c-c72c-4209-b12c-91eda040c68c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "687b0582-3188-443e-8fb4-915bc6846704",
        "cursor": {
          "ref": "5c01b5d7-0e28-4f9c-b46c-b8fe66d40cd0",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "80796438-1394-4dfe-a3a7-41419bd70ab1"
        },
        "item": {
          "id": "687b0582-3188-443e-8fb4-915bc6846704",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7e4bf99c-c72c-4209-b12c-91eda040c68c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "69f51c38-19f3-475a-870e-6a37f237ea25",
        "cursor": {
          "ref": "8901e29e-1fa4-4f1d-bcdf-3fc989a03c46",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c767005e-8ece-4250-987d-89fa00403d1b"
        },
        "item": {
          "id": "69f51c38-19f3-475a-870e-6a37f237ea25",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b0c1fd2b-d853-4f73-a46e-dc7e622b4077",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "69f51c38-19f3-475a-870e-6a37f237ea25",
        "cursor": {
          "ref": "8901e29e-1fa4-4f1d-bcdf-3fc989a03c46",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c767005e-8ece-4250-987d-89fa00403d1b"
        },
        "item": {
          "id": "69f51c38-19f3-475a-870e-6a37f237ea25",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b0c1fd2b-d853-4f73-a46e-dc7e622b4077",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "779c6b6d-aef9-47ae-b5b4-96123eb0f956",
        "cursor": {
          "ref": "9ba18c65-89d1-456f-aab4-9c5a62291779",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "062cedcf-3b96-48d5-a751-f0e7eaae1231"
        },
        "item": {
          "id": "779c6b6d-aef9-47ae-b5b4-96123eb0f956",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6bd3d1e1-50f4-41f8-9984-e00a96685a0f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "779c6b6d-aef9-47ae-b5b4-96123eb0f956",
        "cursor": {
          "ref": "9ba18c65-89d1-456f-aab4-9c5a62291779",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "062cedcf-3b96-48d5-a751-f0e7eaae1231"
        },
        "item": {
          "id": "779c6b6d-aef9-47ae-b5b4-96123eb0f956",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6bd3d1e1-50f4-41f8-9984-e00a96685a0f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "30eb08b3-bfbf-4d33-843f-e36b0a7975d9",
        "cursor": {
          "ref": "aa94e900-b641-4ecb-8f7d-d81cd2862c33",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "29687799-b394-416f-94eb-8804b6046d99"
        },
        "item": {
          "id": "30eb08b3-bfbf-4d33-843f-e36b0a7975d9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "67a743a0-623b-4f98-be95-b8105acd49fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "30eb08b3-bfbf-4d33-843f-e36b0a7975d9",
        "cursor": {
          "ref": "aa94e900-b641-4ecb-8f7d-d81cd2862c33",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "29687799-b394-416f-94eb-8804b6046d99"
        },
        "item": {
          "id": "30eb08b3-bfbf-4d33-843f-e36b0a7975d9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "67a743a0-623b-4f98-be95-b8105acd49fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "295a12c5-83a3-43da-b1f1-3552ad4ff589",
        "cursor": {
          "ref": "3cc0c974-2f67-4d01-a9ce-9fb7a2fcc51a",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1275b8a5-530a-4d7a-a576-7c747ec8714c"
        },
        "item": {
          "id": "295a12c5-83a3-43da-b1f1-3552ad4ff589",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "50d20810-5b04-4c22-85a8-95296ca158b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "295a12c5-83a3-43da-b1f1-3552ad4ff589",
        "cursor": {
          "ref": "3cc0c974-2f67-4d01-a9ce-9fb7a2fcc51a",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1275b8a5-530a-4d7a-a576-7c747ec8714c"
        },
        "item": {
          "id": "295a12c5-83a3-43da-b1f1-3552ad4ff589",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "50d20810-5b04-4c22-85a8-95296ca158b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "68893418-4333-404d-8dda-97bb4511dad7",
        "cursor": {
          "ref": "a4d8038a-01de-4ed5-a3b1-9c34791e4c65",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bcaffba2-ba0c-4c8c-9059-803e1d767eed"
        },
        "item": {
          "id": "68893418-4333-404d-8dda-97bb4511dad7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dc38b398-b941-4a15-8845-fd26c0d85123",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "68893418-4333-404d-8dda-97bb4511dad7",
        "cursor": {
          "ref": "a4d8038a-01de-4ed5-a3b1-9c34791e4c65",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "bcaffba2-ba0c-4c8c-9059-803e1d767eed"
        },
        "item": {
          "id": "68893418-4333-404d-8dda-97bb4511dad7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dc38b398-b941-4a15-8845-fd26c0d85123",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "566ea00b-a511-48ec-bf9e-5ca073b5a0a7",
        "cursor": {
          "ref": "71e3f67b-45bb-4fb9-899a-4a47183bc2ad",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "09ca7004-9ab0-4652-8abb-58f2d500a9e0"
        },
        "item": {
          "id": "566ea00b-a511-48ec-bf9e-5ca073b5a0a7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5ac17e06-8fca-4f90-afb1-b4edabdacbc5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "566ea00b-a511-48ec-bf9e-5ca073b5a0a7",
        "cursor": {
          "ref": "71e3f67b-45bb-4fb9-899a-4a47183bc2ad",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "09ca7004-9ab0-4652-8abb-58f2d500a9e0"
        },
        "item": {
          "id": "566ea00b-a511-48ec-bf9e-5ca073b5a0a7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5ac17e06-8fca-4f90-afb1-b4edabdacbc5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "cacf2706-74aa-4f60-8c09-280d891bb350",
        "cursor": {
          "ref": "fc11cbd5-3f90-4ab1-86b1-655c7005093b",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b3b35a56-4a49-4404-ac44-cfd06c702d83"
        },
        "item": {
          "id": "cacf2706-74aa-4f60-8c09-280d891bb350",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0841519c-6534-457a-9b5e-a8422adeaff3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "cacf2706-74aa-4f60-8c09-280d891bb350",
        "cursor": {
          "ref": "fc11cbd5-3f90-4ab1-86b1-655c7005093b",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b3b35a56-4a49-4404-ac44-cfd06c702d83"
        },
        "item": {
          "id": "cacf2706-74aa-4f60-8c09-280d891bb350",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0841519c-6534-457a-9b5e-a8422adeaff3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "4a374996-77ea-417a-832b-60e3d53f3c01",
        "cursor": {
          "ref": "207dd59b-af8e-42a0-a659-3936e74d9712",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "36e72abb-386c-40aa-9c64-7a422f2df130"
        },
        "item": {
          "id": "4a374996-77ea-417a-832b-60e3d53f3c01",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "37bbb8f3-c58d-4469-8868-63fb243f30f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "4a374996-77ea-417a-832b-60e3d53f3c01",
        "cursor": {
          "ref": "207dd59b-af8e-42a0-a659-3936e74d9712",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "36e72abb-386c-40aa-9c64-7a422f2df130"
        },
        "item": {
          "id": "4a374996-77ea-417a-832b-60e3d53f3c01",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "37bbb8f3-c58d-4469-8868-63fb243f30f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "54e9e8f7-8c35-47ef-935c-b333401584d8",
        "cursor": {
          "ref": "f00ff719-3e4a-4046-83de-f703dedaba41",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "cd55a748-9eb6-4bc1-bda2-1a7d1aa50c8e"
        },
        "item": {
          "id": "54e9e8f7-8c35-47ef-935c-b333401584d8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0fa58036-027d-4381-854b-b97bfb456668",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 87,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "54e9e8f7-8c35-47ef-935c-b333401584d8",
        "cursor": {
          "ref": "f00ff719-3e4a-4046-83de-f703dedaba41",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "cd55a748-9eb6-4bc1-bda2-1a7d1aa50c8e"
        },
        "item": {
          "id": "54e9e8f7-8c35-47ef-935c-b333401584d8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0fa58036-027d-4381-854b-b97bfb456668",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 87,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "ec194935-e2f6-4a53-a357-9aaf3520fecb",
        "cursor": {
          "ref": "d4500465-0121-4b34-8198-010ea2465ce9",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "977cb749-c247-49f3-aa42-073c7f7bd534"
        },
        "item": {
          "id": "ec194935-e2f6-4a53-a357-9aaf3520fecb",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "5326518e-c776-4b10-b061-2babe7a11e7c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "ec194935-e2f6-4a53-a357-9aaf3520fecb",
        "cursor": {
          "ref": "d4500465-0121-4b34-8198-010ea2465ce9",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "977cb749-c247-49f3-aa42-073c7f7bd534"
        },
        "item": {
          "id": "ec194935-e2f6-4a53-a357-9aaf3520fecb",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "5326518e-c776-4b10-b061-2babe7a11e7c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "f5814db6-4129-43d9-9b3b-adbe6b3ea04b",
        "cursor": {
          "ref": "abde0aa4-a8a0-45ca-bdb4-6e7ce026cb28",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4db6c34d-77b8-4d2a-ba5c-88d99434bdb2"
        },
        "item": {
          "id": "f5814db6-4129-43d9-9b3b-adbe6b3ea04b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "aa9e752b-b3c2-4ddf-be00-16687e794b71",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "f5814db6-4129-43d9-9b3b-adbe6b3ea04b",
        "cursor": {
          "ref": "abde0aa4-a8a0-45ca-bdb4-6e7ce026cb28",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4db6c34d-77b8-4d2a-ba5c-88d99434bdb2"
        },
        "item": {
          "id": "f5814db6-4129-43d9-9b3b-adbe6b3ea04b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "aa9e752b-b3c2-4ddf-be00-16687e794b71",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "88857762-fe7f-44dd-8780-6ca6cebd9ad4",
        "cursor": {
          "ref": "1fd9bddd-cd55-4b9e-a7d7-2a19135621d2",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "55986113-ec19-46c1-8c54-b757a3f93be5"
        },
        "item": {
          "id": "88857762-fe7f-44dd-8780-6ca6cebd9ad4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "02f09d94-9393-4de6-b970-dfc847aa7366",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "88857762-fe7f-44dd-8780-6ca6cebd9ad4",
        "cursor": {
          "ref": "1fd9bddd-cd55-4b9e-a7d7-2a19135621d2",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "55986113-ec19-46c1-8c54-b757a3f93be5"
        },
        "item": {
          "id": "88857762-fe7f-44dd-8780-6ca6cebd9ad4",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "02f09d94-9393-4de6-b970-dfc847aa7366",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "979d5e6b-11fe-4a55-a49d-6a087b94372f",
        "cursor": {
          "ref": "400f7ab0-1cd8-4ae4-a074-5dce51700544",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fe4483d7-cf42-476d-9fa9-7c5f9d588745"
        },
        "item": {
          "id": "979d5e6b-11fe-4a55-a49d-6a087b94372f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6084c837-7a8a-423d-8100-4ffa172e2f00",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "979d5e6b-11fe-4a55-a49d-6a087b94372f",
        "cursor": {
          "ref": "400f7ab0-1cd8-4ae4-a074-5dce51700544",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fe4483d7-cf42-476d-9fa9-7c5f9d588745"
        },
        "item": {
          "id": "979d5e6b-11fe-4a55-a49d-6a087b94372f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6084c837-7a8a-423d-8100-4ffa172e2f00",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "b34a53de-15ad-4010-b7af-c4e7aad73b7d",
        "cursor": {
          "ref": "eed30543-75b6-4bcb-b1dc-b952233d399d",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b058d327-c064-4129-b9ac-eac2d340be1c"
        },
        "item": {
          "id": "b34a53de-15ad-4010-b7af-c4e7aad73b7d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b0f9d964-a429-4704-9666-623c7bfa2051",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 79,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "b34a53de-15ad-4010-b7af-c4e7aad73b7d",
        "cursor": {
          "ref": "eed30543-75b6-4bcb-b1dc-b952233d399d",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "b058d327-c064-4129-b9ac-eac2d340be1c"
        },
        "item": {
          "id": "b34a53de-15ad-4010-b7af-c4e7aad73b7d",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b0f9d964-a429-4704-9666-623c7bfa2051",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 79,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "31f7d1d8-1054-4566-9a7b-2b36289b5059",
        "cursor": {
          "ref": "2931d2c1-d268-439d-bac1-a8b1baea3442",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f2010cd9-9de3-4e9b-9b79-d50d5f1e1efb"
        },
        "item": {
          "id": "31f7d1d8-1054-4566-9a7b-2b36289b5059",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "af397300-b243-487b-9870-f21e0c280737",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 83,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "31f7d1d8-1054-4566-9a7b-2b36289b5059",
        "cursor": {
          "ref": "2931d2c1-d268-439d-bac1-a8b1baea3442",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f2010cd9-9de3-4e9b-9b79-d50d5f1e1efb"
        },
        "item": {
          "id": "31f7d1d8-1054-4566-9a7b-2b36289b5059",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "af397300-b243-487b-9870-f21e0c280737",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 83,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "ed7b5c8d-16dc-4767-b487-2f0f4316418f",
        "cursor": {
          "ref": "d63173c3-82b0-441d-ac12-159413736d62",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6a5108da-334e-4570-9dc0-b65432e6671b"
        },
        "item": {
          "id": "ed7b5c8d-16dc-4767-b487-2f0f4316418f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4f7983e1-2fa6-4a6d-a084-90f517026cc1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 111,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "ed7b5c8d-16dc-4767-b487-2f0f4316418f",
        "cursor": {
          "ref": "d63173c3-82b0-441d-ac12-159413736d62",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6a5108da-334e-4570-9dc0-b65432e6671b"
        },
        "item": {
          "id": "ed7b5c8d-16dc-4767-b487-2f0f4316418f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4f7983e1-2fa6-4a6d-a084-90f517026cc1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 111,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "a6b95001-9926-44e4-9800-112713c01061",
        "cursor": {
          "ref": "0a35d009-ae92-4090-a523-6349347b72db",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "44c43230-2c1d-4d05-a0ae-245a3dcfcb82"
        },
        "item": {
          "id": "a6b95001-9926-44e4-9800-112713c01061",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "94bd5d47-aa9d-4431-ac57-918eb4e1130a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "a6b95001-9926-44e4-9800-112713c01061",
        "cursor": {
          "ref": "0a35d009-ae92-4090-a523-6349347b72db",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "44c43230-2c1d-4d05-a0ae-245a3dcfcb82"
        },
        "item": {
          "id": "a6b95001-9926-44e4-9800-112713c01061",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "94bd5d47-aa9d-4431-ac57-918eb4e1130a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "44ee046e-65cb-4365-afbe-10b76044d785",
        "cursor": {
          "ref": "74edd565-518d-47a8-8a1a-e49b329c4641",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9c075370-d6a7-4736-a475-5ca1c1d43d08"
        },
        "item": {
          "id": "44ee046e-65cb-4365-afbe-10b76044d785",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4c6c676e-2fc3-4ade-95b7-a6be2220aea8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "44ee046e-65cb-4365-afbe-10b76044d785",
        "cursor": {
          "ref": "74edd565-518d-47a8-8a1a-e49b329c4641",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9c075370-d6a7-4736-a475-5ca1c1d43d08"
        },
        "item": {
          "id": "44ee046e-65cb-4365-afbe-10b76044d785",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4c6c676e-2fc3-4ade-95b7-a6be2220aea8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "bbbcbdf9-2303-4b7a-a1fb-f38f03154263",
        "cursor": {
          "ref": "8cfd03c2-d859-4651-9455-1cd7c62dbe2a",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8e2799dc-5c2a-4bf2-a1eb-8622cdbf1b8f"
        },
        "item": {
          "id": "bbbcbdf9-2303-4b7a-a1fb-f38f03154263",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8a1951f6-f538-45d2-b1b0-669dcffc5900",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "bbbcbdf9-2303-4b7a-a1fb-f38f03154263",
        "cursor": {
          "ref": "8cfd03c2-d859-4651-9455-1cd7c62dbe2a",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8e2799dc-5c2a-4bf2-a1eb-8622cdbf1b8f"
        },
        "item": {
          "id": "bbbcbdf9-2303-4b7a-a1fb-f38f03154263",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8a1951f6-f538-45d2-b1b0-669dcffc5900",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "40639491-f4f9-4258-a589-310b860b2ace",
        "cursor": {
          "ref": "73911c8b-a923-4622-b4b9-f937b8044453",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ff390a85-aafc-4f26-89fe-2dd1fc190076"
        },
        "item": {
          "id": "40639491-f4f9-4258-a589-310b860b2ace",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a4c14949-04ee-47bb-81a9-263694e21474",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "40639491-f4f9-4258-a589-310b860b2ace",
        "cursor": {
          "ref": "73911c8b-a923-4622-b4b9-f937b8044453",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ff390a85-aafc-4f26-89fe-2dd1fc190076"
        },
        "item": {
          "id": "40639491-f4f9-4258-a589-310b860b2ace",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a4c14949-04ee-47bb-81a9-263694e21474",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "53779c6d-9ba2-45f2-b3f0-fbfea46a668c",
        "cursor": {
          "ref": "870df4c7-670d-4f75-a213-55486a41938f",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "56c88c16-08db-451d-9c50-4b3fc27b6be8"
        },
        "item": {
          "id": "53779c6d-9ba2-45f2-b3f0-fbfea46a668c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8738b086-de82-436e-af9b-845957678643",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "53779c6d-9ba2-45f2-b3f0-fbfea46a668c",
        "cursor": {
          "ref": "870df4c7-670d-4f75-a213-55486a41938f",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "56c88c16-08db-451d-9c50-4b3fc27b6be8"
        },
        "item": {
          "id": "53779c6d-9ba2-45f2-b3f0-fbfea46a668c",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8738b086-de82-436e-af9b-845957678643",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "208afe77-13b4-4afb-9dd1-2b792eb31d89",
        "cursor": {
          "ref": "36723b64-0293-4284-91a3-24de59817cdf",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "25848c0f-93ad-4715-a7ef-046b681d3d5e"
        },
        "item": {
          "id": "208afe77-13b4-4afb-9dd1-2b792eb31d89",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d4bdc680-09c3-44a3-ad23-a09c34e0da74",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "208afe77-13b4-4afb-9dd1-2b792eb31d89",
        "cursor": {
          "ref": "36723b64-0293-4284-91a3-24de59817cdf",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "25848c0f-93ad-4715-a7ef-046b681d3d5e"
        },
        "item": {
          "id": "208afe77-13b4-4afb-9dd1-2b792eb31d89",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d4bdc680-09c3-44a3-ad23-a09c34e0da74",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "ea3279e4-d885-4f3a-a629-85f7e8ad5074",
        "cursor": {
          "ref": "9e2592ae-72d0-4df8-90bf-d640ebc35b26",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4734ea7b-053d-436b-9180-535bec3e9a57"
        },
        "item": {
          "id": "ea3279e4-d885-4f3a-a629-85f7e8ad5074",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e19b5cab-59c7-4909-a527-81c7075c449e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "ea3279e4-d885-4f3a-a629-85f7e8ad5074",
        "cursor": {
          "ref": "9e2592ae-72d0-4df8-90bf-d640ebc35b26",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4734ea7b-053d-436b-9180-535bec3e9a57"
        },
        "item": {
          "id": "ea3279e4-d885-4f3a-a629-85f7e8ad5074",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e19b5cab-59c7-4909-a527-81c7075c449e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "28ef6b8e-a61f-44d9-98c5-1f3d37b58042",
        "cursor": {
          "ref": "c019e0f7-745e-489b-8edf-94baa7767775",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "40ae1962-10cd-4138-bcfa-e400bb7bc75f"
        },
        "item": {
          "id": "28ef6b8e-a61f-44d9-98c5-1f3d37b58042",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7d3f673b-73a6-479b-9ae4-c544f1b3ec64",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "28ef6b8e-a61f-44d9-98c5-1f3d37b58042",
        "cursor": {
          "ref": "c019e0f7-745e-489b-8edf-94baa7767775",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "40ae1962-10cd-4138-bcfa-e400bb7bc75f"
        },
        "item": {
          "id": "28ef6b8e-a61f-44d9-98c5-1f3d37b58042",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7d3f673b-73a6-479b-9ae4-c544f1b3ec64",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "dd2ae30d-06a3-4397-a554-97fdfb92bcba",
        "cursor": {
          "ref": "408c8725-b8a4-4837-9c3e-6aebad5469e7",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "17ea6f2c-8608-45cb-a83a-e3489b8569bd"
        },
        "item": {
          "id": "dd2ae30d-06a3-4397-a554-97fdfb92bcba",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "246c9d65-4bec-4544-a268-ff3337c70ae9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "dd2ae30d-06a3-4397-a554-97fdfb92bcba",
        "cursor": {
          "ref": "408c8725-b8a4-4837-9c3e-6aebad5469e7",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "17ea6f2c-8608-45cb-a83a-e3489b8569bd"
        },
        "item": {
          "id": "dd2ae30d-06a3-4397-a554-97fdfb92bcba",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "246c9d65-4bec-4544-a268-ff3337c70ae9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "16ffebe4-9df9-4399-8ff2-2d749e8ac7f6",
        "cursor": {
          "ref": "ce8f4944-2abd-40cf-8b09-55aa18acdf5f",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e098d7a8-fd16-41c2-8356-318e4518cba7"
        },
        "item": {
          "id": "16ffebe4-9df9-4399-8ff2-2d749e8ac7f6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5176b92a-beb5-4405-917b-2e266e93c737",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "16ffebe4-9df9-4399-8ff2-2d749e8ac7f6",
        "cursor": {
          "ref": "ce8f4944-2abd-40cf-8b09-55aa18acdf5f",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e098d7a8-fd16-41c2-8356-318e4518cba7"
        },
        "item": {
          "id": "16ffebe4-9df9-4399-8ff2-2d749e8ac7f6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5176b92a-beb5-4405-917b-2e266e93c737",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "f61470b2-2777-4be4-a607-da5eee0134e1",
        "cursor": {
          "ref": "e02ea983-17ba-4405-871e-43ec56826481",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "80d82eea-214b-4db6-b21b-d632e95bb619"
        },
        "item": {
          "id": "f61470b2-2777-4be4-a607-da5eee0134e1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1f408c29-dcb4-4798-abba-1c7643f5a49e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "f61470b2-2777-4be4-a607-da5eee0134e1",
        "cursor": {
          "ref": "e02ea983-17ba-4405-871e-43ec56826481",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "80d82eea-214b-4db6-b21b-d632e95bb619"
        },
        "item": {
          "id": "f61470b2-2777-4be4-a607-da5eee0134e1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "1f408c29-dcb4-4798-abba-1c7643f5a49e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "366c0591-036e-4a32-9ef3-c38def2cdd5d",
        "cursor": {
          "ref": "d1cb0b95-26db-4725-ac87-a11ed0a6d8ba",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8458bbbd-2a00-4eb7-bae7-ef6022a9d95c"
        },
        "item": {
          "id": "366c0591-036e-4a32-9ef3-c38def2cdd5d",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "fdb10650-5f1c-49c3-a18b-f1354a445404",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "366c0591-036e-4a32-9ef3-c38def2cdd5d",
        "cursor": {
          "ref": "d1cb0b95-26db-4725-ac87-a11ed0a6d8ba",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8458bbbd-2a00-4eb7-bae7-ef6022a9d95c"
        },
        "item": {
          "id": "366c0591-036e-4a32-9ef3-c38def2cdd5d",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "fdb10650-5f1c-49c3-a18b-f1354a445404",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "095c885d-6749-4470-a1e2-cab515067d9e",
        "cursor": {
          "ref": "99297be9-cbed-43d9-8e61-337506019c11",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "98f55ecb-f8d5-4fff-b715-44377acd723b"
        },
        "item": {
          "id": "095c885d-6749-4470-a1e2-cab515067d9e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7593133c-d149-4a31-a5f8-80f23b1467a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "095c885d-6749-4470-a1e2-cab515067d9e",
        "cursor": {
          "ref": "99297be9-cbed-43d9-8e61-337506019c11",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "98f55ecb-f8d5-4fff-b715-44377acd723b"
        },
        "item": {
          "id": "095c885d-6749-4470-a1e2-cab515067d9e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "7593133c-d149-4a31-a5f8-80f23b1467a2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "cda80b66-e73c-4b51-a5df-ada40764cf43",
        "cursor": {
          "ref": "e800cf45-261d-46f7-af85-c47c07c849f3",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "be0c19d4-8a7d-45d0-93ce-592eba83bcbb"
        },
        "item": {
          "id": "cda80b66-e73c-4b51-a5df-ada40764cf43",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6679e572-63f6-45c4-879c-e56c991b5354",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "cda80b66-e73c-4b51-a5df-ada40764cf43",
        "cursor": {
          "ref": "e800cf45-261d-46f7-af85-c47c07c849f3",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "be0c19d4-8a7d-45d0-93ce-592eba83bcbb"
        },
        "item": {
          "id": "cda80b66-e73c-4b51-a5df-ada40764cf43",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6679e572-63f6-45c4-879c-e56c991b5354",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "1d4f2448-2c58-4771-b586-66ec39e2702b",
        "cursor": {
          "ref": "d178f8b2-5637-4cf0-8ded-fb45e4a7d40a",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "017e904a-e52c-4ff2-bc91-269509111106"
        },
        "item": {
          "id": "1d4f2448-2c58-4771-b586-66ec39e2702b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "70e47e94-e470-40df-ae01-c6d9e410ce77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "1d4f2448-2c58-4771-b586-66ec39e2702b",
        "cursor": {
          "ref": "d178f8b2-5637-4cf0-8ded-fb45e4a7d40a",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "017e904a-e52c-4ff2-bc91-269509111106"
        },
        "item": {
          "id": "1d4f2448-2c58-4771-b586-66ec39e2702b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "70e47e94-e470-40df-ae01-c6d9e410ce77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "ce406bf3-09d0-4b26-a770-83d2de17819a",
        "cursor": {
          "ref": "2350844e-8672-4062-9a71-c1958cee43e7",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ec422f0c-2969-4fa2-9455-9661d6f2cd70"
        },
        "item": {
          "id": "ce406bf3-09d0-4b26-a770-83d2de17819a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7212039b-80d9-41d8-99a2-e3708b5893a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "ce406bf3-09d0-4b26-a770-83d2de17819a",
        "cursor": {
          "ref": "2350844e-8672-4062-9a71-c1958cee43e7",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ec422f0c-2969-4fa2-9455-9661d6f2cd70"
        },
        "item": {
          "id": "ce406bf3-09d0-4b26-a770-83d2de17819a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7212039b-80d9-41d8-99a2-e3708b5893a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "87ed68e8-9e2c-497f-a641-d9652121f5ed",
        "cursor": {
          "ref": "4484d403-150a-45dc-9ab7-6cef475fc80f",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b9c7a355-dd7e-47bf-92c3-fb216a9fdf78"
        },
        "item": {
          "id": "87ed68e8-9e2c-497f-a641-d9652121f5ed",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9fcfa029-0761-4e03-9119-855577c00531",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "87ed68e8-9e2c-497f-a641-d9652121f5ed",
        "cursor": {
          "ref": "4484d403-150a-45dc-9ab7-6cef475fc80f",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b9c7a355-dd7e-47bf-92c3-fb216a9fdf78"
        },
        "item": {
          "id": "87ed68e8-9e2c-497f-a641-d9652121f5ed",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9fcfa029-0761-4e03-9119-855577c00531",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "5a133309-9a98-427c-9306-551eeb83d560",
        "cursor": {
          "ref": "41ad11a1-c1f6-4c74-8593-24fdb1f9a0d1",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5e56299c-899e-4e9c-865c-4337574c0dfa"
        },
        "item": {
          "id": "5a133309-9a98-427c-9306-551eeb83d560",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2a39bf16-deef-409f-9191-ae7bdfa808b1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "5a133309-9a98-427c-9306-551eeb83d560",
        "cursor": {
          "ref": "41ad11a1-c1f6-4c74-8593-24fdb1f9a0d1",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5e56299c-899e-4e9c-865c-4337574c0dfa"
        },
        "item": {
          "id": "5a133309-9a98-427c-9306-551eeb83d560",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2a39bf16-deef-409f-9191-ae7bdfa808b1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "cca22cac-53da-4927-b668-f9a6331bc245",
        "cursor": {
          "ref": "41d1d2f8-0937-4201-83b7-719cc8a7bfd4",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8af9b09f-d909-424f-a69b-56e63447e41c"
        },
        "item": {
          "id": "cca22cac-53da-4927-b668-f9a6331bc245",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4559caba-5c91-429d-87a9-ad53a9dc1433",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "cca22cac-53da-4927-b668-f9a6331bc245",
        "cursor": {
          "ref": "41d1d2f8-0937-4201-83b7-719cc8a7bfd4",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8af9b09f-d909-424f-a69b-56e63447e41c"
        },
        "item": {
          "id": "cca22cac-53da-4927-b668-f9a6331bc245",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4559caba-5c91-429d-87a9-ad53a9dc1433",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "40a40122-d742-4ab0-b92f-490ffafb45f1",
        "cursor": {
          "ref": "9c34f0fd-db23-4d48-98a9-74dab5dcb802",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e55155f6-2e55-4511-b189-a6ab79dc0c66"
        },
        "item": {
          "id": "40a40122-d742-4ab0-b92f-490ffafb45f1",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "466005b6-0b10-4336-b475-c7ce6c1ef765",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "40a40122-d742-4ab0-b92f-490ffafb45f1",
        "cursor": {
          "ref": "9c34f0fd-db23-4d48-98a9-74dab5dcb802",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e55155f6-2e55-4511-b189-a6ab79dc0c66"
        },
        "item": {
          "id": "40a40122-d742-4ab0-b92f-490ffafb45f1",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "466005b6-0b10-4336-b475-c7ce6c1ef765",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "d4b08114-57c2-460d-a0e6-df015f89e9c5",
        "cursor": {
          "ref": "7774545e-4964-4d9e-a2b0-c94e94cc1669",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "32b345f8-86af-424c-845e-45bee6d08c69"
        },
        "item": {
          "id": "d4b08114-57c2-460d-a0e6-df015f89e9c5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a6ad9bc4-cd1a-4d8e-9ceb-c781b07b5cbf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "d4b08114-57c2-460d-a0e6-df015f89e9c5",
        "cursor": {
          "ref": "7774545e-4964-4d9e-a2b0-c94e94cc1669",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "32b345f8-86af-424c-845e-45bee6d08c69"
        },
        "item": {
          "id": "d4b08114-57c2-460d-a0e6-df015f89e9c5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a6ad9bc4-cd1a-4d8e-9ceb-c781b07b5cbf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "758669a5-04e9-4f38-84ea-8aa66da5d242",
        "cursor": {
          "ref": "64350713-7097-4244-80e4-c70215c4ea61",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3fbdae49-9b7a-44e6-a46c-361bc348396f"
        },
        "item": {
          "id": "758669a5-04e9-4f38-84ea-8aa66da5d242",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e292ce47-8d9e-45b7-befc-28870782664d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "758669a5-04e9-4f38-84ea-8aa66da5d242",
        "cursor": {
          "ref": "64350713-7097-4244-80e4-c70215c4ea61",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3fbdae49-9b7a-44e6-a46c-361bc348396f"
        },
        "item": {
          "id": "758669a5-04e9-4f38-84ea-8aa66da5d242",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e292ce47-8d9e-45b7-befc-28870782664d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "36397199-846b-4137-bd95-d80f57581d1c",
        "cursor": {
          "ref": "e360c087-d55d-4b34-9a14-2cad52ee001e",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "385d0bcf-2233-44b0-b474-3fb333030877"
        },
        "item": {
          "id": "36397199-846b-4137-bd95-d80f57581d1c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e1c47a6a-07db-4338-be58-0403309f6fe5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "36397199-846b-4137-bd95-d80f57581d1c",
        "cursor": {
          "ref": "e360c087-d55d-4b34-9a14-2cad52ee001e",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "385d0bcf-2233-44b0-b474-3fb333030877"
        },
        "item": {
          "id": "36397199-846b-4137-bd95-d80f57581d1c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e1c47a6a-07db-4338-be58-0403309f6fe5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "9eed61be-ec28-4e36-a395-185b057a8004",
        "cursor": {
          "ref": "e1014a53-ef40-4db6-8ea3-f11bda04a389",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a82ef15d-cf4c-4f93-8d5c-b23a1f133fbb"
        },
        "item": {
          "id": "9eed61be-ec28-4e36-a395-185b057a8004",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "28dc253f-f462-42e4-9961-4d46b5dd056a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 78,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "9eed61be-ec28-4e36-a395-185b057a8004",
        "cursor": {
          "ref": "e1014a53-ef40-4db6-8ea3-f11bda04a389",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a82ef15d-cf4c-4f93-8d5c-b23a1f133fbb"
        },
        "item": {
          "id": "9eed61be-ec28-4e36-a395-185b057a8004",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "28dc253f-f462-42e4-9961-4d46b5dd056a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 78,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "4bca27fd-ed3e-41ec-9277-9d95dc509a9f",
        "cursor": {
          "ref": "addc642e-81ae-422d-b98b-9e8c1645567d",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d8e24f19-35b3-4e4d-a6f9-0c9120ab21c8"
        },
        "item": {
          "id": "4bca27fd-ed3e-41ec-9277-9d95dc509a9f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3efb3124-dd6b-4933-b8e1-375778c672ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "4bca27fd-ed3e-41ec-9277-9d95dc509a9f",
        "cursor": {
          "ref": "addc642e-81ae-422d-b98b-9e8c1645567d",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d8e24f19-35b3-4e4d-a6f9-0c9120ab21c8"
        },
        "item": {
          "id": "4bca27fd-ed3e-41ec-9277-9d95dc509a9f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3efb3124-dd6b-4933-b8e1-375778c672ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "a84acd70-ccdb-4d7f-9b85-f4c8b18b34b6",
        "cursor": {
          "ref": "a70b595b-6654-4fc3-957c-cdfec0c43eec",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f7e7f71e-fc66-4f1e-8d17-8fce406e2f5e"
        },
        "item": {
          "id": "a84acd70-ccdb-4d7f-9b85-f4c8b18b34b6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "634f6236-7255-4428-9f5d-b66e6816ce57",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "a84acd70-ccdb-4d7f-9b85-f4c8b18b34b6",
        "cursor": {
          "ref": "a70b595b-6654-4fc3-957c-cdfec0c43eec",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f7e7f71e-fc66-4f1e-8d17-8fce406e2f5e"
        },
        "item": {
          "id": "a84acd70-ccdb-4d7f-9b85-f4c8b18b34b6",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "634f6236-7255-4428-9f5d-b66e6816ce57",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "e0c2ffd5-9c86-46fd-a7f0-a76ea97d6342",
        "cursor": {
          "ref": "ccc1e031-e51a-4367-97b3-e80ffac3c7a8",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "40d2b7fc-e7ca-4994-89d8-729a43f27f78"
        },
        "item": {
          "id": "e0c2ffd5-9c86-46fd-a7f0-a76ea97d6342",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6667bfc6-6c5d-43a2-86fe-5e5a6aaf5756",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "e0c2ffd5-9c86-46fd-a7f0-a76ea97d6342",
        "cursor": {
          "ref": "ccc1e031-e51a-4367-97b3-e80ffac3c7a8",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "40d2b7fc-e7ca-4994-89d8-729a43f27f78"
        },
        "item": {
          "id": "e0c2ffd5-9c86-46fd-a7f0-a76ea97d6342",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6667bfc6-6c5d-43a2-86fe-5e5a6aaf5756",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "89121d3b-91a5-459b-b6c0-4496a274c62f",
        "cursor": {
          "ref": "c351c201-f733-4b55-a715-fa75c9fa70b0",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "923087b8-1679-41c6-bded-19398192e491"
        },
        "item": {
          "id": "89121d3b-91a5-459b-b6c0-4496a274c62f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7949698a-6a08-4298-a2aa-a0806cfa4926",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "89121d3b-91a5-459b-b6c0-4496a274c62f",
        "cursor": {
          "ref": "c351c201-f733-4b55-a715-fa75c9fa70b0",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "923087b8-1679-41c6-bded-19398192e491"
        },
        "item": {
          "id": "89121d3b-91a5-459b-b6c0-4496a274c62f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7949698a-6a08-4298-a2aa-a0806cfa4926",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "f460208b-fd83-4c15-98f5-d32cd5e9253e",
        "cursor": {
          "ref": "2a7a294c-0e80-4564-9386-9238030488f0",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d489dd9e-44bd-4077-b962-cac3b2d40a72"
        },
        "item": {
          "id": "f460208b-fd83-4c15-98f5-d32cd5e9253e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "07e6b85c-5c44-4314-8525-97f429741b44",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "f460208b-fd83-4c15-98f5-d32cd5e9253e",
        "cursor": {
          "ref": "2a7a294c-0e80-4564-9386-9238030488f0",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "d489dd9e-44bd-4077-b962-cac3b2d40a72"
        },
        "item": {
          "id": "f460208b-fd83-4c15-98f5-d32cd5e9253e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "07e6b85c-5c44-4314-8525-97f429741b44",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "ec48f62f-5e20-4e39-a437-5a7aa23f1b49",
        "cursor": {
          "ref": "3c8ec160-17b4-4daf-8504-57036d6ae0bb",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "69e1805b-5327-43d6-b6be-18096bb0cfbf"
        },
        "item": {
          "id": "ec48f62f-5e20-4e39-a437-5a7aa23f1b49",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "506b73bf-8a37-478a-a907-2b1b70a4afd4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "ec48f62f-5e20-4e39-a437-5a7aa23f1b49",
        "cursor": {
          "ref": "3c8ec160-17b4-4daf-8504-57036d6ae0bb",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "69e1805b-5327-43d6-b6be-18096bb0cfbf"
        },
        "item": {
          "id": "ec48f62f-5e20-4e39-a437-5a7aa23f1b49",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "506b73bf-8a37-478a-a907-2b1b70a4afd4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "adbeeba5-eada-4097-9783-2a0ff6859114",
        "cursor": {
          "ref": "30711544-1089-41a4-accb-0ab9e8b0e5cd",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7dff397a-3b3b-4619-958b-22da705caabd"
        },
        "item": {
          "id": "adbeeba5-eada-4097-9783-2a0ff6859114",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3eb6a38a-356a-4880-8cc1-2791a0bcf609",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "adbeeba5-eada-4097-9783-2a0ff6859114",
        "cursor": {
          "ref": "30711544-1089-41a4-accb-0ab9e8b0e5cd",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "7dff397a-3b3b-4619-958b-22da705caabd"
        },
        "item": {
          "id": "adbeeba5-eada-4097-9783-2a0ff6859114",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3eb6a38a-356a-4880-8cc1-2791a0bcf609",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "2b2cc2d3-30c8-491e-9177-1f3ea747bf6f",
        "cursor": {
          "ref": "e14ffe62-9480-4f51-8d8e-db7d7c19b4ed",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a1779a8f-e79e-4261-a62f-bde186b479df"
        },
        "item": {
          "id": "2b2cc2d3-30c8-491e-9177-1f3ea747bf6f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "386b83f2-2e1c-4a3a-952d-64b156683fa2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "2b2cc2d3-30c8-491e-9177-1f3ea747bf6f",
        "cursor": {
          "ref": "e14ffe62-9480-4f51-8d8e-db7d7c19b4ed",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a1779a8f-e79e-4261-a62f-bde186b479df"
        },
        "item": {
          "id": "2b2cc2d3-30c8-491e-9177-1f3ea747bf6f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "386b83f2-2e1c-4a3a-952d-64b156683fa2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "2e4e05ee-9025-47b1-acc6-c9dda23bfa4e",
        "cursor": {
          "ref": "157c8cd7-bd54-42c3-b30d-6df0984c5be7",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b5222fe8-4f1f-49b9-9797-f8219d582bf3"
        },
        "item": {
          "id": "2e4e05ee-9025-47b1-acc6-c9dda23bfa4e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ddeefea4-9865-480d-a5a6-ed38985c689b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "2e4e05ee-9025-47b1-acc6-c9dda23bfa4e",
        "cursor": {
          "ref": "157c8cd7-bd54-42c3-b30d-6df0984c5be7",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b5222fe8-4f1f-49b9-9797-f8219d582bf3"
        },
        "item": {
          "id": "2e4e05ee-9025-47b1-acc6-c9dda23bfa4e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ddeefea4-9865-480d-a5a6-ed38985c689b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "f5cab9ed-0602-4f6c-9b7b-3267a97efc1d",
        "cursor": {
          "ref": "7fbf4d7d-3e4d-4079-9844-55f5f9a0abbe",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8f771364-1ff0-409d-89db-292bf2971da4"
        },
        "item": {
          "id": "f5cab9ed-0602-4f6c-9b7b-3267a97efc1d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d80dfbee-1933-46c7-820a-ed45af183e39",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "f5cab9ed-0602-4f6c-9b7b-3267a97efc1d",
        "cursor": {
          "ref": "7fbf4d7d-3e4d-4079-9844-55f5f9a0abbe",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8f771364-1ff0-409d-89db-292bf2971da4"
        },
        "item": {
          "id": "f5cab9ed-0602-4f6c-9b7b-3267a97efc1d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d80dfbee-1933-46c7-820a-ed45af183e39",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "5acc0fbb-e556-4705-af0c-a21bcef3339a",
        "cursor": {
          "ref": "2638a6af-e8b5-4582-8741-65b95b1ba862",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "71cdc2bc-66a0-409f-9558-ff39dccebf32"
        },
        "item": {
          "id": "5acc0fbb-e556-4705-af0c-a21bcef3339a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b61c618e-98b0-4b36-bbc6-dfee2a5ed82f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "5acc0fbb-e556-4705-af0c-a21bcef3339a",
        "cursor": {
          "ref": "2638a6af-e8b5-4582-8741-65b95b1ba862",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "71cdc2bc-66a0-409f-9558-ff39dccebf32"
        },
        "item": {
          "id": "5acc0fbb-e556-4705-af0c-a21bcef3339a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b61c618e-98b0-4b36-bbc6-dfee2a5ed82f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c866c4aa-2f97-4bfa-a634-f7e443e5bdbf",
        "cursor": {
          "ref": "457aecf6-9cd6-4532-9e80-b251ae0d4d70",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8e2c2677-5abc-4abf-ac7c-387e5bd7bbd5"
        },
        "item": {
          "id": "c866c4aa-2f97-4bfa-a634-f7e443e5bdbf",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "937a1098-f09f-4393-9453-12d1d57fabc3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "c866c4aa-2f97-4bfa-a634-f7e443e5bdbf",
        "cursor": {
          "ref": "457aecf6-9cd6-4532-9e80-b251ae0d4d70",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8e2c2677-5abc-4abf-ac7c-387e5bd7bbd5"
        },
        "item": {
          "id": "c866c4aa-2f97-4bfa-a634-f7e443e5bdbf",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "937a1098-f09f-4393-9453-12d1d57fabc3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "d68c820b-ddab-44f4-9c31-c06e29fb174c",
        "cursor": {
          "ref": "251b512a-880b-48b3-8d27-6dbc282963ab",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "dd1819ba-6fd6-4491-9c9d-a3d508abd13b"
        },
        "item": {
          "id": "d68c820b-ddab-44f4-9c31-c06e29fb174c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2d68ea52-d068-45c1-88c5-1a48b5908440",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "d68c820b-ddab-44f4-9c31-c06e29fb174c",
        "cursor": {
          "ref": "251b512a-880b-48b3-8d27-6dbc282963ab",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "dd1819ba-6fd6-4491-9c9d-a3d508abd13b"
        },
        "item": {
          "id": "d68c820b-ddab-44f4-9c31-c06e29fb174c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2d68ea52-d068-45c1-88c5-1a48b5908440",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "4cc23baf-1849-461c-a0a6-99f6bd8fdc2c",
        "cursor": {
          "ref": "c2b7d7c6-9e2b-4782-8665-247e3b5520d5",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "237d3471-813e-4b3c-9fa5-3fa5f5bc1572"
        },
        "item": {
          "id": "4cc23baf-1849-461c-a0a6-99f6bd8fdc2c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "80087111-2dc6-43ea-a819-60fdbf509f92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "4cc23baf-1849-461c-a0a6-99f6bd8fdc2c",
        "cursor": {
          "ref": "c2b7d7c6-9e2b-4782-8665-247e3b5520d5",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "237d3471-813e-4b3c-9fa5-3fa5f5bc1572"
        },
        "item": {
          "id": "4cc23baf-1849-461c-a0a6-99f6bd8fdc2c",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "80087111-2dc6-43ea-a819-60fdbf509f92",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "ba8f86f5-c68d-4514-8912-b88b63ccba5c",
        "cursor": {
          "ref": "367617bb-4a3d-46ec-a79c-a76763110f83",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a4318679-be14-4c56-a2b9-99b0c2531591"
        },
        "item": {
          "id": "ba8f86f5-c68d-4514-8912-b88b63ccba5c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2558e586-d7c5-4ef4-b919-21d120cb3cbe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "ba8f86f5-c68d-4514-8912-b88b63ccba5c",
        "cursor": {
          "ref": "367617bb-4a3d-46ec-a79c-a76763110f83",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a4318679-be14-4c56-a2b9-99b0c2531591"
        },
        "item": {
          "id": "ba8f86f5-c68d-4514-8912-b88b63ccba5c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2558e586-d7c5-4ef4-b919-21d120cb3cbe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "0026b484-90a6-41a6-bec1-cc730d43e11a",
        "cursor": {
          "ref": "437546d9-9c8c-472b-8e12-bf944dbef5c7",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "14adfb55-b31c-4ed1-832e-64dd97cb5ad6"
        },
        "item": {
          "id": "0026b484-90a6-41a6-bec1-cc730d43e11a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2b5ae3ac-a336-4195-9ea3-60835f4941c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "0026b484-90a6-41a6-bec1-cc730d43e11a",
        "cursor": {
          "ref": "437546d9-9c8c-472b-8e12-bf944dbef5c7",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "14adfb55-b31c-4ed1-832e-64dd97cb5ad6"
        },
        "item": {
          "id": "0026b484-90a6-41a6-bec1-cc730d43e11a",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2b5ae3ac-a336-4195-9ea3-60835f4941c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "605ba5e4-e08e-40d0-acf1-e430c63c724c",
        "cursor": {
          "ref": "a2e5b088-225f-400e-903d-3423e2c4125b",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8dcae079-384b-4b14-8116-b3547d47e26d"
        },
        "item": {
          "id": "605ba5e4-e08e-40d0-acf1-e430c63c724c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "47e42f4d-7441-4e79-ac17-c476df90e906",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "605ba5e4-e08e-40d0-acf1-e430c63c724c",
        "cursor": {
          "ref": "a2e5b088-225f-400e-903d-3423e2c4125b",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8dcae079-384b-4b14-8116-b3547d47e26d"
        },
        "item": {
          "id": "605ba5e4-e08e-40d0-acf1-e430c63c724c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "47e42f4d-7441-4e79-ac17-c476df90e906",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "3f558b29-7b64-4b29-abe0-f6a9c8a98241",
        "cursor": {
          "ref": "21d49495-9b47-4a0d-bd2c-74f7ea9cbb15",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "12c97a5c-7c66-40cb-927d-7f7d8a057b74"
        },
        "item": {
          "id": "3f558b29-7b64-4b29-abe0-f6a9c8a98241",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b4dca0d8-5272-4ba2-a989-75597e8ade45",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "3f558b29-7b64-4b29-abe0-f6a9c8a98241",
        "cursor": {
          "ref": "21d49495-9b47-4a0d-bd2c-74f7ea9cbb15",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "12c97a5c-7c66-40cb-927d-7f7d8a057b74"
        },
        "item": {
          "id": "3f558b29-7b64-4b29-abe0-f6a9c8a98241",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b4dca0d8-5272-4ba2-a989-75597e8ade45",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "43846504-95ee-4b50-9afb-eecc37da9627",
        "cursor": {
          "ref": "9d8c936e-7a8d-4370-b7d9-737cb0644096",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a9d8b076-4429-4ac5-850e-4eeb414f16d4"
        },
        "item": {
          "id": "43846504-95ee-4b50-9afb-eecc37da9627",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4402f9fb-22c0-49b7-8649-74129f83d0f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "43846504-95ee-4b50-9afb-eecc37da9627",
        "cursor": {
          "ref": "9d8c936e-7a8d-4370-b7d9-737cb0644096",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a9d8b076-4429-4ac5-850e-4eeb414f16d4"
        },
        "item": {
          "id": "43846504-95ee-4b50-9afb-eecc37da9627",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4402f9fb-22c0-49b7-8649-74129f83d0f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "c2a957e2-2f0a-4a60-880e-6871229f24d4",
        "cursor": {
          "ref": "f5a1d94f-bcf0-49a0-b940-3bf0b716cbb4",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "675c2560-30db-4f28-8aa1-7258440bffc4"
        },
        "item": {
          "id": "c2a957e2-2f0a-4a60-880e-6871229f24d4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a4e9a6b1-3359-4367-920e-994e4707b97b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "c2a957e2-2f0a-4a60-880e-6871229f24d4",
        "cursor": {
          "ref": "f5a1d94f-bcf0-49a0-b940-3bf0b716cbb4",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "675c2560-30db-4f28-8aa1-7258440bffc4"
        },
        "item": {
          "id": "c2a957e2-2f0a-4a60-880e-6871229f24d4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a4e9a6b1-3359-4367-920e-994e4707b97b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "841eddae-6cbb-4916-b58d-bb933c0c1d20",
        "cursor": {
          "ref": "891b3c5d-ae1b-4bc2-a2f5-222582ff20c6",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e58b27e5-931b-4f71-9440-e9ca854577f3"
        },
        "item": {
          "id": "841eddae-6cbb-4916-b58d-bb933c0c1d20",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2d16eb2c-fd64-4b72-ab3d-6ed2ac1b5a60",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "841eddae-6cbb-4916-b58d-bb933c0c1d20",
        "cursor": {
          "ref": "891b3c5d-ae1b-4bc2-a2f5-222582ff20c6",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e58b27e5-931b-4f71-9440-e9ca854577f3"
        },
        "item": {
          "id": "841eddae-6cbb-4916-b58d-bb933c0c1d20",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2d16eb2c-fd64-4b72-ab3d-6ed2ac1b5a60",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "48325963-d344-4cf7-8289-11ceffc9d795",
        "cursor": {
          "ref": "6e476fe7-0fe4-495b-9b17-17253f9546a8",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "061e0366-7d62-4dda-9f21-ebddf2d39347"
        },
        "item": {
          "id": "48325963-d344-4cf7-8289-11ceffc9d795",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "63c54ace-c351-46ed-a9cc-9fcd3fcf5e6b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "48325963-d344-4cf7-8289-11ceffc9d795",
        "cursor": {
          "ref": "6e476fe7-0fe4-495b-9b17-17253f9546a8",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "061e0366-7d62-4dda-9f21-ebddf2d39347"
        },
        "item": {
          "id": "48325963-d344-4cf7-8289-11ceffc9d795",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "63c54ace-c351-46ed-a9cc-9fcd3fcf5e6b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "0f2601a0-7b12-4abb-b2d2-f44ffbeb0377",
        "cursor": {
          "ref": "598d8118-b236-43eb-9fdf-1f3c89fc23ad",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7623b7c1-347d-4b3c-b6fb-1f7e571690f2"
        },
        "item": {
          "id": "0f2601a0-7b12-4abb-b2d2-f44ffbeb0377",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "33892990-b28a-4f63-a798-4942c73ae9a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "0f2601a0-7b12-4abb-b2d2-f44ffbeb0377",
        "cursor": {
          "ref": "598d8118-b236-43eb-9fdf-1f3c89fc23ad",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7623b7c1-347d-4b3c-b6fb-1f7e571690f2"
        },
        "item": {
          "id": "0f2601a0-7b12-4abb-b2d2-f44ffbeb0377",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "33892990-b28a-4f63-a798-4942c73ae9a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "eec0c3a0-c73d-4a44-a635-aa8a447ac3cd",
        "cursor": {
          "ref": "ffb50866-1da1-4e2e-b073-5171e2fdddd9",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "dca5f516-af49-4ef7-a7d0-89216d2561be"
        },
        "item": {
          "id": "eec0c3a0-c73d-4a44-a635-aa8a447ac3cd",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "17af032d-d939-40d7-b2fe-2c80efe48f0b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "eec0c3a0-c73d-4a44-a635-aa8a447ac3cd",
        "cursor": {
          "ref": "ffb50866-1da1-4e2e-b073-5171e2fdddd9",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "dca5f516-af49-4ef7-a7d0-89216d2561be"
        },
        "item": {
          "id": "eec0c3a0-c73d-4a44-a635-aa8a447ac3cd",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "17af032d-d939-40d7-b2fe-2c80efe48f0b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "5349609f-78c5-4c17-9118-09cfe2504cfd",
        "cursor": {
          "ref": "65a85d1d-d415-4fb8-bfb0-0197a7af6fe0",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "bac272d6-96bd-4e93-83e4-4b0adfd66714"
        },
        "item": {
          "id": "5349609f-78c5-4c17-9118-09cfe2504cfd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "83f9be6d-e98b-4cbc-808f-1cc8d20ace2d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "5349609f-78c5-4c17-9118-09cfe2504cfd",
        "cursor": {
          "ref": "65a85d1d-d415-4fb8-bfb0-0197a7af6fe0",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "bac272d6-96bd-4e93-83e4-4b0adfd66714"
        },
        "item": {
          "id": "5349609f-78c5-4c17-9118-09cfe2504cfd",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "83f9be6d-e98b-4cbc-808f-1cc8d20ace2d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "74143765-23fd-4ee7-8931-c06901191bb3",
        "cursor": {
          "ref": "831bfc42-fbff-4b24-aa42-4d317fc7e0b6",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "93c3e63f-4a03-4bb1-b9c3-f7456331ce04"
        },
        "item": {
          "id": "74143765-23fd-4ee7-8931-c06901191bb3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7ecb7408-4576-4247-817f-3564e589cab0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "74143765-23fd-4ee7-8931-c06901191bb3",
        "cursor": {
          "ref": "831bfc42-fbff-4b24-aa42-4d317fc7e0b6",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "93c3e63f-4a03-4bb1-b9c3-f7456331ce04"
        },
        "item": {
          "id": "74143765-23fd-4ee7-8931-c06901191bb3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7ecb7408-4576-4247-817f-3564e589cab0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "3df01c04-93e0-4daa-a0a8-a6a29e53c7bd",
        "cursor": {
          "ref": "7449aae5-7397-4fd3-99c9-affe344c01c4",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "81bd6ca4-8663-451a-8328-c7ba109d7139"
        },
        "item": {
          "id": "3df01c04-93e0-4daa-a0a8-a6a29e53c7bd",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "68825c90-c74d-4e76-9347-c16cc08f9e98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "3df01c04-93e0-4daa-a0a8-a6a29e53c7bd",
        "cursor": {
          "ref": "7449aae5-7397-4fd3-99c9-affe344c01c4",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "81bd6ca4-8663-451a-8328-c7ba109d7139"
        },
        "item": {
          "id": "3df01c04-93e0-4daa-a0a8-a6a29e53c7bd",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "68825c90-c74d-4e76-9347-c16cc08f9e98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "b62ed02f-defd-4755-aeb4-c2205c92c388",
        "cursor": {
          "ref": "10e47de5-b265-4ed4-867a-1354adaed2c6",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "64376aa5-7563-4952-ae8f-6525471681a2"
        },
        "item": {
          "id": "b62ed02f-defd-4755-aeb4-c2205c92c388",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9d39ed67-ee5d-4fef-9426-bd3073ee04eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "b62ed02f-defd-4755-aeb4-c2205c92c388",
        "cursor": {
          "ref": "10e47de5-b265-4ed4-867a-1354adaed2c6",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "64376aa5-7563-4952-ae8f-6525471681a2"
        },
        "item": {
          "id": "b62ed02f-defd-4755-aeb4-c2205c92c388",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9d39ed67-ee5d-4fef-9426-bd3073ee04eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "f480e71a-339c-4789-a2cc-d3048df7295d",
        "cursor": {
          "ref": "4a16b03e-b46e-494a-8514-d6cc3c54b8ed",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "403ceb03-5665-4c29-9b82-f8752afe80e2"
        },
        "item": {
          "id": "f480e71a-339c-4789-a2cc-d3048df7295d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ba4bd442-3bb9-41c7-a9b7-b6845010dee1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "f480e71a-339c-4789-a2cc-d3048df7295d",
        "cursor": {
          "ref": "4a16b03e-b46e-494a-8514-d6cc3c54b8ed",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "403ceb03-5665-4c29-9b82-f8752afe80e2"
        },
        "item": {
          "id": "f480e71a-339c-4789-a2cc-d3048df7295d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ba4bd442-3bb9-41c7-a9b7-b6845010dee1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "dd33376a-da12-4208-88b6-91ee97734311",
        "cursor": {
          "ref": "acc83402-ed44-46bb-b9b8-641a248ae068",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ed06b610-b87e-4525-a493-3cc4ede49bcc"
        },
        "item": {
          "id": "dd33376a-da12-4208-88b6-91ee97734311",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "249898ce-953a-4cea-ba5d-bc0dcaaa8dd9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "dd33376a-da12-4208-88b6-91ee97734311",
        "cursor": {
          "ref": "acc83402-ed44-46bb-b9b8-641a248ae068",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ed06b610-b87e-4525-a493-3cc4ede49bcc"
        },
        "item": {
          "id": "dd33376a-da12-4208-88b6-91ee97734311",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "249898ce-953a-4cea-ba5d-bc0dcaaa8dd9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "77fa287b-1e79-4251-b0af-2a1c19a9558b",
        "cursor": {
          "ref": "2d49c641-a9b8-4b33-ab3f-5e101096d594",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ed866bf2-2875-4fda-8192-08f705ad6d61"
        },
        "item": {
          "id": "77fa287b-1e79-4251-b0af-2a1c19a9558b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4f2a6116-395a-4704-9d8b-8a07ec301639",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "77fa287b-1e79-4251-b0af-2a1c19a9558b",
        "cursor": {
          "ref": "2d49c641-a9b8-4b33-ab3f-5e101096d594",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ed866bf2-2875-4fda-8192-08f705ad6d61"
        },
        "item": {
          "id": "77fa287b-1e79-4251-b0af-2a1c19a9558b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4f2a6116-395a-4704-9d8b-8a07ec301639",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "a7f1f77f-73f1-424b-84ff-696ee2e1efa1",
        "cursor": {
          "ref": "fa1a23c7-f811-4c79-ba4b-06cfee7a57bb",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "acd93e0d-c9c8-41a6-8cb5-cbe26596d9f7"
        },
        "item": {
          "id": "a7f1f77f-73f1-424b-84ff-696ee2e1efa1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "53b1cad0-0c5e-47c0-9de1-d5e15f91836f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "a7f1f77f-73f1-424b-84ff-696ee2e1efa1",
        "cursor": {
          "ref": "fa1a23c7-f811-4c79-ba4b-06cfee7a57bb",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "acd93e0d-c9c8-41a6-8cb5-cbe26596d9f7"
        },
        "item": {
          "id": "a7f1f77f-73f1-424b-84ff-696ee2e1efa1",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "53b1cad0-0c5e-47c0-9de1-d5e15f91836f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "10f65a26-b9f1-49f7-95a4-e0b95b1fda10",
        "cursor": {
          "ref": "03867831-ad98-4137-8300-1c80ad02aca1",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f2ce244d-e1cb-4f7a-8bc6-8fddf1ca86c7"
        },
        "item": {
          "id": "10f65a26-b9f1-49f7-95a4-e0b95b1fda10",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "42ce9311-c0be-4f1e-8e12-7d6bf8bfd70b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "10f65a26-b9f1-49f7-95a4-e0b95b1fda10",
        "cursor": {
          "ref": "03867831-ad98-4137-8300-1c80ad02aca1",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f2ce244d-e1cb-4f7a-8bc6-8fddf1ca86c7"
        },
        "item": {
          "id": "10f65a26-b9f1-49f7-95a4-e0b95b1fda10",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "42ce9311-c0be-4f1e-8e12-7d6bf8bfd70b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "545f1fe9-7b4c-430f-8793-95eb7f24b481",
        "cursor": {
          "ref": "1be7f6b2-de09-432c-b7af-04abade30260",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0264c313-e3f2-4915-88aa-967182b58567"
        },
        "item": {
          "id": "545f1fe9-7b4c-430f-8793-95eb7f24b481",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "51af05b3-e324-4ad8-92f1-efc3bdbe8382",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "545f1fe9-7b4c-430f-8793-95eb7f24b481",
        "cursor": {
          "ref": "1be7f6b2-de09-432c-b7af-04abade30260",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0264c313-e3f2-4915-88aa-967182b58567"
        },
        "item": {
          "id": "545f1fe9-7b4c-430f-8793-95eb7f24b481",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "51af05b3-e324-4ad8-92f1-efc3bdbe8382",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "fe912aa7-db84-4a6e-b384-952294f027b0",
        "cursor": {
          "ref": "44898402-0393-4eb5-85b1-99818a77810a",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8d3d1d53-b834-4c12-9d98-833465c3c77e"
        },
        "item": {
          "id": "fe912aa7-db84-4a6e-b384-952294f027b0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "88dd97cd-3568-4a4c-a755-77135c57e6e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "fe912aa7-db84-4a6e-b384-952294f027b0",
        "cursor": {
          "ref": "44898402-0393-4eb5-85b1-99818a77810a",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8d3d1d53-b834-4c12-9d98-833465c3c77e"
        },
        "item": {
          "id": "fe912aa7-db84-4a6e-b384-952294f027b0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "88dd97cd-3568-4a4c-a755-77135c57e6e6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "a7fc6a7a-38f7-4fab-8b03-c6ff262c9ac5",
        "cursor": {
          "ref": "8e536fac-9328-4816-ae71-7dd759886af4",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "455bd140-dcb2-4233-a755-b1318c11ea0d"
        },
        "item": {
          "id": "a7fc6a7a-38f7-4fab-8b03-c6ff262c9ac5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b3caf7f8-7d2f-4a26-aff3-c1218cbcd7f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "a7fc6a7a-38f7-4fab-8b03-c6ff262c9ac5",
        "cursor": {
          "ref": "8e536fac-9328-4816-ae71-7dd759886af4",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "455bd140-dcb2-4233-a755-b1318c11ea0d"
        },
        "item": {
          "id": "a7fc6a7a-38f7-4fab-8b03-c6ff262c9ac5",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b3caf7f8-7d2f-4a26-aff3-c1218cbcd7f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "3dc2dfa7-6b6b-48ca-99b6-8ee98e84d1b3",
        "cursor": {
          "ref": "3a7c893a-a37a-4892-9ee6-e1bd7e226314",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0c3160ef-90b5-4e22-b22d-2a5b63dc7def"
        },
        "item": {
          "id": "3dc2dfa7-6b6b-48ca-99b6-8ee98e84d1b3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "95225ddc-4f57-4f8c-9243-27aa5a681b82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "3dc2dfa7-6b6b-48ca-99b6-8ee98e84d1b3",
        "cursor": {
          "ref": "3a7c893a-a37a-4892-9ee6-e1bd7e226314",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0c3160ef-90b5-4e22-b22d-2a5b63dc7def"
        },
        "item": {
          "id": "3dc2dfa7-6b6b-48ca-99b6-8ee98e84d1b3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "95225ddc-4f57-4f8c-9243-27aa5a681b82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "ee257f3c-f744-4229-9449-848da56161ea",
        "cursor": {
          "ref": "12ab0682-c3a3-444d-a87d-4217dd90768a",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b55e45e1-f832-4f3f-9fef-5ff98b766a44"
        },
        "item": {
          "id": "ee257f3c-f744-4229-9449-848da56161ea",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "30a879d2-e72c-4b1a-9d32-efe45c37d82c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "ee257f3c-f744-4229-9449-848da56161ea",
        "cursor": {
          "ref": "12ab0682-c3a3-444d-a87d-4217dd90768a",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b55e45e1-f832-4f3f-9fef-5ff98b766a44"
        },
        "item": {
          "id": "ee257f3c-f744-4229-9449-848da56161ea",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "30a879d2-e72c-4b1a-9d32-efe45c37d82c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "d3a88f9b-169d-4823-b4a8-9cc976f22c19",
        "cursor": {
          "ref": "1563c83c-be59-4cb4-8891-1bf1b4d6e132",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9f32151c-19ad-4971-883a-66d19e0adb7d"
        },
        "item": {
          "id": "d3a88f9b-169d-4823-b4a8-9cc976f22c19",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "62d86cd8-20fb-4c9b-95a2-e219b8c4641b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "d3a88f9b-169d-4823-b4a8-9cc976f22c19",
        "cursor": {
          "ref": "1563c83c-be59-4cb4-8891-1bf1b4d6e132",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9f32151c-19ad-4971-883a-66d19e0adb7d"
        },
        "item": {
          "id": "d3a88f9b-169d-4823-b4a8-9cc976f22c19",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "62d86cd8-20fb-4c9b-95a2-e219b8c4641b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "b4bdbb40-80b8-4fc5-87c1-f310f03c29b0",
        "cursor": {
          "ref": "263194d2-6c5f-4d8d-abae-60e9c8ceffd1",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8ad8efd2-56ed-44f0-b14f-1abf29cf7a64"
        },
        "item": {
          "id": "b4bdbb40-80b8-4fc5-87c1-f310f03c29b0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "69801b37-aa03-4f67-96aa-7791e366330d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "b4bdbb40-80b8-4fc5-87c1-f310f03c29b0",
        "cursor": {
          "ref": "263194d2-6c5f-4d8d-abae-60e9c8ceffd1",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8ad8efd2-56ed-44f0-b14f-1abf29cf7a64"
        },
        "item": {
          "id": "b4bdbb40-80b8-4fc5-87c1-f310f03c29b0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "69801b37-aa03-4f67-96aa-7791e366330d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "4e5e32f0-a5e4-4425-91ce-ca245eb204e9",
        "cursor": {
          "ref": "65eec453-f46b-4e84-9b80-8a774a190898",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "aa7526fd-7ccc-40be-9042-47ce76a1e5b2"
        },
        "item": {
          "id": "4e5e32f0-a5e4-4425-91ce-ca245eb204e9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6bf51d52-03cd-4f6b-9338-9e4685db997c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "4e5e32f0-a5e4-4425-91ce-ca245eb204e9",
        "cursor": {
          "ref": "65eec453-f46b-4e84-9b80-8a774a190898",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "aa7526fd-7ccc-40be-9042-47ce76a1e5b2"
        },
        "item": {
          "id": "4e5e32f0-a5e4-4425-91ce-ca245eb204e9",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6bf51d52-03cd-4f6b-9338-9e4685db997c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "5da31546-4db0-4e92-9ef4-a6c0cfdf76fe",
        "cursor": {
          "ref": "e0bc6b1c-9727-445e-b064-a0e15d4bdd35",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7223ad01-2f9a-481e-b347-ee6c24a9e33a"
        },
        "item": {
          "id": "5da31546-4db0-4e92-9ef4-a6c0cfdf76fe",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "dced9def-b01e-499e-822d-37d5f967497c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5da31546-4db0-4e92-9ef4-a6c0cfdf76fe",
        "cursor": {
          "ref": "e0bc6b1c-9727-445e-b064-a0e15d4bdd35",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7223ad01-2f9a-481e-b347-ee6c24a9e33a"
        },
        "item": {
          "id": "5da31546-4db0-4e92-9ef4-a6c0cfdf76fe",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "dced9def-b01e-499e-822d-37d5f967497c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "b4f2801d-31db-44b2-b123-c89b9a9f28a7",
        "cursor": {
          "ref": "8d8a0fa8-3df7-4598-be1a-a82820a7a5fb",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9f6c4335-826e-4ed4-a2a2-b2a79efb413a"
        },
        "item": {
          "id": "b4f2801d-31db-44b2-b123-c89b9a9f28a7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1940eb9b-35ac-493c-8f11-18865c7066a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b4f2801d-31db-44b2-b123-c89b9a9f28a7",
        "cursor": {
          "ref": "8d8a0fa8-3df7-4598-be1a-a82820a7a5fb",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9f6c4335-826e-4ed4-a2a2-b2a79efb413a"
        },
        "item": {
          "id": "b4f2801d-31db-44b2-b123-c89b9a9f28a7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1940eb9b-35ac-493c-8f11-18865c7066a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "3cc634bb-7b74-47fe-b361-54c408686331",
        "cursor": {
          "ref": "7c1a16fe-4861-4ca1-88c9-0eb0b5515b30",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "20954b5c-fe47-4392-a052-cba3fd643db9"
        },
        "item": {
          "id": "3cc634bb-7b74-47fe-b361-54c408686331",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ecb16869-3c1a-4518-bd7a-d3179733b5b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "3cc634bb-7b74-47fe-b361-54c408686331",
        "cursor": {
          "ref": "7c1a16fe-4861-4ca1-88c9-0eb0b5515b30",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "20954b5c-fe47-4392-a052-cba3fd643db9"
        },
        "item": {
          "id": "3cc634bb-7b74-47fe-b361-54c408686331",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ecb16869-3c1a-4518-bd7a-d3179733b5b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "8c3ec80e-949a-4848-a7de-2c70b323b3e4",
        "cursor": {
          "ref": "5dcf874d-af0c-4d2d-b156-47ba8b6ff726",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b5b24cf4-35fe-4e0e-9f78-b21c28b4e0b1"
        },
        "item": {
          "id": "8c3ec80e-949a-4848-a7de-2c70b323b3e4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e39c4f5c-1ae6-4d7b-a6e2-12d51d480321",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "8c3ec80e-949a-4848-a7de-2c70b323b3e4",
        "cursor": {
          "ref": "5dcf874d-af0c-4d2d-b156-47ba8b6ff726",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b5b24cf4-35fe-4e0e-9f78-b21c28b4e0b1"
        },
        "item": {
          "id": "8c3ec80e-949a-4848-a7de-2c70b323b3e4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e39c4f5c-1ae6-4d7b-a6e2-12d51d480321",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "d93f8206-6179-4b4d-a720-418b559ad421",
        "cursor": {
          "ref": "d2cca11f-239f-4c54-a0eb-375e6beb080f",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f46cda60-936c-46c7-adf5-4ebbee572554"
        },
        "item": {
          "id": "d93f8206-6179-4b4d-a720-418b559ad421",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c817b38e-6258-48f6-a8ba-cc9647cac507",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "d93f8206-6179-4b4d-a720-418b559ad421",
        "cursor": {
          "ref": "d2cca11f-239f-4c54-a0eb-375e6beb080f",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f46cda60-936c-46c7-adf5-4ebbee572554"
        },
        "item": {
          "id": "d93f8206-6179-4b4d-a720-418b559ad421",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c817b38e-6258-48f6-a8ba-cc9647cac507",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "75e744f4-0518-48f1-91e3-fb6506a334ae",
        "cursor": {
          "ref": "150f2373-4ea7-44e4-a6af-4e405bfe2bce",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "121d7f76-a0d9-42f9-a72d-8f6b89a0a6c4"
        },
        "item": {
          "id": "75e744f4-0518-48f1-91e3-fb6506a334ae",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "02242690-03d9-4e89-8589-6fcc541dc044",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "75e744f4-0518-48f1-91e3-fb6506a334ae",
        "cursor": {
          "ref": "150f2373-4ea7-44e4-a6af-4e405bfe2bce",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "121d7f76-a0d9-42f9-a72d-8f6b89a0a6c4"
        },
        "item": {
          "id": "75e744f4-0518-48f1-91e3-fb6506a334ae",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "02242690-03d9-4e89-8589-6fcc541dc044",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "05764521-88fc-44fd-9b5d-40c8034f026b",
        "cursor": {
          "ref": "886d483c-74c9-4e1d-add3-7267298113a5",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a7aba20a-dadb-4ae8-86dd-31a337ebd695"
        },
        "item": {
          "id": "05764521-88fc-44fd-9b5d-40c8034f026b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0beb2d98-0f90-4d35-bf58-4df1cfedf7de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "05764521-88fc-44fd-9b5d-40c8034f026b",
        "cursor": {
          "ref": "886d483c-74c9-4e1d-add3-7267298113a5",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a7aba20a-dadb-4ae8-86dd-31a337ebd695"
        },
        "item": {
          "id": "05764521-88fc-44fd-9b5d-40c8034f026b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0beb2d98-0f90-4d35-bf58-4df1cfedf7de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "540423c8-bd6d-4f9c-b781-cea18afcf215",
        "cursor": {
          "ref": "33223873-a60a-4887-9e26-bec103cdc91c",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d486e2d8-aeee-4419-b7df-de0bd9d2fe9c"
        },
        "item": {
          "id": "540423c8-bd6d-4f9c-b781-cea18afcf215",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5aec1e2e-9731-4e46-a7c6-db41506b5dae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "540423c8-bd6d-4f9c-b781-cea18afcf215",
        "cursor": {
          "ref": "33223873-a60a-4887-9e26-bec103cdc91c",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d486e2d8-aeee-4419-b7df-de0bd9d2fe9c"
        },
        "item": {
          "id": "540423c8-bd6d-4f9c-b781-cea18afcf215",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5aec1e2e-9731-4e46-a7c6-db41506b5dae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "b8b41f85-b6aa-4995-803a-22790334306c",
        "cursor": {
          "ref": "db1d3c49-ead2-41cc-b195-c536b75db1bd",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7b7f9d5a-fddc-401b-8612-8770da184b00"
        },
        "item": {
          "id": "b8b41f85-b6aa-4995-803a-22790334306c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5ba7d809-50e3-4309-b413-9a91a95802a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "b8b41f85-b6aa-4995-803a-22790334306c",
        "cursor": {
          "ref": "db1d3c49-ead2-41cc-b195-c536b75db1bd",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7b7f9d5a-fddc-401b-8612-8770da184b00"
        },
        "item": {
          "id": "b8b41f85-b6aa-4995-803a-22790334306c",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5ba7d809-50e3-4309-b413-9a91a95802a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "3093fa3e-69f7-4e19-8a12-6d75c248d4a6",
        "cursor": {
          "ref": "870da006-1a79-4c60-bc52-77cdd6eaac27",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "72f4a3e7-41b9-4dcf-b616-10f66ab6a729"
        },
        "item": {
          "id": "3093fa3e-69f7-4e19-8a12-6d75c248d4a6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f0fb421e-a796-4914-a939-e7e164db330f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "3093fa3e-69f7-4e19-8a12-6d75c248d4a6",
        "cursor": {
          "ref": "870da006-1a79-4c60-bc52-77cdd6eaac27",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "72f4a3e7-41b9-4dcf-b616-10f66ab6a729"
        },
        "item": {
          "id": "3093fa3e-69f7-4e19-8a12-6d75c248d4a6",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f0fb421e-a796-4914-a939-e7e164db330f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "c3e99a3b-7113-4d42-ac4c-fd17a7ea0055",
        "cursor": {
          "ref": "72ed5c62-655a-4972-809b-d0b01a54bd71",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5ddfcf97-cea7-4055-b463-cd9acb06a108"
        },
        "item": {
          "id": "c3e99a3b-7113-4d42-ac4c-fd17a7ea0055",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d923ea60-c0cb-4e9a-a34a-51dc458bd267",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "c3e99a3b-7113-4d42-ac4c-fd17a7ea0055",
        "cursor": {
          "ref": "72ed5c62-655a-4972-809b-d0b01a54bd71",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5ddfcf97-cea7-4055-b463-cd9acb06a108"
        },
        "item": {
          "id": "c3e99a3b-7113-4d42-ac4c-fd17a7ea0055",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d923ea60-c0cb-4e9a-a34a-51dc458bd267",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "a95d22ce-9b47-416f-8118-96f6bf88dd69",
        "cursor": {
          "ref": "0dc8d479-1f53-462d-8680-bc686bea022b",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "53e788a3-9a89-46e0-a504-de69f94be9de"
        },
        "item": {
          "id": "a95d22ce-9b47-416f-8118-96f6bf88dd69",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a4b66589-bae8-40dd-9cc4-170004622c76",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "a95d22ce-9b47-416f-8118-96f6bf88dd69",
        "cursor": {
          "ref": "0dc8d479-1f53-462d-8680-bc686bea022b",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "53e788a3-9a89-46e0-a504-de69f94be9de"
        },
        "item": {
          "id": "a95d22ce-9b47-416f-8118-96f6bf88dd69",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a4b66589-bae8-40dd-9cc4-170004622c76",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "3b169062-bc66-44b4-af53-d6c6f484bacc",
        "cursor": {
          "ref": "844c0477-e545-4eb0-8142-010e91cc888e",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "77be2b41-f6e2-4060-b0e8-a372e57b297c"
        },
        "item": {
          "id": "3b169062-bc66-44b4-af53-d6c6f484bacc",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c26dee57-de86-4e70-9ea8-f31e1f42ea48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "3b169062-bc66-44b4-af53-d6c6f484bacc",
        "cursor": {
          "ref": "844c0477-e545-4eb0-8142-010e91cc888e",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "77be2b41-f6e2-4060-b0e8-a372e57b297c"
        },
        "item": {
          "id": "3b169062-bc66-44b4-af53-d6c6f484bacc",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c26dee57-de86-4e70-9ea8-f31e1f42ea48",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "137df564-a535-4c57-8d16-c767be9bd7b8",
        "cursor": {
          "ref": "d0e449fb-f933-4e10-9b27-eaee10d97af2",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "29320207-9bf3-432a-a63d-48c0e9582c59"
        },
        "item": {
          "id": "137df564-a535-4c57-8d16-c767be9bd7b8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "76960bf2-009e-4e2e-b8bf-1a4af34b891b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "137df564-a535-4c57-8d16-c767be9bd7b8",
        "cursor": {
          "ref": "d0e449fb-f933-4e10-9b27-eaee10d97af2",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "29320207-9bf3-432a-a63d-48c0e9582c59"
        },
        "item": {
          "id": "137df564-a535-4c57-8d16-c767be9bd7b8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "76960bf2-009e-4e2e-b8bf-1a4af34b891b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "75b892aa-f96f-4ecd-b42b-2cc064fc3fcb",
        "cursor": {
          "ref": "fefcc76c-dc7d-4c6e-a10f-b97d8e438aaa",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0aaabdbc-39d9-4171-9d83-4dde582cb125"
        },
        "item": {
          "id": "75b892aa-f96f-4ecd-b42b-2cc064fc3fcb",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b87c1595-98e6-414a-b139-15f33b9f2c04",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "75b892aa-f96f-4ecd-b42b-2cc064fc3fcb",
        "cursor": {
          "ref": "fefcc76c-dc7d-4c6e-a10f-b97d8e438aaa",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0aaabdbc-39d9-4171-9d83-4dde582cb125"
        },
        "item": {
          "id": "75b892aa-f96f-4ecd-b42b-2cc064fc3fcb",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b87c1595-98e6-414a-b139-15f33b9f2c04",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "34a55dd0-818f-43df-9cec-931eaae70c11",
        "cursor": {
          "ref": "e1bd263f-0e7e-47ea-ae76-b276deaa8782",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "29317a81-ae3a-49b6-99b3-b4ffc215a546"
        },
        "item": {
          "id": "34a55dd0-818f-43df-9cec-931eaae70c11",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c388b287-a8fb-4da3-8acb-16848f22340f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "34a55dd0-818f-43df-9cec-931eaae70c11",
        "cursor": {
          "ref": "e1bd263f-0e7e-47ea-ae76-b276deaa8782",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "29317a81-ae3a-49b6-99b3-b4ffc215a546"
        },
        "item": {
          "id": "34a55dd0-818f-43df-9cec-931eaae70c11",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "c388b287-a8fb-4da3-8acb-16848f22340f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "d782a6bd-f9ee-44f1-af88-041f9d93f24f",
        "cursor": {
          "ref": "36be5231-9c96-4ab1-abe8-a227a33abff4",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "67633635-9e7c-40d5-8b09-247dcbf0ab3d"
        },
        "item": {
          "id": "d782a6bd-f9ee-44f1-af88-041f9d93f24f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "771b3d0b-c43a-4b67-bf53-deeb873d6143",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "d782a6bd-f9ee-44f1-af88-041f9d93f24f",
        "cursor": {
          "ref": "36be5231-9c96-4ab1-abe8-a227a33abff4",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "67633635-9e7c-40d5-8b09-247dcbf0ab3d"
        },
        "item": {
          "id": "d782a6bd-f9ee-44f1-af88-041f9d93f24f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "771b3d0b-c43a-4b67-bf53-deeb873d6143",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "a400b844-8dae-400b-85a9-86a863f8d6f4",
        "cursor": {
          "ref": "ad817306-86dc-401e-a5e9-35e6a7e5b747",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "76091d13-c544-481e-a899-52dedf69a165"
        },
        "item": {
          "id": "a400b844-8dae-400b-85a9-86a863f8d6f4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "85236069-9368-4a5b-8ddd-b44eb7c094e0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "a400b844-8dae-400b-85a9-86a863f8d6f4",
        "cursor": {
          "ref": "ad817306-86dc-401e-a5e9-35e6a7e5b747",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "76091d13-c544-481e-a899-52dedf69a165"
        },
        "item": {
          "id": "a400b844-8dae-400b-85a9-86a863f8d6f4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "85236069-9368-4a5b-8ddd-b44eb7c094e0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "8614a65e-d670-41b0-b657-3cf5b27a37ef",
        "cursor": {
          "ref": "6e987e66-d1ac-4857-86e5-8ce8f3cbd161",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f7ab17ab-a7e2-449b-b6e9-86d84c89c362"
        },
        "item": {
          "id": "8614a65e-d670-41b0-b657-3cf5b27a37ef",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c79679ed-c48d-4d71-9e17-46081a6e9c09",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "8614a65e-d670-41b0-b657-3cf5b27a37ef",
        "cursor": {
          "ref": "6e987e66-d1ac-4857-86e5-8ce8f3cbd161",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f7ab17ab-a7e2-449b-b6e9-86d84c89c362"
        },
        "item": {
          "id": "8614a65e-d670-41b0-b657-3cf5b27a37ef",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c79679ed-c48d-4d71-9e17-46081a6e9c09",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "d7cb24f1-b6ff-4e23-8f54-c3b31de8e56d",
        "cursor": {
          "ref": "f570c8b5-9a28-4079-bd67-d7a04f924574",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b07fb46d-d11a-45af-93df-738d345d11e8"
        },
        "item": {
          "id": "d7cb24f1-b6ff-4e23-8f54-c3b31de8e56d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fbe2af79-fc8f-4231-91ab-74e484c0f749",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "d7cb24f1-b6ff-4e23-8f54-c3b31de8e56d",
        "cursor": {
          "ref": "f570c8b5-9a28-4079-bd67-d7a04f924574",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b07fb46d-d11a-45af-93df-738d345d11e8"
        },
        "item": {
          "id": "d7cb24f1-b6ff-4e23-8f54-c3b31de8e56d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fbe2af79-fc8f-4231-91ab-74e484c0f749",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "2a55b2b8-4003-4896-be94-c31e48ecbcf8",
        "cursor": {
          "ref": "eb2f417d-0147-4cc0-8a5a-4ad38eae4e17",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d78e4706-0d9c-4ca4-9b8a-c60952301ff4"
        },
        "item": {
          "id": "2a55b2b8-4003-4896-be94-c31e48ecbcf8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a4915b6f-b345-41bd-9064-b4afed2cfa75",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "2a55b2b8-4003-4896-be94-c31e48ecbcf8",
        "cursor": {
          "ref": "eb2f417d-0147-4cc0-8a5a-4ad38eae4e17",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d78e4706-0d9c-4ca4-9b8a-c60952301ff4"
        },
        "item": {
          "id": "2a55b2b8-4003-4896-be94-c31e48ecbcf8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a4915b6f-b345-41bd-9064-b4afed2cfa75",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "3a3aa88b-9dec-44b0-a224-3a72403e7aea",
        "cursor": {
          "ref": "f34cf1d1-b07f-4d95-8f06-c9aab665ffdc",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "63d89eae-3edf-4008-992e-a11e3f00b263"
        },
        "item": {
          "id": "3a3aa88b-9dec-44b0-a224-3a72403e7aea",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a024d92d-debb-47be-8d22-6e1b80f65fff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "3a3aa88b-9dec-44b0-a224-3a72403e7aea",
        "cursor": {
          "ref": "f34cf1d1-b07f-4d95-8f06-c9aab665ffdc",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "63d89eae-3edf-4008-992e-a11e3f00b263"
        },
        "item": {
          "id": "3a3aa88b-9dec-44b0-a224-3a72403e7aea",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a024d92d-debb-47be-8d22-6e1b80f65fff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "f9f3c876-7c87-4fb1-b8ea-b93d40bd7ff9",
        "cursor": {
          "ref": "c04622ec-c276-4117-ac7c-5bdd39b1ffdd",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "91e2eb52-9802-496d-a352-53053d3996a8"
        },
        "item": {
          "id": "f9f3c876-7c87-4fb1-b8ea-b93d40bd7ff9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a9460c8e-0ac8-429a-b2ae-d9dd87d5c3c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "f9f3c876-7c87-4fb1-b8ea-b93d40bd7ff9",
        "cursor": {
          "ref": "c04622ec-c276-4117-ac7c-5bdd39b1ffdd",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "91e2eb52-9802-496d-a352-53053d3996a8"
        },
        "item": {
          "id": "f9f3c876-7c87-4fb1-b8ea-b93d40bd7ff9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "a9460c8e-0ac8-429a-b2ae-d9dd87d5c3c2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "e21f1dac-3914-462f-8897-da04202d7324",
        "cursor": {
          "ref": "45800fb4-a337-4e69-aaa0-2c7fa1a9b6c7",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bf726b21-3cdd-44c9-9c4c-596781267fce"
        },
        "item": {
          "id": "e21f1dac-3914-462f-8897-da04202d7324",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a4f4d763-0073-4e45-87a6-65ac314e9f20",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "e21f1dac-3914-462f-8897-da04202d7324",
        "cursor": {
          "ref": "45800fb4-a337-4e69-aaa0-2c7fa1a9b6c7",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bf726b21-3cdd-44c9-9c4c-596781267fce"
        },
        "item": {
          "id": "e21f1dac-3914-462f-8897-da04202d7324",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a4f4d763-0073-4e45-87a6-65ac314e9f20",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "c559d4fa-e516-44f1-be56-282ebb69c750",
        "cursor": {
          "ref": "e0014283-debc-42b0-a68a-bf71b6964286",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4582efa7-be8d-4b46-885c-d9a8d8adac50"
        },
        "item": {
          "id": "c559d4fa-e516-44f1-be56-282ebb69c750",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "402ddbf2-dfe4-4680-9c4a-efc2d843243b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 78,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c559d4fa-e516-44f1-be56-282ebb69c750",
        "cursor": {
          "ref": "e0014283-debc-42b0-a68a-bf71b6964286",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4582efa7-be8d-4b46-885c-d9a8d8adac50"
        },
        "item": {
          "id": "c559d4fa-e516-44f1-be56-282ebb69c750",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "402ddbf2-dfe4-4680-9c4a-efc2d843243b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 78,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "96a0a852-dc16-45be-8d7b-bbc77c78999f",
        "cursor": {
          "ref": "5950f357-595c-458a-96d0-e666fef1722f",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3349ebca-c43d-4ef8-8dc2-aa22220cadca"
        },
        "item": {
          "id": "96a0a852-dc16-45be-8d7b-bbc77c78999f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e3a9fbe3-1b39-448d-9a05-e32fa06c0a30",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "96a0a852-dc16-45be-8d7b-bbc77c78999f",
        "cursor": {
          "ref": "5950f357-595c-458a-96d0-e666fef1722f",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3349ebca-c43d-4ef8-8dc2-aa22220cadca"
        },
        "item": {
          "id": "96a0a852-dc16-45be-8d7b-bbc77c78999f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e3a9fbe3-1b39-448d-9a05-e32fa06c0a30",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "ad9fcd81-9c79-45f1-8920-fe12b722ee43",
        "cursor": {
          "ref": "686eaf54-218b-4fb9-b0b9-5e97d6895cec",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e2dbea87-b11c-4761-bde7-3479eb7bfb9a"
        },
        "item": {
          "id": "ad9fcd81-9c79-45f1-8920-fe12b722ee43",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9b5ef9e8-be68-443c-be18-1b447e4ceea6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ad9fcd81-9c79-45f1-8920-fe12b722ee43",
        "cursor": {
          "ref": "686eaf54-218b-4fb9-b0b9-5e97d6895cec",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e2dbea87-b11c-4761-bde7-3479eb7bfb9a"
        },
        "item": {
          "id": "ad9fcd81-9c79-45f1-8920-fe12b722ee43",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9b5ef9e8-be68-443c-be18-1b447e4ceea6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "8a87f4a2-d826-4c29-ae6d-e8592a3a36e6",
        "cursor": {
          "ref": "3109ec46-1628-4497-ae18-b18cf77d706e",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "943b46dd-1b24-416f-a594-509dcbf8c8ba"
        },
        "item": {
          "id": "8a87f4a2-d826-4c29-ae6d-e8592a3a36e6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e6479246-6ed0-4d24-8ca9-7a1feb9472b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "8a87f4a2-d826-4c29-ae6d-e8592a3a36e6",
        "cursor": {
          "ref": "3109ec46-1628-4497-ae18-b18cf77d706e",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "943b46dd-1b24-416f-a594-509dcbf8c8ba"
        },
        "item": {
          "id": "8a87f4a2-d826-4c29-ae6d-e8592a3a36e6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e6479246-6ed0-4d24-8ca9-7a1feb9472b8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "601ac84e-a984-4d4b-931c-14a6c415d394",
        "cursor": {
          "ref": "44af3651-2354-4b57-a0bb-db1ac1067fa8",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "10278287-9913-46be-8397-ae43ebf63221"
        },
        "item": {
          "id": "601ac84e-a984-4d4b-931c-14a6c415d394",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "609a2b11-a39c-4571-b4ed-93ef44db4ad1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "601ac84e-a984-4d4b-931c-14a6c415d394",
        "cursor": {
          "ref": "44af3651-2354-4b57-a0bb-db1ac1067fa8",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "10278287-9913-46be-8397-ae43ebf63221"
        },
        "item": {
          "id": "601ac84e-a984-4d4b-931c-14a6c415d394",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "609a2b11-a39c-4571-b4ed-93ef44db4ad1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "4cf9a73b-7e90-4d06-83cb-26e8ca9b4c5f",
        "cursor": {
          "ref": "7b3264fd-ac4f-4ba2-81ff-834d57adebfa",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b83aff49-4153-4fad-8629-324a613656de"
        },
        "item": {
          "id": "4cf9a73b-7e90-4d06-83cb-26e8ca9b4c5f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "dfb298e8-87c6-4cb0-b325-e57afd08117e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "4cf9a73b-7e90-4d06-83cb-26e8ca9b4c5f",
        "cursor": {
          "ref": "7b3264fd-ac4f-4ba2-81ff-834d57adebfa",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b83aff49-4153-4fad-8629-324a613656de"
        },
        "item": {
          "id": "4cf9a73b-7e90-4d06-83cb-26e8ca9b4c5f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "dfb298e8-87c6-4cb0-b325-e57afd08117e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "3292f16c-bd7c-4073-a306-32c399d1e7be",
        "cursor": {
          "ref": "b4726e37-a225-4e2d-9d7d-00cebb82762f",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3117aaad-d0e1-4b6a-86cb-c07c9ca2c305"
        },
        "item": {
          "id": "3292f16c-bd7c-4073-a306-32c399d1e7be",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9896c413-2f5b-4ab0-8d8f-aa661d052412",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "3292f16c-bd7c-4073-a306-32c399d1e7be",
        "cursor": {
          "ref": "b4726e37-a225-4e2d-9d7d-00cebb82762f",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3117aaad-d0e1-4b6a-86cb-c07c9ca2c305"
        },
        "item": {
          "id": "3292f16c-bd7c-4073-a306-32c399d1e7be",
          "name": "credentials_verify"
        },
        "response": {
          "id": "9896c413-2f5b-4ab0-8d8f-aa661d052412",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "e0120394-18f8-405b-a693-1265e3bc2c0c",
        "cursor": {
          "ref": "09440e54-0871-4dd7-8f93-d3666abc54c9",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1763768d-8b95-4313-bb40-3b1e19e79864"
        },
        "item": {
          "id": "e0120394-18f8-405b-a693-1265e3bc2c0c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b6cb5513-869f-480c-8197-2e419f73f8a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "e0120394-18f8-405b-a693-1265e3bc2c0c",
        "cursor": {
          "ref": "09440e54-0871-4dd7-8f93-d3666abc54c9",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1763768d-8b95-4313-bb40-3b1e19e79864"
        },
        "item": {
          "id": "e0120394-18f8-405b-a693-1265e3bc2c0c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b6cb5513-869f-480c-8197-2e419f73f8a1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "95339d6d-1f93-4a1b-83be-4a974f2e4734",
        "cursor": {
          "ref": "6357cc5b-fb66-460f-a258-37da4926ec5c",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d64190fd-f62c-4d2f-abee-7c57f849bbfe"
        },
        "item": {
          "id": "95339d6d-1f93-4a1b-83be-4a974f2e4734",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "95339d6d-1f93-4a1b-83be-4a974f2e4734",
        "cursor": {
          "ref": "6357cc5b-fb66-460f-a258-37da4926ec5c",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d64190fd-f62c-4d2f-abee-7c57f849bbfe"
        },
        "item": {
          "id": "95339d6d-1f93-4a1b-83be-4a974f2e4734",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "95339d6d-1f93-4a1b-83be-4a974f2e4734",
        "cursor": {
          "ref": "6357cc5b-fb66-460f-a258-37da4926ec5c",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d64190fd-f62c-4d2f-abee-7c57f849bbfe"
        },
        "item": {
          "id": "95339d6d-1f93-4a1b-83be-4a974f2e4734",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "6e8f43b3-58a7-4d2a-80ee-42f807640521",
        "cursor": {
          "ref": "de12616d-3a67-4780-9ad6-3b94644bcebe",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9b193ece-230b-4b05-841c-1447e85e6e10"
        },
        "item": {
          "id": "6e8f43b3-58a7-4d2a-80ee-42f807640521",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6e8f43b3-58a7-4d2a-80ee-42f807640521",
        "cursor": {
          "ref": "de12616d-3a67-4780-9ad6-3b94644bcebe",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9b193ece-230b-4b05-841c-1447e85e6e10"
        },
        "item": {
          "id": "6e8f43b3-58a7-4d2a-80ee-42f807640521",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6e8f43b3-58a7-4d2a-80ee-42f807640521",
        "cursor": {
          "ref": "de12616d-3a67-4780-9ad6-3b94644bcebe",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9b193ece-230b-4b05-841c-1447e85e6e10"
        },
        "item": {
          "id": "6e8f43b3-58a7-4d2a-80ee-42f807640521",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "a26993bf-2e03-4423-9afc-35821d58a7d7",
        "cursor": {
          "ref": "af0008c1-945d-4358-9681-ee24e7f48496",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "18736e5c-3892-47fa-a56e-dfa2f21f742d"
        },
        "item": {
          "id": "a26993bf-2e03-4423-9afc-35821d58a7d7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a26993bf-2e03-4423-9afc-35821d58a7d7",
        "cursor": {
          "ref": "af0008c1-945d-4358-9681-ee24e7f48496",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "18736e5c-3892-47fa-a56e-dfa2f21f742d"
        },
        "item": {
          "id": "a26993bf-2e03-4423-9afc-35821d58a7d7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "a26993bf-2e03-4423-9afc-35821d58a7d7",
        "cursor": {
          "ref": "af0008c1-945d-4358-9681-ee24e7f48496",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "18736e5c-3892-47fa-a56e-dfa2f21f742d"
        },
        "item": {
          "id": "a26993bf-2e03-4423-9afc-35821d58a7d7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e53a77d6-0b2f-490c-be6f-2749dd6480f1",
        "cursor": {
          "ref": "09b67432-4e22-48c3-8c35-8a43e52f6be4",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "99707120-0895-438b-b0bd-6b4dbced98ee"
        },
        "item": {
          "id": "e53a77d6-0b2f-490c-be6f-2749dd6480f1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "e53a77d6-0b2f-490c-be6f-2749dd6480f1",
        "cursor": {
          "ref": "09b67432-4e22-48c3-8c35-8a43e52f6be4",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "99707120-0895-438b-b0bd-6b4dbced98ee"
        },
        "item": {
          "id": "e53a77d6-0b2f-490c-be6f-2749dd6480f1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "e53a77d6-0b2f-490c-be6f-2749dd6480f1",
        "cursor": {
          "ref": "09b67432-4e22-48c3-8c35-8a43e52f6be4",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "99707120-0895-438b-b0bd-6b4dbced98ee"
        },
        "item": {
          "id": "e53a77d6-0b2f-490c-be6f-2749dd6480f1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "3652dc05-7c7d-4f40-8fec-a1e3e120dece",
        "cursor": {
          "ref": "fb75687d-069c-48e2-842a-5273a93d5c04",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e721c9cc-496d-4158-991d-ac5f62d061d1"
        },
        "item": {
          "id": "3652dc05-7c7d-4f40-8fec-a1e3e120dece",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "3652dc05-7c7d-4f40-8fec-a1e3e120dece",
        "cursor": {
          "ref": "fb75687d-069c-48e2-842a-5273a93d5c04",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e721c9cc-496d-4158-991d-ac5f62d061d1"
        },
        "item": {
          "id": "3652dc05-7c7d-4f40-8fec-a1e3e120dece",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "3652dc05-7c7d-4f40-8fec-a1e3e120dece",
        "cursor": {
          "ref": "fb75687d-069c-48e2-842a-5273a93d5c04",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e721c9cc-496d-4158-991d-ac5f62d061d1"
        },
        "item": {
          "id": "3652dc05-7c7d-4f40-8fec-a1e3e120dece",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "13a4f423-113c-42c0-aa4b-182a7ae7f156",
        "cursor": {
          "ref": "6fc49c07-05b6-46fa-8630-e5a89738a59d",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "39ed53cb-6880-4fc2-b9c9-7c4e167c38d7"
        },
        "item": {
          "id": "13a4f423-113c-42c0-aa4b-182a7ae7f156",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "13a4f423-113c-42c0-aa4b-182a7ae7f156",
        "cursor": {
          "ref": "6fc49c07-05b6-46fa-8630-e5a89738a59d",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "39ed53cb-6880-4fc2-b9c9-7c4e167c38d7"
        },
        "item": {
          "id": "13a4f423-113c-42c0-aa4b-182a7ae7f156",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "13a4f423-113c-42c0-aa4b-182a7ae7f156",
        "cursor": {
          "ref": "6fc49c07-05b6-46fa-8630-e5a89738a59d",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "39ed53cb-6880-4fc2-b9c9-7c4e167c38d7"
        },
        "item": {
          "id": "13a4f423-113c-42c0-aa4b-182a7ae7f156",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}