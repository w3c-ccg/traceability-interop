{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "68528eab-9f36-48e5-a6aa-e7a5a0d203e7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "eb6bbf7c-43a7-4acc-82ef-2572af32919a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "90bbe791-e62a-4abe-9af2-27bc81640b7f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9e7d9167-48da-4416-a992-91e917094e4b"
                }
              }
            ]
          },
          {
            "id": "8c08bc31-b1fb-4e1c-b1fa-ff79dab54fa2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2a118324-a473-4939-ba27-135f6088b6e6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9347094e-5fa4-4bc3-b144-a5c6c31e9f60"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "47f9e4c3-9634-4043-b7bb-3c99996d3f9c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "18c09e6d-5954-4c75-983c-9746475d423a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "00834a11-8e6a-4270-af33-087040d96644",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24fa7405-ff36-49b4-8d4b-07bdc9422c64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9907c07-989d-4505-9ec7-5b1e7c16d9e0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fc38ea74-5d4f-485c-b581-059f11dc8601",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ebbde924-5a84-4960-8b10-cb83703704c5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5b558375-1a92-4a1d-ad8a-1cb4303bdf51",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "740c6e53-4236-46ae-9ef5-12fa06ede1d3"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ea16c82-1fcb-4cf5-af4e-00be5e1b5a3f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3859d265-b0da-4616-9679-402c07eb546e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "053f80b8-b114-462f-9c06-e600bdac784a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6624e33a-beec-48ac-a50b-895500b0bf88"
            }
          }
        ]
      },
      {
        "id": "c11fcd4f-80f1-4792-b293-36730474de18",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8d57aae5-b9e0-4aaa-a56c-63e6ae711fc4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "26babe16-1a6c-4345-a52d-a37e66bc26e5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f51c43ca-4ab0-44cf-9aaf-9d7392e4b00e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90f1dfc-4b0c-4918-8140-0e890276f977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "748dcf53-fc8d-4cae-a71a-7c8dabbc80cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e559fb5-f10d-4ef4-a343-288bae996afe",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9edd979-15ac-45a5-a6fe-6e118294c5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "286d780e-214d-49ca-b5dc-c3ba5ee8123a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6fd621e-0013-4d4f-b2c6-69b0e90cbea3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ef5a02-a9b9-452d-afd7-1d6620600ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15eae04f-02ed-4688-8579-982ceed6b42b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e8f86af0-c7fa-4a54-a864-d4c3f026c171",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9ef40d0b-51a7-4fc2-8791-1f68abde4c40",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c23d5f95-62c9-477e-9383-6474911c4306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e73fa01-be96-4280-a2f3-3ee5a14b1066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d11ce5b3-eb0f-4e45-9edf-50fc66bf38c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ce7abc-815d-451d-8cdb-dce302368c67"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "be77dd29-d3a3-46e5-87b5-5bfc5327524f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fe509c09-e785-4ef9-a21c-528c2fdb2571",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9e2384ed-51ee-4fa4-a4fa-9041a30fbc88",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "53057ea2-1e47-49d9-915f-5f0ec4f6654c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d45f6e8-8ea6-4f03-af65-0c699108741c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d8ea8498-fc18-48f4-8442-c1a963f5c3ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64240f3a-0b15-45aa-99b1-892783acca68",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a4056d33-82e5-4360-a08f-403655b96cc6"
            }
          }
        ]
      },
      {
        "id": "76007614-0009-4700-a672-249c7de3d31d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e5be33a5-dda4-4eed-8929-aa323ae38967",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0f3bba5-df85-4887-9770-f16cdfb20c93",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6d01705d-dc2c-4a15-a775-c78011cd0ca9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5797f976-3a0a-4d4f-8749-7e903ea5b023",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54b2028b-7d3d-4764-9a6b-bd1f012890e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd672892-db0d-4033-b283-e36c13875c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72cc0374-47da-418b-8fe1-833796f466de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff27f83d-ffc6-4a32-a75d-135f5376ef6d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a62b8cb-b08c-4a74-8bac-2a90a01e9135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c202c0-b7b5-4978-9dbc-217081404df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858a9033-1a1a-4154-bc1d-c6b38d81cf80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35ba4aea-fcf7-470d-a506-635ed4601d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5f0d54-4d48-4f85-b5cc-0da6c19b324a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebd256f-f4e7-488f-bbb2-6639a43507c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38416c4-7163-4b62-b95d-c8c96372e6f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac31ba29-0e10-4244-94e8-b1237d56a90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9dbea741-469f-45e3-9b03-ba930cfbc86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71a5f85-5217-4ccf-b685-347e61a6d1f1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fe12a0-a4a5-4413-84d2-820d7201e568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f5e8e9f-5a04-4303-ade0-dabbc70bca3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ba239c-2d71-45a8-9205-960bd4b11c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28ab3c78-6762-4a12-bf85-44525574f2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87802cbf-7d72-4639-bfce-0faeab8a5093",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7667db52-de3f-4e79-80ca-ad6a2658bbb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b60111-a5d1-40c0-b7cf-a12025434402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "402f966d-4653-4911-89fa-92d7d1427f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "824fb648-30a7-4d6b-a623-3273f64ad7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abdb2ff-702e-4638-bce1-482fcc6b4708",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d4f38b-0168-4daa-b5cc-c6bbe550fd5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ca89d4-e2b9-4c77-90ca-db2cdc45ea1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7fa0b7-7c7c-4f7a-95ff-5274edcaa7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c68e9dd6-70a4-4a38-9388-0a102541bc06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82af79f1-99e6-485b-95ff-0e2dae6f6cf2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6ff87a-d152-40cb-9578-c9e645d183f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c8ecbc2-487a-4039-8d37-1486af38ae12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8b19ab-2d94-4464-9f85-708f0f8b6a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d47825e9-7ca6-4234-81f5-bd9120ade3a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402d7374-db76-45c2-9492-2d9143cff8c3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82bc088-040b-400f-afaa-c953e97dcafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d0985b1-ee61-4d93-8233-c7137ab16801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2be35e1-05bb-4e7c-ac5d-e820b8f9c01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "071b8241-35ef-4fa9-8f72-ec2d8ccffbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc7c67b-0a9f-42cc-8c47-471006846716",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7981bb6b-f569-4991-a832-2a216f36a5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b139069-9442-40b3-9eef-2efc6c6d216d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82090619-5370-4f6b-aab5-aa6d6ae3c497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ac6ba95-80a4-48e7-aa4c-2399c0a83451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9282009e-74a8-4cf5-81c6-ebe695ba92a6",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a43c30-ed0c-44f1-bcee-0f7ad1b54cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98c62951-6041-4656-97d0-12a0b5d1ac02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a314eb5-48bc-4d64-80aa-916ab2d5d009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21e779ab-d1de-4788-8c2a-5d3138f8538d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1cff51-a0f5-43b2-9a5e-eedbad5a7e63",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8fe0b9-8739-4e51-b8be-7c0193e5e84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f65caca2-46b1-426f-94d0-66af79acc2ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79398f79-e011-44e5-994b-d42f120ee243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fde4b4b-8b2b-4f03-a913-d4a85275e78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c557bdfb-aafe-4baf-9061-7ac03aab68cd",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a21bd7-b5a9-4f1a-ad7a-ac5339e17786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1329171c-ed6a-48fb-888f-47d699352866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84e1947-042d-4ab5-8dc5-41bee830da7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89f747e0-142f-4066-9331-151578b5aacb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623364f1-8dc7-4f22-88a3-c0f6a157d5f6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3856fd26-52ba-4543-88e7-562cf3c22e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1884693-ba65-4043-94b5-1aece7003b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12a114f-e48d-4dc9-ac07-c13eefefa92b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5debba7-a985-4b7f-859d-ca4147d38515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e88a221-99ea-42af-9f7a-c39f90892e35",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fec116b-1fe2-4eca-af30-1734f8485e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9582d96d-5b78-4377-b1ad-e8c9761356c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ffb255-0432-43e5-84ab-ad4d73bc89f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2854d01b-43c6-48a5-886c-f97e5accf7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188aa893-d718-42f9-8b80-c7a55b301527",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4610b28b-9051-448d-96ba-b498d425c1cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c9dacf-0cba-4d92-8c92-f658efe1af10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "112e2102-060e-4178-8b64-c7ff5ffbfc03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18aebcd9-1cd1-44b3-999a-d89647d7cb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85049b0e-ed31-49d7-8d1b-1631e3ea0904",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1e6bd1-7a2f-448a-967c-72ef8a01bbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31988536-6422-4477-9ba9-b396d64654d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c425d596-4eff-4ddb-beca-738ead2eb85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f131f350-7dd3-4f45-856c-7899ff80da04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c9c215-9cc9-4003-95ec-90ae96003000",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12729fe-6b6e-4fe9-8f76-5faab9b80860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79161c19-f6b7-4ec6-9e08-2d2fdd31a6ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eabdfce9-ab48-4049-b2eb-1cca20779c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "395d23b1-ae9e-46a1-9fea-e6033d6c7083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ab5e70-62d0-494b-b34e-ad7ce49b7e37",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "427ec8bc-e987-42f8-980e-c81f7dc01ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e964fb2d-5a8a-473b-abcf-dbbf0e1abc8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff6c3b3-280c-4bbf-a11b-0796dd431d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4912f3c1-c6f0-4f85-a0ae-54aa642e38cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd3117e-833b-4d13-b140-5744f3c3ec2c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71ae055-d165-41be-9db0-3b534e8235b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c08a7b8-7dce-4f62-bc1c-f7b6c51fdb1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c903b3-76b0-47d7-99be-95bc6cc190a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05684836-1373-4100-938a-81eec0274e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b076bd-6431-4d46-ae6a-1ac7e321cb97",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab539bc-9f7b-4089-8ad0-d7e634d48be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a441462-2600-4cd3-add7-74e991adf9ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc5cfe1-7ca7-4629-96bd-5563b10d4656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8c684d-328a-4740-bf06-84d7d793d671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5e7a8d-eb68-4296-8b6e-c28b727b41b4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6b70a8-ccdb-4ba1-ad1d-ce3f0dd7a59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e849009-852b-416f-a77e-cdbdd9a8531a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b794cd56-4e87-4bf0-b300-f153db008d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6517367b-0dbb-4b8d-885b-b09c6a821d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217ef7db-7bc6-43f1-8fee-7bfe33d8e72b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8569cd3d-a49f-4d43-9710-f99e7c9b5dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ead782-03a8-45a3-8ce9-889491a85809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f851202a-2fdb-426d-bb4f-4dfa1f6da020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1301bc54-4c6b-414f-bb43-c997391f14fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ba3acb8-1fb2-4156-b656-98328a46b7b5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf70274a-0669-4a38-a977-fac668566cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57bc0c9f-17b7-4e28-ae55-445d03227ef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbcfb108-1c3d-4680-a1e9-7b096783c54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0af4b6b3-f64e-406f-b05a-aa2f74ad6831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd52aab-2375-41c9-925b-a5d31a2f495a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cdb293-0644-4a4e-ac3b-f4edc40d1c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7251e6e-f82f-41e5-8e2a-7f54448b290b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10655c4-902b-44d3-b632-7faa4dd4ae32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a04a151-2bc2-4091-add3-d020852f0a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e4a922-b5dd-42b8-acff-51020ad8d313",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47bf0b02-63b5-4c52-bfae-30a6baa76698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a79bf94-65c4-4648-83eb-87be18444761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8c13a4-1d34-431e-887e-7f78142304d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac513855-91b0-4ff6-b52a-121eee457ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d916fa-8498-4da0-915f-8b58846342b2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d1c7186-a0ee-499d-9a58-0076a3c1739b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6e18ae-7371-4703-8763-77a269eae144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6feac7-d77b-48f7-99d4-887e14645eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e3cf2e2-f4e4-42b4-8be1-6e215bc14be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c098a81e-fb9c-4d76-9527-0561a52c1c67",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d176cecd-ddf9-4cfe-be06-5afa3bf77a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80486edb-c5b1-4fd4-bce5-5fd6b8137e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e115fbf-1ec2-4987-b176-164e2add238d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "733a1a5a-65cd-45c8-b647-13461ae3029b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "684fd2af-2140-4f99-9f70-bc12bdbd9d26",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b97939-ce87-459b-9be4-c7363f51d95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394ec0fe-2391-4f59-8370-2ca113618592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df719ae-99a5-4055-9794-530ac9bd854c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "17c2566a-d9c9-4abf-8745-4f407451de96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9bf0405-497d-409a-899e-58f93e3aeb84",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57eeeb2-d6ad-43b8-83c7-31cd7dcf754f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e5450b-8876-42d2-9e0f-f87875c05cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd66f06-efc6-41fb-ad71-974e855eb939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "72a47fda-90b2-4a56-b997-8d4855704743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb21f10-3b62-46cd-912d-96459b2f3dd2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038f249c-4f30-4bf3-b1f2-dfe6994fc6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3859fd3c-d034-47a4-851e-b5e9be203903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d879d15e-290d-4324-a0b3-7922ab8dfac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "77a296b9-352f-4251-ac22-b8eb8614b615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da20e1d-58d7-43e7-a0a9-868b7857a6d6",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef1b1c7-b9fd-4d50-b09f-dbf21f193873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "360b4e71-7215-40ab-a7cb-f0cd1a0a7efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52046832-80a7-4d01-8461-ebbb5f8cad8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ae0dc6a-dee9-4119-b734-eb3e9a3a2912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e9132f-ac9b-4d3f-8d14-2a66460aff80",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c8afc5-30eb-4315-8550-1627ee9d910d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb3e82e-dc69-4e0c-92ab-e590eff413db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d410dc1d-4752-4b98-988b-be09699c7b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c872f1-18e2-417e-bdc7-dd3e6b0e50f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd915acf-b8a0-49d0-b0c6-bd2d6caf6ac3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9189991-9036-44e0-bd75-497d9ad6a1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b470807-8848-4f9e-a9c8-a1fbb34e13a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa4d2ced-9429-4260-8ffd-892fa330ea65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0edc21ed-80c3-4101-a4ed-fedac0ebbbcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c649f06-a8b9-4312-8565-775e246e17e7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c4cd12-9710-44df-a3da-88e9b18f2a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "202a158b-eb1c-4d5c-84ff-bb4e152898b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a15a47c-e25b-48a4-b337-328916933abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "65788625-9211-4462-9625-af7501d4c6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a9a94a-7c98-43a3-b53b-eac0d8a43aae",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fea1f82-cfc2-4154-9e95-b95dde218219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84dfa8fb-1c8b-45fc-9c39-fb4d2c2797c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9bcafb-2053-4792-8607-e1d7b1768329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d50e6967-6848-470a-9ce7-52da5ad182ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f0fb64-0a99-407c-a3ec-3a02d1d81bff",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbae4519-3e1e-40d8-9673-740ae3a632ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b08f6c24-154f-4874-9719-0923a32a63c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6d190d-fc6a-45b1-9035-15a8cea97b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a335eb-274a-47c8-a5bd-f1824dbbf35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c71b60a-429a-41a9-8c50-488dd14e112d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d560810-d813-4793-a5c1-ca43ab7f63aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e4c8111-a4bb-4dbc-94ab-dba7f1980128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c628b33d-b213-492f-91f0-88e85197fb6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9da1255-1c67-4cc0-89f3-2a3aa68986eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e61c083-d075-429a-884d-1dbeabae0a95",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2125cf44-6fa5-47ad-a214-00656748dd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab976bc-9b24-440c-bb0c-f34815114baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9439b4ba-2534-4217-b111-772afda387ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c75583c5-fc3d-4948-a9b8-18d46da48f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feab34c6-4865-4499-8235-a9608c7b6607",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ec20e3-a823-426a-a8a7-5e26c5cbd1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded95438-f66c-4b75-9d13-2fac7a3115a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c6f4ca2-4079-40d1-8837-2b2b1cea2e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0905e72c-7b83-4fe5-860b-5bdca3b7240f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c734788d-8ba9-4930-914f-64ebef45e428",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26c83cb-1d54-4425-a937-59cd03ea701b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d335e90b-3ee7-4b98-aeff-1b0d3435fdb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd4e7a0-846c-4e6c-b290-0a4e29218bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0086f0d-64d5-4d1a-8b21-3be5fe6ee409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bde3d92-1fa1-42d7-bb63-5a32133095bf",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e72faf27-b024-4d60-a388-da231bc7414d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0afc22b3-ac1e-4389-96df-382c30262976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e01f4ad-2b61-40e6-b182-962616d9937d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d85b51d3-b48d-45c1-974e-0be32722fe71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f010996-28b6-4447-b3a1-6314e847c835",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d89979-da9c-4975-b1bc-497f95f5465a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91ae19b8-6b42-4744-8d45-893f8054fa92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1e1ddf-690c-4b31-8116-88fb64b0e4ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5288461e-8ed5-4df6-876f-0b66351e74ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94815555-debc-4aa7-9e72-514d5afa8324",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc53dd6-58b5-4304-86b9-d5818a5b0a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ef11f2-0e39-4446-845c-221b24e4d5a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e2043f-1027-4e23-9d3b-e52ead9c2070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3eaf280e-b7ad-4d34-9d1c-9c5598430881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58759e6a-62dd-489d-ba6e-948d9a240e91",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9024da-9f2a-447e-ba79-331c343941f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95982480-3df2-4bea-b938-460e4d1297be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ab3a47-b317-4f99-bf53-d61e55cc7363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff690a83-f219-46d1-89f2-4635f21a9cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710083ec-7d40-493c-ac2b-b6bec82e2f6b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8006c377-aaf5-4062-84a0-1bf589aff3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8dfdb9f-c17b-487a-8332-e91ad407391a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8edd082d-8055-42f3-b46e-219988adacb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b550275-78ad-4398-9809-212ce664243d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fb8934a-1e27-473b-8adb-978feea41c5c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4a57f1-7528-49e3-a834-b5453c304d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b604193a-63c0-4ab4-a8da-c761754d0f1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41ea56e-a011-47d7-8363-d74e33bfb11f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de863c7e-6211-4bf4-a99c-54396071d1b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37910140-0b92-4944-8938-a53298fea48b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8266b6-9af6-42d9-80c2-0e1d9e120e86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff7d291d-c8a9-40c8-830c-ffdfc331b9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a71983-2930-4cf9-9ac5-9044f2b28b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73fc93d8-67f7-4b4f-8c2b-fce9561bcb06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38923dc6-e73e-4ce5-92db-cc8bb8b4aeb2",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f17bb660-bdbf-4dba-bf93-b0c32fbb1abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbef267f-2c29-4cad-bb17-76faeec4eb24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cfaff2-d72c-4956-b9e5-d7a89f7adf5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd414f39-f0e6-41a1-85fb-df3d88fd9c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07585af8-4223-4dea-9347-1e681bda7f07",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0882c597-e5e6-4325-a80e-c6c64414d543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ff6ca7-032e-42ea-92e0-d28590e082eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed820e60-7495-42aa-8d3e-ce7f1b67f945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f0ce451-c424-46b6-beb5-0fa7d7e70fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ef6ae1-be82-4980-98c6-779ad3260548",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5506fdfe-853e-4998-907e-b065f5d3686a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ad2689-d259-4799-b47d-d54c9257377e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f970f88e-229b-444d-ab59-babb924e39b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c889538-8641-4ab2-a0e2-403b7afef901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2555d82c-ecb6-4d83-b2e8-09092896a96a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5240c8d-b5f3-48ee-8c7b-4cfb102e6d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf8a088f-d412-4fe8-a5b2-253342e62bd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca29cbf-1956-42b9-8368-beaa5aa45e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8addd9bf-868c-4018-aae7-c36e671c8437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a521da1-b1c9-4e93-ba4f-0eb9b917a87f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8af8216-6b94-4628-9e18-8898e49d800b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "642c6aee-c04b-4e07-9a5b-fde94cfdf4a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed45dbc-810e-4180-9cf6-7b9cdc34c218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f68489e-b9b7-4201-8388-c5b798cf29b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b31dc946-f34c-467d-92f7-caa11205b632",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb35e67-ce3d-490b-9895-90baf205544d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba165cf-d2f5-4c02-b52b-5b78ee042dc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074f2b90-f781-4fd7-9717-83eb3d451a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3790b8-fade-4d3e-bb2f-22824c4a106b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1078ab-10f8-4d6f-b3d1-72adcc6a2de5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26dbc13-3e51-4c45-9689-a933a9083616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d82461-c449-419e-b0e1-66233e0b1e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b19149-893b-4c57-9bf1-53c7f7d23a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "80c2fffe-44fb-4cc5-8df3-c5debfc752c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7db3d3-adfc-4625-b3cc-c23f7d33476f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75251b4b-69b2-4824-9cce-558dd160f398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9213f9f-d911-4c68-992c-b6aef3236fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ff7210-7215-4270-b8c4-1ba8de7f0eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21275e35-433f-40ba-98c8-8c348bd8e653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fd0550-eac9-428f-9db6-1e66c39ee8ec",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd4ad7a-744a-430d-9fd2-11d3791f72e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a666ab3-1a43-45d3-89de-a302109c10c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfdff8b-71fe-4efc-95cd-bc60f2660be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f57e8efa-55eb-4384-b000-44470bd160fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1809190-5497-4d43-9240-7d9f4482ba8a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052294fa-f4aa-4904-a0fc-323ccae0fc66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "581e462c-cb4b-45f0-9d2e-f6a1805971a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d949ae-e4ab-4582-8935-f57b5a2c4102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d1b29c5-d1bf-4d72-8df5-50f4e1e252a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bde7df1-a552-4f45-a9a1-d4799d79860d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "113d742e-5e3c-4559-8b5c-d44fa126d756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c59832a-45c7-4b4f-9889-7b95e4824ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a497278-53b3-4001-a07d-2023b0f2778a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d516bd57-0d58-4f57-99d3-3726a6d44fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abe8cd4-ed1d-4f86-b631-a61ab4a01ab5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e944bb4-af81-45d8-9049-1a5ae869b393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e510768-8d59-4f98-90bd-8b4ce527cb3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d90d843-c5f9-4900-8e6c-e43c6e92864e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "326696f1-ad4d-4202-8eef-a7e2fcf4b70b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d19fcf2b-a3ca-412c-81da-8d37ef59c7aa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44afe22-cc56-4d02-9fa6-b3c0f17dbb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12573605-0897-44cc-a616-81c7996f1675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f00ebda-d943-47d6-bec2-0ecd4aa1b4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed46e7cf-5bc8-4c03-90eb-353cee233692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db790e7-4d9b-402d-9bb2-7d6db1a9560a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79bf8df6-4f4f-4248-b3cc-d90ed724130f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e87f39c-0986-4ab0-9d45-0b1bbb60966a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3208eb1e-9c78-4ade-92c6-56c91c64c0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "98b929b6-64db-435e-8d9a-3d71d27cc0b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd47256a-50dd-4301-9061-e7fa8fe1c0ed",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e3c2b4-9c8f-49fa-9c06-9c8995c9aefc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48730da-dbb4-42fc-aae6-4c6d15629de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98c387eb-396b-4fe6-b2b1-7c1d12d2f03f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ab7523-7778-4e39-ace1-efa6b8efc006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ac8ff7-5bb3-4d02-acff-7b4a8cccd3dc",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897642ef-9c84-4287-8f0b-a902dd8661bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ad00513-035b-46a3-ad0f-dd5da1b188f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d827d10f-cc39-43cf-a9fe-1743f0732c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7538c41-d42a-421c-b273-d71eb2bc9d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b50043e-95e5-4055-9ca8-67fd62345152",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be317d35-46c9-4297-b574-8b6dc6833409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8865e8c-3346-4fb8-92dd-cf541eff8e21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21943f5-9e88-48bb-9c14-3587f1ba0ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "392249c5-b430-48e7-8cc5-09fdf834c001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68348939-afb3-4228-a4aa-7a2b8c7ecaab",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b026ae-fc6a-48be-ae19-cfc8fdde4afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e0c63dd-e4e8-43b1-ac80-288b3902ef3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77372a41-839e-4b75-9a91-6d17d7e560cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34705851-2784-404c-9f30-f9e949db1cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa45d9f-8ffb-4c64-9399-f33a6d16cfc3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0cca88-d249-4ac4-994c-03fa7e946df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e436bc-5353-4004-9e5d-5f4a83266979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f2e0b0-ba8e-460f-b6dc-86c86c0ce12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fec5c3c-be9a-4ffd-84b9-0f46409fcb5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c211c1-0689-4455-8b0d-b55a6ac1eec5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790174e0-aa30-43b2-a2f5-e3a5f3e901d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb40f87-ba81-4891-b30e-8ae510965fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c18698e-25c6-4eb2-8e9c-cca3a35d2363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fea07d28-7dc3-4d5c-82ef-a1af8d5f0a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94f059bf-6763-4eb4-8fc2-9fed1cf0a22c",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fcf5980-ceff-48c6-8cc5-56e13d1229f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fb8d5be-8442-42f2-bd45-bf627a393182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c587f35-1aad-473f-8696-7c09e67d513f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "75c72c10-0c4b-4352-a00b-a88c83f962ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169cbe7d-f07c-4803-bf79-2a1faffced6a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab808916-5532-4ca7-9e51-2ba6f1332557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3c925ad-4a43-46e2-bdeb-fb40b90c339b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d6ece5-7ce7-4476-89fe-6cc86bc81012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "172cdb77-e4ad-4670-8998-3f42e4ea4bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec311722-c1c7-437b-bfd4-2be35bd3f467",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e52af9-db2a-46dc-b39c-1757b5969f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ccedd4b-80bd-4b8b-bba3-464ba5af0fb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43af41b6-d7e8-4df6-a559-963729e58354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef2bfec3-e115-4517-92b1-4d80e6bfbdd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63305275-02ec-4c52-b16e-a36667c0f0c5",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc751a6b-4f3e-423e-ad0c-7fdcf1d9968b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1593bf0b-9037-4ebd-983a-bb70f7a2eb1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c216c57-5bcb-41c7-a23d-462fed854723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a0c508e-f3ce-4ad8-8329-5319aa89b7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a65e3b7-a1ef-49cd-a70b-1dbf7c965191",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd186dc-3b0c-4bef-be87-2c0506b5990f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "322510cc-c6d1-473c-95c8-ca46ad04534c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8532f0f8-8d5c-4907-978f-2abf12da6d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75602009-ca10-4a4e-b79f-9f32467d2159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7006266b-d5fc-44e9-8144-eba89f7cf090",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502b290b-2338-4ab6-b868-9e7678377d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0d38d7a-01fe-4666-80a5-f75b64495c65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60db8c39-c834-4a3b-9391-e27029adb1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "76145d25-c360-4582-b73b-001b01351b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb147654-0bc8-423a-b156-1c7beb4be932",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef40bc94-65e1-4602-a332-0b11ea840056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b73f81-9a63-468a-be99-16af5fa98f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3af4417d-62e9-4da8-bc19-8be16e219117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7ca99644-f1b2-402c-917c-7e8e37619e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98fdd37-998b-4818-8793-94cd1ca2bf95",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bbdf3c-8b4b-4471-ab37-ffebab669f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1787eb19-6952-4e02-b0a9-8eecec1b3afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "856a327a-a0a6-4009-988a-aae74d99d22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "40f46bee-23f2-431e-9a00-c821f0d90457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e6565d-a7b4-4ec5-8e9d-56dc0a82f7e2",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73a0717-cb7f-4ee0-a05d-0443d23a94f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de096f8-dc23-46c8-a116-d2ab38fedb93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61c6c7f-41c7-4f54-a4e7-e10afe9fa4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8121ce5-7338-44a5-a75e-46962715fc0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282a8aea-63b6-4192-8228-1a1a9dc4ad9b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "890eb40a-4189-431f-ae57-9e9200de076f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6680bff-119a-4767-91d0-e11e96ddfdc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2157c8a-072a-4769-b43f-ad948bc6fb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa5d29e4-19da-48e8-ab0e-228d7e4e131b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8aa9956-f3ad-46e3-8a21-03dac0074d22",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fda9d65-6516-4a82-af33-d9d24cdefd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2658259f-3477-408d-b566-34d22a49ba5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf47de58-0c13-4aad-a405-79dcb44cf8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef54b443-2b6c-4bc0-8ebc-88ee0ae9925c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f9f7e5-5c14-4a83-87af-7d33da407f1a",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7104aa-1b26-4765-a4f3-566922311de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e7a92e4-0b5e-40d6-9b59-938f71d4fd88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40d102c-2d70-4faf-b71d-16b3cc432ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c90c802-69d8-4a43-bbca-6dcd90dd1c60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09cd4fa-823b-43e1-83b2-5e98c794f57d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4fb65f4-d61c-4999-8812-300083340523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c7d5932-e268-4dbe-a0c4-411b472e1f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a5fd0e-9497-4fa2-9f9f-f9f2c817a9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1e50f86b-0c8f-43db-afbf-427fe4de6583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d36e4d7-a5f9-4146-88d3-eda1609b2ca8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "175a0173-fe27-425a-8ffa-961a68993d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5331d43b-7415-4eae-add9-8d9ae6d31b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4badc89a-9d47-4a7d-857d-53a34d993f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "11da0554-4ebc-4c82-8dfd-e1896f4177af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70833520-69bc-4595-9784-4d3ac6d4066f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3438120f-4e68-4d7d-9ca7-09760cc6ed8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e199f02-006f-412d-be9f-97cb0ef610eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925be73d-b1bf-4a42-8793-d9bf87985069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f86b992f-fde7-4e02-88ad-80c7a98d9832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea79b547-1bc7-426d-8ee3-498b61a57b96",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe5b641-bcf7-4479-a6cb-1d91421f9f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60f8e1db-4dc4-437d-bace-2f9db99ece64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a336b6a-c49d-4af9-be15-d96db7266a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a7d87fd-c41a-468f-b6e3-05a026e9e175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44eae55-29ec-4c00-8ad1-ddea6e1de9d8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce348de-d7ff-43da-8bf9-3bc4300c1343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a940c036-c4b8-48a6-b909-2d5651df8e1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fdf4e00-d28a-491a-a452-12fc13f08150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d96843ae-88eb-48df-8a1f-1e352d23449e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2225adf-fd63-44ab-9fbf-ebc0d3e9cdc3",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dab76da-0f6c-4a5d-8c71-2b7225f5960f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e447cbf7-1b5d-4be6-b939-d0bd53ec75c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5712b295-6c33-4f23-826b-3ad8190c49ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f4901b6-b7b9-4d43-a073-3e8b9f6e894e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1bc9367-c379-4633-a732-543f4bd2f444",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c36a7a-ee5f-4226-8619-6cf133598c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed1e1fbf-3ca3-47c9-b5a2-18734badc879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30db9c96-e391-4cd7-96fe-ccf6b14af182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc012fbe-f9b9-4faa-bfc4-7f7c40cb831b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71566e1-bac3-4b0b-b737-d53dc82f21f3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e75885dd-a823-47b5-b955-7972193a4640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3171602-576e-4e78-9ea6-28f97f21f48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e79d03f-711e-45ff-a5cf-89c0dc73df8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a34ee7a-395e-474f-88a2-ac8d70fc4466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba52da65-78e0-4af2-ada8-ab9a9e9333b4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85126587-fad6-417a-a70d-8f2ca53211dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8693987-71b0-40ee-abe9-bbc65f0946d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb916ffe-c8f1-476e-b156-827c65ab1a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b3256a1-0584-4ca1-b641-9c36df6d68d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c41059d-9c83-483e-99fd-fcca0dc4ee88",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbc7f89-b74e-4c47-987c-487a883baaef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4931b5dc-f16f-40fb-9fe7-d888eb2d4e9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d00805-296f-43a7-bfcb-e40911c72207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "59a78b8e-6674-423b-b175-c2c389812941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f520f7e-8ef6-423d-9127-7fb762f33731",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42a4969-8db1-490c-ab28-2ebef7f90cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090bb2dd-a527-4d14-ae38-0e36cd356450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7b903e-61b1-4d72-9ce0-b677de1f7f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a579f13-eb6a-4a93-a1f9-a79d0e8ed778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed85967-7f87-4c1a-9c83-95ebb6554367",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024c4152-c635-4ea4-b5db-419679969a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf0a1b9c-469b-41b7-a168-4359a72d4978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb808bbd-d399-4e98-ae89-74e905950e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "67c18974-9693-49af-9846-19d4cb81dcd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2253c798-7ae9-49e5-827b-8f50874d2ca5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41f17b6-221e-4ccc-9aeb-9241b5d88377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "57647d62-697d-41a7-adc6-050c5e5e30e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "354d352b-25ae-4932-91e2-409465bd04bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e025c37-7a27-4eca-9117-0dba7f4aa8e6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d198b45b-99e0-4d71-8c18-d92cdfb01c96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "307dcff7-6ad9-4ce3-96e4-b6383ec231a4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88cc3cbe-de01-4923-971b-ca6fcd8cadf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8b6b0bc-fa01-4875-bfab-50a46ee463ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f887e4f-93f2-4a0f-9dba-dec835b26d42",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9bf23569-ddae-432f-89f8-1213734b8fed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d7313c8-b24b-4882-99d2-3e7ef03a8774",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21d3a949-75a6-42b5-86cb-308f714325ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad09345d-978e-4009-af99-a5d82dab3718",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ab7332e-2b64-477f-8e49-a95315652f71"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "60a7db29-cbaa-4144-a932-e4219a96d97a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1b16e7a8-743a-49ca-8482-a568edfdb45c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e6a9f618-7058-4528-900b-7dc5c4eaa7cf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b08e6663-062e-4dd9-b0bd-6aaf1d69c982"
                }
              }
            ]
          },
          {
            "id": "542fbf82-27ed-469e-b56d-e18c8a83b738",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ea1784f3-c341-4642-85d9-01c6786a93cd",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f43354b9-e1de-417d-90cc-1f8a5ced1560",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d3bf0001-c1ab-44ae-9f32-ed04de04a5a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e16384ed-edf1-4815-a12f-d595dd4ec1ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fcd66f03-4198-468d-927f-2cf658c0beb4"
                    }
                  }
                ]
              },
              {
                "id": "115356e2-8d9f-4109-bb56-ff182dd62555",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25a35d11-16c5-4632-82a0-3120b870bd71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "851dd7e5-080f-45ca-8325-e14497a38fc8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dc120c09-3c66-40c4-9b8b-17278474a030",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fb821830-60aa-474a-a05d-20b26aa4e7bd"
                    }
                  }
                ]
              },
              {
                "id": "1209b497-1e1b-4b92-90d2-0cc46e49a0f9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ffa12425-b3cd-4fe9-b085-1de5a3b4658d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91f34cfb-950b-4fa3-aff9-8953ca33639c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b31bcb1e-b28f-4aa6-9d29-349c3fcfa679",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c71abf7c-cba1-492f-95b0-6989abac6b23"
                    }
                  }
                ]
              },
              {
                "id": "6dcd2dcb-0d79-4b92-a11d-93faf6858eda",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4014c1e-ccb2-4b23-b49b-93a2aecfafd2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "77d9c518-deda-4b7d-a2af-fcfb6c897f18"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1e234e0-710a-4261-bc83-1a6e5487ea45",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "66d82425-db90-4e4b-b49c-fdbaab4d08a4"
                    }
                  }
                ]
              },
              {
                "id": "f22aeea7-0eba-4d51-99be-c3228bd38c41",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49952df3-a16e-490e-8d21-d8c42fb2a4d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2312e73b-604a-4069-90bc-b7a5859a8034"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e261e79-2406-492b-b978-110711026dcf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "541c0ac6-7778-4484-bdd1-7d5c38fdd60a"
                    }
                  }
                ]
              },
              {
                "id": "cf83213a-5f17-45b2-a42d-4fe6a2079643",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "39054c69-5376-4d7d-8772-be2ea8cb77c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "926b7290-7ab7-493f-a445-14b87a45d90d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a09552b9-1a62-4fcd-b9c6-4ee6bf638f7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3cf79205-4f2b-45cd-bc62-28bec65414e8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c3df29b6-a757-4a31-8370-3e40db005032",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "580f6a42-44f8-4c9f-8745-f6ee3e23aa71"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c4bc0087-028c-40c0-8a2e-b0a307312e1f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c08f693-b94a-4f79-b148-ba3d5b6a553e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0dd561dc-ebcc-4e21-aae4-2f525875d1d8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8e96ea9e-2910-43a4-9d8e-bdcad1be60dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "63b7cc59-7d77-467d-85bc-2503904c532d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac136929-8153-420b-91b1-3239469c942f"
            }
          }
        ]
      },
      {
        "id": "861d5164-c349-4a30-bd9f-dcde0f27f882",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e7be5a0d-e9a7-431a-b169-b1081bb41833",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1cf1b0c7-4220-40f7-9b9a-b7c16b0afe50",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dbf3e4dd-d310-4b0f-9ab7-9bfc94ad9e55",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7768d268-9a23-4d9b-818d-8efa630ad3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc70630f-33c8-4ad3-bb9b-b6d8478299ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955bac81-cc26-4e8a-a733-ba67be959ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0acae770-01c9-475d-909c-fc872e92394c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb095b0-bae6-46a9-89fe-7f4f24da922a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e21cf8-3c60-488c-b234-415bab2e1159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b66423bf-ed38-4ae6-8fdd-f6bd8fdf369d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "382e8cf1-f88a-43b6-9a25-33c8d1f1a0d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c952255b-d85f-447f-94d2-3c1a1126e7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3756b4-3a20-4a62-8b5a-50f4e0629fa6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e708f51-ff65-4e57-9518-8f75a1693429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f638fa2-7a56-4a33-98db-50a4b2bc2b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34360ae9-5e12-4d92-be80-8d73b9eabd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1a1ce6b-4dff-40f7-bc48-545fcf65c9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d2a39b-c94a-423b-866d-9ad3202dde0c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d3c25a-c37a-4299-973f-82a5846457f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe099cf-c583-47b0-beb2-8f3f27ca1437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cea42dc-3b0e-42d1-9263-5b8bef3e7c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1eeee2ff-07a0-4084-82f8-80293b71207f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c102d9-ca86-452e-97a5-46eec32c13c1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09aadf88-db95-4d8a-811a-d88ca3d54214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f48a65ad-8946-4a92-a213-fa7c3a6de2fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eacb584e-7ffc-4eb1-9eb6-a99a7ab0ac1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c03a21d5-5e89-4813-9e28-2e7e89957924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fee4d0-c057-492b-89f8-5e25dd646c56",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37aa275-5572-45ac-a59d-11a0aaa4dcd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c9afc9-85d1-4c97-b2a2-85de27e4aa4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b8129f9-aae8-4e81-922b-d18e4097c9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ffa7f1-28b9-4f41-9c98-93cf4f3d3b3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac89ea10-3a84-4266-ac15-ed77d1928882",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eefc2a8-3dbd-4f7f-aefa-5c249eadd6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24681e91-c0bb-4943-8d35-68472ab3e94d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8886f6-3533-4b2e-ad32-f77b621acdcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "04576dcd-423e-4af3-b6ab-0abf318bcf99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe91e088-727d-43ff-975c-a8db653b05cb",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c685523-9602-425a-912a-dd79bfa160a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2543af25-88fa-4b27-8d2a-d45e1677631a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8876d666-7713-4822-82bb-995b323efd23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f35ac7bb-7089-4192-89c4-1177b6b12201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6129cdd-9d95-4947-9e63-9cce846b107f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74179ab2-3e62-4fae-a97f-835412a30b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caefeb84-2141-4595-bf3b-6dbd53b5b76c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efdf8179-fc5c-4395-b49a-77afc5d3a984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30833548-584b-4bae-ba55-fab68961fc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5b782d-fa8d-4d44-9859-f7032adf06d0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5657e2c3-664f-4c04-bf7e-d0e1425319c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0685b28-1965-4f4a-a0b2-212a940ba5c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8f3d83-b8b5-44e9-8c90-200e3f508ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "db3fe6b7-1ce8-4567-be12-49e69e05c19f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d5b955-83d3-4e15-ba4d-88740f8d3121",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "746c7041-a2fe-4e42-b55b-3f7281a47d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "801bb1d6-76d7-4348-8d07-99b5df06833a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e1418a-ee98-4f3d-ba95-eb6587d032f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f0d40d-f793-4b16-9bdd-6a8fc70ab3a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a531a05-fc8a-4dd8-8969-8c2c89c36388",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6196028e-3669-48cd-a98d-f090f3862b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4782451c-6dce-4fc7-b61f-8fbe3b1563ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12987d4-6287-4227-ba65-bd139a268dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1566fcd2-4a49-4714-8045-ca1f6bc6ee27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2bb18a-d2cb-4b47-9bb9-bbfa1874a167",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a94766c4-58e5-4beb-874f-f46e94f9d5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f643c9-0464-49e6-91d3-db25ad27b309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "211ffc0e-34a2-4268-b2fe-f39100940761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc647f4-6005-4fea-b9ee-ec490f27b67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2222bf-8671-4db0-b966-c22dbe166f61",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e10b370-0532-416e-bd41-c821fd60ce1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c677829-d13d-4ebf-a188-ccfab779c2d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750b0faf-71ee-41b8-a836-d7da09133cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ae58192-994a-4bba-9124-0aa5daf0f8d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aecd1e9c-c1fc-4d21-bb02-fc5aef764b34",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bbc7c0-2b44-4d3b-8ed5-944656eef830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65e76325-1a15-4b36-b39a-ce5cd6689fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74858810-b427-4782-82ea-951ef162bc3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1af097d5-09dc-4464-8b7c-a4c037acd761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82cced7d-11e4-44b4-9848-905cfbf26653",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61321bf1-8716-46ef-86e4-58ba357f28ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15d52a6c-95b8-4772-a9f6-90758376f449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360bdb25-c794-4c28-8f66-51e11b67e9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "52268ba6-474c-4c3f-a9a1-51a8789d4a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89563307-2ced-4f38-b7af-881fbbc8bafb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fede063-cee0-4c29-bb36-08236a50e577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67a11ea-ca19-429c-b4a1-0e2cfd8c693a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e011ae18-ebd7-4e63-b536-0650d87d66df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3ea41b8-5dbe-4bae-8da9-5eb2da7f2e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19094663-c18b-4c1f-a90a-5db7014601e5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a170e399-2ed2-48d3-b8a9-40339cdc76e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9b1afc0-e69b-433b-86ad-e5dfcc98fbfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcaf1a96-400e-4d31-8086-1bdbcba2da00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dcb35ed-efde-459f-b7d0-007155db51bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee1fc6d-7646-4d74-a2c1-e096210a1f92",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0a55e5-1d8d-48ba-954a-a05f4ea9df40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5358da0-11fb-49c7-9683-7ecf7fd4e074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e7763f-6111-42cf-b35b-7f4a0df3e51a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fac29a31-4705-499b-a306-fc8f42693a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31b1f6a-2e25-47a8-be57-590a6f862074",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70672fb9-970a-4d4d-a536-7df2a9efc166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "725005d3-7fa5-4392-bb3d-6aadf3579f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76cc66a-5135-4d76-9562-912748b93082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7525e55e-ab65-48cf-9502-79be94dfccda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a5479c-37a3-4bf6-af2f-67325ced88a8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35bbe46b-15b2-4f35-8b48-8174e3ed6d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f54bc50-ff56-4191-8063-4df9e4453ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dfec200-09c7-4175-ae83-b352f8202da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2ced195-803e-42f4-8452-e86b28e58a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d997a5-af30-4490-a7f5-67059b32e3ec",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac6329e-4f4f-4dc7-9ce7-af20e913779e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00be889b-de5c-4be4-8eea-e363480d70b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf26c629-1603-481b-9ae9-876dcd8857f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1afb47f6-1168-41e4-af33-6a77c177d8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a248db65-e108-411f-85c0-82f9cc574863",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b891eaf4-7fec-4264-9b39-ec5d0d265c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eeec073-c853-4129-96b6-34e31e46a724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718f7ef5-e943-4ec6-8775-438ef4bda87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e39efb4d-7707-4ed0-86ab-efd748b68472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a4360f-7ff8-450d-985c-20f1debc331c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20afedb0-c1f0-4ebb-a05e-916d0ee7e999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c3b7e1-8a7b-4e99-936e-a525163e8432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00d7d43-c451-4cd6-b239-c24d970dec77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28bb4d49-3cbd-4d34-b42f-b8d5804ce92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7118c12f-4277-4a75-a545-cc5dac0d2cd8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f08375-6316-4fc6-a721-ae2821aca040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2549a153-7625-4dae-9fcb-7d6695d18c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "057dd630-e626-463c-a36e-fd7ab1d296b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d47dc454-739a-4533-a27d-a810d166ac14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6faa0261-b55a-44fc-8ef3-ccf7c0412a6e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e6aede-965b-40cc-aa49-ae70c1f2a134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c3e1d5-9257-40ee-97a1-2ab7911e5cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7cfa318-3b12-4268-b958-34ae659126d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d65c478c-8297-4149-b216-c834e8ff1d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473a4a1e-1103-4b16-a765-5029f41b93c9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8101646-9b44-4b6f-9e23-a32c0bd33ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f8f5d5-2be7-43a9-b20f-271c39112647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f54544-65ba-448a-99a5-d4b8f208cb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab1b3f4e-cd0c-4262-8770-a4bc7924809c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd49e92-acf7-4f74-90d2-12b59eba6ba3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98542221-3f1a-43a5-a1ce-008c142c533c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe2da90-0bfa-422c-afa2-d821dd1cb28a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d214ccbe-a129-47d4-893c-7c91112b94fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb58136b-c7fd-4100-a63d-fea0cb239cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c5ecd0-f748-4da6-bb56-2bc1e5e5ceee",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f986c5-dba6-4881-8c05-0d1832959300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85a44459-190d-49d5-bb1b-83acc7cc37b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf98f63-5233-4a3a-8957-8f40895fd3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "127d62ed-44bf-4bcd-aaf2-525593ac8c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ba8fba-5b5a-429f-8a03-6f44e4cd37d4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f9b6f2-ea4f-4341-9e62-784a332516b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b30911d6-793b-4eaa-9295-482298fa231d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038f93bd-b232-453d-bec3-08805759d949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1382207f-ac61-4737-bed2-5be1849d8934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a4da23-6903-41e6-bde3-b6fd41b67a28",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa4c875-a0ed-4962-9e4c-7f23fc3aa524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a98079dc-49a1-41fe-9e6f-d54c05631d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4021c6-7366-4e33-9b42-d3559533d51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af199d06-d93f-4e44-bcb5-e4f00f5fe4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156de082-df79-4883-8e26-a508e014e53e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f67d2c-8750-40cb-a187-26d77e93592f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e4bab2e-b86a-410a-b7de-f5b4e274afcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78eccaa-0b15-4778-87d5-5ed3a5380300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e5ab4cc-ccb7-4137-a5bd-6ddf7cdd7d6b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6433ebda-d8fa-42bf-b15c-cfa04ebcf362",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3681fcb7-aa68-467b-9245-136e89e254e8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f4b9b6-bd39-4045-9601-c3dcdb95d436",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3299474e-6c77-487a-8a78-6d5a80b18a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7da93dc-05b7-49e5-b021-e27ed16b607b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab7bd755-5c25-4f27-9825-52f13a216867"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ac8c6f5-ef4f-4a02-85f2-8a2fe8c30300",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e114ae63-1a45-4183-806f-de1374a0d08d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "71cafadc-6d58-49fd-b700-4e7579e50ef4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81c56d9d-300e-405b-9f18-09b2c935f2b0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4b2f2b0-c177-4701-a273-70f6d36e49cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "04807993-0034-4913-b35d-a1ae06a3c743"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d08b5b6-fa18-426b-b119-8cfa588a9dfe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a6aff96f-9963-483c-970a-82565ea2d5f5"
            }
          }
        ]
      },
      {
        "id": "5dc11051-c4b1-440f-9408-43ddd24742a4",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1c4c0e21-54ee-436f-85c4-f445c331b39d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06483281-a604-495f-83f5-cc4dbf4f00b5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "059caba7-14c3-47e7-993b-2249c693e63e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc2ea92-bb3a-4d55-8fc1-89ea1693b83d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e3a4c46-59b5-40b4-aa8a-0eeaddf47b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e9ec40-38b4-44c8-be51-9c4e26496f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b847812c-2d27-4818-bfec-f82078c114ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57be6cc1-be24-4247-a643-a0bcccf9542d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a360845b-f013-4b6b-ae37-3162cd55acd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ff68683-2282-4be7-9619-355fb78f3874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0d2c78-726c-48d9-b6de-356c34402d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e87414d2-a2c9-4546-8340-c55a3abd1a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b9a042-5f6a-45d2-a063-be04fcc0df3e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e588ab76-1880-4ec8-ad61-e7b3b5351448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "260ffdbc-7d08-40a6-85e7-1d4155ab8f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bcb25ef-1dea-4f95-a0a8-233c7e6e5df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3926e6c8-10dd-4e88-a866-b8043d6276ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0105541c-c915-4a5a-b362-2ca8059f5be1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "509313e7-76f7-4e97-a43b-2a0f52e87c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "113d7487-9271-4d48-ba04-9c48295e6287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e313d53-1522-4d5e-984f-fef5677d198d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "368a4d0d-4333-4eb5-ab83-58896594aff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55edbc6f-00e2-489b-abc9-684e740a8bb7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545395f6-20cf-4d52-b5f3-0008669307bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8beb6c9-1e4e-401a-b1fb-ed750e69c1e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2c112a-6852-4ff2-8d19-0fe54476d0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7655410e-3c5e-4801-b970-0f4aa2fb352b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9070b4bb-0c5d-4760-8e7c-d698fffb9272",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6173594-c498-4bf2-ba5c-42a6f44bec2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33dded92-23f4-4e7e-921a-926810f8ae48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c94b70-9f79-4940-bdd8-a9e5320e9cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6f9ec1-c704-4ab5-8e39-26a0b0ae2bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdfccd04-372e-400d-9471-228ac40aca2e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fd8350-debf-4056-8d75-0a0899457784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "731aa69a-7c8c-40f1-8055-ccfb4ba3738e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f080a07-0771-49ae-864e-3d34921f0631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdb1aa63-ac4d-4beb-9014-f8451c601f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb0f528-3b1a-4f35-9255-6fc6631e740e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de55db7-1881-4620-b907-1e700bb1ba68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8550ebbe-06ec-46c1-b1c8-4a27e7745e14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91480a9-b72b-4d66-8b3f-eb6debcb54c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "400dbbe3-c143-4c50-816d-6e6d520295f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f3b0c3-7960-4202-9f5d-3a6fbb701d83",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c1b9c3-c9a5-4ad0-aab8-8c3ebd3e2c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b5cf436-59d2-4dfe-947c-79dcf4984f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af608354-0aff-4865-b4dc-1aaa0af43879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a1df54-2701-4fa9-9a4f-44ba808ace78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5866c021-0dce-4372-be5a-a0f2cf7ea445",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dec48dd6-f6aa-458b-bcbd-ec913a14f8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01c57d73-1f36-49d0-ad6e-e9cb3d91850c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4267bd15-86c8-4897-b1ef-60e730a8829b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60ce7589-f46f-49ee-b011-468ad0c0b867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de9958f-5c87-45b8-ad84-5cd12a3bb868",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a6d95a-d192-4389-9438-613dfa079670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e420f8-6611-486e-ac83-c09c1518dfb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aca4a9b-4c37-448e-bd10-fa44610447f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a6383f0b-2702-478e-84f8-c06cafe34bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bde310d-b292-41e4-8473-fbb5b61d0c2f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17322f4c-03dd-489a-9d06-97b7d1db7b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2618c1c-68a3-43cd-8653-337b9a250691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b423f43-dc59-47d3-ace7-1777f84b81ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cdbfa3ea-fbf4-4feb-8d0f-57ac7a25f5b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd888f3c-4d05-434b-ba0e-97b8b37e6cdf",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ce4a22-1cf3-426f-bdc8-d2d16b2994f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf848350-43d3-426d-a194-13f6866445a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d10f31-22f9-4128-bb26-9b072d83a3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9e6e09d-45cc-4581-91fd-16cfb2b5d4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a070ee-c747-498a-af64-d9d7b10785dc",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f0f36a-39d1-47c6-9754-535169e23057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bd33154-aef5-4a8d-88fb-98b442794bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d5902bd-fce4-4a41-be93-ef77bf56d0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd69e565-5fdc-479b-840f-fc6d8ad953d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e3ad6f-5f0c-4ee7-8162-5969acea82b0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887e0135-c897-432f-804e-ac6fbbc2a521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d6b133b-edbc-4f30-bbd8-13484febaa81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc40a2d-8d54-4c3f-9974-5672446c4316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "62879460-6233-451a-8d80-b1c5c6889b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b50f1c-6d64-4005-8dc1-34090552f853",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d8d459-02db-4d4c-90a5-d24248158f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "988bf47e-bf0c-4b5b-81ce-9049a8673bb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf1155d-2dbd-42a1-8b4a-c99316fa8c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d3bb9b1-748f-4f36-aadb-cc9b6d10a0aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0e6404-5d31-44cc-b3f6-27df7f2e18d6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302b10c9-d066-481b-a17d-641b2fc03060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ebb0d6a-b369-4bb8-857a-e0a7a7a82d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9013b14e-f025-4df6-9ce5-73e3da086599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a06633e7-3664-47fa-80fd-ab598f25695e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8182cbaa-c9cd-4eda-89a6-23e0cf4f162a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a610bfb9-0585-4029-96be-b8b09806036e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b845aa1-422e-472c-bacd-408fba92ac31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0bea1f-d8da-4f3c-8536-4e3358d0b12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5622ef3a-582c-4bdb-97d9-b55bbfa043e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d539b2a9-1a5c-4b09-83ad-8b234986b1a2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf32b83-871c-4fdd-9a03-dbd7cceb81d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0733a9b5-80ab-4e80-ba0f-db6fd84d0e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f8b872-f5b3-42e5-9e32-6830561ea430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd630ce-5985-412a-9149-050ab32b2b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d67c56c-e7fa-43d2-b57e-8c9db9b3d37b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e160ff-bbac-4fd6-a019-fc69feed31b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a2599a-3e16-4c44-a1dd-bb0c6f7c8768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e44e1a-fc49-400b-98ed-2dd533cb9f6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5554e488-f394-4d1b-8f0f-9fec76d65543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778bcc02-e4ca-4983-9e6e-6106144d8078",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71438d84-471a-4d2e-a90a-77ccfc4b1587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d480fbd7-581c-456e-aec2-3a7c05119267"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e116a770-e91d-48aa-ab41-b1b7ca78a09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f05c95d4-c906-4100-bc80-817ddc41d764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846fa0cd-b16a-4b8e-ad38-17ef4ac81a97",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efb010e-ee34-416b-9532-0818e1273cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e364c03d-8488-457b-91f6-24dd45b432d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98bda56f-bfba-49f3-847b-7da4c7978054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "242dea83-f965-401c-a5b1-e8ffba2dee01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd44a87-5990-44b9-b952-3dc37683f945",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70c35a2-b36f-4d8d-b4be-6f3a55e44c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429bf924-bafa-4106-9829-f7ede59b6e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f55ad89-c3e5-49ff-be44-9cb6b92e0b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "702cfe38-6b8d-4294-b5ae-eeb81d4cf7e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2dfb7e-6914-4621-a0be-f98dd5909d5f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c68821a-2b9a-423a-95b3-55bf9b1a53d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f89def-196c-4edd-a4f3-30d6a3863ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e69dc6-0864-479b-9ff1-22ecac439d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d43d3bc-3480-4308-868d-211ae2571cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e2e6ad-8fcf-4146-ac98-66eaa045829d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dfb426-23cd-4262-a8bf-8b4892588a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8343707a-8201-4b67-8649-c7b48a50aeb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02f4471-d549-4460-9625-a9fb2787ba0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec88a7fc-300d-4d54-890a-afa718e4dda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ce5865-31b7-4f29-8943-7a48eb2b81eb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a05cb52-589c-4188-aba9-af80f08fedf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8c530f4-6be6-4a9c-9129-3c7586b3e818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369d1528-69ff-4029-9eca-8f9fb973e764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ddeb85-9f80-42eb-a505-2a7c7e123e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f096c7-9c4c-4762-b16a-0753b4f90f8f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f54c9b6-3981-4349-a02b-43635308033b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1daaf58-df52-4fdc-a2bb-114a152e2c1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d44512c-3b8e-47c9-a29c-d1c6c7be83e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b43d7fd7-8324-401a-bada-67fe9fd46d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cac9b8d-8972-4d25-9cec-0d5f9f3e54ef",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899bb660-633e-4fbb-977d-b1d026ed0aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60c7595b-cb0c-4acb-aa16-648c8bc31744"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bcb296-8f88-42f6-bef2-a8ea70f8c699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "014590fd-770b-4dc4-a4ef-3523277e605a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb1b87c4-83de-4d09-b695-b94a647ac57f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d47829-b723-48e2-a1c8-3f3775cbd39c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2baf5bc-42f2-40a6-9db8-27ffe3f28691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c754c9-c07a-42c8-b9ef-0f2241a80e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d44531a-251d-49e6-96c5-f7ca92f642ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c4468f9-59ad-44fc-8ca7-bcb401ba6f5c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d5ba78-aeb1-42e7-907d-26d80c7d621b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f31485-d8bb-414a-8a3f-27d9856106d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de0b03a-ed7f-45aa-89b4-b93cf115f4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d971659c-8d3b-40de-83d7-b117cf0420b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f16da5c-d7ce-4e04-913c-c5005a01445f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893f6108-42fa-4731-a26d-ffe53c0beb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a917720-26e5-458b-9614-265be4f81741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c28bb92-2b5e-4639-a337-19e973420920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a037182-2662-444a-acb3-0621349a0ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47327157-912c-4f79-84c9-fc502d29cf3a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882e6e10-7c62-4e6b-94c7-07ea5fb2cfa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fadbbee-ffc4-4945-b317-618b12b67961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8569648-db6d-4458-82ce-665113e6058a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf19a1d-bdbb-4cdf-b01d-0d944794fbe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4dc62d8-e5f7-4552-9c56-d56119f8b504",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080aa6b8-6e37-40c0-8c18-d96ffe2e2fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6277e82-7a94-4a23-bdaa-068f376c8209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08c66b7d-aa09-4c9e-bb7d-18997ba3fb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43fb98ca-4823-4f06-bb74-9f4002e71482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b672445a-5fc6-4dcc-98b2-c7d859118d65",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83a2ae0-9249-4d66-ad2d-e5d58cd4fd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb156bed-078f-42aa-a64f-8fc36e56250f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37b4809-a669-4df2-a207-65bcb6450b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4396948-0eb3-4bab-9bb8-ccba73369664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa2345c-31cd-4946-99f6-55d747c89cc0",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33c2a23-4844-4275-b466-859820763551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99831d6b-5667-4034-80ab-7e1f7d201e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5587ee5d-9e95-4c8f-b067-671fb48dbb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1054e022-cb43-4d4f-a5bd-f9162198181d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9627d584-9b93-4b3b-9d7f-3753f7b0bc62",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcdf39b-2c7b-44af-82c8-f66170418a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebe51f56-2ba6-44d8-8e03-e2a3c57bf85d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff7352d-936f-452c-b20a-ff64527345f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f5c7acb-019b-4057-9cc6-8899e7946b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "585db37e-c9af-4a22-b782-8925d5fa0a4d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f868b1e-3b4b-497e-871b-4ae14bb4d517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "810c3bd6-9c56-43f1-b85b-57df8f191e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a93e5074-1a66-4f2f-bc75-403ea3abd608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "289b0733-8aa2-4faf-b52a-cbcc9f8716fd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8617b939-d453-499e-ba1d-8e593cc21207",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b6f896ab-27e8-4078-b1d9-3944b79be3fa",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf7635d-434a-463c-bfb5-2c39d6bf6a5e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "85894f94-4879-47e6-9fee-fc4e5542e3db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e445419-67e6-4b41-846a-fa09a3b4d528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e359a54-6b31-42ca-a21f-29aa2ad54942"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28127b55-2ea2-4718-8406-8c433d215c98",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfd5d9d9-10c1-4d39-827c-b17565f3cc80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "51e450b8-6d26-48dd-b262-735ed3c69678",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e052e000-b7d5-47f7-8418-a89d492db362"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb99f179-8945-499e-94d6-0f20d86c84be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bfb707db-c623-48ba-9845-d5f4c3a867f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bfeb0a1f-6982-4e30-9fae-584484a83c82",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48a3e93f-6918-418b-bd2f-76137cacc100"
            }
          }
        ]
      },
      {
        "id": "0cd58192-bf88-4cc4-91e4-bbbb61416ea3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "04a22ce8-dd32-49b6-9d26-fd8e118fcfc6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "acfcd480-77f4-4a82-9332-f8fa66d3575c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ad7d398d-bd78-407a-b957-c4520a74aeae",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f885eec-6fc6-463a-9b25-7d3816a50960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5599d29a-29f7-43f6-84ca-f81010f211fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268b7ae4-8597-431d-9579-401f0d5ccef7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "808d4730-b784-4830-a672-aacb474643dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c41bcc5-066f-40eb-898d-b53feb75f471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a0a882-87e3-4c0c-8b52-de9f4f0d4156",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1d5b87-6f25-4369-ad22-05e9e6336ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1194c888-0de5-436a-8d09-a05ac762b6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e9dbec-2f6e-4554-ae46-6e8f236eaa3b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754b13e0-38cc-4fd7-b36e-d96fe8e3a049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b0d704c-25dd-4ead-98a8-489d270026d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca35e31-e827-4908-94ad-aaa46ffe95c9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669272f8-004f-4171-978f-5af3fb167c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aea6e6bf-2c2f-47ab-acbb-ebe46e7cb41c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e3d353-eb90-4bcf-b307-822e30541fc4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c592319f-7dd4-4730-9dbb-dcdffc149ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "995e0227-34e2-49e2-a712-b0530bdf9ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff486fd6-ab6c-4250-88de-f364ab407473",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0918b562-f831-41ed-9809-93f8854f4fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0d8d63-a3f3-4102-9e3f-4e3292f82aff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70bc435f-9770-444e-9331-ef0b4959c6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0483b023-7569-4fc3-9b4e-2448af83e3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d31550d-6739-439d-9c8e-7f6ec418cae5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4fecad1-4cb0-4335-8732-7a30a1cc907d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8eed31f-7e16-4ccd-a9be-7539d7e408f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7eeb81-6dae-4de3-b27f-36ea6a74a209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95740896-d1e5-4ab6-959c-f13a4a84529f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b73ea4f-1873-41ac-8485-82f4c0f5f8e0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca180ca-30c7-4bd4-8002-44fcb6715a78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91154bd6-84aa-4f1d-81d8-731916b34480"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "789a956e-adec-4905-9a1a-14680f08907d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebcf66c-fbbb-4802-9f0d-5ac6fae7176c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3b0ef5-bdef-4ed1-9e92-ce613df54cd5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9135e0-e78e-42de-9dfe-5ec62686ab8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14625471-c3ab-45e6-b35f-62f9d1f7cb5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "507cc50a-dde5-4985-aaa8-7c4b9d08d169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af0dfa83-9d07-4891-aea5-ac2b04261e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f49b5f-2ec5-4282-b558-89c0b299f9b8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e85ec0c-af88-4b44-b1c3-f5b4d6ed930b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b205f69-36bc-4dc3-b6c9-16a78ce75152"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2175e9b5-d6bb-4d21-b4a4-0fe5c7c2dbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c856c82-745c-4f1a-b219-8eec80663645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853ac1f0-1ccf-4d07-a66e-b4c4fe859eea",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1079bde-7329-4481-bf57-0fce6dc26beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db60e3b-bef7-4f04-b000-b951c30135a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3768dc8-04e2-4d61-aba1-f978222efd0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2673987-8f7b-443d-bce2-e213f64fa867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13435cab-2443-48d1-94f2-c2b914246f18",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00d08f5-39e4-4030-9755-40b6f6c4053c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a5cc222-5940-4cc8-8f74-a31816e4106c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4925464f-fd22-4629-a8c4-cb171b4a9f07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6fceece-fe50-4fe8-b210-1d1fd2c78b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e03371c-8684-4669-992e-cbc377c205ab",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a8bf19-c25f-4aa6-bdc4-08dec181e50d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e14f160f-3325-4bd3-a2a9-955e38ae3999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc686d6d-8cf2-475b-a992-98a98fe01510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b346d20b-1506-4cae-b4e7-018154e48898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b66750-9a87-422d-b941-0eba4bc67797",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4660b266-c45b-4020-8e9e-7905de36625c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "439969ab-fff5-4865-ac00-d2eb1bb769b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51cddb76-ba27-46fa-8911-46ef574301f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e51a1480-9a42-4927-901c-cfd71e5176bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f84b85-3c41-4700-ae55-451c215044a1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5d0322-c210-46df-95b8-ab246cd99e69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6353dfb9-cfea-4536-b323-646fbfed5ff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15dc0a8-1dc3-4922-ac6e-cb66d8426a09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c668cbf-7554-4179-9b0b-d8da9c49b582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630c1a20-5779-41cb-ac61-f2998c5f3728",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7528504e-e555-4d87-b877-a1bada9cfa1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c97a19-3ecc-4972-aa07-5e7e89e54d11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bab9e63-1270-407f-8d4c-6e50ab8a95eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cc3b15c-e356-40a2-9250-2f422cb2d6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2c0a78-6726-48eb-b1d7-5990b25c6746",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e78439-b6a8-4816-9a71-61cb84cd1320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6676bcd-25c2-40fa-802d-8e546d48459a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff401d96-61df-446b-b644-709d31bc10d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6146232-a235-4595-b8ea-9af0bc7cfea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bbcc924-eb16-4070-9f05-4b151b00d4ab",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd53918-b52c-409e-8370-206adc6bc2ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b1be2b1-5e34-4f50-953c-425acb5a867e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0728b4-8905-4585-a62c-33c1e12a2b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc77c481-0440-4634-95ce-29d7ea901715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5beb096d-ffd1-4b41-93db-84bf6bfd8743",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30414af3-eacd-49a6-8861-8de7ea0f455b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aa25865-c419-4875-a89f-116e3248b0c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23fe4a8a-9a6a-49df-b3d2-243ac263af46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c87d5f7-b932-4d27-92d0-e9f0a17a2c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc4578b-3fff-4954-8505-71412ae65277",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd571a5-c769-48d7-981a-c52ccfba1d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba59ed89-6db3-4d2d-8d54-1a91db10f771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d72e6ba-f585-4dab-a7fc-2ea7fafeb416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af632229-a2e7-4801-b2c5-ef4714108f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d1ce6d-38ab-49f2-9c39-9deb222e3d8a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8654c7f-07ba-4a0e-b30b-552c0527919a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df528736-5127-4c22-8081-37b592a681de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42dfa668-f9cd-4e3f-9420-e5ff066b076d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c43e9572-2c39-4bd4-957a-68437706d707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86ed19e-029b-4f9c-a92c-baa09207e814",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfe732c-ee5b-4215-8f0d-00f4a2034451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df72f715-2ea4-42c1-b754-6d2b1c298783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64483f75-f5bf-46dd-8105-598a4144e3ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ce3ef1-4a94-4d30-876c-4b82957472db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c66dee2-23d6-4e83-8d30-184917d5fb16",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ab6fbf-8cdf-4b54-8dc5-81f30c2ad87a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e32f4bf4-9852-4e6b-be15-d7a6f7f1b176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4946b2f-8d3c-4f1f-bf19-8e6603e73a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c2d29a-5476-4f76-acb7-2423e8e93223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d53bb96-c89f-4357-b1d0-a13692738694",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af4963d7-ab99-49e9-a59c-c23843dbd842",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5042c7f5-77d4-4162-b030-fca5ed404b7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "329a9e72-98f6-4832-a6e2-db6825aac4ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b21c1bfa-045d-4b2a-92c1-bcf05433e570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f08326-501c-4833-8165-59e352b8c4b1",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fbb14b1-0d6b-436c-aecf-63b7a93dfd50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30641152-3e1c-40bd-95ed-086079691da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22804018-9b89-4583-a933-b933baba09df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c93c4f0-2dee-4831-aa88-f5ed7f829b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583f14c4-10f7-4611-8e07-5963ce8f30b1",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a487f99-3dba-4933-b72c-c99f9efd6426",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "682df572-2d22-4aa4-8e6b-04f7d4fbd5f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e373c35-ffae-4c50-b9c4-ca497cecbbe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94651b7d-4dfa-4695-9a0a-51828c9ea266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6858e311-8066-4a45-8bca-6a4a1b95acf7",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c7a5e1-a6e5-42c8-956b-1d2393ab2c5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332ecf27-3149-4974-9036-ea0b97a5b0e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e4844b-a5aa-4eb0-aec2-0b2ffa1a578f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60803efa-c272-4f70-ac45-baa8016e1cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ac6ecb-3e32-445e-9b52-eab877b8fbbb",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db2db51-7a94-457f-acd6-ed628c6e4de0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bff79e6-546e-4e8e-9ebe-08c24ea3451b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f0ee35-868a-49a3-90c7-54a129991f07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52d6883a-d93b-4d92-a764-f0cf3307ba95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d80606a-a2b2-44ae-a90c-7618f95f81b9",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89351e5-6ef0-4083-bbd9-bb112316e6cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80be93b5-7128-43a6-b78c-65ebc3c1807e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4a7b3f-ff20-4c72-883c-97120dd306bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775ba07d-fcdf-4abf-b810-965301414c14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f24a560-b632-47e6-aa40-6da1a88c1a74",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc84b6e-306a-4ba0-bb63-49b615ab0829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d06fce5f-a649-4f94-8d4e-dc54f9567153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd03beb-90e9-40b5-97c9-caa4b7fc98c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db2988e5-127d-428e-a910-c90e76a0b64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227bdd58-359b-4f0a-b127-a2fc06489048",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38804e6f-acfa-4799-a6e0-8d7ef9bcd574",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bea3652-2a1d-469a-a63e-a7b7503e5784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75467f32-6814-4aca-ad7f-d5252c005599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b482894-5c09-4eae-bddf-ebfc44c82dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef075f70-20b5-4e86-9a99-3c0f10426377",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d058af5-0fd9-4484-8965-a4861485b36a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84912643-09d7-4189-b531-4335650c6a57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e99c13a-48dc-443d-8a96-541822758072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dff32d9a-f5bf-44e8-80ca-ecb1d3889eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49600ccc-dbc7-4632-adf9-dcdd0fa2c3f4",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808a37df-9b12-41e6-99e8-5858ede18a6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f1bb75f-7d2f-439b-9c02-4fb4b4b5b348"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cadda7cd-1fdd-4c02-bd7f-795702e58218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a957088-8bf4-4a37-8fcb-f8b32ba54ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ce0ef7-fce4-4f1c-9522-04d99d9cdd44",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6608fd83-0d7b-43e9-bbf3-ad7f05253a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b94c81-6964-45c4-8a93-7c03415d05fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56080a67-be18-4f2a-8851-e37c0c4db69d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8be9826-973c-4428-ac80-9a77af1cbb73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aa28360-88a6-45f1-a3e0-7b13c9142924",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7a76511-f662-40fb-b632-b251a0589f73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7401cc32-a00e-4eb1-8a2a-1c9cf10ea7a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b389698-8c32-49e2-a11e-ffdf172b3fc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "335ad0f7-6a0b-4043-a2d3-8a66ec30bc5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3634e578-8937-4efa-af4f-ec830fbf0bda",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4373f5c6-9552-4935-9018-b99c8d6aa1c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8cc2911-f88a-4d1a-8812-8f2add6da539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af306d8-4d9d-41a6-8ea3-89423a639bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd7f4a0b-3ef8-4bba-8041-8bb26f7ef008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "313434fc-396d-437d-93af-014fb56fdf01",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc081b0c-dff1-4a0e-9414-aca61f884713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a48a90c-d01d-4910-b7e4-c266c43d2eac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18ade66-6435-4084-95e0-4d410a94ce02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d536ee-f731-4bb3-88be-9fa1b9c41c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683bfa11-84bd-418a-a7b7-224348606b3e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1556a5-a9f5-48f1-9308-227b85df985d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fac437d-a992-4dd0-8744-550dbae19723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b3d224-fbcb-4ff9-9532-cf5f5a406d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b73363-698d-4720-8895-5a22c79da562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397ec96c-6333-466b-9c7a-bc9e40ab35b2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a170f89-c73b-4b16-8973-a94383be4e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2a4cfa5-710c-47a1-8057-ae37a5edc22d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87df203c-5b97-411d-9318-a8bbb7836d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370dd4da-c6d4-488e-ac5b-86c0f45eeaa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2638d07b-f89b-4087-9610-9b0a650f9274",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b77267-f111-4587-9d2f-e3fa5186ef00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfcd5b30-6ebf-4ca3-9463-459c96cccd85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "342a20b2-fb34-4660-8469-bd7b61d9e4e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ce7811-ec61-4405-b8d0-31026939b254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0220658-74fd-4607-b0eb-19d7b35c01c1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d82de93-6fc6-4205-acee-a4794a9a0407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15eb41e4-3b81-4284-b640-67826589cb8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe88d46-7638-4914-adf8-bc3c50d0be26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e088fc8-2547-4ba9-bec3-c6238ee070b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5641fc47-6eb2-4699-b154-f3dae1c3f960",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c0c65c-06bb-4a60-945b-a7ffcd74d561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73091fb8-0470-41b5-a5c0-23ba89f9e90d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8fd973-801f-459f-8693-7793f7f5b155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5333244-6ca0-43e6-a558-f51463ff7533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6066dd50-9a62-415c-8060-a6714f06e1d8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846c1650-2e50-4683-a24d-be44801ae49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7e7294-5ae1-4cf4-87d9-347dbae27543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0900e64-8bf7-41c7-a2bb-2e246c5884a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45ad328-e991-464b-821e-4a986b43866e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c53001c-07ac-4210-b178-da5dff1e1f57",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44576a2c-dc76-48e8-b5bf-571b82482336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b0a83b7-3246-47f1-8d97-73be562e89e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d19515d-57da-45ad-ab66-15d0e2ab0ec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4e4238-b2eb-4c0b-878b-9509e96cdb3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93fdfe3d-3abf-4471-a24f-859e1d8a8108",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ff8cfe-8904-4cfe-b3c3-efd19a3c329d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f37468f-e866-4642-8f1e-21ebce541960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b164df5-c27e-4b3c-9269-cfe13ebfabef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3693be6-b567-48f1-8152-42a38d9f6583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeff768e-9c85-442c-ad7d-7276658e4980",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12714347-9801-4e48-8c05-3ea485b299f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "916d2305-798c-46df-a2da-e65f90659162"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d943d393-b967-4326-a071-c94da4d1f18d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c09444-3375-4fd6-bfd5-307e1f1f4080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22eed0ed-c1da-4aa0-8033-8dc18c80aab0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28aa7074-7106-4847-99ce-20cdb6ccceb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b9be93-be95-476d-82c2-17fbe25a489d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aef0aea-0c63-4de6-a211-4f496502975c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5932f1cb-f0cf-4838-8ed6-b5cb5dc1248f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250be65e-8507-44f4-8c20-922d9ec3161f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04ebcb4-8233-4edb-9366-4167a196c009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43dbbf1-d8c2-40bf-b8ce-f5974d4b37bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "980c7fd7-8b3d-4a61-92cf-8a6f0ae2c502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bcb467d-30bd-49b9-af61-0126143379e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf4412b-3a9a-46fd-ab8a-194e36bb730d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954e3d14-7064-47e3-9447-4cd12d5bcc2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a34b350-79b1-4d3b-be37-7ff536ea4d72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "273cdb64-d2fa-4b47-94c0-e5f2c3828b96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdc689e3-3898-42a2-923f-ca491867c4d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008d967e-3d81-4b33-8e78-2067256f045d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14ea3a4-c4ac-4069-a5a5-9f0f9d8025d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1842a93e-928f-4416-be71-d53365e40dde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17925ac-51e1-4d14-8039-841214c3494e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa6615d5-432d-4db9-ae39-ed72bc6297d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bc744be-7fc4-421e-bada-e7d1ae88a35c",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b43d7e3-b946-4436-ad4b-0fe397f280d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "807f3096-69da-4d9d-bf78-b84040f0e9a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4945402a-145a-4ea4-91b1-5e4a2cea9cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3873c050-177e-41e4-b9b2-1c926213e5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4707ea8e-49e7-434f-ae70-6dfb97e86e6c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a7befc-8a3b-45ee-954a-919617720363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f7025c6-204a-4918-82d2-eaf2e7351d24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ab21f6-2075-44b3-a257-c06460034447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e6f2a4f-b95c-4d61-9ee6-add0a725c564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6c69fe-be8a-484d-b924-17c3a442f2fe",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07051f86-b63b-4534-8097-e554e4dff8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd0ce70e-b513-4e6d-a1b1-52552c1429f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4ef0ec-df25-4cfc-a6d9-c273ea4690f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14b0bba-d5ac-4d7e-9e26-4dbdf4787f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5fa6dba-0c35-42bc-a910-5529c65d0804",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aeed06f-6b25-4cbc-b3d5-c264d473bb49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f00ef3b4-11cb-4251-9bef-a3fd0ab4c804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce0acaf-7eb0-4d9d-a90d-bc604181ed72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c153b26-f808-4002-aaab-c50956f0b69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24d36ec-be0e-4230-938a-f0b7f6e81e97",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d24342c-6d52-4010-b835-033110ccbbd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aaa994c-1647-45d5-9aea-d85c668c2829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8ed6173-cda7-4bb8-a76d-bec5eb153240",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19cf4b9d-cf75-473d-b05a-da9ad1df01b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a794649-3aa4-485d-b435-15f393748da3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87db8850-c186-4383-b061-00cc550c37fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86411df4-0b1a-4550-ae8b-2aba386fc635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67dc8fa7-0e6c-4f53-996d-f672072e7306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b05960c-c143-4f16-ad32-dafc900fb707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb04324d-fc21-476e-b3db-709e529a1ba2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49825f30-9866-4a4c-bf02-defe106046a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a4c9214-1058-473a-96c2-ee72e4c4b505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1478dc-5bb9-458c-8b5c-c0a77c7242a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e030f19-a6fe-49c9-aa38-fdf55237024e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101b97c1-4871-47e1-ae0d-e3ac54b791d5",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f956ab1c-6ff1-49e4-812a-89f28f7b685a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b580bad3-48ce-4cc6-9261-2e9250fcd94f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "168944b7-6f6a-49a2-a2a9-1a0389ee9704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3baacd0f-9bb2-4edf-8bdf-71f7df7501bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23a59f2-7118-456c-9333-a2a0a787965d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1479064-5a4d-4f99-929f-a19c24c08b75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a18074-af3b-450f-93d9-9cb96bfb5fe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd0d1ca-ed45-412b-842a-108675e0174c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e9f266-95f4-486d-a60a-78263ced3eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715fdbc3-6507-4dc4-9d19-3e40640969f9",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d966f40-03e0-4e49-bea7-dd9dd6c32da9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d81abde7-a477-484e-b7e3-8cde3ee583f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a323615-299a-472f-a633-e9af78e8fb6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "903955ba-685b-4066-87aa-1c94deebbf6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f40d9244-81cf-40ce-a5e7-272ee3f74523",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c384eb-95a8-4713-9e5a-917fce261158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d2d9f19-062f-4faa-b098-b9aa8fffb900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8af6be9-ab7b-45d2-a38d-b4e9dbb3ff4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b51c5545-6ef0-4c1f-a17e-2403047f94c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0aafa9-dfda-43dc-b785-5b563231d7cf",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea1bf4b-2cef-4f36-a70a-0d761e2b80cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c8f764-d9d0-448c-a42b-ef6386dc3565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c528ca-c0e0-4d49-8ee7-b1836fb36674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0860bb14-8c95-4df4-a589-197879fae0b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93110b46-15ae-4a30-9f8e-8df23214a38c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91445865-a60d-447c-aff5-d3715260724c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09869659-8d52-4f2e-9372-159d346a19ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42274cf8-9921-49ee-8637-e5e2f0e766e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146c780b-b1a4-4cdd-a0b5-a0721987224b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01aa70c0-b1e5-4d44-a110-87333c172c3e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d81a5eb-57ca-48aa-99f8-d31e677412d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89325c36-ab63-4429-85b6-4691f707025f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "931d0f07-77b3-47ca-98d2-bdc492be557a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b45d2a-ef08-49c6-b7e7-17cad82ecbc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367ee00e-a24a-488f-8a3f-51265e8a341b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2600135c-1917-4dd5-8dc2-3777e54ae955",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0691d402-27ec-43de-8a8a-3a6241d4178c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3344f1-3bc7-4d49-84eb-5fac43c717c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e37c879-8a5f-4cbd-bfc2-aa73d9f8feba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ef46b1-219f-4cdd-9cbc-438e7a8db09c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199c5419-b647-436c-97fb-36a8d85415bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d474c743-c281-459e-b12c-d9c3d7b05a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41badcb8-e1e7-4683-a8bb-7e721bd756b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a784e2-3b9f-4267-8965-89fc8b7327f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a03e06f-45e2-4ca2-8f39-10f8a38e3570",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a096a48-ddb8-4344-9482-7b7d3b30fef8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f240924c-ddcd-4d03-8461-41b64ddaf108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c0dc9a-9d7e-40b9-9103-cdc0fe967a53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df505e65-cd1f-4d6d-8778-1ae65d3f9025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2767faac-2781-4d2e-bfba-a48e0bf81b96",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5475f37e-f04f-4315-b27c-4366f98ad926",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44dd2a4f-3c07-4265-976c-59690a30bbcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a418df-8618-47e0-b4de-f949d8b455db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "992c837d-5604-4c8b-90a3-71bc9732a1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d55cdee-cafb-401b-b170-67b38ad89400",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49930262-440d-49ca-a3b2-92ac5d4ab21e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "817fea2b-271a-492d-9b4a-9cd2583a7289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a514b92-0797-4042-bb23-4d519054eb6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8bd65fd-68c0-4b1e-b786-8fd18fa50856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb0dc0f-30b3-47f7-9cdb-085e8e0d1c2d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5639ae6-b1b1-420b-a24b-ec6e4c7590c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19b6c956-766f-4be1-b208-c2cc5183caa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7acdf3f3-34a5-4443-bf18-69e8ad2c2931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb22995c-5cb8-4461-b93b-eea9c8d70a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274e0be8-d58f-4dc5-b7c2-c90eedd97376",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df617833-4cc8-4de5-9bea-58ecfc0a8091",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43ba7f1b-be56-4f9a-9401-296a40ef11a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d008763b-8249-4028-a440-c8b1fee10a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72235df9-8abf-4886-8d57-46ed6c8dbfab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9457c46-625a-4503-a6c0-991b45275125",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec033612-74da-46f3-8e99-287d2c9cded3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e969a1a-1f2a-45d2-af49-e28b848b3fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee44dd0-a66e-4820-8631-f6423b56ed5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa38fd15-4ff5-4872-a026-8b25bbff8b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9237aca3-f355-4502-9461-404bc7423a56",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03a2c71-5ec9-49db-a7be-a779025c564a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "891fc5ab-20dc-4e3a-9e26-4941754182bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a285aa3-76e8-4205-aee4-6ff73c1a097c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2a5ce3-8be9-4c7e-b0b2-2f4c76ff8852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba67006e-ba2d-4ed3-8363-9e3f2b820903",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c812e6e1-21d0-405e-9f09-4651a6a3b857",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b593a90-2299-46cf-a116-44316f1ad443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd04525-2393-4ed1-8f43-bf99c5fea876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd0cec3a-3f58-456a-bf11-dc98296e9cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662fbd16-45b0-4fdb-bc5e-34d8bd6bcc0a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4531f2ac-47a8-4773-af66-17ea8a8b8ae1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "082c5c91-936b-49b5-9ab0-8bd4da7a1c5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d363782-d5dc-4622-a299-984fa1e3ba06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "002e0315-6ba8-40e7-817b-136a7d30878d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22cc2aff-f976-4afa-87be-e3599b3f9a17",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b103e6ff-3ed2-43e1-a5bc-3a1e0a420d5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bfe21e1-87b4-479d-a994-c701077c2a6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbbacd69-ae85-45ac-95cc-f40619b57f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59dde577-7e78-4166-855b-9dc4f80b8b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32980e01-1f53-4399-9eaa-8762b32b55b4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf985925-48a6-484a-b40f-6c207f0a4648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4021825a-1ded-44f8-a81b-468939894e80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfa1800-bb29-40cd-b901-22cab6cb9497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cd376d3-a461-429b-9649-e7887747e07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ffe570-8328-45bc-bc80-ebc960a09f97",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71897b99-717f-4417-9fe7-7800f4fc8a41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33b46a15-0e93-4f4b-ad52-8dee5f2d21ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "012a89c1-da6b-477b-8512-4cfbb1cea68b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "163bdd01-ddac-474c-a484-40891458d6ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fdb05b4-fd0c-46ae-bd32-48215dd4dfde",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d24450-0216-49ae-8fd5-fc773c25b651",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6d200c9-b4dc-488a-b24c-cc7a26a129b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c759d8-83ea-44d8-adba-06493ebb5ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47c8b872-7943-4121-aae1-868199dc1f49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2afc3cc-05df-4e8d-b76a-381a89c21221",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a710c06-0f37-4efa-8001-c969a44f788f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19d8293f-c81d-43fa-8cbd-e8caf7fb3424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066ea662-a4bf-4def-9661-ea7bbc73c20c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d9f6da-c4fd-43aa-b1c9-c0c10766ed47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fedef935-5ff8-4657-9934-ecce61827384",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e95524-d843-4855-ba9f-42739e3f5335",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2e6158e-a036-49ea-94ec-8b525e7f33ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc056a4a-0286-4d4e-b47e-59bac8e00edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94e836ea-213d-4926-ac73-4a37fa6d1968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79473d0-3138-476a-bd85-c3ea217411eb",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf43063c-ff52-4eaa-8426-50104c737126",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c2490cc-7521-4807-9372-9365d2daa244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f50102e-0204-4228-8fb8-8e907aec0806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5bf327-6d32-4c6f-b0d5-89d2e8a7d6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0481d084-80d2-4015-b789-608cb8a22b59",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479a6940-436c-441f-91f9-882a18f5082a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "412417b7-a1c0-48ce-b433-1812d15a6fd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6affdf-2908-4d10-8b96-3f3753c8aae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f8d29d5-74d2-47c2-b681-4287e3655c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdfa303d-4fec-42ba-8fb8-9fe163a76c40",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418cd78c-4a52-4136-9e8d-97830d4ff6d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82d59614-7699-4feb-a495-c819cb8a3131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcba8a1c-0b84-4085-ab7a-9c58a8b3b912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb08fb47-fa26-444c-b3ba-59c4e62eb8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f52212-a77f-4db7-85d6-f5edb466d7ca",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6db36cb-304e-40bf-86fe-e5e4d02b2bd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad08c0ac-254f-4d67-bc8f-1a1325c31c49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f22c87b-a484-489b-9c3b-76f63d80cfc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41eb3e5d-fa09-4e0d-bebb-ac714bd5e30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6bad51-c9df-497f-bea1-233d7cb7feb1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c7becc-e0fa-4109-b713-0221c6778d46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89c3b6e2-d6ee-4bb9-90ff-c09d6b0b179e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc82b6e-a3ca-4e50-b934-571a704b5227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11bc39a1-ca47-4785-911a-d5875af13c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61bb0699-e810-4dfa-bb97-d3aa97037b79",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3e3f33-f301-43f7-b42e-c01f21a31216",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4974fed7-427f-4d1d-961e-c4a594c3548b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16a67be-c16c-431b-8ec1-56c39edc5a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b766a204-f5ad-408f-ad02-d7b07105a95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8acc0249-9838-4745-aaa7-942daeb40a79",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41d9d38-c36e-4f59-bc2e-a4268ed6e466",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1514b46c-8968-439c-9a60-db61dca7903e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ef6713-ccb9-415b-96ab-391635d9b0cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c32706c9-1c72-439c-8f37-8448613733b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421fb087-7f91-4965-8463-e993f66f1fa1",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f380ef-0bcd-4bf6-a887-99fb7ed18ac4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71539bdb-cec0-4778-ab44-35659e2e666c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e68938-f433-4a73-a665-6ad566b35343",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d95230f-35fa-4472-af31-b4ff0bdeb122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05d51ee-0649-4a61-a292-78dad059c308",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbebd40-1136-438f-9dcd-645af4a12c7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fea3b1fa-cc0c-4db9-a10b-54d5c657a5f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f304cd0-9e77-466a-bfc2-cc46a9c3f619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "090d16dc-e641-4528-809c-0d212dafbbdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c1d5b4-d807-4101-8551-dc9763e60342",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9284d2d3-fbbc-460a-bb0b-f8f7fb545c9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9893e898-8f6e-4f9c-a2be-cf056f2a6259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe97265-6c1c-449f-8a31-c8d96b02db57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22da01e4-d5b8-46ed-9c0f-f7728809279e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43888f8e-c9be-43e2-971f-edae05f7711f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f492341f-3645-4bc2-be99-a68195c93d76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2327eaa-dbc7-426d-850b-b1a755ef5f50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1f5eac-861c-4cc6-a57d-3f00f584a0fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d00d6506-c9c0-4405-847e-1af66a372c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88443555-cecc-49b8-824c-ca30db87e832",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833e829a-f16a-4e13-83de-0ec49f9ed9ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a73e5db1-df69-4e95-b4fd-367137bc9c58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c797fe-4e19-4f8c-ac0e-9d7df7b170c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3084920f-ee23-44e7-ac38-07a4f607ae0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c424ddee-542c-4e84-b2eb-e0573f421116",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8ed76d-338d-4c8d-b90b-39ee40f6f04c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42cd9693-006c-4195-85a9-5890c6a1ec3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71858ff-8009-41c2-bb5b-db72e479de39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f38a64e-b67c-4605-833a-b1da1539f973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e0b47a-a1fa-425d-9288-97fb1ad7f66a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42bc91f8-0048-40d1-8b94-fb37122f8114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd63d3ef-fe1c-419e-9ced-909107dbf6ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db31abc-6136-438c-9b70-fae127d0b5d6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37f7112e-8ccc-4db3-8bf6-a0114205c3d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e2a670-5c35-48be-a1b4-e43090762aa8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3daa409-6130-46ac-86e1-2a75f08311aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "925784f7-a724-40b9-9b17-ec491c6a3ea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79487525-af04-4a8f-be39-36164e0460bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b63bde3b-7dde-46bc-af50-a1e47f777e75"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b26b482-e7df-453d-b804-92d5262d87c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff5ff74e-c054-427d-9e68-348f0442096e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6c97e2f-053a-412c-bf94-7a093b2a9bb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "55e88b0f-ae56-431b-9e5b-54709cae49d8"
                    }
                  }
                ]
              },
              {
                "id": "628ed25b-056b-466c-a348-0d05aa474140",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2c2f224e-bc7c-4182-9f85-3678eaf38f75",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89527356-2d62-45b7-9b32-56ca372a9590",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f4543c72-7803-4cee-b18a-cd05ce11c73c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f359b933-0623-4149-b45d-bb7a4310e494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2cb4a97b-6161-4062-84c8-15ccae555de1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62e4a68f-9d4f-477e-a398-41693a4f42c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "07704b54-0466-4994-ba95-1d9a0ce626d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eaf0d26b-456c-42c0-8971-8e37427ae861",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "255d6bf2-857e-45ad-b665-9aa6e3d6d832"
                    }
                  }
                ]
              },
              {
                "id": "a52e3045-63aa-4267-8b35-d3fb15e2fbc1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0e10fad0-8750-4383-a069-e082cd5ed50f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61af96e8-5ef5-4c14-bea6-d2a204f25d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "96504961-56ab-4bc8-905b-298a4530f41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30a7b45-6cdc-4e3f-97b0-5033a4aec90d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44efd78-d553-4ced-8677-a739d88c0873"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f4425783-0d68-4982-b908-9b12e7829001",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7e959ced-c134-4a38-b2c1-abd43027d23a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb003f65-0ac8-4b74-9f3d-5e17dda743d5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "98508ae7-770b-44c1-8346-b74725837c69"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27deabf3-486d-48e3-8122-c421c22aba4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a1e326f-9fce-4bd8-bb74-7e7aa51301ca"
                    }
                  }
                ]
              },
              {
                "id": "28a4ce7a-2673-4fd6-9eea-48a55e602ebf",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5c15397-0e01-4795-a5a7-52d3b29a6a97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7c37841f-c04c-4928-a2cb-38472c3454fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd908aad-6fa2-495c-aaea-a03b4c6db2b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78dad900-410a-4b87-8f62-98b7a0b32d7d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e1f0d8c-316f-4dea-a7f1-3eec52e2d92d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "21afee90-3bab-4b0b-813b-2d661214bf6f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "046f9262-c3cf-4191-b37c-2ce395570f40",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e91ce03-574e-43f6-8f82-591420086918"
            }
          }
        ]
      },
      {
        "id": "a1d5e9fe-348f-47e5-8255-7ff5bb0e3efd",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c0d76199-6547-4b61-8cb6-fbaeadc34c6d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b9568b18-7e19-4261-b8f2-a70fe98f658e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1d446e1-ead8-45c6-a470-ca1b07058c8b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674aa002-b736-43cc-bce0-b960d457e8be",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b5c6fa73-65f7-43af-8a3c-e7dbecac361c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "143cfdbe-9a3a-49a1-ba55-2391aaf1b74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba001415-fd5c-4879-979a-b29c21a174c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51d363c0-c932-436a-8665-983659886458",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9658255-b39f-44f0-a244-8bfa4b353f76"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad0ff31d-8a4b-4772-9996-e698e91f1ba1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "485d1a5a-4da7-4ad7-aef9-04fc29ea8e7b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "21d5f180-943f-46fd-8ad4-4877b85fab15",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "da733d50-7588-4d26-be91-86e7c370d7cb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf4d3600-ce09-4054-96ef-251cafdede8a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "61579212-18c8-4116-83a4-1236a31e3d29"
            }
          }
        ]
      },
      {
        "id": "a950ab2c-8886-4729-b753-10d566914564",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "588902c4-59d5-48c3-a39e-64ec1139615c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "622849f5-9158-4f04-8f76-ce7174c539f9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4742ccec-e548-435d-8f18-fb8132bba927",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff37a168-9cc5-4772-9184-ef381aaf0c0f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "334c853a-7110-452c-b872-9a193ea0675e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7892dd89-dc97-42a4-9012-6b1eecdfa9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f869f113-0c58-43fd-8837-36683469ee31"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7ae353ba-2ab9-43ed-aa73-1854434e80a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2293bc94-fa7f-42af-abc6-f9447d321242"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c7bba42-d410-4f8d-adf7-5eef23bf1f06",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fa883d3-8779-4dce-adc5-ec300a5d6a9a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "49f0da37-75e2-40a7-b817-bb258ac2011e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9d836d7c-7414-48c2-9802-9f89d3feb563"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dd6677be-a4d8-411b-b8c2-b3e29fb491fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2c4e2c7d-edc2-4804-b065-8f54f3be4454"
            }
          }
        ]
      },
      {
        "id": "9d3090bd-e2b4-4a12-9750-7f2e6070f0e2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6ff55bc5-8ec1-491d-adb8-2848f6a1a1eb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1722d5c9-daba-4e75-b897-e0e5a705c329",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3e23797c-b0b0-4ece-a467-7db039707cd3",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e9bb3a-6835-4127-b899-1e356af0701e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6077e912-82f8-4b0f-945f-a63fbb6a7040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5fe1647-c4f1-4569-9516-759f098b4692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af4459f9-fc43-4870-8546-f596c3276861"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7ac7fa5-64ed-472e-bf48-80bcc0ab2c52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3841eca7-8523-4654-9768-564419278b33"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "275db4b5-11b5-47f8-bdb3-4e71b6d0d673",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce896d84-0d30-434f-834c-41fc49378a42"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc1ed39a-db88-42be-87c7-4a68f645335e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cc7ca3f9-99bd-45d8-96dc-6e6fa72ea7d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72c3d2ff-9ab2-456e-8b1f-346d1fc62154",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "123d8ee8-476f-4235-aea5-d397ae33fffd"
            }
          }
        ]
      },
      {
        "id": "de28b031-3d7e-479c-9114-dfef838495a7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b56925b3-779d-47c0-b9aa-241df1874f15",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cdd779b0-91cc-4f96-8c7e-6b24c22f026d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0c4091f0-6d29-4d28-b8d5-f2baab6b6ba4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "349335d7-5353-4a32-91c3-683b227ba9fc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ddf2248-9164-47e9-a2b8-c118fd93bab6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 152.1091549295776,
      "responseMin": 8,
      "responseMax": 1903,
      "responseSd": 228.80534515724327,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1695602036163,
      "completed": 1695602095072
    },
    "executions": [
      {
        "id": "eb6bbf7c-43a7-4acc-82ef-2572af32919a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "84a90948-94cc-4fff-bb2d-8870c22a8541",
          "httpRequestId": "9d5bf3c4-ab1a-4293-a3ec-b170d563ad04"
        },
        "item": {
          "id": "eb6bbf7c-43a7-4acc-82ef-2572af32919a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "61ef782b-7d8d-44bb-a5ef-f6599bc2660c",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "8c08bc31-b1fb-4e1c-b1fa-ff79dab54fa2",
        "cursor": {
          "ref": "f69fece3-cc6c-4de5-88cf-f56395568a7d",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e3dc210b-0211-4969-99bc-7c6fc3d018e0"
        },
        "item": {
          "id": "8c08bc31-b1fb-4e1c-b1fa-ff79dab54fa2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a3fdba13-fbca-4425-ba16-f19dd96c026b",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "00834a11-8e6a-4270-af33-087040d96644",
        "cursor": {
          "ref": "ee4b8be6-4529-4e1a-b7bd-405fd8bb2172",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4197c9f8-11b8-4f43-ae67-834194a05964"
        },
        "item": {
          "id": "00834a11-8e6a-4270-af33-087040d96644",
          "name": "did_json"
        },
        "response": {
          "id": "7ed2262e-0544-4f44-8661-3fe9fdc7b2b6",
          "status": "OK",
          "code": 200,
          "responseTime": 359,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51c43ca-4ab0-44cf-9aaf-9d7392e4b00e",
        "cursor": {
          "ref": "1f7bc1b8-b93b-4958-b7e7-11524270df66",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "15526e40-01bd-4e3e-8f5b-a3e354892482"
        },
        "item": {
          "id": "f51c43ca-4ab0-44cf-9aaf-9d7392e4b00e",
          "name": "did:invalid"
        },
        "response": {
          "id": "a9e9b316-2172-4148-b0e0-8137100e7731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51c43ca-4ab0-44cf-9aaf-9d7392e4b00e",
        "cursor": {
          "ref": "1f7bc1b8-b93b-4958-b7e7-11524270df66",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "15526e40-01bd-4e3e-8f5b-a3e354892482"
        },
        "item": {
          "id": "f51c43ca-4ab0-44cf-9aaf-9d7392e4b00e",
          "name": "did:invalid"
        },
        "response": {
          "id": "a9e9b316-2172-4148-b0e0-8137100e7731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e559fb5-f10d-4ef4-a343-288bae996afe",
        "cursor": {
          "ref": "9c495e96-9972-43d2-994e-6e1ca3008f83",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d2984862-0a6c-46aa-9bc7-e28aa86fdf32"
        },
        "item": {
          "id": "6e559fb5-f10d-4ef4-a343-288bae996afe",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3a976489-e208-4612-a24e-3feac779a3c3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 148,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6fd621e-0013-4d4f-b2c6-69b0e90cbea3",
        "cursor": {
          "ref": "2d3252e9-acd7-40e3-aeba-b5e82990a40c",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9d15577c-2203-4d78-bdc0-de4cbe051f5b"
        },
        "item": {
          "id": "e6fd621e-0013-4d4f-b2c6-69b0e90cbea3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c3cadb27-42e7-41a4-b3fc-70edf3d6f78c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef40d0b-51a7-4fc2-8791-1f68abde4c40",
        "cursor": {
          "ref": "beb78220-b261-4210-8c47-4cc6a0cae8a4",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "90e5fbb2-c939-4798-86fe-909a3f6181d4"
        },
        "item": {
          "id": "9ef40d0b-51a7-4fc2-8791-1f68abde4c40",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1557ccd8-684b-4b39-8e09-9180ab629de9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe509c09-e785-4ef9-a21c-528c2fdb2571",
        "cursor": {
          "ref": "23e8f4e0-7915-44f4-8593-4d0bc95a94e3",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bbd2d07e-3305-4acb-8323-fe31d282d80f"
        },
        "item": {
          "id": "fe509c09-e785-4ef9-a21c-528c2fdb2571",
          "name": "identifiers"
        },
        "response": {
          "id": "16493937-ee37-44eb-acc9-8daf9656b462",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d01705d-dc2c-4a15-a775-c78011cd0ca9",
        "cursor": {
          "ref": "3b5c2f3a-50b4-4363-b389-60fb09c25c2a",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5273e054-e199-4d6f-9de3-71e02d8e8aaa"
        },
        "item": {
          "id": "6d01705d-dc2c-4a15-a775-c78011cd0ca9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d9fee9f7-eae4-47ff-8c6e-7f7489d89e66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff27f83d-ffc6-4a32-a75d-135f5376ef6d",
        "cursor": {
          "ref": "9a2426d0-db6e-4ae9-ae3a-027622d1bd47",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "91527aca-0457-4824-ae06-96fac74b1d0c"
        },
        "item": {
          "id": "ff27f83d-ffc6-4a32-a75d-135f5376ef6d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "091acfdb-f09c-48a3-ba6a-6a7ef18b2423",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5f0d54-4d48-4f85-b5cc-0da6c19b324a",
        "cursor": {
          "ref": "b0abe56a-e85c-441d-aa58-c05936c9867d",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ebf4d0b2-def1-4d53-b0a3-fdb2210810b3"
        },
        "item": {
          "id": "ad5f0d54-4d48-4f85-b5cc-0da6c19b324a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c749ba74-ad6a-475e-b961-0225587583c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71a5f85-5217-4ccf-b685-347e61a6d1f1",
        "cursor": {
          "ref": "6fcc12d3-8811-4218-9994-d1bdee9a47c2",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "73e41edd-a87b-41f9-b12b-998da2ae4a32"
        },
        "item": {
          "id": "a71a5f85-5217-4ccf-b685-347e61a6d1f1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "226ed041-1e36-43dc-bf2c-fd883bcb95df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87802cbf-7d72-4639-bfce-0faeab8a5093",
        "cursor": {
          "ref": "c2890c8a-c941-4cd0-835d-c535dc20fcb0",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "41422c56-1a4b-4d63-986a-b9d71811bce3"
        },
        "item": {
          "id": "87802cbf-7d72-4639-bfce-0faeab8a5093",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b2e47aeb-e1ca-4053-b210-d4a47b875078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abdb2ff-702e-4638-bce1-482fcc6b4708",
        "cursor": {
          "ref": "cd983e52-b67b-4f0a-b145-f37d54708f45",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bec17ab8-6d73-4cb7-bce3-0c6aa709a1b6"
        },
        "item": {
          "id": "5abdb2ff-702e-4638-bce1-482fcc6b4708",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "89f8b570-d06e-43d9-bfc6-15d0fa62a3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82af79f1-99e6-485b-95ff-0e2dae6f6cf2",
        "cursor": {
          "ref": "0d445eb1-31db-48df-a382-a91115908bd8",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "813905fd-6609-4b5c-9272-ffcf5da2ac94"
        },
        "item": {
          "id": "82af79f1-99e6-485b-95ff-0e2dae6f6cf2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "feaa2c92-e358-4fb8-9a3d-930d740c7fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "402d7374-db76-45c2-9492-2d9143cff8c3",
        "cursor": {
          "ref": "3adcd265-efbf-46fd-bbbc-9f2c6c092017",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "55f0b696-e7ba-4483-9cf0-05c1c8bbc8b5"
        },
        "item": {
          "id": "402d7374-db76-45c2-9492-2d9143cff8c3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d82af961-795f-42b1-b146-5cb9e5e8b5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc7c67b-0a9f-42cc-8c47-471006846716",
        "cursor": {
          "ref": "ceb9d12a-474e-4015-b396-b21c079c1eba",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "57d5ed32-2af2-4814-a7fd-f91ff181dcbd"
        },
        "item": {
          "id": "8dc7c67b-0a9f-42cc-8c47-471006846716",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "de6c7277-0294-445b-902b-c8cc1be2ec28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9282009e-74a8-4cf5-81c6-ebe695ba92a6",
        "cursor": {
          "ref": "dc6d8787-efe1-4921-b133-ebd187cf4c4d",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "76661a1e-7396-477b-a283-4bede19b3cf5"
        },
        "item": {
          "id": "9282009e-74a8-4cf5-81c6-ebe695ba92a6",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d00ac701-7d12-4d3d-a036-7c2dc44f82c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1cff51-a0f5-43b2-9a5e-eedbad5a7e63",
        "cursor": {
          "ref": "92dba8e7-14f7-49b8-8a40-95200e2c11a5",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6f99fb14-bfc5-4dd8-bee3-b641262b2122"
        },
        "item": {
          "id": "9b1cff51-a0f5-43b2-9a5e-eedbad5a7e63",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2178ac17-e9a9-4466-b991-1698c5b5f184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c557bdfb-aafe-4baf-9061-7ac03aab68cd",
        "cursor": {
          "ref": "4a7457fa-3cce-416f-a162-4e2108378f71",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9cc75ed4-cbf2-4384-8aea-d6c8eea2791b"
        },
        "item": {
          "id": "c557bdfb-aafe-4baf-9061-7ac03aab68cd",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0f8d2533-b868-4135-a0e8-563e7b886c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623364f1-8dc7-4f22-88a3-c0f6a157d5f6",
        "cursor": {
          "ref": "d2f1b558-cb1a-4460-994f-d5ac869ada1a",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "dd8b465c-c178-4ebf-ad69-853ca1fb46bb"
        },
        "item": {
          "id": "623364f1-8dc7-4f22-88a3-c0f6a157d5f6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5ca79ff1-53c6-4a96-b537-7480b8030d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e88a221-99ea-42af-9f7a-c39f90892e35",
        "cursor": {
          "ref": "2f3247d6-26cd-459d-9692-d3cb584698ba",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "13512e89-be01-44d3-84ed-a894d939b13b"
        },
        "item": {
          "id": "8e88a221-99ea-42af-9f7a-c39f90892e35",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4a50593d-986d-4c9b-8672-10b6635922fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188aa893-d718-42f9-8b80-c7a55b301527",
        "cursor": {
          "ref": "8500c688-50e7-4d50-9cd5-d7df00715e66",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "20102971-9589-46e2-a727-15c6ab1002dd"
        },
        "item": {
          "id": "188aa893-d718-42f9-8b80-c7a55b301527",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2839091f-fe9c-41d3-adbc-9e61b4bf4c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85049b0e-ed31-49d7-8d1b-1631e3ea0904",
        "cursor": {
          "ref": "4bc765e4-ba7a-4190-94ca-67d669d089b7",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0df18c60-9ab7-40d7-9f1f-1bb2cd69eabf"
        },
        "item": {
          "id": "85049b0e-ed31-49d7-8d1b-1631e3ea0904",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "64350274-d2d7-49d6-be50-825f55f35b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c9c215-9cc9-4003-95ec-90ae96003000",
        "cursor": {
          "ref": "41fe711a-84bc-452a-98fd-064f9e6faa16",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c0068e8e-4b8a-4a34-bb4c-c1a60661a212"
        },
        "item": {
          "id": "b7c9c215-9cc9-4003-95ec-90ae96003000",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "49f1b660-82a7-404a-9aff-a8af54b6a1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ab5e70-62d0-494b-b34e-ad7ce49b7e37",
        "cursor": {
          "ref": "b7ed8ffb-20ab-433c-940e-59f5e772263f",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3c2537d3-3d7d-4796-9980-cbdf22cff772"
        },
        "item": {
          "id": "89ab5e70-62d0-494b-b34e-ad7ce49b7e37",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6ea4cdbf-5e73-40ed-8f5b-1b70c0a54ba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd3117e-833b-4d13-b140-5744f3c3ec2c",
        "cursor": {
          "ref": "f5f602de-cfab-4766-9f5e-efea09667d98",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a1715211-ad93-49ad-a288-c2f8a5ae8cad"
        },
        "item": {
          "id": "8cd3117e-833b-4d13-b140-5744f3c3ec2c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4f90e4b0-b8cc-482e-9ddc-cce5ee13ceeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b076bd-6431-4d46-ae6a-1ac7e321cb97",
        "cursor": {
          "ref": "a03a916c-0943-4254-8811-b4db6be3d683",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "67f3cfec-b0f6-4068-a113-8ea82d644b86"
        },
        "item": {
          "id": "65b076bd-6431-4d46-ae6a-1ac7e321cb97",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ef838f66-cbf2-4b5e-be97-62de2205da8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5e7a8d-eb68-4296-8b6e-c28b727b41b4",
        "cursor": {
          "ref": "6da8f7cd-5c28-4809-8512-8b260415c270",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9b80256a-b56f-435c-b112-cb9a9e016a6b"
        },
        "item": {
          "id": "cf5e7a8d-eb68-4296-8b6e-c28b727b41b4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6a871160-10a5-4b62-93db-be8bd3d81b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217ef7db-7bc6-43f1-8fee-7bfe33d8e72b",
        "cursor": {
          "ref": "b024cc0d-bb96-47f5-a665-460b3c8b3f7e",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d742df1d-39e9-4e83-9600-c9b0128f122c"
        },
        "item": {
          "id": "217ef7db-7bc6-43f1-8fee-7bfe33d8e72b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "03e4b0c7-13b4-41c3-baa9-6ea2ff8686e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ba3acb8-1fb2-4156-b656-98328a46b7b5",
        "cursor": {
          "ref": "67c28207-6cb9-403f-9eb1-a0ffbe5c3c12",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "f2a8233c-42c2-435f-9777-8bcafbf3d02c"
        },
        "item": {
          "id": "1ba3acb8-1fb2-4156-b656-98328a46b7b5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "850d4a8d-5dfe-40dd-8906-7a9207bab193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd52aab-2375-41c9-925b-a5d31a2f495a",
        "cursor": {
          "ref": "28aae768-aac2-4882-a7df-771e17f0f78c",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d76c1245-8cf5-4044-b94b-022ec225d042"
        },
        "item": {
          "id": "6cd52aab-2375-41c9-925b-a5d31a2f495a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "05235172-fec1-40c8-83c4-1875b09fa397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e4a922-b5dd-42b8-acff-51020ad8d313",
        "cursor": {
          "ref": "b16aba4c-f67f-46b7-82a5-b6b1f436f2d7",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "25f31bb0-02df-4e31-a5f3-bda4d44d4a29"
        },
        "item": {
          "id": "82e4a922-b5dd-42b8-acff-51020ad8d313",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "619cedcc-9fea-43bc-9b0f-1398f8e00b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d916fa-8498-4da0-915f-8b58846342b2",
        "cursor": {
          "ref": "4c5c2b4c-7f04-48eb-a25f-b383d168966f",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f7a1be13-550d-4f4a-80e8-9d3d47c1004d"
        },
        "item": {
          "id": "c7d916fa-8498-4da0-915f-8b58846342b2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e54bb1f9-f36a-42ff-9cbc-1a45e1e4e876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c098a81e-fb9c-4d76-9527-0561a52c1c67",
        "cursor": {
          "ref": "b364790b-710e-4cbc-a35f-cbe35b8d56d2",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e6e9002c-ad0d-4138-a625-29d4cba6b15c"
        },
        "item": {
          "id": "c098a81e-fb9c-4d76-9527-0561a52c1c67",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d8ac02c3-6745-4613-832f-61c38b294000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "684fd2af-2140-4f99-9f70-bc12bdbd9d26",
        "cursor": {
          "ref": "52b38d47-29b4-474f-bf77-d46a81a2732c",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f8bfc7ca-6082-4bbf-b1e4-c8d01c7599a3"
        },
        "item": {
          "id": "684fd2af-2140-4f99-9f70-bc12bdbd9d26",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "536157b4-c8fe-403a-a458-8b1cdda1fac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9bf0405-497d-409a-899e-58f93e3aeb84",
        "cursor": {
          "ref": "da4985d4-40bb-4cdc-b021-7c933cf7ef88",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b6f5b109-e622-4f0c-9e83-404b572cf479"
        },
        "item": {
          "id": "e9bf0405-497d-409a-899e-58f93e3aeb84",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "79f7a74c-29cb-4d87-b80a-2568c2a2ac4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb21f10-3b62-46cd-912d-96459b2f3dd2",
        "cursor": {
          "ref": "1c79df10-7899-421b-ad57-463e7ba8ce01",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "3ed5d134-bdc5-4656-a529-8293c7812fdb"
        },
        "item": {
          "id": "cfb21f10-3b62-46cd-912d-96459b2f3dd2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "beba33a7-971a-4cc0-a00f-149d1c06083e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4da20e1d-58d7-43e7-a0a9-868b7857a6d6",
        "cursor": {
          "ref": "021de1f6-0566-45f0-ad30-11f594990b35",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "744c956b-d07a-4564-8599-e442644a0f3d"
        },
        "item": {
          "id": "4da20e1d-58d7-43e7-a0a9-868b7857a6d6",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "06327d40-38d4-49a6-b06b-6ace9128475b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "23e9132f-ac9b-4d3f-8d14-2a66460aff80",
        "cursor": {
          "ref": "d97eed35-b66b-44de-94bb-25d83816b212",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a646634a-3e0d-4a1e-a756-95a4ea5f70b8"
        },
        "item": {
          "id": "23e9132f-ac9b-4d3f-8d14-2a66460aff80",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "ac3601e4-cce3-4b09-bdaa-1e3365c9c696",
          "status": "Created",
          "code": 201,
          "responseTime": 1903,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "cd915acf-b8a0-49d0-b0c6-bd2d6caf6ac3",
        "cursor": {
          "ref": "c3228ff8-4916-4bb8-b731-8aa3283b63f2",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3dfa09c0-a543-4640-bea2-279798608eea"
        },
        "item": {
          "id": "cd915acf-b8a0-49d0-b0c6-bd2d6caf6ac3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4cb4c472-9e13-43eb-95e3-703202a88d9e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3c649f06-a8b9-4312-8565-775e246e17e7",
        "cursor": {
          "ref": "021258c7-d856-49c4-89ed-9ea920f30837",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e726fbc7-b719-4910-81eb-6a6d27fb3ce0"
        },
        "item": {
          "id": "3c649f06-a8b9-4312-8565-775e246e17e7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "27f97f8b-5639-4df9-92cc-1d2ae0dcdcf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a9a94a-7c98-43a3-b53b-eac0d8a43aae",
        "cursor": {
          "ref": "854e4c13-ea3b-4cab-82a2-03769414b863",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c4b0c8f5-7659-4cb1-9dfd-993e6b2337a3"
        },
        "item": {
          "id": "81a9a94a-7c98-43a3-b53b-eac0d8a43aae",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4d3d2981-bf75-4b3a-869a-7ed25f9296d6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "03f0fb64-0a99-407c-a3ec-3a02d1d81bff",
        "cursor": {
          "ref": "00f85144-4c12-4ac4-b382-2ffaf404c168",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f305adf2-2cd5-4d65-81ac-05ae109081ef"
        },
        "item": {
          "id": "03f0fb64-0a99-407c-a3ec-3a02d1d81bff",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "62252ec1-dcf0-4312-b681-c499e9284b04",
          "status": "Created",
          "code": 201,
          "responseTime": 1483,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "0c71b60a-429a-41a9-8c50-488dd14e112d",
        "cursor": {
          "ref": "48c76db8-87ae-4e1d-97ca-a57fd40049c5",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "04ad06f8-f2c1-48a0-afdd-50513613a7ca"
        },
        "item": {
          "id": "0c71b60a-429a-41a9-8c50-488dd14e112d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "38f46c79-1eb9-4cfc-bac0-71764ed521db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6e61c083-d075-429a-884d-1dbeabae0a95",
        "cursor": {
          "ref": "a61d25e3-7992-45e8-ae86-82254fa778ff",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b6aabfbb-b4a4-4310-b8d2-0183c3f81ff0"
        },
        "item": {
          "id": "6e61c083-d075-429a-884d-1dbeabae0a95",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4ecedacf-5cd8-4039-8b0e-e6e5edbaad97",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 720,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "feab34c6-4865-4499-8235-a9608c7b6607",
        "cursor": {
          "ref": "32b32ce1-7f54-45c1-bd1f-8cba2bd2ee5f",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f3db1e5b-0c3e-4d7f-bf19-36c46fc3d0bf"
        },
        "item": {
          "id": "feab34c6-4865-4499-8235-a9608c7b6607",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2b11248f-d244-4f2c-aa14-cdf2acf1ce51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c734788d-8ba9-4930-914f-64ebef45e428",
        "cursor": {
          "ref": "27892903-d355-4147-b7e3-1019ce674715",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "25addc60-b5ea-43d7-93e3-d5a0d2fc2b85"
        },
        "item": {
          "id": "c734788d-8ba9-4930-914f-64ebef45e428",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e18cb86f-40bb-4382-8193-2f73ae1986d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8bde3d92-1fa1-42d7-bb63-5a32133095bf",
        "cursor": {
          "ref": "d6c7c58f-1967-4e2a-b111-62d1b4e8ec7a",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6cd3b908-5c96-4a6c-aa6d-58b18a22d051"
        },
        "item": {
          "id": "8bde3d92-1fa1-42d7-bb63-5a32133095bf",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "979844dd-2f77-4a98-aca4-c5a13a7ebf07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6f010996-28b6-4447-b3a1-6314e847c835",
        "cursor": {
          "ref": "d0638f95-0a3f-488e-99a3-33d5536c1860",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "da82382d-67ba-410f-b8a2-49a3d7a63570"
        },
        "item": {
          "id": "6f010996-28b6-4447-b3a1-6314e847c835",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "03e4d971-4572-4313-aecd-c97c254dc22b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "94815555-debc-4aa7-9e72-514d5afa8324",
        "cursor": {
          "ref": "cbfc41a7-dcb3-4e42-8b42-7fe6de7e6e70",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "95fbbd0f-b9c8-4957-bf44-911a17a6a0ca"
        },
        "item": {
          "id": "94815555-debc-4aa7-9e72-514d5afa8324",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5a03e901-69af-456f-8b5d-ff12d97c025f",
          "status": "Created",
          "code": 201,
          "responseTime": 914,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "58759e6a-62dd-489d-ba6e-948d9a240e91",
        "cursor": {
          "ref": "23d8b958-adf8-4e26-8163-3a430dc99fe9",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "dd67582a-e6a7-467e-aa30-8299383170ca"
        },
        "item": {
          "id": "58759e6a-62dd-489d-ba6e-948d9a240e91",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f9602e9b-edcf-4777-8692-67bcb12672d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "710083ec-7d40-493c-ac2b-b6bec82e2f6b",
        "cursor": {
          "ref": "8e941127-e6ff-4842-b442-47f3bb6fd618",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6e02e5fa-6411-4dd8-8d4b-a51e5d98da9c"
        },
        "item": {
          "id": "710083ec-7d40-493c-ac2b-b6bec82e2f6b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "080c7716-8bbd-4a6d-906a-d49887789f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fb8934a-1e27-473b-8adb-978feea41c5c",
        "cursor": {
          "ref": "8b1db323-cd1d-42c5-ac1e-d7cd45f50470",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "99cebbb8-89b7-472b-b31a-0f369c6112b4"
        },
        "item": {
          "id": "6fb8934a-1e27-473b-8adb-978feea41c5c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0c40b399-f9d5-4c75-a6eb-586f530cb407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37910140-0b92-4944-8938-a53298fea48b",
        "cursor": {
          "ref": "a323d55b-a1e1-4be7-9ecf-beb488005c89",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "66bde09e-2110-4018-8007-7e0496f5e2e0"
        },
        "item": {
          "id": "37910140-0b92-4944-8938-a53298fea48b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "206594d7-b477-4d50-bc13-89b5ac65bd75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38923dc6-e73e-4ce5-92db-cc8bb8b4aeb2",
        "cursor": {
          "ref": "493bdcbc-c604-4062-8f26-654ce33726c6",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c0762754-81af-4c73-976b-c0e230cd1c7c"
        },
        "item": {
          "id": "38923dc6-e73e-4ce5-92db-cc8bb8b4aeb2",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ff0d9c79-9b5a-43d4-ba79-50781f28f9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07585af8-4223-4dea-9347-1e681bda7f07",
        "cursor": {
          "ref": "3b938251-746d-48cb-ab65-1ab12ab4a77a",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "44708cb3-18f9-4b5b-8458-d9b102f021c7"
        },
        "item": {
          "id": "07585af8-4223-4dea-9347-1e681bda7f07",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f1cc4c45-f6ed-4a6f-ab9a-0c866b97880b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ef6ae1-be82-4980-98c6-779ad3260548",
        "cursor": {
          "ref": "6a884323-8570-4fbb-8024-794d81bc9d0b",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9f7f0098-9290-4ed7-b08c-5e93fd0b06e9"
        },
        "item": {
          "id": "13ef6ae1-be82-4980-98c6-779ad3260548",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f3860e94-f9f1-4dd6-ad15-a40567f3258e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2555d82c-ecb6-4d83-b2e8-09092896a96a",
        "cursor": {
          "ref": "b11e7035-951e-4f63-8bea-410b214320b2",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "17f4d695-866b-4999-8d34-898ffaf4c423"
        },
        "item": {
          "id": "2555d82c-ecb6-4d83-b2e8-09092896a96a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "691ba266-4aa3-499a-800b-6de176f568e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a521da1-b1c9-4e93-ba4f-0eb9b917a87f",
        "cursor": {
          "ref": "cb400317-a80c-437c-af1e-06530600be80",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a80e9f54-19ad-49d9-b581-b1e74dbccc58"
        },
        "item": {
          "id": "1a521da1-b1c9-4e93-ba4f-0eb9b917a87f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e357f90d-3b7c-48eb-aeeb-e80230a8e57f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b31dc946-f34c-467d-92f7-caa11205b632",
        "cursor": {
          "ref": "aeba3dcd-5764-47fe-bccd-e8c5877db7ba",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d4d8bb88-48fc-4e9a-bd55-cb4d7ce9744b"
        },
        "item": {
          "id": "b31dc946-f34c-467d-92f7-caa11205b632",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "26bea59d-ecf6-4b47-ac07-0a3926dc5bf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1078ab-10f8-4d6f-b3d1-72adcc6a2de5",
        "cursor": {
          "ref": "e40fb532-0286-4279-9e1d-69f31709219e",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f5cb5d10-40d8-48dd-8e1b-07b024f0e360"
        },
        "item": {
          "id": "8e1078ab-10f8-4d6f-b3d1-72adcc6a2de5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7fcbcb41-f3e8-4425-9046-df0b61edd9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7db3d3-adfc-4625-b3cc-c23f7d33476f",
        "cursor": {
          "ref": "e9a3f9c9-e37b-40c7-b7eb-299d45e56524",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "bcddb875-bc56-4469-8b74-eaea49ebb17d"
        },
        "item": {
          "id": "fd7db3d3-adfc-4625-b3cc-c23f7d33476f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bd4f1b09-b52f-48b5-92ab-749dfea89aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fd0550-eac9-428f-9db6-1e66c39ee8ec",
        "cursor": {
          "ref": "3ca170ae-6603-4646-bea8-9f5bcb8e623a",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "1828992e-773c-43ea-9064-17445a8371c3"
        },
        "item": {
          "id": "a3fd0550-eac9-428f-9db6-1e66c39ee8ec",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "61e21a9d-4931-42a5-8162-aaf7096c44ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1809190-5497-4d43-9240-7d9f4482ba8a",
        "cursor": {
          "ref": "e9e9b646-e125-48cd-bfe1-ae6a20e34399",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "9bbcc38b-1883-43eb-8c01-c7f50b6a8a42"
        },
        "item": {
          "id": "b1809190-5497-4d43-9240-7d9f4482ba8a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "86000bbc-28c9-40ea-ac7f-7d1bb0739dae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 673,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6bde7df1-a552-4f45-a9a1-d4799d79860d",
        "cursor": {
          "ref": "3c42b51a-6e67-4411-8035-c0f73198d178",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4918d43f-e53d-435d-ad95-24a3010787a4"
        },
        "item": {
          "id": "6bde7df1-a552-4f45-a9a1-d4799d79860d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "98df4cbd-b6d4-41c3-b0cb-e3207f5033ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 811,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "5abe8cd4-ed1d-4f86-b631-a61ab4a01ab5",
        "cursor": {
          "ref": "d3a68f8f-4736-448f-854b-f9adba33e3aa",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7ece2382-1b04-4788-90ce-a586a8e2da95"
        },
        "item": {
          "id": "5abe8cd4-ed1d-4f86-b631-a61ab4a01ab5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f5747534-9ac4-45c8-ad52-91e61f9cc111",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d19fcf2b-a3ca-412c-81da-8d37ef59c7aa",
        "cursor": {
          "ref": "62babc4c-9404-4e9a-a78f-cc3312cc32c1",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e8090067-bf00-4d26-85c9-683bb05007f0"
        },
        "item": {
          "id": "d19fcf2b-a3ca-412c-81da-8d37ef59c7aa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f537ad65-692f-42f6-8366-2755a4f7b6fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 706,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3db790e7-4d9b-402d-9bb2-7d6db1a9560a",
        "cursor": {
          "ref": "ccd46e08-f39f-415a-acfc-5ff53b363c1d",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b6bc83e6-f848-4160-9497-b2fae281164f"
        },
        "item": {
          "id": "3db790e7-4d9b-402d-9bb2-7d6db1a9560a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f892be9c-9434-40de-871d-e0d53010b50a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "bd47256a-50dd-4301-9061-e7fa8fe1c0ed",
        "cursor": {
          "ref": "bff80e80-edcf-4d4a-98a2-27f0a74f52b0",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ae77cb00-d6fb-46df-b26f-34ecda4ebd92"
        },
        "item": {
          "id": "bd47256a-50dd-4301-9061-e7fa8fe1c0ed",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "75a6c25c-4aa2-48a9-8d53-ffc2c3486ae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ac8ff7-5bb3-4d02-acff-7b4a8cccd3dc",
        "cursor": {
          "ref": "8fb15f9a-9e49-46c4-938e-298fabf9267e",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f762cade-37d1-4675-a5f1-367e44fde7c6"
        },
        "item": {
          "id": "31ac8ff7-5bb3-4d02-acff-7b4a8cccd3dc",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b545f40c-b3ee-4434-a6ea-bffcdb2d1b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b50043e-95e5-4055-9ca8-67fd62345152",
        "cursor": {
          "ref": "da449c79-1ff8-44fa-a66d-85eb8da6325b",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d2b4cb14-246a-42ec-ac97-2f0113d2cd41"
        },
        "item": {
          "id": "6b50043e-95e5-4055-9ca8-67fd62345152",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d7b10a97-4ce7-4576-b667-37667908eb0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68348939-afb3-4228-a4aa-7a2b8c7ecaab",
        "cursor": {
          "ref": "b2156af8-3440-4d4b-b74e-e337ce250d61",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d91845d4-6afa-4387-b067-662b9a99ada2"
        },
        "item": {
          "id": "68348939-afb3-4228-a4aa-7a2b8c7ecaab",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0ce9d4b2-426c-4aee-81ad-edd7bb130105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa45d9f-8ffb-4c64-9399-f33a6d16cfc3",
        "cursor": {
          "ref": "0709afab-116d-4549-8355-16f7132122e5",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "7f277ef7-2564-4ccf-914a-eb017ce7ec24"
        },
        "item": {
          "id": "8aa45d9f-8ffb-4c64-9399-f33a6d16cfc3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1f401f95-910c-4720-afb5-8b678091c895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c211c1-0689-4455-8b0d-b55a6ac1eec5",
        "cursor": {
          "ref": "130a76e3-9f46-4c60-bd2c-8251e1aeb7a3",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e09a9339-3f55-4480-8329-b6950a7c07ed"
        },
        "item": {
          "id": "d2c211c1-0689-4455-8b0d-b55a6ac1eec5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1d0a690c-fe2c-41c9-a8cd-567beb049786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94f059bf-6763-4eb4-8fc2-9fed1cf0a22c",
        "cursor": {
          "ref": "f9ee5cb0-d34b-4425-ad35-e3879fe0efe3",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5206a263-5638-4b9e-9a89-639ea0fe761d"
        },
        "item": {
          "id": "94f059bf-6763-4eb4-8fc2-9fed1cf0a22c",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6ede9248-4297-458c-8c96-7de90a675838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "169cbe7d-f07c-4803-bf79-2a1faffced6a",
        "cursor": {
          "ref": "cb5c7ab9-566a-4f99-8a07-c958faba2784",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "50d0818b-b7f9-4159-b643-b46426d8a6f1"
        },
        "item": {
          "id": "169cbe7d-f07c-4803-bf79-2a1faffced6a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5707ac2e-d392-447b-b153-d9498bbac6cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec311722-c1c7-437b-bfd4-2be35bd3f467",
        "cursor": {
          "ref": "caa6e7d6-847b-463b-9d1e-550ecc7a0383",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "54c86021-a9a6-47a2-a344-c2a227f69003"
        },
        "item": {
          "id": "ec311722-c1c7-437b-bfd4-2be35bd3f467",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ff694119-eefb-4e87-963a-e995b13d0c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63305275-02ec-4c52-b16e-a36667c0f0c5",
        "cursor": {
          "ref": "9f24c7ce-0d92-478d-af31-fd7540100b9b",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1b6e4ba9-37e0-49a1-a30a-4a19c0e28c64"
        },
        "item": {
          "id": "63305275-02ec-4c52-b16e-a36667c0f0c5",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "123317c5-d583-4679-a1d1-b5250c526fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a65e3b7-a1ef-49cd-a70b-1dbf7c965191",
        "cursor": {
          "ref": "5cd6c118-cc64-4cad-ab6f-d559a65ed6ef",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a06bf908-111f-4401-ba40-b22d4fc352ea"
        },
        "item": {
          "id": "0a65e3b7-a1ef-49cd-a70b-1dbf7c965191",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "49beb65f-176f-47aa-b33a-647ae63aa716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7006266b-d5fc-44e9-8144-eba89f7cf090",
        "cursor": {
          "ref": "f92f6f8a-ef07-4c5f-abbd-0ee6d5f3d9c8",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "33c0b4e3-2d8a-400e-a310-eb7df4f2a853"
        },
        "item": {
          "id": "7006266b-d5fc-44e9-8144-eba89f7cf090",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4909cba1-46b4-4ad8-a159-b6818ae9e8be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb147654-0bc8-423a-b156-1c7beb4be932",
        "cursor": {
          "ref": "79b48ddb-6940-4511-8377-6b517432a90b",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0996def3-4650-4d4e-b080-d97e8096ec13"
        },
        "item": {
          "id": "fb147654-0bc8-423a-b156-1c7beb4be932",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "a7b0f7b4-cea9-4ed1-ac4d-6a00e8e4f120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98fdd37-998b-4818-8793-94cd1ca2bf95",
        "cursor": {
          "ref": "a57b57de-37ae-4082-b371-c278b298799f",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8c3c90ec-f353-4958-b779-03ccc08ee2e5"
        },
        "item": {
          "id": "c98fdd37-998b-4818-8793-94cd1ca2bf95",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "e3b4dd0f-2005-488a-af6a-c2a2404f9952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e6565d-a7b4-4ec5-8e9d-56dc0a82f7e2",
        "cursor": {
          "ref": "86c8a158-0188-4165-9eec-879684b30a32",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "01b2f477-943d-48cb-a724-30936229c8a4"
        },
        "item": {
          "id": "83e6565d-a7b4-4ec5-8e9d-56dc0a82f7e2",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "aa88e2d8-8257-47d9-83b1-642c7d2829ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282a8aea-63b6-4192-8228-1a1a9dc4ad9b",
        "cursor": {
          "ref": "88ccd82d-34e7-4b71-aa3a-a47aff11b33a",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "42699b12-5175-44fd-bb3f-e7f6287a41cb"
        },
        "item": {
          "id": "282a8aea-63b6-4192-8228-1a1a9dc4ad9b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d138ab7c-aefb-4bfa-9325-3a94a893d25d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8aa9956-f3ad-46e3-8a21-03dac0074d22",
        "cursor": {
          "ref": "4440a920-40a1-4aa5-aae8-42c7fc29343b",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "79f935e2-8aca-4e51-b102-fcf186149438"
        },
        "item": {
          "id": "a8aa9956-f3ad-46e3-8a21-03dac0074d22",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "479ea880-50b3-4f13-b1d4-c5d2ca78cd89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f9f7e5-5c14-4a83-87af-7d33da407f1a",
        "cursor": {
          "ref": "fdac9e02-db9b-420d-b575-39ea1391c735",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d744c877-85ed-40bc-be1f-5b8637aba40d"
        },
        "item": {
          "id": "d9f9f7e5-5c14-4a83-87af-7d33da407f1a",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3e48aee9-89fc-417e-93c3-9b453bdd4c47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09cd4fa-823b-43e1-83b2-5e98c794f57d",
        "cursor": {
          "ref": "055f1230-b50d-4a84-a84d-9208d271cc9a",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1827adcd-d6ee-4a84-b4e6-6045b7cd865d"
        },
        "item": {
          "id": "b09cd4fa-823b-43e1-83b2-5e98c794f57d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1223d704-08e0-4550-98b4-9b1ad7d519db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d36e4d7-a5f9-4146-88d3-eda1609b2ca8",
        "cursor": {
          "ref": "dee86faa-26ee-4aeb-99fa-780ea47165e2",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "55c43136-7937-42ec-899e-a1a4c63cb4c6"
        },
        "item": {
          "id": "7d36e4d7-a5f9-4146-88d3-eda1609b2ca8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "66a5446c-af85-4d5e-8f0f-4b39cf26d5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70833520-69bc-4595-9784-4d3ac6d4066f",
        "cursor": {
          "ref": "6674b89a-b75d-41d2-8043-20411d268484",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0702b670-0fdf-4c38-8448-743a88ba7c26"
        },
        "item": {
          "id": "70833520-69bc-4595-9784-4d3ac6d4066f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3dd96f40-16b6-4f58-b7f9-3abf4a9b898f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea79b547-1bc7-426d-8ee3-498b61a57b96",
        "cursor": {
          "ref": "6fdd1f4f-c4fc-43a6-bfa9-2b047e057618",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "be866a63-d608-4047-9af2-99341c67dd21"
        },
        "item": {
          "id": "ea79b547-1bc7-426d-8ee3-498b61a57b96",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "fe79521f-4dde-4d20-8322-d8f999f22bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44eae55-29ec-4c00-8ad1-ddea6e1de9d8",
        "cursor": {
          "ref": "bb49df8f-012b-47ba-a425-2fcf2791a364",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "189ef81e-f55a-4a49-857d-df511eca712c"
        },
        "item": {
          "id": "f44eae55-29ec-4c00-8ad1-ddea6e1de9d8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6d8881a8-7e30-4b2b-a1b9-4dc25d35157b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2225adf-fd63-44ab-9fbf-ebc0d3e9cdc3",
        "cursor": {
          "ref": "cc80207e-8cba-4db5-8a86-6986b6ecb363",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9455b240-539a-477f-9e37-ce7d563c06b3"
        },
        "item": {
          "id": "d2225adf-fd63-44ab-9fbf-ebc0d3e9cdc3",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "e8155146-fa50-4d48-97a1-53ba54072b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1bc9367-c379-4633-a732-543f4bd2f444",
        "cursor": {
          "ref": "e356a0dd-e4ee-4b2a-8530-2e8d0518fc4b",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "aaef5199-1ac6-4cca-b676-eb9c55fe8916"
        },
        "item": {
          "id": "e1bc9367-c379-4633-a732-543f4bd2f444",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "96231832-6bf4-43f1-a96a-1f9ab4525f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71566e1-bac3-4b0b-b737-d53dc82f21f3",
        "cursor": {
          "ref": "e3679e0c-d77a-4c25-8b34-0fc3878e5940",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "0f8ccdf5-89bd-424a-aaf5-8b1100ae13b0"
        },
        "item": {
          "id": "b71566e1-bac3-4b0b-b737-d53dc82f21f3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "89ad4f00-2021-4a54-a47a-c9e9b9874dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba52da65-78e0-4af2-ada8-ab9a9e9333b4",
        "cursor": {
          "ref": "2991a775-a18c-4036-b15b-45dc278d027b",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "458709eb-f4f4-4d42-84d7-8ff09001e26f"
        },
        "item": {
          "id": "ba52da65-78e0-4af2-ada8-ab9a9e9333b4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1b861072-3f5c-495d-a202-7004a7e79fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c41059d-9c83-483e-99fd-fcca0dc4ee88",
        "cursor": {
          "ref": "b2361d5a-4345-43f2-ad6e-733dea5d8511",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b0efb41e-c2c7-4e68-8a30-f13f25dac7d8"
        },
        "item": {
          "id": "0c41059d-9c83-483e-99fd-fcca0dc4ee88",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "871153b2-0b28-4a14-b58b-bbc7020cc34d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f520f7e-8ef6-423d-9127-7fb762f33731",
        "cursor": {
          "ref": "38be09cf-3469-486d-90d0-702c76ab23ae",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "93c45b38-aa4e-4b2e-a72b-13d4ff27aff8"
        },
        "item": {
          "id": "9f520f7e-8ef6-423d-9127-7fb762f33731",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "debbc0cd-7dd7-4a2a-af56-3685110d3910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed85967-7f87-4c1a-9c83-95ebb6554367",
        "cursor": {
          "ref": "8c11fb87-8ab4-45ba-8215-00e125ed6834",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "aafb06cb-cfac-4298-a462-5992300ac1c7"
        },
        "item": {
          "id": "2ed85967-7f87-4c1a-9c83-95ebb6554367",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "66ad45f0-8841-4667-bf4e-40083f1245c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2253c798-7ae9-49e5-827b-8f50874d2ca5",
        "cursor": {
          "ref": "e73e606e-09b5-446d-83dd-922d58cbdc1e",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2c4c1022-bb66-41fd-bbe1-3ad0cbc935a2"
        },
        "item": {
          "id": "2253c798-7ae9-49e5-827b-8f50874d2ca5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "8b5e96ab-df35-48ba-a348-1dbada981720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307dcff7-6ad9-4ce3-96e4-b6383ec231a4",
        "cursor": {
          "ref": "652c70e7-1cf3-4c9c-98d3-9a6fa25e20c9",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f69bd36d-0c1b-4252-910e-6d99b9118541"
        },
        "item": {
          "id": "307dcff7-6ad9-4ce3-96e4-b6383ec231a4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3d5b8c16-0acc-41d5-96a2-c252e9ae6b9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1784f3-c341-4642-85d9-01c6786a93cd",
        "cursor": {
          "ref": "33ef8636-4293-435e-819b-2f8843d289ce",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2dec1105-869d-4899-a6d1-1dfca46eb36e"
        },
        "item": {
          "id": "ea1784f3-c341-4642-85d9-01c6786a93cd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0f5422fc-feef-46f2-9a0a-ff57f0da794b",
          "status": "Created",
          "code": 201,
          "responseTime": 1055,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "115356e2-8d9f-4109-bb56-ff182dd62555",
        "cursor": {
          "ref": "e5074b23-29a3-4182-afb4-6cdabcb7b1d5",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4a3be692-c5f7-41f5-9a6d-70dfdba2e7f1"
        },
        "item": {
          "id": "115356e2-8d9f-4109-bb56-ff182dd62555",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "2f45937f-ecfa-45cd-8fcd-dee0d6322b11",
          "status": "Created",
          "code": 201,
          "responseTime": 1386,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1209b497-1e1b-4b92-90d2-0cc46e49a0f9",
        "cursor": {
          "ref": "a3fd3161-fdd5-4bc8-b8af-de1d2ffe3dd1",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4ba640aa-8f21-4749-80f0-a76ea5e38e22"
        },
        "item": {
          "id": "1209b497-1e1b-4b92-90d2-0cc46e49a0f9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0ba51e8c-6cb7-4117-beb6-3e1a6914bf44",
          "status": "Created",
          "code": 201,
          "responseTime": 915,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dcd2dcb-0d79-4b92-a11d-93faf6858eda",
        "cursor": {
          "ref": "d0e763c6-7438-4c69-9109-e06f0e524a16",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8110b94e-0663-4545-b72c-1c31b519b65e"
        },
        "item": {
          "id": "6dcd2dcb-0d79-4b92-a11d-93faf6858eda",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "63402f9d-13f6-491c-be62-544834ee4b87",
          "status": "Created",
          "code": 201,
          "responseTime": 942,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22aeea7-0eba-4d51-99be-c3228bd38c41",
        "cursor": {
          "ref": "3ddf1aa7-45bf-46e2-b56c-2142355acb5b",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "919d3faa-c031-401a-8f95-1e88ee851aaa"
        },
        "item": {
          "id": "f22aeea7-0eba-4d51-99be-c3228bd38c41",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "00b985f7-06e7-4d03-a5df-d076fab718a3",
          "status": "Created",
          "code": 201,
          "responseTime": 920,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf83213a-5f17-45b2-a42d-4fe6a2079643",
        "cursor": {
          "ref": "bcaf0d03-d8d6-46c0-93a5-b817d3d4aedc",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "ada11d25-ed1d-4d14-8934-8622f86c875b"
        },
        "item": {
          "id": "cf83213a-5f17-45b2-a42d-4fe6a2079643",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "480d6f8f-7fbf-47d0-9cc4-34cf586ad4ff",
          "status": "Created",
          "code": 201,
          "responseTime": 956,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf3e4dd-d310-4b0f-9ab7-9bfc94ad9e55",
        "cursor": {
          "ref": "2677a596-344f-41fc-bec9-2053db767448",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f2b0f73a-3771-42d1-831f-380b7c47b333"
        },
        "item": {
          "id": "dbf3e4dd-d310-4b0f-9ab7-9bfc94ad9e55",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fa2cf6ba-4db9-43fe-bcd3-bf2a188cd9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb095b0-bae6-46a9-89fe-7f4f24da922a",
        "cursor": {
          "ref": "46a47b78-04ab-4a52-a384-1e4dd95ad4c5",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5a6a8669-d89e-4f9d-b0be-e67a23ce0156"
        },
        "item": {
          "id": "2bb095b0-bae6-46a9-89fe-7f4f24da922a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fe186db6-97f1-4968-82fe-654cba5daf6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3756b4-3a20-4a62-8b5a-50f4e0629fa6",
        "cursor": {
          "ref": "de91ee66-fd06-4125-87ed-c80dead655f3",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e872bd18-785e-460f-92f2-e65cd7321cbc"
        },
        "item": {
          "id": "4d3756b4-3a20-4a62-8b5a-50f4e0629fa6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "63c91ec1-d27f-4f88-a67c-e52a3526928d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d2a39b-c94a-423b-866d-9ad3202dde0c",
        "cursor": {
          "ref": "ff594c4e-1b91-4fdc-befc-146f54b7564a",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2cb108c2-a4ec-47a2-bc1d-11b8c89b9d7e"
        },
        "item": {
          "id": "f1d2a39b-c94a-423b-866d-9ad3202dde0c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ff99b571-c75e-4449-aba4-2ec3bc01d6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c102d9-ca86-452e-97a5-46eec32c13c1",
        "cursor": {
          "ref": "e08fc026-9464-46d5-9d14-949b05b05b1d",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9dcb67e9-6d49-4515-b260-5c49b16f5da1"
        },
        "item": {
          "id": "c0c102d9-ca86-452e-97a5-46eec32c13c1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2d09350b-34b5-4fd2-a0d8-9621c4ca4037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81fee4d0-c057-492b-89f8-5e25dd646c56",
        "cursor": {
          "ref": "c079efb3-c9a8-414c-90d8-dbaade811351",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f87c0766-7bb9-4df0-898e-a5b74360627e"
        },
        "item": {
          "id": "81fee4d0-c057-492b-89f8-5e25dd646c56",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5bc7412a-1515-4399-89a3-e8929d4a1a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac89ea10-3a84-4266-ac15-ed77d1928882",
        "cursor": {
          "ref": "4b5d60a0-3f74-46f7-91fb-f3b687d1d26b",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3edd60f0-1273-4456-92ff-ecb67233a089"
        },
        "item": {
          "id": "ac89ea10-3a84-4266-ac15-ed77d1928882",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "58e464e1-2f15-43e5-a3a7-2c2a1e1bab0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe91e088-727d-43ff-975c-a8db653b05cb",
        "cursor": {
          "ref": "6fde8514-bab7-4662-979b-d124facdfc3d",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "38252e7e-aa1c-4a0d-b5f8-58b2bc7acf57"
        },
        "item": {
          "id": "fe91e088-727d-43ff-975c-a8db653b05cb",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "01437dc0-2d29-451a-989d-5eae5a8d3bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6129cdd-9d95-4947-9e63-9cce846b107f",
        "cursor": {
          "ref": "e9b381cc-093d-4bcd-b240-1bd55bdaab14",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a010a2de-9b44-4e49-8acf-8c3d087ce6ae"
        },
        "item": {
          "id": "e6129cdd-9d95-4947-9e63-9cce846b107f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b2650478-abec-47ea-85db-00ebf44c6fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb5b782d-fa8d-4d44-9859-f7032adf06d0",
        "cursor": {
          "ref": "a10e3e42-f0b2-405b-bc1c-030354ae2ae4",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7de4212c-e74b-40a2-b4ae-386de884a738"
        },
        "item": {
          "id": "cb5b782d-fa8d-4d44-9859-f7032adf06d0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4a0c175b-7213-4383-93eb-544cc2d2e9cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d5b955-83d3-4e15-ba4d-88740f8d3121",
        "cursor": {
          "ref": "caba4d7b-f957-4c89-9e60-dcc086a6b12c",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4b47acdd-858f-44c9-9be5-3e6ee45505c1"
        },
        "item": {
          "id": "81d5b955-83d3-4e15-ba4d-88740f8d3121",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b7af2f4a-a81b-4615-8c4b-493f4a6e7472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a531a05-fc8a-4dd8-8969-8c2c89c36388",
        "cursor": {
          "ref": "af66c15c-994a-4240-b4e3-cf47dbf8861c",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ca3f78cd-7ee1-489a-b9e8-363634e1dbfb"
        },
        "item": {
          "id": "7a531a05-fc8a-4dd8-8969-8c2c89c36388",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b584b6df-3999-460d-a94d-e3feee0047ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2bb18a-d2cb-4b47-9bb9-bbfa1874a167",
        "cursor": {
          "ref": "79324854-4d56-4b9d-9a63-04c07c0fd178",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3fbfba23-cf5b-48f3-9230-3fe8d26b06f0"
        },
        "item": {
          "id": "5b2bb18a-d2cb-4b47-9bb9-bbfa1874a167",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "df028989-790b-4f53-ac28-9602389b69c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2222bf-8671-4db0-b966-c22dbe166f61",
        "cursor": {
          "ref": "10f747c3-e94b-412f-be0c-cefc11ca4e84",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8f5f6ace-26b8-42ec-ae6e-42d7d95c957e"
        },
        "item": {
          "id": "5e2222bf-8671-4db0-b966-c22dbe166f61",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ff95d8be-6ead-4ec0-9070-a498517382da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aecd1e9c-c1fc-4d21-bb02-fc5aef764b34",
        "cursor": {
          "ref": "e983e26e-4130-4cfc-a822-01d7eb6f4226",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0dc3aca9-393f-4dac-aeb3-d0ed1874ac0d"
        },
        "item": {
          "id": "aecd1e9c-c1fc-4d21-bb02-fc5aef764b34",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "feea0bdb-3188-43ca-8eaa-86df90c2df67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82cced7d-11e4-44b4-9848-905cfbf26653",
        "cursor": {
          "ref": "e0eb388a-d059-46ce-b9fa-19a20d85690c",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1268904f-0596-414c-abb3-13d30736829c"
        },
        "item": {
          "id": "82cced7d-11e4-44b4-9848-905cfbf26653",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2fc686b5-c447-4cf1-b833-0f4265e71cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89563307-2ced-4f38-b7af-881fbbc8bafb",
        "cursor": {
          "ref": "1e6a3e51-aac3-4b14-b958-8931b63842a5",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f98dcbd2-71a3-4fd3-982a-9e736ebbd3d8"
        },
        "item": {
          "id": "89563307-2ced-4f38-b7af-881fbbc8bafb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "93882cec-bec9-4ea1-9bbf-04dd2f9861ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19094663-c18b-4c1f-a90a-5db7014601e5",
        "cursor": {
          "ref": "feb9232b-3aa9-4601-8e67-444c3df459dd",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "04d4ee0f-94e5-4339-8153-58272448ff7d"
        },
        "item": {
          "id": "19094663-c18b-4c1f-a90a-5db7014601e5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "4998f85e-c4dc-465f-854f-da059d270cd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee1fc6d-7646-4d74-a2c1-e096210a1f92",
        "cursor": {
          "ref": "c6ee0b52-1239-4cd4-9d12-d26c09777f93",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ee1ab0b8-1c3e-43eb-b178-c176264896c7"
        },
        "item": {
          "id": "eee1fc6d-7646-4d74-a2c1-e096210a1f92",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3b772366-57ae-4f68-810b-d7e9537746f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31b1f6a-2e25-47a8-be57-590a6f862074",
        "cursor": {
          "ref": "b6491ed4-8e22-4837-991c-23f14748a537",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f4dd2dac-470e-4357-ac1a-ff61ff3aa722"
        },
        "item": {
          "id": "d31b1f6a-2e25-47a8-be57-590a6f862074",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f0249c4e-3991-482a-9923-3ddeba021551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a5479c-37a3-4bf6-af2f-67325ced88a8",
        "cursor": {
          "ref": "e4e78b70-12d4-4b46-8519-a510c23313a6",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6925f37e-9abf-470d-9e53-2af73798fcc7"
        },
        "item": {
          "id": "91a5479c-37a3-4bf6-af2f-67325ced88a8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4fd12ae4-70ab-4e5c-b89f-caf1e5abd4c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d997a5-af30-4490-a7f5-67059b32e3ec",
        "cursor": {
          "ref": "e6a0177a-c7b8-47e3-9171-90a91211313f",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "57ee0c9b-10b8-4557-a72f-9a0762d2aa66"
        },
        "item": {
          "id": "c1d997a5-af30-4490-a7f5-67059b32e3ec",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "413e4118-bc77-4b7f-b3c1-cd154d096a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a248db65-e108-411f-85c0-82f9cc574863",
        "cursor": {
          "ref": "d5f0ed97-76ae-406a-980d-8e13178011ee",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "3e7e8f25-2d53-45a6-82f9-b5a86b00a180"
        },
        "item": {
          "id": "a248db65-e108-411f-85c0-82f9cc574863",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9787b503-b244-497f-bbf5-900722007e59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a4360f-7ff8-450d-985c-20f1debc331c",
        "cursor": {
          "ref": "e24d511d-3e47-4c59-86bd-24a6c1c85d30",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b5fe6981-d8ae-4d94-823e-6e606b0e0ed2"
        },
        "item": {
          "id": "07a4360f-7ff8-450d-985c-20f1debc331c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6a4b1f20-0092-457b-835f-49190ee28926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7118c12f-4277-4a75-a545-cc5dac0d2cd8",
        "cursor": {
          "ref": "09b7c870-03b4-4122-9fb4-cb119a195df1",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "cfcfd9bd-78ff-4c5b-82e8-b95e5f263e81"
        },
        "item": {
          "id": "7118c12f-4277-4a75-a545-cc5dac0d2cd8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5c6b13a9-25c1-439c-b241-b01a339091c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6faa0261-b55a-44fc-8ef3-ccf7c0412a6e",
        "cursor": {
          "ref": "d055024a-0371-42d9-bf9d-e9bb0f0db675",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "958f451c-8997-44e1-8342-44eaf4cc9add"
        },
        "item": {
          "id": "6faa0261-b55a-44fc-8ef3-ccf7c0412a6e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3f0dae01-5970-4e50-89d4-0d0d3b39cf20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473a4a1e-1103-4b16-a765-5029f41b93c9",
        "cursor": {
          "ref": "d663a6b4-94ef-4761-919f-d4a438ddabe8",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e2885cc7-91d5-4733-836c-715195976c45"
        },
        "item": {
          "id": "473a4a1e-1103-4b16-a765-5029f41b93c9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d0c0fbf8-8347-452c-af82-d24ea804f223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd49e92-acf7-4f74-90d2-12b59eba6ba3",
        "cursor": {
          "ref": "5093c66e-331d-480e-afa2-acdf3d0a9f06",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "94d860f2-c38a-4eac-8357-7462e1569471"
        },
        "item": {
          "id": "0bd49e92-acf7-4f74-90d2-12b59eba6ba3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "384961c5-6285-4e80-add8-7f042591aa70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c5ecd0-f748-4da6-bb56-2bc1e5e5ceee",
        "cursor": {
          "ref": "2cedd117-c7e5-44a3-88dc-ad5a6e116c51",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ec1c99dc-4fe6-4f5f-8e43-27672b470590"
        },
        "item": {
          "id": "e1c5ecd0-f748-4da6-bb56-2bc1e5e5ceee",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1894eca2-bcf8-4fc8-ad76-2097cc50412a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ba8fba-5b5a-429f-8a03-6f44e4cd37d4",
        "cursor": {
          "ref": "a9496f32-8538-43c3-b0ef-955849bb77b5",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6e1d8ca9-7603-42ca-9479-feedd987da9d"
        },
        "item": {
          "id": "86ba8fba-5b5a-429f-8a03-6f44e4cd37d4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a8a2d43c-b70f-4a68-acb2-8afff20fbb9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a4da23-6903-41e6-bde3-b6fd41b67a28",
        "cursor": {
          "ref": "5420227f-8768-46e9-88c6-cda244d6b952",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b8d8e7df-dbac-489f-b47b-e6184e2c68b2"
        },
        "item": {
          "id": "47a4da23-6903-41e6-bde3-b6fd41b67a28",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7b7d4351-ffe7-48b3-8b9e-6359cdeec51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156de082-df79-4883-8e26-a508e014e53e",
        "cursor": {
          "ref": "f60b9506-ee7c-45fb-97ae-65daad1581c0",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ff5af44c-3a64-494a-9fe0-682fbad357a6"
        },
        "item": {
          "id": "156de082-df79-4883-8e26-a508e014e53e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6b024895-dc63-41f7-84ed-649086da8b00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3681fcb7-aa68-467b-9245-136e89e254e8",
        "cursor": {
          "ref": "d622979b-5cb6-45d3-bd8f-fd621805f188",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0676b9e2-aaf2-4ce7-afb8-05ac5ae0ae80"
        },
        "item": {
          "id": "3681fcb7-aa68-467b-9245-136e89e254e8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9098ccad-e48f-49e8-9c97-839d7734d4f4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059caba7-14c3-47e7-993b-2249c693e63e",
        "cursor": {
          "ref": "6a473d59-d9b0-40e2-ae7f-0989e21011bf",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bcee8500-78f0-4d75-a4f3-3a917b73ef80"
        },
        "item": {
          "id": "059caba7-14c3-47e7-993b-2249c693e63e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "aa55053f-240a-468b-b49a-a316419ca6fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57be6cc1-be24-4247-a643-a0bcccf9542d",
        "cursor": {
          "ref": "9ef4af35-e862-4d90-bbff-88ead561740d",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "cdc21240-adc4-45fb-837d-96e3e2618cee"
        },
        "item": {
          "id": "57be6cc1-be24-4247-a643-a0bcccf9542d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dfffb86c-837a-4903-950f-dfad598a0ed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b9a042-5f6a-45d2-a063-be04fcc0df3e",
        "cursor": {
          "ref": "05f59644-945a-4da0-9d3e-70f6ded4b0c6",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "561475c4-e6e2-413f-ab5b-a6a5b2aa70ac"
        },
        "item": {
          "id": "60b9a042-5f6a-45d2-a063-be04fcc0df3e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "43975ccf-1509-433d-ab57-5c1b849fd2fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0105541c-c915-4a5a-b362-2ca8059f5be1",
        "cursor": {
          "ref": "1210db7a-26d7-4e60-98ec-591d9216f5c4",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "78b1403f-87a6-41af-9ee4-5bad42c40a8c"
        },
        "item": {
          "id": "0105541c-c915-4a5a-b362-2ca8059f5be1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ed0794b8-6dd9-41b0-89ad-5b452888674d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55edbc6f-00e2-489b-abc9-684e740a8bb7",
        "cursor": {
          "ref": "94f3b40a-5191-43f9-87ba-1be525badc3a",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a911dbb6-e9ec-4a1f-975c-62cd2dc564f1"
        },
        "item": {
          "id": "55edbc6f-00e2-489b-abc9-684e740a8bb7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "55fba7c5-d112-413b-a591-9de540f1833b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9070b4bb-0c5d-4760-8e7c-d698fffb9272",
        "cursor": {
          "ref": "1eb37cf0-c56b-4948-9d1c-bcf1cabf6b9a",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "840a6f58-bbeb-4b67-b317-00fde0d1bd55"
        },
        "item": {
          "id": "9070b4bb-0c5d-4760-8e7c-d698fffb9272",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c42041af-2e69-4f7e-8789-a06a4e17c5bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdfccd04-372e-400d-9471-228ac40aca2e",
        "cursor": {
          "ref": "fb160d58-01c8-45ec-87d3-3433cf1da938",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f69d07de-29b2-4485-b1d0-5b5a19f971ea"
        },
        "item": {
          "id": "fdfccd04-372e-400d-9471-228ac40aca2e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "07a1724b-7380-4869-a1e3-5796557361bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb0f528-3b1a-4f35-9255-6fc6631e740e",
        "cursor": {
          "ref": "73e4ffa1-4ade-49d6-9fed-f4435ac5b218",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0f0f69e9-8f0b-4496-8491-35ad2bff2f2f"
        },
        "item": {
          "id": "7cb0f528-3b1a-4f35-9255-6fc6631e740e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3505479e-4516-46c0-9940-cff87538c68b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f3b0c3-7960-4202-9f5d-3a6fbb701d83",
        "cursor": {
          "ref": "0e4cddfd-e73c-4413-8eca-ef2f9c186c08",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "33733d04-3de1-46d7-b2a4-2702c0b65a33"
        },
        "item": {
          "id": "a1f3b0c3-7960-4202-9f5d-3a6fbb701d83",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9b5ec15c-07cc-4dba-89b7-76686a3d537b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5866c021-0dce-4372-be5a-a0f2cf7ea445",
        "cursor": {
          "ref": "9623a3b6-aa81-4816-b2b5-4d6b5f08e650",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "608ad29a-b95f-4724-bbd9-fc2d5b477307"
        },
        "item": {
          "id": "5866c021-0dce-4372-be5a-a0f2cf7ea445",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c170111b-a664-4dae-b1cd-388613170cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de9958f-5c87-45b8-ad84-5cd12a3bb868",
        "cursor": {
          "ref": "7415f5f9-fba9-4958-8424-edb6082c053c",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b1522d89-3376-487e-b325-828ef11b2332"
        },
        "item": {
          "id": "1de9958f-5c87-45b8-ad84-5cd12a3bb868",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0a97d0e9-d04b-456c-89f0-dfabd0aa740f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bde310d-b292-41e4-8473-fbb5b61d0c2f",
        "cursor": {
          "ref": "45ff093e-a9d1-4347-b5ee-c9453d35b5ea",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7575ea38-2cf7-4b1c-87f5-1f38defb0971"
        },
        "item": {
          "id": "4bde310d-b292-41e4-8473-fbb5b61d0c2f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "31385cfd-7139-4baf-a8ca-257adff36ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd888f3c-4d05-434b-ba0e-97b8b37e6cdf",
        "cursor": {
          "ref": "2e37d32f-15b4-46a5-b667-fc4422e8c4ff",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8b635b6e-27ba-4d38-a053-02aeb266ce30"
        },
        "item": {
          "id": "cd888f3c-4d05-434b-ba0e-97b8b37e6cdf",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "aefe06d5-adaf-4889-b9c8-b647dc3e197d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a070ee-c747-498a-af64-d9d7b10785dc",
        "cursor": {
          "ref": "a9e1b90a-1731-442d-b1bb-2974aa8dc56e",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f32362b3-8e5d-481d-a7d1-8b6430288762"
        },
        "item": {
          "id": "44a070ee-c747-498a-af64-d9d7b10785dc",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "da15d666-8b39-429a-bf52-0c980596eb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e3ad6f-5f0c-4ee7-8162-5969acea82b0",
        "cursor": {
          "ref": "e3305e47-0cb9-4d2c-a59c-852dca47823a",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b0f675f1-1b10-484d-8e1c-38c2e5d90674"
        },
        "item": {
          "id": "31e3ad6f-5f0c-4ee7-8162-5969acea82b0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fe7193f6-5901-4a7c-ab16-eb63687385bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b50f1c-6d64-4005-8dc1-34090552f853",
        "cursor": {
          "ref": "63cf2d7b-763f-4bf4-9450-47078f1af3e0",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "7c15a4c7-c7f9-4e40-88b7-d29030aad74f"
        },
        "item": {
          "id": "87b50f1c-6d64-4005-8dc1-34090552f853",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4c22ddd9-b325-4f33-a8ef-ae9b8c026823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0e6404-5d31-44cc-b3f6-27df7f2e18d6",
        "cursor": {
          "ref": "136388db-6923-4045-99d8-7f1ba507e706",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "64766d86-03ab-4ac7-833c-337ff662af61"
        },
        "item": {
          "id": "fe0e6404-5d31-44cc-b3f6-27df7f2e18d6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "971f960b-7c55-40b1-b783-151bb290366b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8182cbaa-c9cd-4eda-89a6-23e0cf4f162a",
        "cursor": {
          "ref": "9c5009bd-2bbd-4640-af30-989343f6118d",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "77ceceb6-67f2-48fd-94a8-104e5e18a88c"
        },
        "item": {
          "id": "8182cbaa-c9cd-4eda-89a6-23e0cf4f162a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "59dc1d7d-4c84-4bf6-9766-eaf740836adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d539b2a9-1a5c-4b09-83ad-8b234986b1a2",
        "cursor": {
          "ref": "9187c6f5-d7c6-48ef-8052-24752ac08968",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9f3ebfc0-c57e-4e1d-9185-c061e33f0de8"
        },
        "item": {
          "id": "d539b2a9-1a5c-4b09-83ad-8b234986b1a2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "16bbfaa8-41ef-460a-88df-f86ee33b40f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d67c56c-e7fa-43d2-b57e-8c9db9b3d37b",
        "cursor": {
          "ref": "ae6634a6-78ef-453c-bfa6-87021212361f",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "40eab231-ce30-4bb0-b9d9-970a2a8891f0"
        },
        "item": {
          "id": "5d67c56c-e7fa-43d2-b57e-8c9db9b3d37b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7a86087a-0338-4c63-a98c-b30dc821421e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778bcc02-e4ca-4983-9e6e-6106144d8078",
        "cursor": {
          "ref": "167ba271-8953-4041-ad6a-cd96fc4745d4",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "854d39ee-d652-406e-9385-90e9176b2df2"
        },
        "item": {
          "id": "778bcc02-e4ca-4983-9e6e-6106144d8078",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9f679f76-6c73-4727-8865-9139b812cc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846fa0cd-b16a-4b8e-ad38-17ef4ac81a97",
        "cursor": {
          "ref": "7ee1ee2c-5294-45ac-865a-aac3f18bc99a",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "569bcd96-e8e5-4df6-a5db-5f6cc767770a"
        },
        "item": {
          "id": "846fa0cd-b16a-4b8e-ad38-17ef4ac81a97",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c97eeb48-25ba-4d56-9224-58a51b868b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bd44a87-5990-44b9-b952-3dc37683f945",
        "cursor": {
          "ref": "2be83f24-62b0-476a-abdd-574058365377",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "136f29f7-c6cc-43ba-a206-ce43a89c6764"
        },
        "item": {
          "id": "3bd44a87-5990-44b9-b952-3dc37683f945",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6e950415-4386-4f68-afd1-22634555dc68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2dfb7e-6914-4621-a0be-f98dd5909d5f",
        "cursor": {
          "ref": "054ed02f-e747-4923-8c81-439c771374db",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b1953b9d-52df-4260-a504-6ed0cbfa0755"
        },
        "item": {
          "id": "0c2dfb7e-6914-4621-a0be-f98dd5909d5f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3ee05342-8008-40c5-b8d2-03fd1c08c9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e2e6ad-8fcf-4146-ac98-66eaa045829d",
        "cursor": {
          "ref": "f7a67d18-106a-4e67-9d23-b7c3f649f05d",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "19fd0acd-2fed-4bb2-9894-6b8660b78794"
        },
        "item": {
          "id": "b7e2e6ad-8fcf-4146-ac98-66eaa045829d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d33348bd-6acd-4324-b54a-54933f183202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ce5865-31b7-4f29-8943-7a48eb2b81eb",
        "cursor": {
          "ref": "9d15c537-3f5e-41f8-b954-aed88d52967d",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "18689b34-110e-4507-af1c-db4aec46c17c"
        },
        "item": {
          "id": "c0ce5865-31b7-4f29-8943-7a48eb2b81eb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d1cf4e87-c7fd-47e7-ac3e-adb3959ab719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6f096c7-9c4c-4762-b16a-0753b4f90f8f",
        "cursor": {
          "ref": "3f178513-ea51-4768-b7e9-6cbea697e153",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ff726f90-d880-416f-8933-07acb6435dac"
        },
        "item": {
          "id": "e6f096c7-9c4c-4762-b16a-0753b4f90f8f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ac5b3c13-84c6-44f4-9076-62a910528d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cac9b8d-8972-4d25-9cec-0d5f9f3e54ef",
        "cursor": {
          "ref": "f4976d63-af9c-4809-87a0-dff4958365dc",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0ec4848a-a86e-49ea-bb43-b47b9586c182"
        },
        "item": {
          "id": "9cac9b8d-8972-4d25-9cec-0d5f9f3e54ef",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "401f223a-d515-4830-89d0-a0e617c7fe26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb1b87c4-83de-4d09-b695-b94a647ac57f",
        "cursor": {
          "ref": "a3e7eb94-2f1d-42ec-9e98-a82d045624ac",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c321e9f7-b2e4-41d1-a798-a6455664adbf"
        },
        "item": {
          "id": "fb1b87c4-83de-4d09-b695-b94a647ac57f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "34255b65-e4d8-4ff3-bfe3-b6946e7a31a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c4468f9-59ad-44fc-8ca7-bcb401ba6f5c",
        "cursor": {
          "ref": "98babad7-ba89-4d82-af30-1c93341610c8",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f4cc5c13-bc3c-4dad-bcb4-bfe22553ca5d"
        },
        "item": {
          "id": "3c4468f9-59ad-44fc-8ca7-bcb401ba6f5c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "80e04d5c-4f5b-49fd-b6ce-cf88b7acdeb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f16da5c-d7ce-4e04-913c-c5005a01445f",
        "cursor": {
          "ref": "ec796f0f-79f8-4093-9fde-ed84e6ac8b00",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "564f42b7-28d5-4342-ab4d-901c9e40ef3d"
        },
        "item": {
          "id": "5f16da5c-d7ce-4e04-913c-c5005a01445f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8039ed24-f6b0-4516-9b98-2d67710776d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47327157-912c-4f79-84c9-fc502d29cf3a",
        "cursor": {
          "ref": "17a113de-ff29-4f60-a2ce-e14cd0ac1541",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2a286c1e-10ce-418e-9fd3-9c96d45f8780"
        },
        "item": {
          "id": "47327157-912c-4f79-84c9-fc502d29cf3a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d7a874aa-0835-4b68-a565-d8f17e6e64d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4dc62d8-e5f7-4552-9c56-d56119f8b504",
        "cursor": {
          "ref": "bef04055-daf9-45df-8e60-82e6d9cce726",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "57e16e52-239e-4995-a8ab-e56e66e70730"
        },
        "item": {
          "id": "b4dc62d8-e5f7-4552-9c56-d56119f8b504",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "78327f68-bf5e-460b-9d1c-1969f5b5d03c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b672445a-5fc6-4dcc-98b2-c7d859118d65",
        "cursor": {
          "ref": "2879bd14-227e-4f9d-bcef-7864037bdbee",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b761d399-e702-4351-8f0a-cc39654d680e"
        },
        "item": {
          "id": "b672445a-5fc6-4dcc-98b2-c7d859118d65",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a60e98b7-9a5d-4efa-9458-7a429e9b2d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa2345c-31cd-4946-99f6-55d747c89cc0",
        "cursor": {
          "ref": "74db9eab-d985-4700-8a81-bf44b9e0b199",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "59570db2-9785-4596-929f-c2a68598807a"
        },
        "item": {
          "id": "dfa2345c-31cd-4946-99f6-55d747c89cc0",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "44cd5765-800e-4208-910d-a145b0570dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9627d584-9b93-4b3b-9d7f-3753f7b0bc62",
        "cursor": {
          "ref": "4fc3a8d1-efe5-4c14-8c2c-318cdc1d6197",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e014e3a4-77ee-426a-becb-51948ae879a9"
        },
        "item": {
          "id": "9627d584-9b93-4b3b-9d7f-3753f7b0bc62",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3ca75beb-ff50-41cd-b183-f2fe4f37f28e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "585db37e-c9af-4a22-b782-8925d5fa0a4d",
        "cursor": {
          "ref": "5fda08cb-d119-48e0-974a-100d5ff8d506",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ea8edd35-e771-4fd2-9d8b-8cece4f4c2e6"
        },
        "item": {
          "id": "585db37e-c9af-4a22-b782-8925d5fa0a4d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "92a9dbcb-bdea-4c95-b202-8f96ce2307bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6f896ab-27e8-4078-b1d9-3944b79be3fa",
        "cursor": {
          "ref": "5351ce83-5f6d-402d-9d89-f0e2aea4b592",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "253c79a2-6675-43e3-9be2-03a519b3d86f"
        },
        "item": {
          "id": "b6f896ab-27e8-4078-b1d9-3944b79be3fa",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5e0236d5-306b-4a5e-b770-ec997cd97821",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7d398d-bd78-407a-b957-c4520a74aeae",
        "cursor": {
          "ref": "cfcaae00-251a-470b-b5d8-a321a2201f0b",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "81a25513-d672-449a-8910-88c8c5d88672"
        },
        "item": {
          "id": "ad7d398d-bd78-407a-b957-c4520a74aeae",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "50b97de8-939d-40f5-a2a6-45866092373b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268b7ae4-8597-431d-9579-401f0d5ccef7",
        "cursor": {
          "ref": "aa1a5837-2b5d-485a-af17-cfb702409322",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3e97cbfd-fed2-4245-a10a-06aee68fc7b9"
        },
        "item": {
          "id": "268b7ae4-8597-431d-9579-401f0d5ccef7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7fc18eb1-15e1-458a-b774-0c89d019f075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a0a882-87e3-4c0c-8b52-de9f4f0d4156",
        "cursor": {
          "ref": "78c3c286-4f85-4c81-b300-b7c71017f312",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c34db59c-d464-47f2-be3c-44db0b0ea4a3"
        },
        "item": {
          "id": "57a0a882-87e3-4c0c-8b52-de9f4f0d4156",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c669a1d4-5561-4019-830b-f3842f6ea6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e9dbec-2f6e-4554-ae46-6e8f236eaa3b",
        "cursor": {
          "ref": "f194efd5-d344-4be8-8615-8e612f8ea99c",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "473e77bf-54b4-480a-a024-5b2f12fcec8f"
        },
        "item": {
          "id": "82e9dbec-2f6e-4554-ae46-6e8f236eaa3b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9fbd8948-1ad1-456a-8324-803815e9b171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca35e31-e827-4908-94ad-aaa46ffe95c9",
        "cursor": {
          "ref": "62abfff9-c21b-484d-a3d4-598f22b06d9e",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "6f02be65-5d92-4bef-92f0-a3d51f638a4d"
        },
        "item": {
          "id": "8ca35e31-e827-4908-94ad-aaa46ffe95c9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "c1ac5ab5-cc20-4a4a-b3d1-0a8af20b5b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e3d353-eb90-4bcf-b307-822e30541fc4",
        "cursor": {
          "ref": "870397d2-b6e7-483c-8f35-68aa82163eb2",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "eb019b02-417b-4981-b84a-75c87f1bc1c8"
        },
        "item": {
          "id": "54e3d353-eb90-4bcf-b307-822e30541fc4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d137a194-74e5-4e5e-a639-f805b59481da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "ff486fd6-ab6c-4250-88de-f364ab407473",
        "cursor": {
          "ref": "ff6a4de9-c186-42e4-85ff-f2f2334d7043",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a84b96f8-dcac-4a76-bba1-e7dd475d2c95"
        },
        "item": {
          "id": "ff486fd6-ab6c-4250-88de-f364ab407473",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "363a4e71-24e9-4783-a13b-95e41c55175f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d31550d-6739-439d-9c8e-7f6ec418cae5",
        "cursor": {
          "ref": "86199be5-5bec-44b1-abc3-f976e6178de4",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "806b44a8-b1a9-483f-a31b-5a2a9bf6e7a1"
        },
        "item": {
          "id": "2d31550d-6739-439d-9c8e-7f6ec418cae5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5ece3ffb-987a-4ff6-8d6b-95c5ca190584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b73ea4f-1873-41ac-8485-82f4c0f5f8e0",
        "cursor": {
          "ref": "fcba5090-b8be-4aae-9fcc-fcb4449843fb",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "400c2a74-cb67-458d-a47f-06ed0c6610c8"
        },
        "item": {
          "id": "8b73ea4f-1873-41ac-8485-82f4c0f5f8e0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "0ebc720d-6f4e-4140-b520-80a8c3cff94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3b0ef5-bdef-4ed1-9e92-ce613df54cd5",
        "cursor": {
          "ref": "73b94003-f62b-459b-b7ab-30f1e64f4f43",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "96491559-84ad-4a51-b779-8243ab3ce1d0"
        },
        "item": {
          "id": "7b3b0ef5-bdef-4ed1-9e92-ce613df54cd5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "768b3cce-36d3-44c1-a3ea-0625d2afe8d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f49b5f-2ec5-4282-b558-89c0b299f9b8",
        "cursor": {
          "ref": "86870921-eed4-4807-8b7b-e44ae0e4a5f6",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6acdb5f8-89e2-42d5-96b4-6f6b80120709"
        },
        "item": {
          "id": "04f49b5f-2ec5-4282-b558-89c0b299f9b8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "580aaf78-f53f-4ccc-88ec-2c615b0bb3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "853ac1f0-1ccf-4d07-a66e-b4c4fe859eea",
        "cursor": {
          "ref": "d4070129-0dce-4a80-a0ca-e11a1300f174",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8385ca10-d5f6-4734-ba85-8710a2a164b0"
        },
        "item": {
          "id": "853ac1f0-1ccf-4d07-a66e-b4c4fe859eea",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a80e33c0-f4d6-4f33-a9c3-a58507464419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13435cab-2443-48d1-94f2-c2b914246f18",
        "cursor": {
          "ref": "0f1c23b8-dae7-4eec-a004-cae0c4c6e063",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3d722905-d30c-46fd-b77c-53132128cbf3"
        },
        "item": {
          "id": "13435cab-2443-48d1-94f2-c2b914246f18",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "25ccb5a1-5226-46c2-a56d-fac4f13da849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e03371c-8684-4669-992e-cbc377c205ab",
        "cursor": {
          "ref": "25d96238-937c-4bfa-8243-53f4d0c5ce08",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "2c506553-2988-47ae-8043-0634d265e1d8"
        },
        "item": {
          "id": "1e03371c-8684-4669-992e-cbc377c205ab",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a3f22406-294d-451a-88e4-dc0623cdbc7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b66750-9a87-422d-b941-0eba4bc67797",
        "cursor": {
          "ref": "68a4e921-b4d0-4fa2-bfd1-a76b268e2c1f",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "450580e3-c74d-44d6-a46c-409e43d7b946"
        },
        "item": {
          "id": "d1b66750-9a87-422d-b941-0eba4bc67797",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9a037cb4-1df2-444a-8d21-8d19d75452ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f84b85-3c41-4700-ae55-451c215044a1",
        "cursor": {
          "ref": "855d255c-9a4d-4a9c-a661-11220b3406a5",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f76a7f90-ed5b-4e4d-9b1e-c9fd8b9cf130"
        },
        "item": {
          "id": "f3f84b85-3c41-4700-ae55-451c215044a1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "dd0bc99d-0108-40d6-aab8-e7acfbf30ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630c1a20-5779-41cb-ac61-f2998c5f3728",
        "cursor": {
          "ref": "f4e62eae-81b2-4014-9a87-6488427f8dc3",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "bfe70c3f-e95c-42f3-9b85-011ca298f41f"
        },
        "item": {
          "id": "630c1a20-5779-41cb-ac61-f2998c5f3728",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "96212adb-a36f-42f0-8b4e-94c88dc45a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2c0a78-6726-48eb-b1d7-5990b25c6746",
        "cursor": {
          "ref": "ffe28669-8e57-4c14-bc2d-ecfb6fe6e92d",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "dd31f5ca-9abe-46c0-aef8-3c98f697cec6"
        },
        "item": {
          "id": "dd2c0a78-6726-48eb-b1d7-5990b25c6746",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b71a3f29-c004-450b-8947-70dbb7faba1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bbcc924-eb16-4070-9f05-4b151b00d4ab",
        "cursor": {
          "ref": "2764758f-9b4f-483c-8145-7eebc3d2d4ba",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9800a873-49d6-4ea4-8f32-079487c5bb7b"
        },
        "item": {
          "id": "4bbcc924-eb16-4070-9f05-4b151b00d4ab",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a7739eef-68d3-472f-b234-fcf62e7c2dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5beb096d-ffd1-4b41-93db-84bf6bfd8743",
        "cursor": {
          "ref": "18410057-40e2-4cd7-b4c0-33261d0cb2fc",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "54b7c321-456e-4746-88a7-4aeeaeadebb3"
        },
        "item": {
          "id": "5beb096d-ffd1-4b41-93db-84bf6bfd8743",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3fd225e1-dbb9-4312-a6fd-6964f97b0bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc4578b-3fff-4954-8505-71412ae65277",
        "cursor": {
          "ref": "ad3bd2af-e947-4685-8d5c-a7eda319a4b3",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "153c0cea-9676-4332-ada8-b7ae486e9b22"
        },
        "item": {
          "id": "bcc4578b-3fff-4954-8505-71412ae65277",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0da48083-aec8-4b0c-a490-3ef10a2452ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d1ce6d-38ab-49f2-9c39-9deb222e3d8a",
        "cursor": {
          "ref": "3a011ea3-43af-41fb-a5ba-58f7c7b07160",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9327df3b-7987-41e7-91ad-10399476edd0"
        },
        "item": {
          "id": "c3d1ce6d-38ab-49f2-9c39-9deb222e3d8a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "dc809da0-3677-442a-96c0-87bc7f416206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86ed19e-029b-4f9c-a92c-baa09207e814",
        "cursor": {
          "ref": "6ddaef12-2c80-41a7-b972-bf3301c77f73",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "48b068bd-efd0-42fe-822a-062740bf5750"
        },
        "item": {
          "id": "b86ed19e-029b-4f9c-a92c-baa09207e814",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "289cfb9d-3604-4c46-b304-35ce4cfd93c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c66dee2-23d6-4e83-8d30-184917d5fb16",
        "cursor": {
          "ref": "d440e277-d243-4150-a89b-e4b8c51ae75e",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "033a615d-ad53-4f98-8b86-b68815636bff"
        },
        "item": {
          "id": "7c66dee2-23d6-4e83-8d30-184917d5fb16",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ed9f1ee3-1ac9-412b-96aa-cb1062ee35af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d53bb96-c89f-4357-b1d0-a13692738694",
        "cursor": {
          "ref": "820a3715-c5f1-4ff7-88ca-4907e3d35468",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "624bb2cb-0f41-403b-a4a0-5dcaa516bc71"
        },
        "item": {
          "id": "1d53bb96-c89f-4357-b1d0-a13692738694",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "2a547b24-f978-4337-8896-a15e4eab0738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f08326-501c-4833-8165-59e352b8c4b1",
        "cursor": {
          "ref": "f6a4d017-a09d-4da7-81d0-db951d4a5c59",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "520a3bcd-b5c5-4739-877f-d675c5c063fd"
        },
        "item": {
          "id": "76f08326-501c-4833-8165-59e352b8c4b1",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9b559ffb-06e5-44f7-b529-3dcb0eabba56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583f14c4-10f7-4611-8e07-5963ce8f30b1",
        "cursor": {
          "ref": "47c115bf-c912-4799-b778-3b7327d11e44",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e5d9fb21-3dd3-4068-b0fd-5900cce11ed7"
        },
        "item": {
          "id": "583f14c4-10f7-4611-8e07-5963ce8f30b1",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "fdf233d4-5faa-4128-a80e-728277673817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6858e311-8066-4a45-8bca-6a4a1b95acf7",
        "cursor": {
          "ref": "87dde9bb-0b02-4658-920d-bda1986584df",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c57a6986-75de-470d-8d78-9f8b3aa49e67"
        },
        "item": {
          "id": "6858e311-8066-4a45-8bca-6a4a1b95acf7",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "11fde511-3b51-4be0-bed8-f93c0791e060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ac6ecb-3e32-445e-9b52-eab877b8fbbb",
        "cursor": {
          "ref": "dd3a2381-42f0-4a15-b9e2-ce28718456d4",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4126c5ec-caf7-4a02-bcfd-8e059ec11031"
        },
        "item": {
          "id": "76ac6ecb-3e32-445e-9b52-eab877b8fbbb",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e4c4e75c-dc14-4d97-b002-724df1e059c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d80606a-a2b2-44ae-a90c-7618f95f81b9",
        "cursor": {
          "ref": "a841e33a-b7cc-4a68-99cd-6afb11daf3cb",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a041ad87-6d71-45fa-8f46-60f0f837a5a8"
        },
        "item": {
          "id": "8d80606a-a2b2-44ae-a90c-7618f95f81b9",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5064ce5f-8422-4dce-93b8-be8b15b1f65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f24a560-b632-47e6-aa40-6da1a88c1a74",
        "cursor": {
          "ref": "90fc358b-997f-420f-9c4e-5d07b42c1e03",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "96b4ad13-c177-425f-bbc6-7ee6e4998470"
        },
        "item": {
          "id": "9f24a560-b632-47e6-aa40-6da1a88c1a74",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5fce8c83-558f-499d-b581-c553a7ea170e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "227bdd58-359b-4f0a-b127-a2fc06489048",
        "cursor": {
          "ref": "688778ca-ae78-4b91-9409-efc6b2ac243c",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "efd92c26-1d20-4194-9ade-ebec8adf29a7"
        },
        "item": {
          "id": "227bdd58-359b-4f0a-b127-a2fc06489048",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "fe8e3c45-573f-4d62-a5a6-bb4384c8bf75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef075f70-20b5-4e86-9a99-3c0f10426377",
        "cursor": {
          "ref": "192164c1-4e19-4687-99cf-60a57996a3d2",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "5bafa8b0-48cc-4d22-a01c-b612e6007e45"
        },
        "item": {
          "id": "ef075f70-20b5-4e86-9a99-3c0f10426377",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f0fede3f-0f5f-44c1-b337-ed07cb3fe06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49600ccc-dbc7-4632-adf9-dcdd0fa2c3f4",
        "cursor": {
          "ref": "dfb3c89b-d6f8-485c-9dbe-05df2f5245dc",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "ba770bca-83c0-4828-87e9-2e9ada62467f"
        },
        "item": {
          "id": "49600ccc-dbc7-4632-adf9-dcdd0fa2c3f4",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c9ca7289-19a0-43cd-a231-38320e15f39d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ce0ef7-fce4-4f1c-9522-04d99d9cdd44",
        "cursor": {
          "ref": "2cacb028-cefd-4e77-9c0c-3d4a9b65c1d8",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e1d867c6-9200-420c-9bf0-c0c7136c5ef5"
        },
        "item": {
          "id": "76ce0ef7-fce4-4f1c-9522-04d99d9cdd44",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "dd96aaa7-db98-441f-a466-0718fd5c15fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aa28360-88a6-45f1-a3e0-7b13c9142924",
        "cursor": {
          "ref": "a4f387b2-13c3-4ff3-a328-4eb54781c33d",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c493bef1-82f5-4f55-8b3e-7a5651b92469"
        },
        "item": {
          "id": "8aa28360-88a6-45f1-a3e0-7b13c9142924",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "654baa08-23bd-4bef-bbe0-a70b175e2461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "3634e578-8937-4efa-af4f-ec830fbf0bda",
        "cursor": {
          "ref": "9870c1e9-3c53-4530-8763-1cc3183e7aba",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "775b59d6-96fa-489f-aac0-c2c28ede9829"
        },
        "item": {
          "id": "3634e578-8937-4efa-af4f-ec830fbf0bda",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "91405af8-871d-467d-afbe-46d2a8515472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "313434fc-396d-437d-93af-014fb56fdf01",
        "cursor": {
          "ref": "8bb7a93e-6a9e-4aef-ba3a-8cdd20386f2d",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "79604b62-0b7e-4e9b-9ebd-26976bd2928f"
        },
        "item": {
          "id": "313434fc-396d-437d-93af-014fb56fdf01",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4a439a87-7ca1-4f50-ad01-43fcce41a22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "683bfa11-84bd-418a-a7b7-224348606b3e",
        "cursor": {
          "ref": "b6bf3caf-1270-4be7-80c0-135bc22199af",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3729f859-8cc9-4879-928b-e83769164bdb"
        },
        "item": {
          "id": "683bfa11-84bd-418a-a7b7-224348606b3e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "83cece25-52b4-4c5e-9796-e3d7d6964b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397ec96c-6333-466b-9c7a-bc9e40ab35b2",
        "cursor": {
          "ref": "552824d8-02a8-4b9d-a404-c41a1984293c",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "08ac6383-82c2-4fb9-b263-01239b0c6c00"
        },
        "item": {
          "id": "397ec96c-6333-466b-9c7a-bc9e40ab35b2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "bcb64e77-f2e2-4ce0-9424-18498fd76b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "2638d07b-f89b-4087-9610-9b0a650f9274",
        "cursor": {
          "ref": "a4941820-53df-4a14-99d1-812c6487125e",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2a30d1b9-8f7a-4748-9f75-7c869fbb1ac2"
        },
        "item": {
          "id": "2638d07b-f89b-4087-9610-9b0a650f9274",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "02f9b810-aede-45ce-ba58-c9a0f289bd9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 813,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c0220658-74fd-4607-b0eb-19d7b35c01c1",
        "cursor": {
          "ref": "3bd2b4f1-b44c-4031-ae1b-71b25edc9ed1",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "015801ef-4d67-4f76-8697-25c3571a9a80"
        },
        "item": {
          "id": "c0220658-74fd-4607-b0eb-19d7b35c01c1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "88e82c1d-0068-4197-bd67-16b0bb28bc2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "5641fc47-6eb2-4699-b154-f3dae1c3f960",
        "cursor": {
          "ref": "73c1db7e-80d6-46aa-aeb8-e118693f6368",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a55b702d-2acc-4d47-8b85-32423fff63b0"
        },
        "item": {
          "id": "5641fc47-6eb2-4699-b154-f3dae1c3f960",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8c1b3996-b54f-4baa-8425-258408e0b2b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "6066dd50-9a62-415c-8060-a6714f06e1d8",
        "cursor": {
          "ref": "01520f56-ced8-4ce0-a5b3-ffdf042b24b6",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b35531ca-2400-4cfd-858d-f80af59b6b2e"
        },
        "item": {
          "id": "6066dd50-9a62-415c-8060-a6714f06e1d8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "01b64e6a-8894-4e9b-b925-66350b7662bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "9c53001c-07ac-4210-b178-da5dff1e1f57",
        "cursor": {
          "ref": "bf82fa60-c36d-4872-bbe1-c7a4b823067d",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b54cb939-a439-4424-a8a7-2b2ee5850859"
        },
        "item": {
          "id": "9c53001c-07ac-4210-b178-da5dff1e1f57",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ba1fe2f1-0c27-4170-8d54-34cd00ccbd01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "93fdfe3d-3abf-4471-a24f-859e1d8a8108",
        "cursor": {
          "ref": "760952ee-753d-4896-a16d-8dd5739234b1",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4bcaaf4f-0525-48e6-9bab-4427469fb494"
        },
        "item": {
          "id": "93fdfe3d-3abf-4471-a24f-859e1d8a8108",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b6a50739-9bca-4578-91d7-89815d3b27de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeff768e-9c85-442c-ad7d-7276658e4980",
        "cursor": {
          "ref": "6712b2f6-8ef3-4ef6-927d-eb54eb967a81",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2c6fc101-0f70-4535-955b-46ba12d473ba"
        },
        "item": {
          "id": "aeff768e-9c85-442c-ad7d-7276658e4980",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "96e5b2ca-5793-48c4-87ff-f0c333f659cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22eed0ed-c1da-4aa0-8033-8dc18c80aab0",
        "cursor": {
          "ref": "0c685b36-00fd-4041-a91e-5e410b226e13",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "71237612-6b4b-4135-9519-c40ec436a1a2"
        },
        "item": {
          "id": "22eed0ed-c1da-4aa0-8033-8dc18c80aab0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fe6f9ea7-cff9-407a-ab1f-ea434e47c312",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250be65e-8507-44f4-8c20-922d9ec3161f",
        "cursor": {
          "ref": "39eaddef-a80e-4ed0-81c9-5fc0395ba215",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a4216779-4aff-44e6-b6d1-789f80a0641b"
        },
        "item": {
          "id": "250be65e-8507-44f4-8c20-922d9ec3161f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "16ee1706-6b11-440c-954e-e7d2aca7d78d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cf4412b-3a9a-46fd-ab8a-194e36bb730d",
        "cursor": {
          "ref": "b5f65f73-01fb-499a-a393-e09c93584c00",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "11c29984-d8d3-4c8a-a420-f1fcce8d6dff"
        },
        "item": {
          "id": "7cf4412b-3a9a-46fd-ab8a-194e36bb730d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7a972d62-1863-4b41-8edd-74223c8cec17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008d967e-3d81-4b33-8e78-2067256f045d",
        "cursor": {
          "ref": "475f9c2e-29db-48f2-8dc8-c167175e9dcf",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "44b053b8-5594-4e94-a7c4-27866d5863f6"
        },
        "item": {
          "id": "008d967e-3d81-4b33-8e78-2067256f045d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4a5f04a5-ad84-47a8-bc19-0f415359d7df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bc744be-7fc4-421e-bada-e7d1ae88a35c",
        "cursor": {
          "ref": "431074da-da91-4b08-9e85-009252bd3446",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8ef032ec-2e99-4407-8ff6-c3d223d7f642"
        },
        "item": {
          "id": "5bc744be-7fc4-421e-bada-e7d1ae88a35c",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "dc457b92-4a86-472b-9882-b5426b81b20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4707ea8e-49e7-434f-ae70-6dfb97e86e6c",
        "cursor": {
          "ref": "cfd2328e-2413-4305-b2f3-7115d6b9a251",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "389ac3ba-fb58-4557-8518-a05220626a45"
        },
        "item": {
          "id": "4707ea8e-49e7-434f-ae70-6dfb97e86e6c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4bf4614a-71db-4180-ae0f-cbcd74b8d534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6c69fe-be8a-484d-b924-17c3a442f2fe",
        "cursor": {
          "ref": "bc31a282-7c98-44fb-aced-22b22a1abd3f",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cdcf86b6-a6c3-4a24-a6d6-52c84d31dae1"
        },
        "item": {
          "id": "ae6c69fe-be8a-484d-b924-17c3a442f2fe",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ed486885-c77d-4b64-8221-20f48eebdfc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5fa6dba-0c35-42bc-a910-5529c65d0804",
        "cursor": {
          "ref": "fad07e6c-6992-4c37-8541-ef260ba6789f",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6a32d80e-6c5b-4ad2-a929-ee769357a2ed"
        },
        "item": {
          "id": "e5fa6dba-0c35-42bc-a910-5529c65d0804",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "daf741b3-67ce-4900-862b-16d6001aa683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24d36ec-be0e-4230-938a-f0b7f6e81e97",
        "cursor": {
          "ref": "e8adc64c-6ba4-43af-9d85-4d0f91187680",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "42be2c24-44cb-4810-b1d1-fcbe63d705aa"
        },
        "item": {
          "id": "b24d36ec-be0e-4230-938a-f0b7f6e81e97",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "df444426-307e-4aa4-b9f4-50e0f0d8ee2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a794649-3aa4-485d-b435-15f393748da3",
        "cursor": {
          "ref": "dcbb4044-8b3e-4fbb-bbc1-a823d25758ea",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "57761648-1461-49c9-9a79-77b7ddd26166"
        },
        "item": {
          "id": "1a794649-3aa4-485d-b435-15f393748da3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "58dad3e3-2b71-4f8b-8b3e-af4074eaa9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb04324d-fc21-476e-b3db-709e529a1ba2",
        "cursor": {
          "ref": "62d7ac15-d12c-4d86-9980-f59c88c8a190",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "28555a45-8b5c-45a9-8563-c2a5a8a09d9e"
        },
        "item": {
          "id": "bb04324d-fc21-476e-b3db-709e529a1ba2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b4725772-95bc-4e13-911d-3837f73e90f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101b97c1-4871-47e1-ae0d-e3ac54b791d5",
        "cursor": {
          "ref": "5af45d04-27c4-4ee4-b9ed-fc1b21e2d2e6",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "cc573e6c-4466-4920-afe1-c3e8180923d3"
        },
        "item": {
          "id": "101b97c1-4871-47e1-ae0d-e3ac54b791d5",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8c60f36f-044f-42bb-adb2-71a09de5f552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1035,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "f23a59f2-7118-456c-9333-a2a0a787965d",
        "cursor": {
          "ref": "91869762-74ea-41b8-9a0c-1c9145954a94",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f9246034-b897-47f6-866b-89ff37bd205b"
        },
        "item": {
          "id": "f23a59f2-7118-456c-9333-a2a0a787965d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "2065cd71-d9d4-4690-a0cc-3d224e7957fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 681,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "715fdbc3-6507-4dc4-9d19-3e40640969f9",
        "cursor": {
          "ref": "23e35106-93b2-4118-9af5-65ffc89c3379",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e40a20d9-ae09-43dd-adef-8d098599793b"
        },
        "item": {
          "id": "715fdbc3-6507-4dc4-9d19-3e40640969f9",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "254c5098-2f7d-48d9-9908-050fd0922ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "f40d9244-81cf-40ce-a5e7-272ee3f74523",
        "cursor": {
          "ref": "9c78bdec-9bab-4127-8c1d-c2709640b09f",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "96f08c65-8ea0-45a5-b3a8-b5261d2975df"
        },
        "item": {
          "id": "f40d9244-81cf-40ce-a5e7-272ee3f74523",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "55341f7d-9dc4-44d2-8ead-deec84e08f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 669,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "eb0aafa9-dfda-43dc-b785-5b563231d7cf",
        "cursor": {
          "ref": "a5b7daaa-49d5-4160-8723-26833a0dd70a",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "605d00c4-cf68-4d43-a02f-0d92e2aacc0b"
        },
        "item": {
          "id": "eb0aafa9-dfda-43dc-b785-5b563231d7cf",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c9409e14-f519-4350-97c1-e8a063d55139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "93110b46-15ae-4a30-9f8e-8df23214a38c",
        "cursor": {
          "ref": "9ef52440-fde5-459d-b24e-66c44488ee73",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f039c7f7-ea01-4b44-9367-a8310dbb7797"
        },
        "item": {
          "id": "93110b46-15ae-4a30-9f8e-8df23214a38c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "19eef378-b697-4bfd-9733-0682db8ceb87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01aa70c0-b1e5-4d44-a110-87333c172c3e",
        "cursor": {
          "ref": "3157851f-b8e0-4cd0-8b1b-9d11fe2063d3",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4e0edabd-6506-4c91-8b23-dddc23f9615a"
        },
        "item": {
          "id": "01aa70c0-b1e5-4d44-a110-87333c172c3e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4a37bc4c-9a6e-4c95-a6d4-f99a06c7bc94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367ee00e-a24a-488f-8a3f-51265e8a341b",
        "cursor": {
          "ref": "13db6962-aaba-41cb-ac73-9ac2c690e0dd",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "f8f194c6-cee2-4afe-8f39-617d1104e577"
        },
        "item": {
          "id": "367ee00e-a24a-488f-8a3f-51265e8a341b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b0c9b282-7b87-44b8-86df-e1c3d79bb56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ef46b1-219f-4cdd-9cbc-438e7a8db09c",
        "cursor": {
          "ref": "b575fbe7-170c-4ee1-8d00-fb4e88b22f24",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5d3dbc84-221d-470a-928e-6bb225fd5525"
        },
        "item": {
          "id": "64ef46b1-219f-4cdd-9cbc-438e7a8db09c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "57660348-3d6e-4dbf-bd05-91b6a9e4a3d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a03e06f-45e2-4ca2-8f39-10f8a38e3570",
        "cursor": {
          "ref": "10356868-4990-40f1-aa67-5e4cf4d160a2",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e816187c-2545-425a-95d7-913b835044c3"
        },
        "item": {
          "id": "5a03e06f-45e2-4ca2-8f39-10f8a38e3570",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "37800af7-f55f-4cb7-b57a-9eff63376e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2767faac-2781-4d2e-bfba-a48e0bf81b96",
        "cursor": {
          "ref": "f30399f7-1e43-4f26-8d23-36fbd6ac24a7",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b5790546-e203-4aeb-aefe-f23c2646d1b0"
        },
        "item": {
          "id": "2767faac-2781-4d2e-bfba-a48e0bf81b96",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "54abc37a-fcdb-44d6-a55e-47bbfd818071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d55cdee-cafb-401b-b170-67b38ad89400",
        "cursor": {
          "ref": "a1da03af-a353-4850-97ad-5441dc14a6f8",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5ed33192-3fd3-4b9d-a6e6-6b28c4f6eafa"
        },
        "item": {
          "id": "2d55cdee-cafb-401b-b170-67b38ad89400",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c117df05-81cb-48c7-9c94-e4d297e513a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb0dc0f-30b3-47f7-9cdb-085e8e0d1c2d",
        "cursor": {
          "ref": "e1d77b40-20da-4ff4-9176-e410435f34f3",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a08b3304-a1ec-40c5-a239-1b86db9de1b3"
        },
        "item": {
          "id": "0cb0dc0f-30b3-47f7-9cdb-085e8e0d1c2d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "13d7cd15-1ba3-44ea-b37e-f8b85e8ee55c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274e0be8-d58f-4dc5-b7c2-c90eedd97376",
        "cursor": {
          "ref": "9d325554-a592-4a10-b6eb-e30317cb4bd4",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6a259a53-713d-49b4-91d8-4aaa411fea9d"
        },
        "item": {
          "id": "274e0be8-d58f-4dc5-b7c2-c90eedd97376",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "38dd37db-ac59-45fa-a262-a26f129f0f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9457c46-625a-4503-a6c0-991b45275125",
        "cursor": {
          "ref": "e8a89a1e-a875-43fa-af5a-577bae249908",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "562f0dfa-bc9c-48c3-b32f-bc511c45b2e6"
        },
        "item": {
          "id": "d9457c46-625a-4503-a6c0-991b45275125",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3054d0cd-05c3-4e56-b39b-fc4cc7f8e132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9237aca3-f355-4502-9461-404bc7423a56",
        "cursor": {
          "ref": "9ca855e4-0d4e-4136-8089-5775c9d4bc4b",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "a91cc023-f173-42db-a136-6bfd3543966f"
        },
        "item": {
          "id": "9237aca3-f355-4502-9461-404bc7423a56",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4937cba4-97c2-4bca-8907-8ef0100b5cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba67006e-ba2d-4ed3-8363-9e3f2b820903",
        "cursor": {
          "ref": "0f2272db-d3a6-4bf9-abc7-63eb3e6b334c",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "546535dd-abd9-42d6-956c-ab64a6e66a6b"
        },
        "item": {
          "id": "ba67006e-ba2d-4ed3-8363-9e3f2b820903",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "88d42e4c-f968-4116-b1b3-3d4f8d87d984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662fbd16-45b0-4fdb-bc5e-34d8bd6bcc0a",
        "cursor": {
          "ref": "c922ba1e-1c2c-4586-a644-9fba81087aeb",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "053bb447-b410-417c-95af-88d7fde3f699"
        },
        "item": {
          "id": "662fbd16-45b0-4fdb-bc5e-34d8bd6bcc0a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c9715114-524b-4195-b9b1-d8f3896f7925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22cc2aff-f976-4afa-87be-e3599b3f9a17",
        "cursor": {
          "ref": "fcb37a3a-276b-4262-be12-d060681a04dc",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "c356bbef-4809-4a2d-9631-cf0a796b3326"
        },
        "item": {
          "id": "22cc2aff-f976-4afa-87be-e3599b3f9a17",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "1629f8eb-7f3f-4a25-a2cf-f5d35dfee68b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32980e01-1f53-4399-9eaa-8762b32b55b4",
        "cursor": {
          "ref": "382abe18-a85d-4f58-a5c2-0e7465b3a7d9",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "eb71c9f3-b545-49fa-8dff-d8113a859a1d"
        },
        "item": {
          "id": "32980e01-1f53-4399-9eaa-8762b32b55b4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8296c573-3c36-4d31-b732-5dc8bf2791eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ffe570-8328-45bc-bc80-ebc960a09f97",
        "cursor": {
          "ref": "db8c3518-570b-4ddd-999a-054d4a9dc52c",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "91ccfaba-5f77-4b42-9b02-dac77ac4d1f0"
        },
        "item": {
          "id": "d1ffe570-8328-45bc-bc80-ebc960a09f97",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c1e4fb98-0381-4565-b993-d4c28d5563be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fdb05b4-fd0c-46ae-bd32-48215dd4dfde",
        "cursor": {
          "ref": "15b88811-f66d-4816-8d11-1b2b517c7273",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "387e555f-24e2-4b95-95cc-7522a651c9d8"
        },
        "item": {
          "id": "0fdb05b4-fd0c-46ae-bd32-48215dd4dfde",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "88146c43-e726-4851-89f9-20d95c8eaaca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2afc3cc-05df-4e8d-b76a-381a89c21221",
        "cursor": {
          "ref": "e6fbbc90-2e57-4cdc-bf4b-d424ac57f7c1",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "d3e6ab6a-b703-4200-93e8-91a226b59c3f"
        },
        "item": {
          "id": "a2afc3cc-05df-4e8d-b76a-381a89c21221",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d830fc83-bace-4b0d-a4f2-2a3401da810d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fedef935-5ff8-4657-9934-ecce61827384",
        "cursor": {
          "ref": "9f8fc126-a34e-4706-b552-5197ae0f3812",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "d6731e61-f4a9-405f-b628-44817c612c82"
        },
        "item": {
          "id": "fedef935-5ff8-4657-9934-ecce61827384",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "57cbe6ac-5613-4001-a6bb-d79c825f1ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e79473d0-3138-476a-bd85-c3ea217411eb",
        "cursor": {
          "ref": "4a5ab9fb-1b2a-4e91-9fbe-6a86adcb08e4",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "f064efbe-3e9d-4dd6-9409-9c766744b178"
        },
        "item": {
          "id": "e79473d0-3138-476a-bd85-c3ea217411eb",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "32f05471-8cae-42e2-a4ec-a8fc059cbb19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0481d084-80d2-4015-b789-608cb8a22b59",
        "cursor": {
          "ref": "f125c3ba-7dbb-4806-838c-39abea0b3f98",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "06449dbf-c91d-427c-aae1-29fdabcab23d"
        },
        "item": {
          "id": "0481d084-80d2-4015-b789-608cb8a22b59",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0f95ac94-45da-437f-9f82-13cd8e433cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdfa303d-4fec-42ba-8fb8-9fe163a76c40",
        "cursor": {
          "ref": "e6f96926-c803-4196-adc0-da110ec949c7",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "47c5d2ad-9104-4d10-9217-3b0fad0ae8f1"
        },
        "item": {
          "id": "bdfa303d-4fec-42ba-8fb8-9fe163a76c40",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "800cee83-fa5d-4767-9c3f-37688acecbd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f52212-a77f-4db7-85d6-f5edb466d7ca",
        "cursor": {
          "ref": "c11411e4-3d48-49f9-b3f9-617a843c2c8a",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "2062d205-081e-402a-ac51-bd65e213dd8b"
        },
        "item": {
          "id": "50f52212-a77f-4db7-85d6-f5edb466d7ca",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "80be1a1e-3716-43aa-ad88-babea1bb5c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6bad51-c9df-497f-bea1-233d7cb7feb1",
        "cursor": {
          "ref": "fa083f82-8f1f-448c-ad68-b0ff4c38a8f7",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "cd28a131-dc9c-4061-8230-149862106ff6"
        },
        "item": {
          "id": "de6bad51-c9df-497f-bea1-233d7cb7feb1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "46b472ff-1c14-45e3-857b-a78801055c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61bb0699-e810-4dfa-bb97-d3aa97037b79",
        "cursor": {
          "ref": "4b63e0d3-5154-4848-bd98-39d507020964",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "0d8c1994-9aec-4b03-8929-c76edb0a6f91"
        },
        "item": {
          "id": "61bb0699-e810-4dfa-bb97-d3aa97037b79",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "de272d79-e1d7-42ad-862c-ff01642acb68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8acc0249-9838-4745-aaa7-942daeb40a79",
        "cursor": {
          "ref": "38a6f24c-5322-4ad8-a9b5-50e5957c96f3",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "f4e97d5a-e3c6-478f-9b0f-87c667e2af79"
        },
        "item": {
          "id": "8acc0249-9838-4745-aaa7-942daeb40a79",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c02b31f3-6877-43d4-b377-2b445f4c1b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421fb087-7f91-4965-8463-e993f66f1fa1",
        "cursor": {
          "ref": "52c3244a-f7ae-4e27-8241-7a10905bb20d",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "050d5c0c-deaa-4182-9398-f6aaad392dba"
        },
        "item": {
          "id": "421fb087-7f91-4965-8463-e993f66f1fa1",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "dd0642ca-1d39-44f1-95b6-bb2b02734d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05d51ee-0649-4a61-a292-78dad059c308",
        "cursor": {
          "ref": "33f301a4-68ad-43da-afd2-2546d63b184c",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "34838b56-350e-4a52-bd31-0ba9865e1f01"
        },
        "item": {
          "id": "c05d51ee-0649-4a61-a292-78dad059c308",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "083067e1-c55b-48f7-9f22-6ab06521e65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c1d5b4-d807-4101-8551-dc9763e60342",
        "cursor": {
          "ref": "e6f08cf5-f050-4e65-996d-dba07e95335b",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "45cc7fb6-59db-4440-b6dc-866851285228"
        },
        "item": {
          "id": "63c1d5b4-d807-4101-8551-dc9763e60342",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ecdbc520-0355-42ab-a3ab-6a6c2906592b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43888f8e-c9be-43e2-971f-edae05f7711f",
        "cursor": {
          "ref": "761f7923-7096-47d8-9016-1c356f7eebda",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "14b3e59d-01f4-4693-a28f-c54f281af199"
        },
        "item": {
          "id": "43888f8e-c9be-43e2-971f-edae05f7711f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e85c6f8f-7f97-4eb0-9b9b-a02d7a18b424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88443555-cecc-49b8-824c-ca30db87e832",
        "cursor": {
          "ref": "d404feab-08e8-4a4c-b39c-44f68f4f6d2c",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "baecca58-4708-470d-a66b-158593b90561"
        },
        "item": {
          "id": "88443555-cecc-49b8-824c-ca30db87e832",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9eb63300-627e-4123-9bd0-c24019d60b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c424ddee-542c-4e84-b2eb-e0573f421116",
        "cursor": {
          "ref": "78050621-38ff-48a6-a2b6-76df43d22837",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "d72b001d-8b0b-4b79-8e1c-4b3979726df2"
        },
        "item": {
          "id": "c424ddee-542c-4e84-b2eb-e0573f421116",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "32aad916-2dae-4c2e-806a-aa92840024b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e0b47a-a1fa-425d-9288-97fb1ad7f66a",
        "cursor": {
          "ref": "98ea489d-cf1e-454e-a3fb-f53fb3aa487e",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d3cbe2a3-7790-467a-ae87-9010624087ac"
        },
        "item": {
          "id": "e2e0b47a-a1fa-425d-9288-97fb1ad7f66a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f404c59f-b01f-4a1a-b0ce-f2e93323d3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e2a670-5c35-48be-a1b4-e43090762aa8",
        "cursor": {
          "ref": "7e446e15-f006-4bf9-9f3c-5b65fbe5f5f5",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "eecb59e7-04d3-4f8c-8420-c97d19aabe80"
        },
        "item": {
          "id": "b1e2a670-5c35-48be-a1b4-e43090762aa8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "aa18ac58-5b2e-4f48-92b9-5dd2ede1049e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2f224e-bc7c-4182-9f85-3678eaf38f75",
        "cursor": {
          "ref": "2dba240c-b54e-471d-bb0e-564a698c734e",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "c3eb2cf9-b10c-4c1d-8d14-3953a0bf6f0a"
        },
        "item": {
          "id": "2c2f224e-bc7c-4182-9f85-3678eaf38f75",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3bf44ca1-8309-473a-9601-3ef669cae55d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e10fad0-8750-4383-a069-e082cd5ed50f",
        "cursor": {
          "ref": "2505ad11-bfe0-410d-ba48-333fcbcb6af1",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "9626e58c-118f-4b0c-85a4-897a7e4dff24"
        },
        "item": {
          "id": "0e10fad0-8750-4383-a069-e082cd5ed50f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d1806661-3697-4090-bce6-9e9024f5df7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e959ced-c134-4a38-b2c1-abd43027d23a",
        "cursor": {
          "ref": "2bdc6473-e57f-4dd1-ac05-b66901527aa3",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "f07075dc-e8c3-4aab-a98f-32fbce1d3123"
        },
        "item": {
          "id": "7e959ced-c134-4a38-b2c1-abd43027d23a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6b34795b-4c9b-4b72-af09-f8edb59b02fa",
          "status": "OK",
          "code": 200,
          "responseTime": 669,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a4ce7a-2673-4fd6-9eea-48a55e602ebf",
        "cursor": {
          "ref": "0bcd3217-03f4-47d8-9d68-d25cb5c77a8c",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "0a210c1b-ba90-4287-abad-7c2334380f4e"
        },
        "item": {
          "id": "28a4ce7a-2673-4fd6-9eea-48a55e602ebf",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b9baed6c-56b2-4038-b475-784aaef29d76",
          "status": "OK",
          "code": 200,
          "responseTime": 733,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d446e1-ead8-45c6-a470-ca1b07058c8b",
        "cursor": {
          "ref": "0f04f835-71c8-4bfa-a353-76e74cb80483",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "572f6af7-4eab-41bf-af45-4e30c400b523"
        },
        "item": {
          "id": "b1d446e1-ead8-45c6-a470-ca1b07058c8b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "27b895d9-31f7-4fd7-89a8-40470d0574c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d446e1-ead8-45c6-a470-ca1b07058c8b",
        "cursor": {
          "ref": "0f04f835-71c8-4bfa-a353-76e74cb80483",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "572f6af7-4eab-41bf-af45-4e30c400b523"
        },
        "item": {
          "id": "b1d446e1-ead8-45c6-a470-ca1b07058c8b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "27b895d9-31f7-4fd7-89a8-40470d0574c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4742ccec-e548-435d-8f18-fb8132bba927",
        "cursor": {
          "ref": "78e26a48-6b91-4d96-aaaf-8b4261389886",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ee63050d-f7bb-4975-a3dc-babca1d64740"
        },
        "item": {
          "id": "4742ccec-e548-435d-8f18-fb8132bba927",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "04dafe67-8188-4d0d-8077-4f9edc1514d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e23797c-b0b0-4ece-a467-7db039707cd3",
        "cursor": {
          "ref": "c9b03bca-94e0-4ebb-a602-6bb329143337",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "fdd5fc07-1bef-48a7-aa56-0925719f3788"
        },
        "item": {
          "id": "3e23797c-b0b0-4ece-a467-7db039707cd3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a4b7c3b3-4de6-4791-9688-0c754d233fad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}