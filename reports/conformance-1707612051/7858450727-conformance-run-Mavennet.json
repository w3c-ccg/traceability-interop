{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2c59d519-14dd-4269-bc5c-da4f8f40f899",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1537ae79-108f-48b6-a641-f9c621b801a8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d75b9d55-ba14-46ce-b187-e8c2f3b8e9ea",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ef47eb5c-6f8c-4ed5-a6f9-2a09c04dbe33"
                }
              }
            ]
          },
          {
            "id": "14ea5ccc-af20-4aa7-a2b8-a38ec25087af",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "07960c41-c27b-4003-bca8-2a179342f858",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "fd57e186-e9ae-41bb-b210-33e2afba8a13"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2903dbbd-1328-415a-8f7f-1c442dff1312",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b61cdea1-b23c-4ada-9740-e6e108faac3b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "56c71f80-62ad-4516-980c-1a7ed10dd056",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "69db3eb5-2c0a-4f48-a111-9d6035cbe78c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2f64580b-2897-483a-ac88-be889ab8f0f3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "70663901-a80e-4961-8a12-cab3fc7d8e49",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8efd9743-3a41-404f-8c63-cdfdd5fb2381"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "61c36d72-594a-439c-887b-7b18fc51369a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20680549-ef1e-46b7-a99b-d8498811928a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a15b96a-7a90-4d60-b36f-c6f3209a415c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "201d2186-b704-48db-9dfd-31f5856b4d8c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39315a9a-6e9e-4ad1-b443-2e87afab8b5f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e4b35c02-d159-4a25-9678-b283f4086754"
            }
          }
        ]
      },
      {
        "id": "e871a318-30ce-48ab-baea-ffd48f90ea5c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "7f1bddb7-d25a-45b1-b5e2-7a9b5e684343",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27fb4207-ed69-432b-8a7a-deeefc467914",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c4d1e458-d21a-442b-84fc-7b461251cef3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a05e31-a0b2-434b-8ca3-628756d506e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "203e0e8f-ecec-49ed-8adb-3e61dadccb8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e2b200-1a24-4eca-9c07-9fecee00e41c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe7a3a2-cbd3-4126-a73d-ad14fab4cf2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee2ea3b9-1b9e-49cf-986b-5f6eac027340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c604ce-669a-41fe-b5ec-71099c52fccd",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b6d58d-8038-4e90-abe4-8f7e4ef930a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cade21e-e873-4627-b69c-104955e4a8d7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0da295f0-2c30-460f-a4be-d8f08ad89ec7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7f8c116a-be54-4e50-895b-1a04bfbb79c7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7945ba01-de41-42d6-a95f-072f7e785c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b872b6cc-b8dc-4950-bf71-1fe64b4fce66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da443f6-9706-4c6e-9d6d-0ed8fad87b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "331558f8-324a-4c7c-a5d0-367fcd76967f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "dd358f33-b175-454b-a524-f089f7129138",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8197cbf4-c952-4ef2-a54e-45c6d82e1f19",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83fc5306-741c-47a8-9daa-79bde33dc0d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a5344f25-00c8-4d29-a55f-227181bf8906"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "122a066b-388b-4b0d-a090-74a17b010c4c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "591da96e-7334-4491-9dfe-6cb7fe45cd39"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb4a096f-f8f8-4c5c-a459-4af6c61c59c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "951ae4fa-36c4-47b1-ac1a-d9cf2878caac"
            }
          }
        ]
      },
      {
        "id": "697bd345-2581-4679-a849-5f9f9f4393f3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0b5c62fc-34de-4a8d-b255-5902a45724dc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "94f8f4ef-809b-49c5-b81c-9b60a9577a04",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0c15ed70-627e-4521-8dab-fa4de1c9a888",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a585e0-1046-4c7f-868e-2bee58394302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16e3931c-bc2b-4697-9fa7-1ade79b30d1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f4cd43-97f5-464d-bbc6-d90aa57710d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f91d3b2-3b99-4c42-8700-54b8aa0d0b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea25704f-c6e3-4236-968f-915659bf7af4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2360d6-db2b-4052-adf4-569f5b5ee6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56bca046-f2b0-4913-a6a5-31bc631509b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46755a59-8f3d-4ed0-872c-83a0d9cc6312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dbc430fb-3a8f-4116-bfdf-a6c04a8198fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21b328b-4b83-4c17-b649-5771c8098ccf",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea639d93-2231-41e4-9eb3-f07677cb5912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12a8d11f-7e40-41a6-af13-dd3e1aeb5b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d76c18-7ad7-4e71-92a3-9549439b85c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa472b70-2812-4aba-b6a8-8833581e9e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59c305d-1e5b-4c63-8a3a-bcd7049d9d19",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5924dd-94de-488f-97db-5a2fb42de4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2fee3cb-8d99-40bb-b963-3888bf2a9f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1fb52d-394d-464a-9804-926496ef2b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f1a3ad6-06e6-4026-8ef8-af3b573092ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747103c8-e3ba-4946-8650-583e8fb1896d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3b1f4f-1faf-4933-b87a-5b9086f4128a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e62830-665c-44cb-965b-a7dece363c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af491293-5b7f-4104-9d9e-6a733effb16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0dbbd1f0-2b9b-4626-b287-7906c80cd333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460e7e74-7029-4e67-918d-029f4737a812",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702e647a-b78a-486f-8be0-29897b365004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7af19734-9df7-4ad9-9a13-2eff707fcfb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63546e73-36d1-4258-b69e-01072b41540a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5ad71f3-d3d5-4878-acc0-658c25b449f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78e4340-2e80-4817-aa78-d5a8fa0a0258",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a6417ce-3540-4f1c-a700-f9415846a965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e79a1965-7a57-4275-b3f3-1512e9bb6b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529c3ccd-0200-44ac-b724-fcee4e5fd9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "760a4baf-46c5-4d28-aacb-c656449320c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5a4aaf-3c3d-4f41-a15d-e2296008967c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29e23ab-c7bb-41fc-a7bf-918478e14d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3043260-2a62-491f-b843-c44dc2601f96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8274d666-c934-4679-907a-d7b4f772d778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1310a490-7bb7-4967-bcce-27df3facd8a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a38782-17ef-44ac-88ea-5a6283444ed1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813cc32c-3faa-4768-a4bb-e1803db4406a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58831ef4-367e-415e-8448-d9a2311c0afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf0151d-5175-4316-926a-763099019a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36fe1fd5-5936-4beb-b535-a1b02c7cdfdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8628b46-4fff-4c6e-b962-f948142054df",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d28f6d-6142-4ce0-bb8a-54aacd2fdce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95941cfa-46d2-4cdb-9586-8c7241e692cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfaf715-974d-41cb-8f5d-d7009ed79740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3261fcbc-14fa-45dc-b446-5e1cd46ceefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfbbde7-0ee2-4f7d-99c4-d1f59ee30e12",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afae8c1-9a23-44ff-aa17-219c1696ed39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d827805c-0e97-4643-8123-38d49500c3b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b88fa0-8e3a-4a08-9a1c-d8c28fa43bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6fae4f7d-4191-4776-8fa4-be8d582bcd70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d82261ab-000c-40a1-be0c-0e06f3c46fce",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d501475f-dc56-450b-a2a6-a200754f1103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86420f4a-3b0a-43e6-b247-3cfd3f61ed5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0934454f-c18b-46aa-ba68-92fd0e8a0ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba783797-b79b-49d4-941c-98a2db181f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394ee8b3-256a-4da2-80b1-211aaddc4c25",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef15bcd3-ffd4-48c1-8ad9-5fb32610dd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093b52d3-e5a8-4551-9859-bead330e6843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284017b4-213d-49d9-ab1f-4d290c7643d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcbabc81-d85a-4ce9-8cad-dd2b53bc7219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2021562-7d17-44ab-b58f-74029b76e85e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8fdd1f6-dfd3-4c0a-90a5-75a7a5e60a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60130ab9-f047-48cb-86a8-9aa6a41ac124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e13f6d1-810d-4934-b4f2-dcab5c0fa0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "affb1774-a6d0-47ad-8ead-8e7806c09359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daea439a-1780-4000-81fa-fbfb932a581d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df4bf8d-a4c2-4c23-9e8a-c44fec3b5506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "176f883c-17f8-4e10-a001-34b782a60102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f92968a-c21c-43cf-95ff-7f1a8fbb7354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c130459-195d-4af5-939d-4e0b0fc676d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a953d92c-17b9-41a0-a9cc-06c7ffc44b63",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62bd6e26-b0cc-42e8-895d-5290482cffbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daa95677-b8fb-4410-ae08-43022b30963d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad80c67c-b330-4106-8037-aef8730b2fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96095c2f-9ae5-4f8c-b448-e7ac2c2d5d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120d771c-c1ef-4165-a108-5938f51c8a2d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b42166-4d8f-48e2-a6db-891a80891541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40da6942-88e2-4f2c-8257-3d403545f2bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ac369b-3d53-494e-bda3-c65490a7857c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebdc8323-ce87-4869-9e95-88e90d0657b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca21854-4f90-433d-9220-615a6e6bd0d4",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f56befb7-1953-4731-90b9-65a7a05389ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bfbd733-db5c-4d4a-af93-248d5668bf45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72ddb1d-4078-4169-a615-0b7e05aab6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3eec3775-b909-4cd6-a4ac-7e99b2be1a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49b7086-b634-4b0b-b3f7-2b3c3810405f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e46191-e7fa-4468-8699-112334f46355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4213ea09-2ad3-451a-a475-14942fd32494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecb192d-28b8-4053-b83f-e25c5559aef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "498c5a74-3e73-486d-bace-f64133a56307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1f0206-85c6-4f31-95a1-a2de9ae66837",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cd42af-8acb-4e52-801c-be1282c8c911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a065c29-5435-41ec-8196-b9c5642649d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "639fd709-b7c3-4d58-81ea-3b47d3936c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dedbe9d-349b-4e8b-8200-d15204bfe0ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe8ac93-db43-41db-840e-f5bc9b77b766",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5f1c33-353f-4037-b0f8-b246c697ff04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e95dca7-7277-4732-8c5a-fbbd41c9916c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23a37fb0-5f29-4f1d-a15e-70acd6399728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f0afd3f-3970-47bb-a8d2-4038aefd608e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff10f130-1875-4414-95e6-0e28bbf1f146",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4334bb-331b-478b-bcb6-df83b52b8bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfa40f0d-79f8-49ee-9a4e-f8a5e1005a87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3bd12c-63e5-4d1a-9e55-c9fa37dd54d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d5e7ba2-7ed1-4b29-ba10-2036b42a3084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc157aa7-0380-42ca-8135-4684b0d54717",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18d2a47-5d73-4a48-b48d-67acfed3a238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c07bc52a-7ffe-4166-9e3f-d7c3ae352dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9954d254-a68b-4cd3-bb89-dfed3792f9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78b9c74f-bd60-4bbf-bb78-c4507b96129c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1788b306-36d1-4e8f-a5d5-ee61b6ad66f8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621c87fb-56b0-4c13-b1a4-18d536cda4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c573b88-73bf-48dd-9fdf-51c860c2d105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9ac882-9845-40d2-955e-cb1e9f19aa15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0454f1b1-47f8-43cb-8b1a-8cecfc986fb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ecb6595-c55f-43c8-a364-4e06521d5730",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bf92f69-32d3-47ae-8940-ac125d354ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978c4e5f-d0eb-44f3-ab03-7dbd3b95bf8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a99ab6-5df3-493d-8404-13955d99a967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c0b659a-9f1b-4370-a62d-7addf7397eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42cf548b-e936-4b24-8b0f-8ba25936e1fa",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "133dcb7e-f7ff-46e4-b851-515b8d419b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b871ed7a-48b5-42bb-b026-3fcdd7f9eb4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b59c9cd-8c32-425a-9042-14ef388d3352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "554af979-ce3e-45ba-ab54-e02ab639a53c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb84497-1b06-407c-a148-3e79a600aa9d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "907dc90c-3964-4cc9-9568-d4c9bb95c58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2452109c-17a5-4776-a6c4-2e4eeaff967e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317a7744-3b1a-42ff-953c-5d0bf4324dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cf50cf4-4bf4-43f7-9572-5014e995f0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54bb0f8a-1eca-4545-9738-20f062b07d56",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f2a51a-42d5-47b0-a6a9-08c5d429f4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add94bb3-6983-43e9-9320-70a1cbe7dac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58afebe3-8f30-4461-b41f-e1c8bbe231a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd8a324-f7dd-4c5f-97ce-21b4dfc62b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0216149-c30f-41ce-9223-2f3b0193a31b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a717e947-a8c0-4bc5-8d18-9cef94f298e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507627e1-ac10-42fb-be2b-1004d58e55b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c79e0d-3b04-4d2f-9f25-caf640210f9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a881c13-8285-4d13-9630-e6ec88b0ebc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aeb00d0-6e07-43ac-87b6-be3f50206d9b",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1526f3a7-179e-4ecc-8e1a-ae0d00fbeee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3326a5d3-eb1b-4678-82f3-1b55eb08aefc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad79a89-c443-472f-821a-1cbe4fac1644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b08ea833-a879-40ea-919b-230fbaaa58fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d52019d3-285b-4d16-b9da-2b498606338c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88690ab-b6bd-4513-b1c8-8252631e8d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b71b2e-4c82-4ee9-bcca-e083c3c8710f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eeec32c-d285-4c65-902e-63048ec42b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f1a3fbd-0a74-470f-93ec-94957d3fd6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bd9063-4a20-44c8-b657-ef054a15c577",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "189a8a5b-9f77-4a00-9e89-1fe52bbde164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1539d8e-7f9e-413f-8806-deb072f2258c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8eabc3c-0493-4944-90ba-7e872363f1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db848fbe-ca33-44ef-8206-048328a801f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02e22d0-cfed-4a15-aba5-f0bfce823a73",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7befbdd3-3917-4c75-bf3e-6c699cf139e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb666a15-77d4-46f6-ae78-d6c0250435d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989547f7-da9e-43f4-9ce8-b98d31d13f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad27c818-c9cd-47ba-b2ac-6aa0d1072567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdc031a-c5f1-4f28-96fc-4491e2e151b3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4714e18-c263-4f8f-b5fb-23411fb5febc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65fe10a-c281-487f-a276-aba7c4799899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e224e9-c87f-4032-a4e9-2277e0149af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "474b9890-9016-4136-9273-49910ea2c323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acddefda-9ebb-429b-b45e-ce20ef14e667",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a885de-ceae-4792-a6df-3e0970b7457c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b46a00-d3ff-44d4-9203-10ad0fd1b89e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d5ba8e-bef7-43e0-be8a-c5f112d67ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "c6d6de1c-d950-46e5-8cf6-72b00df957b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ce4259-5d15-43cf-b48f-a1e12b8c9df1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018beaf4-def3-4663-8478-5099ea8958e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "629eaff4-14a1-4486-ab2a-19b3cd454ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fa998d-eb23-4aa3-b526-62a055c0e27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "45d886a6-18ad-49cf-af1b-063ef2641eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c639f238-ff41-4c60-8c27-a040a04a16b0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e1ce1e-2e2b-43fa-a278-25c2934ca30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb649ef1-29c2-4874-a821-3fc48d2f82fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f980b76-ec6b-4894-a202-8c45a1fa6b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f7007c8-0e9a-458a-9924-f9605f20e5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74bc8bb3-9378-49cc-b57d-389cc1cf1a08",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d630e0-957f-418a-ba2f-f1378d5cf8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd0fb4e-90d3-4783-8f6b-6413be42d807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89f5baa-405f-4558-8e50-7c5ff0c63083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "56d44f4c-3c2b-4246-b5d6-bd243b1ad460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9233ca43-39c0-4b97-aa43-395685146214",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d46720f-6c80-466d-9484-7be3be35ac39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0f623c5-75ee-4a16-80e6-6bc5eded357a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "815156f5-ca22-4989-bee5-9615a01234ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cd51ce92-3a23-4798-a9eb-87453c2c3e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a6e89f6-acb4-4463-b97e-b89e9228fd47",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29591dea-026e-4e25-b221-69df29ca3685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e2b30c-ae6d-4ef0-9dd6-8f8273601b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dcd8fd1-0620-4293-a797-a4c326428725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cffcb8d5-eac6-4db9-b756-6b81dd3039c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845d131d-5ffb-4061-9d43-fa0010cdba66",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0ad1a8-bdc3-4932-a457-8f324866bbaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a38922a6-ab1d-4952-a801-e6201fd68b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5d24d2-cde6-4ad4-85b8-adac7a8dbae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "067224a1-1835-4e62-a46c-fcd06a10c9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b204643-226b-4cc9-bbc3-7665e12e335d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be8f923-14fc-4a57-a037-d9809ee4be63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1184e45b-b23a-44e5-b9a2-ca5ac5503ca2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b5a36a-073d-4f2c-979b-d6a624f00cac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0473f615-2758-426f-a501-6e6edc925095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344143cc-b859-4bac-8896-15469fd33323",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc56ec60-a2af-4695-975b-0793d8c33f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef673ee-9326-4088-b5e7-48dd7eb56edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8160c8-a6df-4b6f-82d5-a059eab35395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf851cd9-b295-454f-a266-87c0792c94e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a5937d-cda0-4c5c-8e0b-cc9d44343062",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4923115-9114-4822-b119-0d8d65cedbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ccde90a-981f-4ddb-965e-503e51396016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f4c359-8941-40be-ad35-98bb5111e10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "06e13a7c-bd17-4dbf-bb54-67c01602309a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b69247-e292-4dd4-a4e8-fa1711f7b67f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c294c40-a401-46ae-9c58-455b4b5e4c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e264c95e-7050-42af-b4bc-3cc4f6e612ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7cb2d5-e957-49a4-90c1-2aebab6c138b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a84c80da-d141-44fd-a9e5-02a33fc72fd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3265a99-c34d-473a-9d36-65dceac72c94",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d295d2b6-b3f6-4851-9f90-90c8d46893e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d917f9b4-816f-4220-9a49-9596f4b81eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74ce62a-0570-42ba-ba14-51cc0693fb1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54421358-3c26-45ca-9bd7-0a600fcf1248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783831ca-77dc-4da5-a3fc-95e61cad2be3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838c4351-9e3f-4226-be20-bcd8a0ac6063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1890ada-63a7-49c6-b3be-1dc281048e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35fbac8-38fa-4816-a8f4-fb796ce309df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "883637a4-75a7-4fad-b271-3610e616c76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf458cb-728c-474d-be04-7050e69143b4",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deae1fef-b4c5-4ba2-bd19-cd50a8a08c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e80364-3eb9-4191-8aa1-b89464f78867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da3def57-86e5-4929-85b4-1966e6f3a3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "43298cce-7625-4b28-b799-cd7dd092009a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a0c0eb9-f074-4102-91c6-d6aa7245e28f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc54c54b-b301-4160-ad9b-5a9a73385033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771decb7-1258-485f-8f40-49d1d24d2bb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886c56dd-e193-4d0d-a4b0-c2acbb68fd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "105e876f-0711-4178-b085-017043b677f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cb101a-b7f4-4be9-ac71-f16484265bf2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf18b78-9071-4eff-8297-e0a00dd51627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18c5f4d7-3d1b-40d0-b835-707a7a11d625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586fb4b8-e074-4094-adf2-e355f4a86930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "51121a2e-bc06-4c4f-9560-7d976bb1f5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a07fa8-e297-4e27-b68b-ee24ccdf4247",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe4a06c-5c28-48f3-bb2a-1d74f7e8f387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824c3ba5-8a41-46a2-b67a-e3d7b06defdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce417ad-be39-4ae4-bca5-b334579095e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9788cfba-bf29-411d-ac54-8030f3d00f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3d44873-e99b-444e-ab56-07ee1000a790",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c92ea3-bcd9-4ed2-aa82-ab2d2a5b317a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70814b1c-8c75-4246-ad1b-24e97eeff187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21307bd6-a452-46ec-bdeb-24b625e3fb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4238d1b-4a33-45a5-83a8-5c242ee1462d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331cb415-7915-49c2-87c0-72b3ee831acc",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6adebf9-c718-43a5-901a-e0578a932dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e63a1d4-88ba-48ae-b374-46be7ffcbaa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "394f937d-1d85-4d2d-9da4-b5a01af216ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3206261-0c4f-49b9-b0ca-50ae9a1b2425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c7c2ff-de4f-4ef5-8605-356de1e43ee5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "807d5f2d-b705-4107-9ff8-7244dcf269b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e04ca4-fb86-41f6-9429-8259bc54f71e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f46aafc-aea2-4311-a548-23246413e1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2c970b9-22ed-4361-bc3d-2cfcbbda6624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ca029b-50b0-4e03-bb70-5035f1d10921",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71f8e35-31b2-485b-b0ed-00b33674a5a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760de9b8-9b09-4c5a-88a0-7ee327f6a341"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debe0afa-423b-477c-b4a4-9dd610c117b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe2f41ab-46aa-4e64-a5df-8891a70f0e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9620b5e6-9b84-452d-87c3-2c4c4fbb9685",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ffcc72-bb95-4e5a-85a0-461c1b19ec0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c873a67-915c-4625-b3af-8d0c176c0a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c61e2ef-34d6-46c6-982c-9cfb2c5acadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "cf837318-959f-4273-9d6c-8c4c5465e2f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98752d5-f7e7-4600-868c-9a29c75edd9b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85cabf30-254f-4b24-93f2-6398e15aa44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e93adad-771d-463f-a7a3-9741941bfe97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d6137e-c6bc-4e2b-8049-21f26f0e42e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "da52e7c3-1104-47e9-952b-d943cdd52640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f6d624-f08b-4f79-909f-4bfb7aecff20",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a298771-70d3-4ad8-9c62-df6462017668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42a2c7b9-4e8f-4c77-b50e-f79d8db189b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64066d58-d71d-4c7f-b3b1-d05e3c8df3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac09b3b-08e3-49dc-a521-7710b3e9c2d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d513b69-d583-4bfa-8a2b-1591801cc0c0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0984780d-25dc-47d8-8aaa-71ac52eeb42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25cc4833-e719-441c-b792-0e16e2b15cd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd64554e-6b7f-4268-8af8-b6f6cccc7347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "365cdba7-0710-4804-8ffc-7e41b5dfff7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0e3cdf-b53c-4fbd-a02a-96657bf778e7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7706a1-3956-4fe1-aae5-41b0130e3054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d09408-f215-44d7-9546-1a30b5e0802a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d3e962-cd8c-4d18-b176-90ba2039d6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8201e83e-9193-4fe7-ae7e-2041935d9aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0eac8c6-497f-4e1d-9901-52cd02fce886",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dbf1b87-8f72-4ed5-83b1-77d45e5d8cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5a2d539-1644-496c-8280-97c8ab4bb180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "837640f3-5843-4a02-a5bd-7ba9876a14bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cde7b068-3112-403b-93fe-d9eff88c88db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e122a37-2e85-4b94-8fed-2efca41bb19c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aff6300-1fa9-4de8-a0ee-5409848bb45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b45d9b-69b4-4bc6-b275-e5ddfe155675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae393fa-a07d-4219-8cc1-268a5e707181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6315ea27-7cb4-41f8-9b8c-3f380de76fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e5a469-44df-4371-b575-a0fc195908d5",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3bdbe8b-f0ca-47b8-8620-033ac6da3d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecdc17d-e26e-40b4-9738-a238434d98b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301e4661-f630-4624-beba-733524122ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "67fb769e-9362-47c9-b2f3-94d2e4dc2a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843b0a5e-2133-428a-98b5-c4d01c0fe2be",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f24286-c012-44ff-b5ff-b59d9c6b08cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010c4570-e06c-4d5e-9b2d-b0f32e950966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c6f82f-5dda-4837-ab62-560068e3b33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6868d20d-2634-4302-a3a9-a4be0077e3e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1faa3f-49a3-42fb-b10a-7555a18b8d7f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64111a33-e1cd-4442-ad61-f23f39f17ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b5d6df-0685-47ec-bbbe-4101a51ea75b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb5e684-75e3-4037-b5bb-dd3498011639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "06d6b85e-5cce-46ce-97de-ae24961c9eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3acfaaa-4237-4089-bbbf-27c437dbd792",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7196c737-8741-499e-944f-0e8448b9fbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ffaf069-ccd0-4f4d-ac4f-901892bb9be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d857c7b-08ae-4caa-b41b-50bf8a01c0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be9d8b0b-81dc-4e87-a9dd-202b503770b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bf7db9-802f-4cc9-994c-a6caab8bc82d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1624129-581d-49f4-98c6-7edcf4f5bcb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ac0848-f733-4e52-a8b4-11a161f8cc76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dee0e7b-b4e0-4fea-abe7-3e9a54a854d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "76091cb3-991f-439f-91a2-1185a424dbe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad0ace9-c3b8-495c-a245-10c823c3a1ad",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4938b76c-fa49-46c8-b003-f18d602a8e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0caf179-e9f7-46d9-9949-d17e0bb8d6f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387331d7-879e-4bce-a02b-31eeabfb50da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "729bb3e5-060e-4562-81bc-c8519f23c755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f59b2c-5a3e-4535-b422-dc402916ac33",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d7e3313-cdbc-41a2-addb-81a12c47bab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f5508d7-fc98-4969-9528-05bcfb43260a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e15dde-869d-41a6-892e-778d117a65b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f4ac7f8-53a5-470e-b0b5-6f70d94ef525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3f26cc-ff23-432e-9012-af8c1afb5b46",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8709739f-ad8e-4553-8087-046d8c68599e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ad36f9-ef04-412a-9823-54c04cae1f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2afd5023-40d0-4eb1-95ba-da83686b37dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c325f6f9-2e16-4ab0-b04e-d1e197de2822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2c0d6a1-07ce-4169-89b6-7cddfeef2c78",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6caac7eb-99e8-41d1-91ba-3c29996c7d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ada06a4-e51b-402b-9f9b-5b86bf003ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af678e4-744f-4d8a-90dd-6a5f44bdd6aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e8a876a-36f2-4af2-803c-3d77e95f8287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa99cbb7-d6f5-4314-a82a-eaabe25be995",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c74ce80-3e88-40ae-9a46-22be15207205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cfef6f2-d41d-45a9-b576-96388dff678c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a51d39-bff1-47f3-9623-f0fd10901707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f25b0841-791f-4c6b-b797-7466e5b9bdb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7db83eb-4340-4664-a0d4-f0a65126dae7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38870b40-cd5a-4748-a2ae-19325cbc5515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab6fca69-57bc-46d9-a436-c2eff9ef18c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d26312-6bb1-45e6-adad-0d4bdda5432c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "77717e99-9a23-4b34-ada6-e5a18216856e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2fdc30-c17d-4049-916a-8439131f8d74",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0cc9228-eccd-4386-8a60-951fe8b986a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80a9a9b9-81ca-4ac4-8cf4-d47cdafc213c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d44434-fc24-42e4-a6c2-771b64bed9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "86dce61b-68ab-42d2-a407-fb30dd4f5ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ad4d77-fea7-435f-b8c8-8432c949d8df",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70368860-0626-4ca0-9660-d07778e7e005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdcd3b3d-8392-4088-986a-c965066d506b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a4ffee-dd95-4518-908f-8249f62a5057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ebea779-f5cb-4dcf-b7d2-42f1635fef90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8d2114-decc-48b5-ac16-65d3af59b157",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d182dc01-9b99-4edb-8304-233baea321a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2654034c-28d5-41c4-a058-aebd5e5b5e28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbfb1191-6aa0-433d-a32d-5761347f21fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c77d46d-6366-4ef1-967e-8c13df259b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7363cb23-67da-4992-8f41-2a657169201c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21453e79-eba2-4147-9455-ef4a4b5dd9be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21d19dc3-b079-443c-832a-25306dd96189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2f693e-9d35-4c83-ab9f-3a51f375e39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a3dc3dd-3759-48a4-8241-f7ab748b2b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0324db96-0522-4307-8e9d-b274e96ab644",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "282b86ee-b28c-404b-8f96-eaeabe2f02e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fa43200-a50b-4271-a336-455be45cbac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8ea382-d8c7-4991-879d-3e509a64767a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93b79982-319f-49e7-8692-9220eb2e18d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8054d298-d546-429a-ab03-a7754b918c40",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e275b0-b120-478a-9e15-b20498a35d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40b6fb95-fd2c-4d45-aca6-ad2ecf3cfa68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f626b2f3-c250-41c5-bb48-a3867b5c6de5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "34cc07b2-0edf-48d8-b1f2-6598f2048447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217a5578-a12d-4acb-a968-51e461ab70a5",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10362313-6332-468c-bced-82d13aa004ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626be635-3183-4d0d-91b3-5f9d409ab6fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522125c8-9904-4731-9999-2e528139d8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34d6d10c-a8e3-405b-b8cb-469a200a2f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c23d67-326f-4676-94c7-77c2c865d32d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf86b7ba-29dc-4eb1-9ab3-c3bfd94ca543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8070a3a-795b-4956-9c16-bbc723523f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b50c2f-0ee5-4adb-9289-6e0659702f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d71da5-cb9e-4646-889e-b7c152689f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25d3a71-e14f-4888-9ae2-e8d3e28c5391",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa96fbe-774a-4983-9702-75fa79d92400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3a6ef17-43c8-4845-b439-fd3387c6ec30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6998e9-2da7-42be-abf6-625e3604741d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44a8dcc4-f866-4245-b625-b110a2b251d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c3ded1b-0cf4-4635-b890-06a531da2a21",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b269e963-c7f7-4aa7-8a4b-bb5b09c56e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "935daa24-58ff-4b07-9f23-7a39662a170a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2e16bb-f0e3-41e8-b006-174d0a24017f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5920fc60-40c7-4f93-b5c5-7a96714e16fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da66e83a-bfee-4bab-bf09-d8a7dc39f051",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74830683-01c2-406e-8c4f-aa30f0d1810b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6ae271e-2168-45fa-b671-a8e8cc9c7456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f910a4b1-8186-4bb9-818c-e2d76882dcad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9706b93-1924-4c01-be2e-0c3ae5606553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4969812-d19b-4067-995a-0f309de8ac53",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb57570-de37-4225-bcda-c9d3df2a6018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c253b5d-ded0-4923-869c-3ce920f72603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436724b3-bf3e-42ee-b857-938a043eab30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd421d4-de64-4d00-b23e-0968abd8c6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab80004f-dd78-4fd7-9f9f-bd2ef1950f63",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58649073-6785-4470-91b2-a3cd78e9f92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b8c2fbd-e928-4a46-9708-e9991d9626cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b53f56-f0c7-4ec1-ae63-80aa45a12d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "70348440-8a5c-4eb2-a220-6ee279141db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6054a4fa-3490-4ad0-a181-69d3be0e7070",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae6208a-c214-4a1e-9c83-9d5fcf6c9d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a032ac7a-9ad0-4b75-8dfb-0424470bd921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eef7241-170c-4bdf-a48b-97b09dbbdd47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "23a9f4d4-b6cf-4ced-916d-af575203a62d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46bf566a-b997-4f88-b9a2-27a64dbb8116",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884ca6ef-90be-4722-9f5b-197c8c527a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a932b4a9-4987-4d29-9545-37f222b398a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb099a29-aef5-4f27-8070-e3b5d24b3344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cce5b851-def4-4df6-be61-b8769ca874a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a15ee9e-967c-4648-aacc-e1dafcc6e609",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac43e8c-a98a-4d68-97ee-bd7aee55bec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d0c91c-5aa7-493b-92b3-3f99a2bb7ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1554fa8-1ad8-4619-a1f2-7109987f7c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2acc2ee6-1d62-44d5-959f-d19e1446b860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801d2ce0-72c1-47a6-98f3-312b39a4b638",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ec3be5-304a-4b4f-997c-f67ab3f05bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2509b4bb-891f-4ff6-962c-818775fca9a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9695e6c0-bf3b-4cbc-a483-fb641c134e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0885670d-5e49-4d9b-a014-146d3f575e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1addd31c-ace4-4d7a-bb02-5dcaacc3617e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7f92248-c77f-4b8e-9eb5-b3a05e701146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0934ac-77e9-4ea6-9a79-c8fe3cd4f936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e4260f-9c18-41ae-8341-991de51fc23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "834134a4-2119-4aa5-a8a4-e02ed8678d3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d08a767-c6c7-4c39-872c-8457b0f1f084",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca3e523-0d5c-4465-8bf2-d5450634a1b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c2f01c3e-967b-4814-9ec7-540ca26e7059"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6403a515-6127-4ec7-8e4d-095caeccf032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a210b2a-cd0c-467b-b5c0-52f43e6adc5f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2c9e71bd-2652-4aea-ae04-ce1e77ee9d57",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae1bdb25-e8f3-4a28-afde-add8349edc44",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2582d73-6359-4d43-9cd4-a00aee44ac3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3c3efbb-b5f8-4f72-84fc-699a3232e251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20e47b8-fafc-4946-b47f-dc8b1a0377b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e599d01-8d8a-49fc-a658-fb849dbd83d9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1dcbe90d-50da-4927-b0c6-d4b08cddd9e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff9d9e4e-873b-48fe-9d93-0021c0610108"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4599a5f3-84bb-4d31-a93e-6828412c4bb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "125b67d9-62b3-4f1c-afa0-3c03c2e50645"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9a55a718-1e08-48e4-9226-5af95e69a33a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c400161c-9f6f-41bf-868a-7061815d0388"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ba245cba-b715-4d8b-83c4-9029c4022eb3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee91e1f0-32d9-41c1-b675-2752fcd10e53"
                }
              }
            ]
          },
          {
            "id": "a4e9ba93-2d0f-45ff-bbcd-3a5877eefbdb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "062ef7ad-58fc-4279-b5cb-b7709b5cff34",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "f32d25e1-ede6-4462-b17e-c141cd40eeb7",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbbf326b-4be9-46eb-a44e-c270b38c86b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0dad4515-f4d6-424f-87f6-e4c6aae2fd9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d1245f-8a86-433f-9695-d5d2566c4d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf90df16-6507-416b-83c3-09eb6354ef85"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "03e1abda-794b-4707-9936-b17a1041f677",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25b42b37-8f13-4a64-b5ee-b4c0cd168acd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b13a9279-4dfe-4bb0-87aa-526c520ee232"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33fd7555-da23-42bb-aed5-08f0bc241e4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8ce6e0e7-b010-481b-a939-762b6873a079"
                    }
                  }
                ]
              },
              {
                "id": "7abe7bd5-2566-4b00-bb72-2504ddd10b69",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af86c3de-1a23-4650-af23-fc09b4ef2341",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0e8ab816-5e6e-4a9c-ae19-84e4d8295169"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80662773-2ebc-4bb5-b7d0-33ba0db5c41b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c4901cdd-f3bb-4659-9177-ba6f3c8908be"
                    }
                  }
                ]
              },
              {
                "id": "2ab4e7df-ed7c-411b-8393-687f80430493",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8db06d9-dc93-4c9d-8004-49a422a266ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02ff5eb1-305d-4b06-b3d4-07159483a8a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3b21990-c385-4b5f-8d57-00b85502e609",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7ab576b0-795d-420f-87e2-34c58581aaa8"
                    }
                  }
                ]
              },
              {
                "id": "e3f08faa-aefe-4cac-a72d-dbc30cdb6138",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a64248c-117c-456f-a6bf-336d33e6157c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c316f33-751e-4e9d-888f-531efb1a004a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c80c9c1d-68d1-454d-b078-5e77e3780fbe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "90c2d7fd-d2fd-423b-ab3d-c08be35d30a5"
                    }
                  }
                ]
              },
              {
                "id": "52d9212e-6a9d-4864-a2ca-854065951ec9",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec2b2c17-6b88-4ca8-92df-dc68e5618c89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74f3024a-7df1-48cd-a34f-dde772777ee8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f162e8b-7216-4b1b-9299-386ae4814f53",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "db4f387d-2990-4ad9-aed0-7b5c225dde18"
                    }
                  }
                ]
              },
              {
                "id": "42d5a2f4-f06f-4d8e-91ef-89b2ed95aead",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d20b257-e2f7-483a-ae2c-d668696d4c04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6febb409-909c-4f09-9204-79243cb37f4a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e0d9638-6101-4cca-9557-06a2dbb95689",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9bd62daa-b59c-432b-9f4b-44d20747a7da"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ccc0bc02-1ad4-47d7-8b3c-acea5042b0e5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "aec64b15-3e36-41a7-bd82-5f8b5f79f568"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3ef77028-cb6e-474c-9262-b31e6c0ca2cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "288425e4-6189-45d7-b520-7edc27583553"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1a3a86f-c20b-4cd4-a75d-7d5e16641960",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "78a5bcba-e874-45b8-bca3-bb86056630d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "42864474-6005-41f3-9065-ab2150a0bad2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "61e03223-7cff-4b27-88bd-8ae154d2340c"
            }
          }
        ]
      },
      {
        "id": "0eeed15e-07cb-413f-abd5-5c34227f1608",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a32adc1a-cd58-48e7-a7e7-7f32b8a7af35",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a9d59e7-a79c-4705-8680-9b1d0cc05672",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9e73400d-58fd-4e9a-baf7-0bce5f873d75",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2006002b-1d7e-4b9a-88f2-ab4f88e5f729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297efe0e-da00-4ae4-9e4c-a78617d5f164"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a283f31d-74a5-4abf-8b9c-f56c240d4f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "69d6ae41-ccff-422c-8db1-8ae2ea7af608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26202016-b5d2-41aa-985d-0f8768be7d7a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422afa13-07c7-4a0c-8b7f-f73d9c093648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b4ab79-4627-44af-9088-99c0eb4f1151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d8d3a9-a9e3-4695-87f5-eadc36c8e645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "53bd7b81-c329-49f8-8336-536b1b90448d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29965690-acd5-4c65-849b-98acf664f072",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe125e6-8b2a-4459-bb71-d0e9584730f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa4aa8a6-2613-4af5-90d1-84ba519dbed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb50ab3-9986-491a-a818-854f9961aed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "172ceeac-8201-416c-bfd0-9647e5756b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfa1513-7cdb-45db-81ca-65af51e86fa0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "037302fc-66d3-4eae-ae74-1e163f18b687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f313172-5d99-4542-80bb-18b12d78f458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea838f1-fba5-4c07-ab65-e1caa3e9147b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c77fa3c3-d329-4078-ae87-6179a747d764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92ed5a8-2792-41cb-a21d-918160e518dc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f1bfdb-53c0-46a3-a81d-e27262a6ffd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74e0666b-7d03-4c1a-840b-f0229f1ef413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b658260a-1aff-49f8-9ab9-33398105fe23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "84fbea36-9f59-40c0-8926-6a37897da67e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7328d7-4793-4704-95fc-efa353f07c3c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ea7880-ecb1-4998-8aa0-907e9acf319f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3743be9-8251-426f-9261-1949a27f6c4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcaf899-3c8b-48a6-8823-85c1cfe26ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57c75818-2384-47cb-8933-15b34826035a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9541814a-553c-48d4-a1cf-2d85f1fa139d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "279784fe-0da7-42c9-803b-1ce89f0ee472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a1956e2-d791-468e-af23-d03aad9a04a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "770de683-f342-45f3-bfb4-daf030c6883c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "edb798a1-6088-42d5-84be-3e0d145b2dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad49c72-6ed8-4871-8036-62d17e08519e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "008fd9f0-20ef-4bb6-974d-4b36d461446d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba2de4a-963e-4ccc-8968-4f58a1b57718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062ad76e-48db-4382-a940-9fe2a6ed1c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b293821-c83d-45e8-a6ce-4ee34fead3ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8664c3ba-cc95-4938-8ce2-f282699d034b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd251a39-5811-4a4c-bf1d-b7ee1061411c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea355658-59af-4811-8151-5c0c2dc38ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd9f664-e73c-41a2-a965-692882418c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ef7fee5-a8d2-4097-ad00-005f154f6fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caab70e9-06c4-4660-9d00-ba8a1313dc9d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b9559e-b5d9-4d2e-8a8a-81b61f4419e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945b13a1-6dbd-493f-abaf-a0e9675f6958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17504312-1e1b-4618-9c6c-5b32b8ef03e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "573b80e2-0cb9-4ce7-944c-d9528b7a50c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c768f5-5c2c-4fcd-a0f6-0dadcc365526",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa92b122-c6c4-4971-9b5e-c761f5f4d304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c29c4af-cdb1-4f95-946d-b481509be2f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9b2142-4ba9-4b73-8042-5f05051c521f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d03756df-ec3a-4fd8-b0a7-c727d4909d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32841e63-b7ce-45b1-a6fc-17e29cc1f974",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211117a5-bf15-4649-b935-18e0c6592bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe69443-8f24-4fe6-86c7-5789fd2d6770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a452c608-f227-499e-bf8a-3993fe62d688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8929bc6b-dacd-4ca7-9f40-db065ea2a49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55410b01-145d-40a1-af1f-076e13ccb35e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28078d76-7900-415c-88c8-c1ce9c070b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90a3771e-144d-4d2e-8479-2944ce99174d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ccc0c8f-9f35-43ff-b107-63b2c0d8cc64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac42e257-59c7-4b2d-89d8-7b962d5db83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e5f9f0-ce99-4ca8-872e-a8c2a6e688d2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf01354-715f-4b1e-b13b-905f524c2f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca7a172-7cbc-474b-b4a1-8c3980c65298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01224be-b3c7-4886-ad75-1b8bc7fa6b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba566cd-9f22-4e0e-ae89-a9a0196602e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ab1a00-9fdf-4878-9543-0e87b48d1772",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a604ea32-2b64-46ab-893a-45d489d242c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55dcd02b-a164-4d22-99a8-f333077cc352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f04738b3-5d48-4dc7-adf7-21c038d74d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5103c8b8-d07b-42d5-93d8-82040996ce39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79b76fb1-24d1-4a43-8881-fcdc388dfd71",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e75740-5297-4f6f-84b0-272ec39d7064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e13b99b4-0959-4e0f-a35d-3641f8f63ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36fad49-ebfc-4d4e-bf80-644eaebb662d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "53681ba7-05f1-4a1e-9bef-200583bb7a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9798c072-f9e6-457b-9978-476a68106932",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded98a2d-4a5e-42e8-a8b9-ed19629caa72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25f3f5c-5c04-4f72-8c0e-6ec2c5203447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a466ea0-8999-404f-a9ce-6835d9a023ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "918a3e99-30d0-4101-be4c-044bdc3f308d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c704bbb-5e1a-41c9-ae70-5588712b3046",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd46956-e8c9-4b42-8045-961af5677ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "762d66ee-859a-41b7-bfb8-1e20d0d9d4a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1803e9b6-a1fa-4873-8962-fc543eab971a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "efe56125-bcbc-441b-8b81-ceb96bb37cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1346ed-d779-475d-8397-4b8a2309f7ec",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36cc2f1-475d-4eb7-932f-b06e5cc3dec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "514b55c8-bbad-486e-aa22-f43297eaea65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae206cc-b8b3-49c1-ba9f-718a5a347e79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d95fa240-3d90-4032-822e-db8c18da70ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd29df2-8b09-4050-99b5-6b87dc5c45bc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdedeaeb-413e-4c6d-b10c-521343f8a40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3112959-8c38-4379-a892-d9f22909af71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d131b1e-bbc5-4077-8307-f0a10bb4a4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75293791-1447-411f-93bf-ef9e6c8b3317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e27311-8a95-465c-9fdf-3a4fcd7b1f86",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0205ae6c-4932-4c3b-8961-088fa0683dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b94569b-9171-423e-b15c-9e6fb8fd6b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9b9cf4-3dbd-47cb-a663-00accae98ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4205aa7-e8ff-49d7-a485-0f9d64de0eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d190a8d7-6b12-4c70-9272-e886439096c7",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ea7f56-ca22-4cf8-987b-220284d81d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca267bf5-3257-40c0-9845-b75691d88f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a39259-856f-4e8e-810b-3abfed6e4746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29f17ea8-874d-4daa-b5ae-84d7c77b2f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96542234-9479-42d3-b7a8-4bc9f33ee89e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9626c75-e911-4da8-ba4c-6d5d0aeb33cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632a3fcc-90a9-4c16-9704-e301b0386abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ece504-33c3-418a-b379-3aefb196c83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abc0fdfc-92b1-4609-9504-4a755fcf48c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e68459-9da3-42a6-81f4-cdaf0f414c51",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e170dd-ec3c-45d1-94ac-d0ec8a552585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db19e1e3-4c30-450f-8dc4-80ae2daf9fe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99a49ec-d768-4244-a841-5bb64264bd23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7912409e-b4de-45ea-8599-c630f28da3ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e3e114-f7fa-4671-9a65-72d6d716a20c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c213d4d-e15c-410b-a01b-5b2ed77ee5a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e55de142-c02a-4254-a6a1-dfb72092a9d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9e6073-61bb-4575-ad2b-0ebdb701d42f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5de9b4a-9c67-47b0-94c5-33fc808532a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64213669-a921-47e8-98ee-ea78755b7965",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac089f5-058d-428a-b820-6182d5ee854a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b494d9cc-bdfb-4e6c-b499-6c09dcd39877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1b87b9-91f0-4067-ad2c-4e077aedc282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05bd948e-b721-4b32-94a6-1e9768562541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2af5636-89ea-4d45-9acd-b11423266d1a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43e942c-6512-42dd-89e8-523d48aceb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb73fc7-4ca4-4db7-af5d-91e1b309e9c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e881633d-6ac6-4bab-83ce-5ec730d91e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "472a608b-39cb-4e03-8be7-653a3ad9e29a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb492deb-c1da-43bd-84d8-b001133661aa",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b133c2f6-7ac2-488c-9dc0-623f077e3e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a170d8d-00bd-4aa9-856b-a58e1dea7113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737e0266-c628-4349-ac5c-91b088ec546c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9989826-ea93-4a98-9032-2d695f04b9a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e88332-a458-4725-8713-83d73a5c48c3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a58fb6d-0f2b-4cfa-9a87-47fc8838b7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e4b777a-5584-45c5-9adc-feaee0164dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7f4cae-19ab-4c65-aee3-597d782a5093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7521ced7-6157-428c-9e14-633c40df59b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1e80bf-34a5-44a9-95c9-9e90a42aba87",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb89bbf-b12a-4d43-9e1a-65867b65393f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d90542f9-a61d-46d4-b1d7-b1b31ff4b9b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d7d9bc-b2bc-4971-879b-cac6032a88b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21a2c4a8-0ebc-4220-a464-65f72f8ef6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b79b106b-18f6-49e3-b350-6052b2ccea9d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6ccc9e-8771-4d78-8a55-c00c1134a2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b328aa09-b528-41fc-8eef-d1e702ac0a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98c3573-d4da-4e7b-872e-bf881b2261df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a976b0d4-99d5-4cd5-a6cc-a66055f167a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8970bb9-5c7d-472c-968c-e49ca169edeb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "535699e8-305b-406d-916c-25ab10c108f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c3a6363-ea43-41f0-8c9d-33349a405874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4228f95-9213-4812-b97c-120e85be42d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90fac993-87ae-43bd-89b6-7ba0d4adc25c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d20e4348-d6d6-46d3-be66-3a2f9e5c8f88",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "06a011ab-d110-4593-98e7-049ff2375513",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fb6f3e-b9f3-43e0-869c-7db0dcbbd51c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "be202447-f335-4aa3-aab7-e4dfa31fb225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c830378-59a8-444a-85e3-2c57d792a2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4192fe1-8bc6-41d5-8b6c-d0bf18057762"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c11075b2-6b42-4ba1-be78-304db515e5c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5141c4e-5c40-409d-adf9-4eb730e82d7d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4051569b-bc54-4081-8c6a-c89b114a80b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a84c1985-5ba1-4e82-82bb-d7250a84b7ff"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5cd1486-d267-4892-a000-8d8bcb864375",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "88b89c2a-2d2e-4e32-bbe4-bc8356f0b627"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2e67687-c263-4656-bc4c-215526c0429e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d766cb7-f288-4c00-97bb-323db91a72d3"
            }
          }
        ]
      },
      {
        "id": "ac6fd892-70a4-4c00-98b8-3dbc79bb1693",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "3f91902b-4b01-49bb-ace2-859274879b60",
            "name": "Negative Testing",
            "item": [
              {
                "id": "417b6066-6ae4-4940-9912-42ebaaf2f3c4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c37173dd-94d8-42ef-aa38-8b941f7ce210",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32af0b4d-e166-4de5-bc46-750370cf54a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "112eef07-d856-4598-ab09-988711b530e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f93e817-c329-4da5-98ea-363300ae19ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "595dbcdd-3200-46de-889a-87dcb4314194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb986f52-6d31-4aba-b08b-1881e7e70daf",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fcf660-f2ea-43e3-a773-a464a0c11fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f7c65a-7e37-4330-95ae-3f7fef394517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c42f65-dd1a-4234-94d6-12be3ebd428b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1db2d296-ed5f-4807-8208-70e291ec8043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8cade7-e0dc-45b0-9f69-c71402c57019",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef5fd94-f0d7-43c5-b2ab-6b478c7b7818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d12bfa45-775b-4c56-8b4c-34627c5ea16c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe8edf2-d3c9-4f51-b0a7-5f00f9d20c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6cfc62b-1ebb-4e58-955b-e8d2fed5a446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a4e6b5-8229-40cc-a2ee-19111df62f7b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baac8daa-ca15-474f-a368-5f668d212ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "905149ea-da5a-471e-9f3c-a90442d219f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2bc6946-3d83-487a-9977-df5007df812d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f452122-dec5-4260-b640-027eb3cabdcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e017a22-3ee3-4ac2-ba43-5d969bb83e7f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6796c1-5ee8-438c-b118-c855be4b0534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb62a72-c221-4421-be7e-d36d1c9b3105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca6bb11-b19d-4c89-a365-00c1b3471f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d55c4bb4-6294-4186-97b6-f55a850708fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e9c5fc-3d69-44a9-bb91-da784dd10c90",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b167c5-bad5-4f4e-95e3-e419fa86626c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92f383d-c096-4262-9bd3-da685a86ca80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5d93c4-0e48-4caf-bceb-bebf96297af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "90a3d6e2-f56a-4e06-87de-f840cac1da6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e42f96-a4d6-4614-9179-d1e5148712f2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c43a8f7-a8c7-4ae8-ab5a-6d31bf76b28f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "964d779a-b43e-440e-9cc7-431d96360295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3464c18c-7a7d-4400-8208-772e111583ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "31bd706a-6598-4987-99bc-8381f54289e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c999e9f8-6bdb-4638-8420-f9a18dcec5c7",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5722de9d-6e48-417e-90cd-fc1923f676bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "938d0b83-87d9-4b78-9976-a6c93a57e40f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58412f13-66b7-4213-a65a-44f9e64172da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7103a2ae-ce06-49e8-8ff6-20a881db65af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0dead80-8308-4739-8cc4-73ed4a2e40bc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99847f85-d4f6-47e1-a5e1-248d3e6f6aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c49d12-6189-459c-8301-511af81aef18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a391541-9286-46b3-a73d-35b9407911fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "17572e9c-575c-4609-aab3-8fc8e115ddda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cead72d-a968-483b-a39c-f7fdfffb4d90",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9fedd1c-dbe8-4cf9-bf4f-fa405259b7db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f5d29f-05ae-451e-9520-cbe093f290b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f575f4-3722-4f80-b1e7-12280b930a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c608fb9-a91b-42e8-81dc-6b34ea3c70a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c35648-4cf4-4e0e-a1ac-74dd5b32e0a8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c132c4d5-0a30-4f3f-ad38-b99491938c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd6c6cec-0745-40a5-af95-13f820657cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4958ff39-dec7-4d7b-b3d7-85635b20dbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2d0bdb72-5cd2-466e-a594-f8657c153369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d45d86-0b55-4832-b810-5ac2619dcb7e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faba0ef5-41ce-4862-98c6-962342a086b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9ccbef-a799-44c6-8e2d-5d629a32cb6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91664bb6-e8af-4665-970f-c8cc90557311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dbe74d47-7782-457b-94fb-01849d16ff9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec9a83a-ef23-4a4f-8922-ceac09b5d56c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "090849c2-80ef-4581-9943-147c37a95b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0e670de-b412-4d20-be62-0c50bb9eec4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b5910c-29c5-4e96-81d3-9607724a4e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "48dfcd15-269e-45bc-a691-47850b1c217e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48d2de53-4f49-4757-a419-2e8478d4d833",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f64504b-6b3e-4864-b6e6-25478f7481fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec0167a-bd2c-4b80-a8a4-2906527309f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe7baac-d7d8-4c8a-b00a-95fa90750f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "935199b4-3645-47c2-a692-7d6eec36eede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0284fbaa-e987-44db-801f-8c880b2bfeea",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc86a62a-0b25-4241-b53b-623d01aca4b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "993c93b1-8bd8-44ac-8dcc-886b68ae1a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5276f2-6ab8-424b-b61a-2ea1e4d86506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "47b36065-dd11-4e6b-b0de-3989aa0a18a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd64aa46-8312-48cd-8017-10c3dc4e526a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e012db2f-db1c-4a8b-b4bb-2869a00393e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "061c0045-2ba6-4e28-b3de-300bb450243a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592ab1d1-6f02-402a-8d64-244577d084d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c3963c-4fd6-43ac-9af0-32e558870520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4086d089-8f85-41d0-a4bd-d5206c96ea5a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d0005e-c983-4303-bbfb-ed2b9863985b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0145e67-a515-4b2c-a9e6-4093c57b7c54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548e5873-a43f-4362-9e39-bfcd83bb860f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d79e656-61b6-4add-a955-6becd7b9af17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b263193-14c5-4f5d-be20-ac46dc1d048a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a19afd8-d0af-4bc3-8851-78ae2c629970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "162ba7ab-7185-440f-967e-26750d7fa23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60736541-c8c7-4cb4-a131-265e3dc7e3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "39bacd7a-a0ff-4ce7-b465-ded1d1e63ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf2ec55-1501-44b8-8955-cb72858510e0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b82634f-c8ab-4228-8ea3-9f5983427ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1426c082-8d0b-49a0-9eac-19a877ccb750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df30986a-a709-49bf-abee-6f83bbad10b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12ba3ec5-6025-4eb8-89ed-25d287684554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd094867-e5b8-4bcd-b522-0234fe910851",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d471477-6ee2-4a62-b1fa-e0e26247d308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ece8247-bc98-473c-840d-1cd79ba7859e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c81a58e-1aa3-47dc-8f66-81890526318d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c99c09e-3968-4589-982d-1edde995355c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d17486-ddcb-4be7-80a1-f4d59600430e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d77cd37-78b2-42cc-800f-74784ac99f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feb2bf47-e687-49fe-bb1e-0fc5789a76f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9fb44a-1bb2-4b65-88ed-d9d69af3092c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52bcf1fa-d5d1-42f9-8bfb-9f958022082d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20fb51b-ad3d-4eb7-9274-113ed5298dcb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac72463-53b2-4236-8273-9f175781827e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd4194c3-c2f6-42a7-a180-fe04c13ed6c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ae3290-1f3c-4a0c-8187-5f50a7410355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66a28e73-13a2-4f2a-a588-382b3131193f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bd8f84-84a9-4ac7-92f6-900c65ebefcc",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e94247-0eb5-4369-ac89-95285284830b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de232517-20bd-417f-ad74-aed797c2e174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed3ba21-cbec-4dd2-b3b9-a1a2e6a16682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "722c763b-fa05-4b7c-9f85-9f285f1282bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "435575c0-99a5-4b35-a659-c0841e1fbadc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe446fd-ef04-4a6b-ab26-59a3e2494f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f27bda4-3f9d-43b8-9a2a-356f9fb642c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b96a20-46a9-42c5-ac2c-7c9661579120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7cccf79-11ad-4bdf-8518-0fcb936c5d74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08b1711c-d546-4563-899c-67d4cf620881",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d5388b-80aa-40ef-afea-68621a4dc75e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77255819-6c4b-4016-a01b-296eb92eae26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21dafe61-7e93-4180-8fbe-ecf0642a4284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06ac5d6d-6315-47b0-bfcb-9030c2fb8048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa9c0f7b-7c28-4b78-ae34-aa8847d3d8fa",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1b93f2-004c-40ad-a59c-73980f6ed4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3284f7bf-8f11-4373-b5e2-3d02325f6e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a32b9b-d7d2-41b0-a8b5-926636e2fc54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1da0dc0b-90b9-46a2-b137-0b223b5d8a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e3bba31-d557-47fe-b711-78493eb05307",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "128aeee2-7f13-483f-86bb-805ec661fb1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f10ac85-1118-4396-9122-cca37fc4af69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e20db20-9caf-41a8-9c2f-457310dbf5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "426356d8-9eb2-4751-bdc1-210c84ab03cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6671c847-bc66-46b9-a535-706c38c80bbd",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be575736-9cf8-48e3-af00-4503b421ce4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9164df57-e1d1-44a6-ba21-13f9c9ce8d47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210ca7a7-1be5-46d5-85fc-8639c13e0c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6833953a-99d7-47e1-bfb5-c93c742c0563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544b1601-9141-41a4-8814-a40c2e2a7c9c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27dd5bee-e6d9-4bb5-8d29-3faf62578f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2fa6a71-b8cc-4de4-9c9f-499cceb92e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c86fbd3-aa1f-4215-b5d7-199566d7bb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14569c4d-934f-4fb9-97b9-abd95fd3cfce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fd0bd0-e964-4de2-bb6d-4235743b8111",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fba7c21-fa69-42fa-a3ff-a936ecbdfcd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59631591-7714-4fde-ab84-3807a9cb3890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a807ea-9f10-4788-a36e-f88d1c778437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3027810a-2669-44a2-844c-7f11baed5094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752694bd-c4ae-416e-9679-6562df13b5fa",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01018870-8edf-4ae4-84a3-626585ff73ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23682931-0465-420f-b34b-5d14ccdf760b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f72a940-49ef-4037-80b0-8213db255f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37945e8f-ff68-4222-a26a-8e3292a943f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547821bf-5c23-4033-9956-f75794ae1517",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e30844-e6d9-4938-8f32-87883dd35ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38cd94c2-2a6a-4bba-ab3f-45c96b725e0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb516b5-850b-4f3a-9abd-be961fb213dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73b50d26-a326-4e4b-82d3-43d413204b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0456beff-b5d3-4f44-9a61-1ecf0d970f42",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbcd3681-7d00-43dc-a5cf-8c8d59eb0cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b84df64-cf8c-47be-b8d1-d6faa609bbf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13611ddf-9d1f-424d-a13c-542ecd8cb35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f56dc190-6982-4582-af6d-750ce27da554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2386e29-04e2-4dcf-86c9-7d6676c1dea7",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95dd00df-abb0-4964-80ea-8bfd6b596f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c6b6dae-0c21-4421-82cc-2f6122fc9fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edb5a544-bfb9-43a9-8d16-acd7ce26e659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "357e3d85-7f06-4e19-9bbc-8b7ca1145847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74935754-674d-4e11-b8fd-f7f9f2d254da",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2604ea0b-028c-4441-a698-9276efb3337f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9283e2c2-ee46-4f3d-9e4f-937d6614326b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edf7f57-3de5-4ef2-89d2-0b6b9df2d77b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "831f9bea-1ae1-46f1-a86d-aab64c1f9336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2339da2-6b06-45a9-abda-5673d379d2ea",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5401f394-58a6-4f08-9f52-d503e4cf0933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efedc8e9-316b-4483-988f-70d1262a3e2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5ab565-c12f-45bc-9ff0-a6fa8ca28494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f92888ca-6c36-45cf-8e17-6c6b43c80954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fad253-87d8-4c20-8878-7f1de8d1fd53",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "200bc209-0d15-4584-96da-b3d726bdd017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3c2c8a-4d46-43fc-9d82-2c7485f6526c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0415c487-6428-4718-839b-49a7d93cc6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d82bb3f8-af53-46b6-bcf4-86e8a54928fc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2b6f335d-88b7-48dd-90c9-410c4b8cdc06",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52b72572-0478-48d3-832c-5ce464288a3d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653dc499-3f92-4cf2-8458-53154fea364a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "26dfed4d-f316-463d-bc67-4c2120969a64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33e0795-3794-465b-b128-ac38d8441423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7ea99e0-1c67-420b-a9bc-2017842a956c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "253e41fb-0203-49f3-908a-45af0f74d600",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52656e4d-c8c4-46a5-af4d-ff2ee4b400d1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4577b16a-931f-4a04-a830-011b75a83abd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d456231-df99-48ce-834b-b7d6efd9da9d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06008250-0767-42dd-8c85-14532279be96",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "747a3547-4ada-42aa-a3ce-aadd74ab1899"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "755ab53f-c9f6-4f7a-bc52-a3cf623cecc5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c88c6987-e392-4739-a5c4-1cb6838f747c"
            }
          }
        ]
      },
      {
        "id": "729393e3-914c-475c-945b-764ace63582e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "94dae786-8134-4729-ab63-69d2e11f3a31",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34921b42-3aee-491f-8c90-14db4d9bef34",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "072b3675-ed9b-462f-882d-12173ba3d130",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd4087b-9a62-4a7d-b03d-1c53b59e5b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25c6de9-65c3-470e-80d0-f685b8945259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1bb480-9b12-4d60-b785-7b59ebd2e71f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0435c9b-a6fc-44ec-ac29-5564e323a0d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43384772-bc95-4cda-b95b-5cac01d9c7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd99146-6d99-426f-a1de-93b3974f8ac5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deafd2ca-fa56-4e65-9fd3-2e01ee5d36cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7383cc32-3198-421a-99da-8250cf770dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504a4e8c-8be1-4363-a3e7-e9e2c7f273d9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7be2b39-ab73-4ec7-bc0a-3700b18293c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b41b142-0d75-48cd-83e0-7c901a83ada7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d788f0-cdef-4117-a5db-04cd4c1e3280",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6f6f10-454b-4dcd-a081-02d9d567bc22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25101bb1-e0b0-4ad4-b6e0-f143ca9928c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724f8cd0-9a72-44c2-863b-dd910709fbab",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5513e5c9-687b-4c50-a530-ec5daab8abe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27930e9b-ab99-491c-866e-31fb3596dc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b5d6e8-0b96-44d2-a9c0-0309b909c40d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9e207c-c513-4cd1-9020-af8eadbe11d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b202bd6-9784-4de2-9222-af74fda1e71c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45fbab62-c8cd-4c02-81e2-3baec8c8d6c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da0e8c36-c4ea-4a62-9675-00570755352b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d448d539-bbb1-4942-90f7-adcb16e62403",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2d7999-6759-43f9-a037-cf37bc288a00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eb7dc73-b139-41cf-bd6a-dd88db794a6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54cd658b-b94f-433e-9048-7df01a5dce71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "492b2c7d-e27a-4193-a07a-9504c6efcfe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ae2b2f-f22d-4266-8240-1b880aeeaabd",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "110a4e7b-b969-49a0-8a06-d516e676651c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23c4e996-98d8-4637-b2a4-680c4fe3907a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ccf4314-ccdd-4344-aae0-252dc0c06f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bf53f8e-8e20-4158-944d-af435539f596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d18815-23bf-4c23-90c2-d5a769667bd9",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d138e2-5f72-4cdc-a0f3-01eb7a71079e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb78e6b9-1089-46ae-9610-49303fb3d628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8455b803-7d64-4e79-9329-3cbf5470b950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "320aaf88-b521-496b-8600-930fa114b83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf33ca1-90d3-432b-a0b8-233e9ee8bd16",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "092a1098-2a5e-44a1-bca2-363f2f91a808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faec4e6e-b256-4dfd-a304-abde60e9f7ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e415b93-6040-400b-a051-775e46a67ef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd33857-9917-4b50-9457-dce37ff659e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35149a21-090f-434c-b216-6cf153a50a09",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a21aa47-17f5-4e0b-bc85-483b823b8e5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc29c84-d9fe-4b30-9d35-2055998f9508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "066d2aba-0fbd-4e07-b9ca-2fc349213796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5b7b9d-f39f-4b86-bdbc-563845caf5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9187a1f9-fbed-4198-87e7-ead444b6d020",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6230bc-f63e-4f80-a968-ebfcb6514653",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fff17c07-ea3c-4f7a-bafa-851c2c8b8fb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d34367-2691-4c11-8a95-3456e6b33ef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed17280-0dde-46da-8553-d8d74e7edff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb9a19d-5683-48e8-beef-eaceb31ec2b2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa2aec6-5d92-4124-900f-31959b8ef1e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3db5a2c5-82eb-4c01-87ec-82c6f27a7ee5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45493b7d-85d4-4dc0-b3cc-9c3dbfd9b3f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f0c148-8a59-473e-bd54-87c1042181a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d60f13-8c5c-4fc6-9a83-f6481ea968d0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "162ed8ac-90eb-4bc2-8681-5a2a678a8b52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5abaa5e3-a21e-4595-a5ee-4b68cd03a42b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45307cc6-86ca-49fb-a5a2-339c326b0e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a924205e-af32-4a50-a9f0-256b4f642144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d16a7a-5563-45ba-8ce6-f9c5bd4cf0a6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4d33ed-02ba-4daa-a397-0d9792b8f26a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1d1344c-8a99-403f-a952-9b76c0509ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d459fd-34c2-463e-93ba-ce5f61e412ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "985de3f1-47e4-4163-b66c-03e5d68154da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a729fa7-a550-4aa7-a707-f91fea725855",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6eb9be3-9da3-43f7-a6cd-d6afd2e470fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a522475d-5937-46a4-83fa-aa183e211b93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6806f5c0-21cc-4679-90d1-7a98b2313ea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ddee68d-5bcd-4d3d-bc74-85156261c379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca40b763-f1a5-4536-9d32-f8f4727f3689",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91589410-2b17-4556-bafd-53770f04d133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750c9ad2-d9cc-4c94-9881-e99a617a97d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1057de9d-e2c1-41f4-a783-316312ead218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ccbe77c-5f84-4a55-b858-837c514c1d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e28b255-f31d-4bd1-9499-26eaa2b2b7b3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6514f701-818c-4982-b055-c99de33cecdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56a0dc60-161c-426f-81b3-06fa96da11e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fe0b47-ccdd-4d75-a7f1-0822107f713d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c183483a-65b4-48a3-a1b4-6c7f9db50a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbd741a-26b6-4d4c-b809-94eb8fe596e0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c3c0ea-03a1-40e0-9e1a-9ae6fccafae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feaf47e8-ebfd-4850-b072-8a479f37cf2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f4e64d-bdd1-4895-bfb9-f06f7f8809d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dee186d-f60a-4a72-84fd-f32646acee2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e967f5-ebf8-4d38-809b-e9823ec27e2b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83f9e1b-659e-46c9-a638-38857db4ac1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9688850-3014-4ec7-a9b9-a2b6e167a613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14b128a-626e-4e29-b6bf-8b5a1c9933da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1f004e7-74c6-48e3-98fc-2280d7f9df8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc036c4-1b6c-4f82-ba3d-1b78300623e0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b647d6c-4087-4277-ac8c-2f56bc040737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deafa5d6-b26b-4f46-98da-1d8de5d572b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1decd548-0225-42cc-b13a-e8063363b320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b72d8fd-9d95-442b-9ac1-cda32e721fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e31c8f-3339-469c-bad6-8f1555110727",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c87997ff-b12a-4405-8c07-bb5d017daec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff03ba0c-f501-46e5-839e-22ed3b33966b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "264fa0e4-de7e-4587-83d2-0b56e81883e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "913dc4c7-2680-41a7-9d63-545b74c1d823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3a2681-f8ad-437e-a030-9b294f6db51b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6446ac86-7c38-49f0-875b-38c4cb9b6c00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43038dc6-e54d-4317-977a-48b341b1bc9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61384f25-25c7-413b-8b92-0512a494ff19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76544e76-8bc0-4837-9650-9fa397472534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32177db-79c2-4d2f-80d7-7d22a5f1512a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb71d25-2216-4537-a28e-7bbcd272827c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f32b2ee-16db-48ae-9f61-fc0a6b68124c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "748c5b3d-b919-46b0-aa27-541334963bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9278bfae-6cbd-431a-9c1b-2854ab28cb5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ac4bc3-74f5-4234-b140-398ff1f101f4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89eaf90c-c969-4789-851a-a8199fcd0dda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efb7b97c-8889-46b6-871f-a29ecab30a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a24938-7145-431b-935d-5d84d0343a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba75145-988c-4eb2-8b0d-ebb1615db595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f6ae37-4a34-44df-93cd-83281b1ebb26",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b90dd537-241a-4238-a915-5f752d25eeae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ed713f3-01ac-47e2-93a5-4bfe57c5d701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d35baa5-a3e4-40cc-931b-beac55fabc56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f436ba3e-0d9b-4632-868f-8b5948deb130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b528036b-f4f3-4af7-b135-9e944c770269",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f04919-35b3-48f5-9e8f-65dab9eb017a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "534c0b90-3881-475f-b11c-f8f9073548e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b30982-4833-48e8-956a-bf5eef688a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5b5de3-8f8d-43e0-81c5-e3d9f737075a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06edda4e-69fa-4410-a43e-757382c0d1b0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292909e5-8778-4443-b4cf-a939868f9b7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32e3b1fd-09cb-4b08-9622-407e8403123c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1f8fc0-63e0-4529-ae92-7f08bfedb069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c009b118-b459-40c2-aae8-f261c775f80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d036ef0f-0cb5-4643-9c7a-aa3865d410fe",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be7e11c-d924-4bbe-8755-5efee2276e9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "446beb10-0186-440a-9f24-d941a968b335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acaf0e63-1638-4b3c-8162-df7eede2b3d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d5e53c6-b88f-4d3b-b8fd-abf2df14dee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e7ab28-7b49-4b80-a4fc-c7c7296b018f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a39bfb1-1bc8-4d9e-8aa7-850f6e8f1597",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e530eea-8e15-4ba5-a047-77d8dd5249c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3dea9c-ce1a-40e1-8c84-91a871be3441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dea09b9-908a-47d6-acc1-d58377e6e250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6a1feb-5630-4c79-ab26-2da947c2c97b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51496583-f339-467d-b4c6-6a7a15dce282",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a36487c2-02ca-4c65-a767-c6392663f3f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e9f4ff-3e8a-41b4-9c9f-74f39cc6c2f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "190fa906-766d-4b2f-8475-b4331f5b1544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0370338e-9430-4935-a5fb-a2d3b68c6d06",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a6dda0-9328-4d76-b0a6-ebf8fe31d480",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82229e69-f064-44c1-b3bd-789ea9d0914a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b61eadf-48ba-4824-a4cf-ee52b339abb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d75449-f352-4fc2-ae7a-7b7e77d9b7d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1704b07f-4469-405b-ad75-b0eaa52df0a8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9388ff7-2c0e-4b67-be54-837aa3feeafc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06757cfb-b55f-48e8-8056-5eec78105e3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a715d051-6cae-4765-9f14-9952de9a11e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73569569-b605-4725-aa9d-4c45edb57d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68d55f9e-f655-4710-8a65-a4cd34362097",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60bdb4fb-7f5f-4db4-8d96-d2536e3cfe64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b82c067-94b4-44ac-b4ea-521d4cc5a25c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3226ca93-c144-45b6-8755-8ffbca800b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5188f5ae-15f8-4c6e-a4ea-70d38162a6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd275cf-0d7e-402d-9b47-79beb120fbe9",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ccbc15c-9587-4d16-86ee-a1193784b848",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff610e71-0d7b-458c-b1e7-4751bb888f10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb012b3-7920-48d2-b7fd-0f387ac75d5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "803ee9d7-7a49-4934-9918-6edba7b30063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f0b2dc-85de-4fc5-950b-6e5c6b0b5919",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a82cb74-2149-4864-8666-a40083abb3e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30829f47-5a8f-4552-a616-5477c768f8fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9d195f-a8cd-4109-bafe-d96c83be75cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e18f0e0f-0ef0-4830-a34e-73235a32198c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10ae3c30-a256-4716-9d61-ed7c8a9f10ec",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb18177-28c2-497b-9b1e-1ecb12b226b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81e6bfb5-7190-4064-bc91-c10caf490068"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2c7f65f-98c9-47b1-93a1-0516da309adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9556ceda-d443-41c3-8ac5-983ef04b6f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9927897-6015-4f39-ad53-ababd090478b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5623a4-5f34-4ff7-99ac-278ae614d5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a34380e-b6e2-4dc4-856a-9f3653ef0ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8661b8d4-7112-4c94-bc78-321200e6ca1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7639c708-17df-43c7-bb1e-0b62ece900a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782aaa1c-343e-4df5-9975-ef357502db9d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d27daae7-e74b-47f9-9a63-2cb0e3be9a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfe1f0f-cc48-4af6-92e9-a83cfa1eb3cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4609a763-5968-4c86-a2bc-416c2cfd9ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56a6ca43-1659-4a33-bbb2-6ea96156d41d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f7d65b-83e0-47c5-9e17-6aacc6ecca90",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01704c5c-35d6-44a2-985e-4b50d2577677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "184039b7-9bff-4c96-9f21-f5d196652038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0f871b-dfdb-450b-8098-9466018bf939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d3ae457-ef2f-467b-bb03-97f47ff074da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c95fd10-9033-4d34-9654-d8caff15db54",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c480e421-de7e-4d0c-a8f5-26af2745a734",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "113ff430-31db-4fb5-bd4a-59a33d982deb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4a8baa-54e1-4442-86f8-1dc1ff3cae00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea42b9c7-08d4-4dbc-a4f6-bf556da5db15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da81fa37-9aba-4a9b-9e0e-ff4c5cb6ed27",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b321bbd-fafe-4be0-9e1b-880aacbb4936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc19c93d-e687-4299-bf9c-7284260365ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da481778-40b3-4219-97a9-1f09c80ac2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff0d3d1-335b-4d5f-a2e8-9fedd148348d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27db837c-22c4-474a-b2fe-441cc2d4818d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07456b32-992e-4cea-9070-a885c7bb09c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6849035-d91b-46ec-9dda-731138c4af4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9a4b19-2d79-4c71-b770-4ff897737575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bdbd300-1e7f-48ae-a6a3-72aa3b013880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce24787-f275-4990-b11b-abffb5cb3a75",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e2dc53-5a90-4747-96e5-59a1504f1df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3cfb88f-5d0b-4e8a-803b-9c6e6e09e682"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb51cb8-55cd-4147-be33-94d4b61b4b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45966a6c-47c2-415e-bcbe-261d85ae3a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e06842-943f-459e-b70e-fd4cc71eeddd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd40991-f91d-48db-9596-d70b82e9c63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451370e3-ef3b-4737-9d09-1d7a60a93a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7e1952-cd51-4527-a777-3a0c88b7ca84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4be335c-0df3-4a0a-80bf-956c624870c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ecf7099-490f-4fed-8d5b-c4b10037e5f0",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b6cc80-74e9-4f4f-ba0f-2916bad93e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d9cb714-e241-4ae4-a5c3-8aafcdd1aa84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ab027e-f552-4774-8926-ccb00b963b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "351af842-1cbc-4f5e-86ad-b560f0518c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21104f6e-5405-418b-9347-e95b9f3fdf76",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d196db4e-7458-4e99-934a-301ffb15068e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ee18ea-ade3-46fa-a8ba-59594141878e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b02de67-c4c4-43ed-b463-2e82f2d74f33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bf6467a-fc36-4406-8eb0-813ff5eb40cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eff5db9-a750-4210-bf5a-bbd9d54a8248",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a437934b-edcb-42c5-bd74-423b8a47243f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28b6530e-e4f8-4d08-b9e5-aebd55437b38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57420220-d991-452b-8fbe-dafd1e326761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a01075-df27-4d6a-b2f6-c11822dc2212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4729c6f-86b0-4aed-ba0e-124b432179d4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32c284e-d8da-439c-aa87-df3e32c972bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf1af0a-2a53-4d94-a2b5-9e669b748dfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef89961d-588a-4fe5-baff-ab8d6e96bf6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a748973d-cfd3-4b82-a0ee-d4fdd1490e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433a5419-b24e-4292-a4ba-dbabb6adc1f4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c66a834-34bf-40ff-b88e-23fa069395f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b45dec-c23f-44bb-90e2-c4946d5db316"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bbd3b2-6178-4c48-b85e-55e61542530a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc8c244-9e80-4e69-a209-5f67478d7fad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf189c5-ad60-4ced-ba07-cae52d453e84",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37df40a-9229-4648-beed-499a02653d4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dabc7e57-5742-4894-9abd-0ade8f3b9df0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6f7e590-7d37-49f5-bd0f-32ea6e82435d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6672737b-65ab-49ad-8d26-0f6760dc2225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f12d23-f9b1-4e16-b2ae-32eb5a980dca",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab5b42c-f9d0-405d-b6d5-3ec073744f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bde4a8a-f321-4df3-898e-e49d1584eae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "348ed567-d168-455f-a970-9b4eff04872e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58ae2ce2-b735-4375-aec7-034e57e26254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305788bc-5a44-4b3f-a4e2-63b5cb260edb",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c60e57e-e4ca-4210-90db-4187819438d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "370427e9-f509-40c6-9a3f-a0bdac9bf937"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "715c8942-18a2-423c-a310-eddb2ee417cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6de778c-862f-4e2e-adf0-00f425c2b1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c84edd-960e-4e83-ae18-1ab00447b286",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5bd1c7a-5ceb-41aa-89a0-929e4d77e3d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfd88539-323e-438c-9098-0918c83dd16f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c097d951-e76a-430f-80b4-74fd288e7bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a32f3ac-e85f-4418-a94a-f8950fbe798f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3fc4b3-5e9a-4bad-aea3-d7b07fd2abd8",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da555ca-dca4-44d0-874b-44afd72bb0e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4687cf5-7cf8-4939-915f-a2c0750d8a1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39005f5a-ac6b-4e97-b193-0bf7d8b8d59f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd92f1ba-32b8-4764-9f95-6ad75671e783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e52cf38-dc31-43ff-ba91-ec353d371dcb",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfda46c0-bec4-4027-8b9c-1aaae060a4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26702fb3-531b-4206-ae40-2d3c158d320f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "658c1437-43d6-4d2f-a50f-8e46ee27dc4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878628d1-5f74-4f82-9d45-38afcbd02ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12c7b41-b1b6-4721-a3cb-f6307eb9dd88",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6854b32e-2879-4233-a0d4-49db9379b65a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c196d4d4-2ba9-44ee-b01e-9b20e5e178e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18b89ad-ea99-4938-bc22-8c2cda24690b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88ea6805-9932-43ad-8b99-8732e82da2c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8adf16-3528-4203-96f2-ebed979c32f9",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba78defb-f636-4f86-855e-ecbaea39a8af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a41f5b-18ec-4e2e-b81d-998c1d8465f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4165bd-e888-4651-b7e9-65884a377499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cce6e5c-2dd3-48e2-9325-284c465e285d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da711ec-079d-4bbe-9746-2cb545d12189",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff494ca-ddfd-4783-80f2-504689194bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0dd106-1c7e-4c96-ae7c-ca9dc94f7146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c9f419-05a8-4792-aefa-b0af99481da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da11ff1-24c8-460c-9d8a-89d1032ca16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eadbcb4-09e5-4a68-8a0e-6271cd4a312f",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827e3fd5-4035-4226-8590-bf9d7daf8296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9535971c-3974-4241-b1f9-7bf7ba594249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc92be1e-3fd3-4343-b0d8-6fe4758aabcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93fe90a0-946a-4042-9c98-c500f135e5cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b71318c-f21f-4bb7-8fb0-94e4cb417db9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7377692-07cc-48ef-8e8b-ab1066fec741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eaade90-4cee-434c-9087-2a56b0a78693"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48894aba-d76c-4d59-8f36-dbd3c80a3262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9fcb9b-90f4-4c57-9a8c-bf46b9885401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d910c4-c1ce-4438-bbd7-911c97154596",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6e2637-b215-4954-b06a-08f5b243199e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c717fab-78f6-4433-a5f7-3e86701637c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "712b184f-633c-4f74-8cc3-b89b60e68fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5169e16a-f114-4725-b6bc-b3c28dec1132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6f756a-fa9e-4caa-81f9-794dc7f0f799",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0184d4-d08b-46a8-870f-cde95a86f7de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "017ac1bf-8965-498b-86a1-07136caed68b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7216f4a0-3ad8-4500-9ce3-b493ee6ca88e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffba44b5-3717-4ead-a8e9-be16489fd93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34973380-32d5-47b0-8fc7-7f59aad6b7a8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f44bad8a-ba40-48b0-a5e5-c35c40638c00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18a4e64c-e739-4b20-b164-bcb9262abdd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e83115-25b7-4ad0-8e79-72fdde24e7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d05643-9923-4e82-8b93-6b02fb869ce0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5441bf6b-3f4d-46cd-99d4-ee436c6bfa81",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f54ea288-a557-402e-9b74-5141f954192c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c847ca26-bc32-41c4-bfb1-b2c8354a42f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf0a79d-b2c6-462c-976a-8c76e2a404d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a744069-fbb4-4b04-89b1-a82af870c396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eff41d5-3822-4b31-85bd-4b5b8d2db1b9",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "496ffd26-6dc4-48a3-bf6e-33ff2f2ccba9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f448a2a2-ffa1-4538-9530-5b7a5102d829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acedc108-ae30-4276-82a5-2f443dd28e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31ffe0c2-114e-4fc0-9133-40f66e29fc9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22ffbe9-670f-4c59-83cd-2ec85c89d486",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d100bdb-e4b3-40f7-804a-f47c4c4cb75b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae6986d8-ff9e-4e12-8899-ec9baa391dcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13802df-1a57-4b5f-ad91-88f2489dca15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e6946a6-5197-480e-be7a-8a244ff9dc99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f211975b-723c-44a1-bcc7-95edd2b3ac12",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a399048-a293-413e-ab67-8e1ed21795ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6617f7dc-0478-4c41-a4e0-3370804c7ead"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df567f02-2da9-459c-85e0-b8c42262f6ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7070787f-8364-4baa-bcf5-4cbeb92028b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a800cda-bdc4-4697-a84d-b85a361ef378",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c33b612-376c-4b5e-90fe-0b0148f14eec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c391c925-023f-4997-95de-3a13ed1f50ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a4ff17-f4ad-49e0-99c7-bb3d34853d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad7c887-10e7-4db6-ad32-69edb0637cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32e8d59-b060-4859-bb95-467837c98955",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2767dc-c456-4a18-a846-035395d0ae3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4717aaf-395b-4aee-8279-6e8ee2d85da7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d56cc4-07d5-4e83-b614-f4c85f09529c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f38cb35-cb26-4dda-90bd-2b248fbb7af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b71f55f-fa71-4629-a7a1-f92eb7c6a190",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f9f832-c2d5-4836-9523-fda610b958a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cb597ab-5696-408c-a15e-28d09d116b2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0852af-9477-473a-93e8-01154cc6fc33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dbb15b9-0d34-4d2a-b847-d7e0e59ffcfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6818ca09-836a-4d3e-a39e-8b892564bf6e",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4649694c-60df-4e5c-9ba0-afe3ee53c100",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6623200-3277-407b-a34b-e8a0ea84c55e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d61bce-12f4-4447-8273-e404ab7b3882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d40e101b-34c3-4b96-8baa-48f08a82489f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ad2deb-85da-4476-8f80-7a5a3a4743b3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bceb6848-c1da-4411-83e4-d125fcf8c29f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7393b4f8-a83a-4367-9791-9f1acaec9586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1612bf1-41f7-4ac3-b481-450cf0f91287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c60193-1073-4e16-8b06-5907d5b4232d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40754864-37c9-4c83-a820-3e419a169802",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0a2f12-05d0-46b1-a43f-fbdf63eaede1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef8a7d75-ffc6-4248-bc9d-8aea9ed04e91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f030bb5a-5278-4b24-b283-f34d9150a444",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dbe58f8-e11b-4b61-9b91-2da67cdf1f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ba476f-76e4-4630-bc6a-e0b56879e3ca",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1875a4a8-87bb-49bf-9146-18bcb4741ce8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "700535db-4e3b-406f-bacf-5aef10977eba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "334b7a89-592b-428e-b84e-1c0a402e574c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee7ca01b-aa01-49eb-aa50-7561070c8785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "136c43c1-a8be-4283-ab69-415ceba889e7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d91b872-d0c5-4281-82b7-b365b5cdb04f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8000e6f5-e4ca-4ac9-8e74-d6b6524ed1ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e52385a-8785-4d29-8b33-219a91a3341e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83b31fcd-1039-4eae-809e-0a8674c8f3a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82de0a46-048d-4787-96e0-d2ed0194c0a5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396177ce-cf65-4d0b-b991-172a7549911d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd3a4940-acbc-4e95-a331-cccfb3e3f143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6bcbd81-e6ef-4ba8-a3fa-e6944dd5036a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f39dc9f8-1d70-448e-b936-a675b8caca61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368c466f-baa0-4710-bdff-a479072fbe52",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6449b750-42ea-41ff-b2c5-216c2e7ac9c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "600f6658-73c4-4b8a-bc7c-2e05af537bd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33d8550-601f-4be4-96f4-ef23526f1960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fec0fad8-42bb-4994-870a-095b7f5d7a10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c91b769-4401-472c-a4dd-522073faa017",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e7ec0c-8b44-40f6-96f3-10a548712ea5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b287271a-d39d-4b8e-af00-46fb3012bcc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47663e6d-3edd-47fa-884a-de18e5972a10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5b2e1fd-77ec-43fb-afad-37fcac8d2200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ccaf73c-519f-48f9-8617-280227245fe6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b720cdf4-9859-4759-8c10-0346006b4444",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a377359-e1b7-49e7-8c6b-7eb44f248ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4027f4a-9712-4224-9533-bae25b86a4a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ee604c4-408f-41a0-9061-863b90813ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be47216-458e-4ba8-9992-45a9b25a4c78",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c58ad1-dcf8-4ea5-bd67-3e03373493dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cf5b0be-2b16-45a6-a064-976daa67561a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d77bbd1-b22f-4dcf-88d2-05fbd2d30d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07ca7b3-6d70-4bfa-98f0-7e42d1689a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d001e7-74c3-412c-80ec-5b1c6533df0d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561999f8-4036-47cd-bf9d-5fd64a5a22d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "847d4881-ace8-456a-8fa8-affa068aa55b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ccf3cd4-7105-4345-84f3-03815631e526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63c6fce1-0097-4fb8-9c02-1c2de728f3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1755a0e9-6c55-4778-8244-2f420fd64d7f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b565de1-0d7e-4794-8cba-53ca3e2e4279",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55fb3e57-a21e-4133-bd13-e435cfc75ed2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d6d825-ae30-4449-8ebe-08938548dc69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ee1f4c8-745e-4f4c-af78-d87f9025d3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1d5f05-5903-49e8-a5bb-cacab3a67156",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e4bc5f-d78d-44a2-bffe-ce8df6e2feaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a070fa50-0496-49b2-89ea-dcedb7f5cda9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f92fc4-888a-4769-a837-7cedbf087b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb69322d-957e-4728-a07e-ce55e3e03258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa4e574-3769-42dc-886b-081d12f5c744",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c336e9ab-32df-4cff-bdc0-26d306a5b34c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bdb9be4-7a96-4fb2-9423-1a3e38a4afdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ccb7ccb-1ffe-4918-abbf-13a7ac69c2ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c51204e-81f6-4216-8595-315edc27e02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8cc1c97-132a-4373-8d2c-1b10ec1457a4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b78749-f8c6-4b51-8a78-51510031dc97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f136503-70bb-4366-b42c-8f8e87daaf26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eb2f745-c206-45a1-afe7-ca54b60a3dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48b7229-9219-4f13-a5ca-ee0b75d7036d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74d5e2d-6918-40d1-b95a-c26d715255a1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577899b3-028a-4ebc-9ed2-d968c058a546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab47b863-7f0a-42ef-9aef-34337de7b43f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e14322eb-0430-4fa8-899c-efdfe98b3490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "251240a9-1471-4654-b019-8e8f98b855a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1041cfbe-8116-47cf-a6a7-512c9b982d2c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b0314d-5e12-4a62-91da-8a3dd4415788",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbd73d64-0c04-44f3-a96c-52f9ae8099fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e84c02d-0949-4fc6-bb3a-37660c526179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cff6a0c-60b6-4a88-a575-0ea56d7a0a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5094ea2-f9dd-440e-a5f5-74f960fbccf7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e04930b9-5065-4935-8a22-b5500ecc3a7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a884b507-885a-4b06-94d6-ac94a9e71edc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc61a85-77db-49e8-99e9-d6a6ffbb4a1c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b431172-2eef-4ee2-8235-df8cc8d1c909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56b4b60-0d2c-48bb-8114-fa4177fe3f71",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bf8024-2330-4bf4-907b-bb43c6879d45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16997fee-56e5-409a-bea2-ff61ce09fd50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71210400-9f12-4128-90dc-a5026f72f57b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e8ce8de-1782-4bda-92e2-0485ddf3c23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57432ce-cd48-437b-a7d4-ae59043dc50c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9913b6-9a6b-4471-9920-8883c9ba351b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ecf97d7-20ef-4e3f-8996-a75a52b3341c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a64dfc41-9834-4f45-ba7b-a6dd5b251095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c05ca654-d1a7-4cd7-a7f4-9c035d1408b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a65a2df-594b-4298-8b69-c535a178504a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f336ca-0a0b-47fa-8aa0-49a816262284",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef3d111d-4202-4bdf-94d1-a6e18a4bc378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae2b102a-91b9-4b15-8b3a-fb8dd8ae95eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef8c835-95d2-48ac-aaa2-ab0ca7a6f7f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3e401f-dd40-441a-b005-8017bb77b35d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4425527-03ea-417b-a402-dfdad20a6e8f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5036342-f701-430b-962f-493f43a50775"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c0ff31-ac71-4668-b6ca-bbc84b36d82b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4705413-2844-4291-9739-27b8d61c234f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fc4e40-1cf0-4619-90c3-65f94cc5073a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae2dc3c-0632-4622-a42b-39d3bda84914",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c658ef1f-6328-4363-bd9a-4d64dc119dd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b774ee81-8490-4795-b523-97bda49babdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce041d0-b438-4765-997e-49690a622358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131d751e-dc70-4366-b6e4-450d9af8e4f6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be9ed920-1d99-49d7-96fe-9a6898eea7e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c122f5f4-76f7-41c4-9a3b-6ef6fc560db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55178b7-dced-4877-8c07-2fc2cbe6d0ef",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a91492c-f4fc-4c55-8bfb-09128526ccbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d01002-37fb-41f0-9676-01850a8de0a0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a55b292-c7b7-4aa3-98b7-41712ce8cbc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "713dee87-987a-4248-bd09-80ee58acea33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b076c5c4-4a08-4ba2-9801-96f332232001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4717bc46-d872-44b5-b5d9-48848ce48883"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "949fc06d-8abb-492d-a53b-eaabe929ed2d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "433c82b7-ee8a-4a82-918e-1bb256689e0c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d24b6d5-79c8-49af-8cea-957046f1b851",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "43b0f4f1-b64a-429f-a3ad-fd633d3b359a"
                    }
                  }
                ]
              },
              {
                "id": "17952255-56e9-4df5-adad-3de5257dbb8f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5f781fa5-6130-4ab5-b649-8b8ca0596638",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c697c61e-8fa6-4f44-a266-6a53a9a07db4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "11a6a337-cf40-4503-8649-f0336bc3c29c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9afaf11-2f07-4783-a646-8ef938fa1d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47ff99a9-db4a-4554-8eb4-d1fce7d15ea5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e2dac54-5eab-40f5-87a1-2c440cce4b54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "468712bf-84f1-4de1-a39d-b4e5a3bb15f1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4703c387-38f5-45f8-a485-b0f121384305",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "822c9624-ab99-4f1e-a0ef-7159ad85708a"
                    }
                  }
                ]
              },
              {
                "id": "7cafec71-af6e-4de9-b347-9068cc15549f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "d0afbe93-0eb0-4bba-b486-7d569a3a6270",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0415b636-3af9-4752-9286-8f2085f59da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1ea249ba-4579-4529-a901-f77550638545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732e2d1a-8e18-414a-a658-0f05d2b21b14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "688667a2-54ea-4a18-99bd-45d45346a06c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6970b401-1830-4d2c-ba25-b4bb4a6446a0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "812d1429-f597-407c-80e4-34ed52fe47b5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17091c83-fe5e-4cce-aec0-c2b1ce3c24a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7614f300-485d-4e6a-83fd-91289de5ca8c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ada5917e-3d26-41b6-a4a2-4ecc6f92d928",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d0bffa2-e631-46db-8b70-e9bb760a0d40"
                    }
                  }
                ]
              },
              {
                "id": "2cda3975-3d8c-454a-82a0-db0b3b8d6a59",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d34991d5-83ce-4527-bf08-33bef36a59c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0bc2c290-8bd6-40ce-9ae7-50b67c3b91ed"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ad8e907-0cac-47e3-9b1b-9adc93136e46",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ef1348a-e61d-4240-b26b-b4583baf82af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e94ddb35-a606-4527-aa01-464e65aa2976",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "797d4212-ff95-468c-8ea2-c6cf578823eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "73c05679-7dbd-48ff-84d0-3fb483110d71",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd978c70-af75-4082-b73f-03bdc0aea75d"
            }
          }
        ]
      },
      {
        "id": "b20771e1-aba8-4620-bda0-14e1f5c748b0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c960c34d-2e99-4696-bc19-72ff5bddc2f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d9b5e08-616b-4484-a6b6-fc094210274d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "261326a7-8e3d-45f9-b22c-b25720a95747",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c887a0-9f8d-4273-ba77-cc1172622b21",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1af50b37-894d-409d-a78d-270607a3a9c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd90f382-50de-415b-a06e-a2fb52f500c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2016a45-0c6c-4d95-8572-9c34381fbb53"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cc60ce6-b38f-409c-b532-232c1b483ddf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d4fde54-570f-460c-9b03-330e591791dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cf195ed-5de7-4620-a01a-0bfba2bc9719",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e23baca-d0cb-469f-830a-807af9f282d6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f80885a1-4931-40f4-bbff-53575211252b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2f734fa5-1d1c-4fc7-a771-ccaf70099f7d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c324a2d4-089e-45ab-9082-730f0611ad7e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cec6c931-ebff-4a7f-be8f-d7b8605ac8ed"
            }
          }
        ]
      },
      {
        "id": "ed04ba29-0fa4-4d1c-8cb9-f1378087e789",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f985f85a-60f9-4267-b86c-d02a634756cd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3c5bb0a6-174a-4feb-8525-0d9dd507a465",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "07c01d37-96bf-4cc1-b600-67e7e82cf306",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410b69ea-370e-4ceb-9b8c-34d5738fac4d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c716dde1-2b44-40dd-995f-12fe97ad697a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a99586-ea07-4dbf-9003-598046a209f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "792e6fdc-0c32-4e39-b9ea-5c6aee6c8e4c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09b4ed54-ef00-44eb-bebc-446f8fbf243c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4468477-d5df-4021-98f7-9c7a140372dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a434d1e-d22b-4022-8843-590d2b9eae26",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9eb1d577-e3ba-4992-89a8-a996f302552c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "daff77aa-0d8b-4704-9aa8-ba76fa0de433",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "971b57ea-8f68-4291-9ffe-cf3b9120b631"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "481146b8-c2be-4ebe-a6b7-3becb0e10376",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cdb62e9b-b955-4063-8293-3a660dd9c87e"
            }
          }
        ]
      },
      {
        "id": "1ca90664-c2a4-49b4-a51c-7cf07a906de8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "8dab4eb1-d3e9-4652-9fc3-6808631f84b1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "51478bd1-13dd-4abc-ab79-5a83e4efdedf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "181384f7-7483-47a5-a122-97cee30d51e6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c63a3e-6898-4ac0-beff-7e270a3e1db9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c24490f-90d2-493c-805f-6a9bb5e7e87d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66b244c-9733-4e4a-a785-ce0121128b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "616423eb-29d0-4752-a43c-c665d410d404"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1458b5af-a5d9-4557-9258-9144508ab948",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d85f61d4-150a-438e-9dff-ef604afa6b04"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "da6e7785-f9f3-4b55-b12c-29f5dc877ee4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e703580-1eff-496f-918a-3109e958a3a7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2b210ed-760e-439c-957a-4eff4f69e95f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e0557fac-a615-4b2f-92f1-ea35516bbb9f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a054fdd9-8d2f-442e-8cf7-c08557b4eb72",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96d14635-dcf2-4825-9f00-adfc782b182d"
            }
          }
        ]
      },
      {
        "id": "d83342c6-e4ef-43bb-adc3-76024f6ada8a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ead7d918-f63c-4bbd-b637-08dcdb21dc50",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f74eeb67-e331-45f0-9d69-5c233c83761e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d1f38ee6-7feb-4723-921c-8b836aea6641",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ccfe057d-ab4f-4191-9798-48bc8298191c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "698931bc-570d-4080-82de-1cc1e2f8b66e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 106.61052631578949,
      "responseMin": 20,
      "responseMax": 715,
      "responseSd": 81.00053645958482,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707611829838,
      "completed": 1707611870167
    },
    "executions": [
      {
        "id": "1537ae79-108f-48b6-a641-f9c621b801a8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3248e5ef-6c8f-4657-bcc4-0b1d181da9a9",
          "httpRequestId": "a66e4dbd-5468-4c55-b5eb-626b437240a5"
        },
        "item": {
          "id": "1537ae79-108f-48b6-a641-f9c621b801a8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1c7206af-6626-4a91-a4a4-1c008d6d45bd",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "14ea5ccc-af20-4aa7-a2b8-a38ec25087af",
        "cursor": {
          "ref": "688340ee-dff5-42b0-a47e-393d23cda454",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b1bcd38a-2b38-4623-93f7-05381ef008d6"
        },
        "item": {
          "id": "14ea5ccc-af20-4aa7-a2b8-a38ec25087af",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "fc68112a-8467-4200-bb03-2ffeadfa3278",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "56c71f80-62ad-4516-980c-1a7ed10dd056",
        "cursor": {
          "ref": "18a66950-0045-4c74-89ec-8623278de8c0",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "53d30c9e-ac1f-47a6-bd1f-022cab127c22"
        },
        "item": {
          "id": "56c71f80-62ad-4516-980c-1a7ed10dd056",
          "name": "did_json"
        },
        "response": {
          "id": "87e5be8b-b13f-4bc5-9095-0509a7105ce8",
          "status": "OK",
          "code": 200,
          "responseTime": 469,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d1e458-d21a-442b-84fc-7b461251cef3",
        "cursor": {
          "ref": "936dd897-c198-418a-8bf5-fc51a8476dc7",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c2ab5e24-4f99-4e1c-8884-d557d193ad4b"
        },
        "item": {
          "id": "c4d1e458-d21a-442b-84fc-7b461251cef3",
          "name": "did:invalid"
        },
        "response": {
          "id": "3016b67c-8ec7-432b-9d7b-4037852dc8c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d1e458-d21a-442b-84fc-7b461251cef3",
        "cursor": {
          "ref": "936dd897-c198-418a-8bf5-fc51a8476dc7",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c2ab5e24-4f99-4e1c-8884-d557d193ad4b"
        },
        "item": {
          "id": "c4d1e458-d21a-442b-84fc-7b461251cef3",
          "name": "did:invalid"
        },
        "response": {
          "id": "3016b67c-8ec7-432b-9d7b-4037852dc8c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e2b200-1a24-4eca-9c07-9fecee00e41c",
        "cursor": {
          "ref": "12f08876-322a-4aa6-9dfd-9da68bb3f290",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "af660703-d6b4-412a-bb52-54a1110123ad"
        },
        "item": {
          "id": "46e2b200-1a24-4eca-9c07-9fecee00e41c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2c56864c-e167-4902-8790-63b72cb86eeb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 129,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c604ce-669a-41fe-b5ec-71099c52fccd",
        "cursor": {
          "ref": "e48b107c-5a0d-4d0c-9893-abf486387d61",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4d89f445-f9f6-4a18-a526-481ef1e26170"
        },
        "item": {
          "id": "57c604ce-669a-41fe-b5ec-71099c52fccd",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "29be41ad-2082-44e1-80ae-da38a5543c49",
          "status": "Not Found",
          "code": 404,
          "responseTime": 82,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8c116a-be54-4e50-895b-1a04bfbb79c7",
        "cursor": {
          "ref": "e950b154-19a3-429c-9d1d-8c1a8124267c",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b80d1fb5-26d5-4dad-a46d-54b4a2b02180"
        },
        "item": {
          "id": "7f8c116a-be54-4e50-895b-1a04bfbb79c7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4cbf9f14-1b1c-48ce-937e-d0c539b54125",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8197cbf4-c952-4ef2-a54e-45c6d82e1f19",
        "cursor": {
          "ref": "e89f8b7b-2db5-4781-a844-db6af1bb57e0",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9159015a-8797-41f4-b541-268797742de0"
        },
        "item": {
          "id": "8197cbf4-c952-4ef2-a54e-45c6d82e1f19",
          "name": "identifiers"
        },
        "response": {
          "id": "6fd3c92f-d0b5-464c-8406-eaa0a830f841",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c15ed70-627e-4521-8dab-fa4de1c9a888",
        "cursor": {
          "ref": "f172084b-9416-4342-b444-1010f4ae7c98",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "69288b53-7874-47d1-bee9-72727567f03b"
        },
        "item": {
          "id": "0c15ed70-627e-4521-8dab-fa4de1c9a888",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5b0df774-6264-4da2-a92e-7b4eef6d9a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea25704f-c6e3-4236-968f-915659bf7af4",
        "cursor": {
          "ref": "488e0f2d-0d69-44c7-8e60-ebd22ba545a9",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a18012ed-792d-491e-994c-6f6f41f5e69f"
        },
        "item": {
          "id": "ea25704f-c6e3-4236-968f-915659bf7af4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "69f515ea-094f-491d-a8b0-b6863949a8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21b328b-4b83-4c17-b649-5771c8098ccf",
        "cursor": {
          "ref": "99889a27-26d0-4bd4-8d65-bc18c962ef5b",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8290a208-4353-4f08-913c-7a32032d3fcc"
        },
        "item": {
          "id": "e21b328b-4b83-4c17-b649-5771c8098ccf",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8e698119-7471-4c66-b0cc-549bd96c3a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59c305d-1e5b-4c63-8a3a-bcd7049d9d19",
        "cursor": {
          "ref": "702e3edd-2997-44a2-96f5-b273dc49217e",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "301bac21-2d8d-410f-8063-182cd2811a12"
        },
        "item": {
          "id": "a59c305d-1e5b-4c63-8a3a-bcd7049d9d19",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0ee71f1e-99c3-43cb-85e7-36e0953446b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747103c8-e3ba-4946-8650-583e8fb1896d",
        "cursor": {
          "ref": "c1e1f584-59fc-4d80-81ff-3061fe65f909",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "881dd072-5cd8-4129-b17a-97fe11c614d0"
        },
        "item": {
          "id": "747103c8-e3ba-4946-8650-583e8fb1896d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5c07fe7d-e727-4aab-a6de-9b248ef9becb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460e7e74-7029-4e67-918d-029f4737a812",
        "cursor": {
          "ref": "3f6ffd0c-d8bb-4807-910f-242049fb5b8a",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "e21436b2-6489-4ebd-bbed-51f8985aeb59"
        },
        "item": {
          "id": "460e7e74-7029-4e67-918d-029f4737a812",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "5f6ea2bc-6070-4854-a886-7272ce7b98a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78e4340-2e80-4817-aa78-d5a8fa0a0258",
        "cursor": {
          "ref": "c500981a-f791-4511-884c-cdbd711ef51e",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a3522b38-d03d-42ff-940e-dcbe51cfd898"
        },
        "item": {
          "id": "a78e4340-2e80-4817-aa78-d5a8fa0a0258",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f21d1f7b-f835-4f85-8da2-2f8995341d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5a4aaf-3c3d-4f41-a15d-e2296008967c",
        "cursor": {
          "ref": "39e80211-d990-459d-b8d0-cd76b2754342",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "40171557-cdfa-4173-b129-3994e15d1888"
        },
        "item": {
          "id": "3b5a4aaf-3c3d-4f41-a15d-e2296008967c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0b013886-64c0-473c-b376-8e9459a9f05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a38782-17ef-44ac-88ea-5a6283444ed1",
        "cursor": {
          "ref": "5123bae5-2bc5-4aed-b0dd-d1df46bda44d",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6ec4eea4-105b-4856-9d82-0ed3d7f1d2b7"
        },
        "item": {
          "id": "43a38782-17ef-44ac-88ea-5a6283444ed1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2a336495-4ca0-45f0-a6c6-2b085ca3f8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8628b46-4fff-4c6e-b962-f948142054df",
        "cursor": {
          "ref": "e0ed87dc-64bb-4561-a487-f0ed7a7c48b7",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bf085dec-e7ad-402d-bbfc-7e925bea08d9"
        },
        "item": {
          "id": "c8628b46-4fff-4c6e-b962-f948142054df",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f868f1bc-57e4-40cc-9a6d-e1abc847e9ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfbbde7-0ee2-4f7d-99c4-d1f59ee30e12",
        "cursor": {
          "ref": "a15236ab-4936-4ead-b069-b17f13479e3d",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2a697b80-8486-461d-9bc2-a1e029ea7865"
        },
        "item": {
          "id": "7dfbbde7-0ee2-4f7d-99c4-d1f59ee30e12",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6af2ddc5-e81c-492e-b52b-a66384efb29a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d82261ab-000c-40a1-be0c-0e06f3c46fce",
        "cursor": {
          "ref": "16624857-f137-4635-9bed-62dcb8605420",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3a1d1860-e737-4fc3-8cd4-8ed56f11dc66"
        },
        "item": {
          "id": "d82261ab-000c-40a1-be0c-0e06f3c46fce",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bbe6880f-1eee-4226-8cf1-7e3028b48d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394ee8b3-256a-4da2-80b1-211aaddc4c25",
        "cursor": {
          "ref": "139bdca6-1e60-423d-9c87-c45bb8c046c1",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f0dcbf5e-8ebb-4009-a582-332e499e3dfb"
        },
        "item": {
          "id": "394ee8b3-256a-4da2-80b1-211aaddc4c25",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1d856235-64da-49ad-990a-6768dc46d6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2021562-7d17-44ab-b58f-74029b76e85e",
        "cursor": {
          "ref": "0f2898b2-2404-4d43-a3cf-61d5f27c2576",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "7c6c8327-af76-4784-99de-92a07642950f"
        },
        "item": {
          "id": "d2021562-7d17-44ab-b58f-74029b76e85e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "bb29c65e-b875-4d53-b489-06fcb52626a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daea439a-1780-4000-81fa-fbfb932a581d",
        "cursor": {
          "ref": "34b2996b-c45f-414d-9551-8c0aa4f90258",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5fd499ad-caa3-48ef-bbe7-51d3733f573a"
        },
        "item": {
          "id": "daea439a-1780-4000-81fa-fbfb932a581d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "642e3b1a-0912-470e-9730-3709bc7604dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a953d92c-17b9-41a0-a9cc-06c7ffc44b63",
        "cursor": {
          "ref": "f0f004ca-9cc1-4e23-88ff-0cf2f3d76aa6",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "380e533f-f701-4c67-b01a-b73cca5e56ce"
        },
        "item": {
          "id": "a953d92c-17b9-41a0-a9cc-06c7ffc44b63",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "75638ec0-9bee-4a59-bbc0-8256c4bee908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120d771c-c1ef-4165-a108-5938f51c8a2d",
        "cursor": {
          "ref": "d3398a17-3047-4068-8575-344d0ff4436f",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8ccc6947-ee5b-41a0-83f9-c54399c97ff3"
        },
        "item": {
          "id": "120d771c-c1ef-4165-a108-5938f51c8a2d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f988d939-a6b4-41e3-909f-dd00b2508eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca21854-4f90-433d-9220-615a6e6bd0d4",
        "cursor": {
          "ref": "d4d599d2-b382-4d42-875b-9e50ff1da6bc",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "196f385b-66e3-4bb9-ac35-a53b785b7b4b"
        },
        "item": {
          "id": "fca21854-4f90-433d-9220-615a6e6bd0d4",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "3fbd6f3f-cbb0-48fb-af40-b55350ecab59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49b7086-b634-4b0b-b3f7-2b3c3810405f",
        "cursor": {
          "ref": "46635df2-043a-4ab8-9b57-f820fa806e13",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "829a69cd-ee35-4052-bade-f991d5610cd5"
        },
        "item": {
          "id": "d49b7086-b634-4b0b-b3f7-2b3c3810405f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0ffb8b68-704d-47cb-b655-e41f9486d128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1f0206-85c6-4f31-95a1-a2de9ae66837",
        "cursor": {
          "ref": "5d0dcca9-eb43-4ab4-a243-57bcffc45fbc",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a5b4b4a4-35b6-428b-8950-afb31a01ef96"
        },
        "item": {
          "id": "6c1f0206-85c6-4f31-95a1-a2de9ae66837",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "74d34429-a4af-46f1-b8c3-4d2d01afedcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe8ac93-db43-41db-840e-f5bc9b77b766",
        "cursor": {
          "ref": "0441dc1d-4fb2-4ae7-9304-7b7d9f4abbe4",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9a8518f2-89db-4d05-bc07-0998ed632c3b"
        },
        "item": {
          "id": "dbe8ac93-db43-41db-840e-f5bc9b77b766",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "006a66ac-63db-4f29-81c5-6f68834f9581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff10f130-1875-4414-95e6-0e28bbf1f146",
        "cursor": {
          "ref": "11778db1-38e4-4ace-ba2a-3a55ffe9211a",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "854482da-1076-4201-8621-490ae3c1504f"
        },
        "item": {
          "id": "ff10f130-1875-4414-95e6-0e28bbf1f146",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "5c257492-ea58-403e-88f0-1e9835329a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc157aa7-0380-42ca-8135-4684b0d54717",
        "cursor": {
          "ref": "855d36e4-0825-4246-9517-c15484dd335b",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d9880390-17cd-4851-b26d-f53adf270a6c"
        },
        "item": {
          "id": "bc157aa7-0380-42ca-8135-4684b0d54717",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c2bb9df2-0673-4e56-ab10-9ce7b8118e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1788b306-36d1-4e8f-a5d5-ee61b6ad66f8",
        "cursor": {
          "ref": "ad9f64ae-71c5-4c3a-84ca-96774d60b708",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5753a4fe-bbce-46df-bcac-3b3d350b6ef1"
        },
        "item": {
          "id": "1788b306-36d1-4e8f-a5d5-ee61b6ad66f8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "af940e2a-a56f-4822-8a61-82576d516551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ecb6595-c55f-43c8-a364-4e06521d5730",
        "cursor": {
          "ref": "2ebf54df-3416-4d7a-a5f0-bf8c5e4da0ff",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "63628867-064b-4f26-8380-b522080914ba"
        },
        "item": {
          "id": "2ecb6595-c55f-43c8-a364-4e06521d5730",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "1d39c5ff-f59f-4a81-a8a4-3be648cae734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42cf548b-e936-4b24-8b0f-8ba25936e1fa",
        "cursor": {
          "ref": "e7de83b3-656f-4b25-aa9c-b6ce899a50c3",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "28a2930a-8b39-4067-baa4-c4ced254b51d"
        },
        "item": {
          "id": "42cf548b-e936-4b24-8b0f-8ba25936e1fa",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "bdba15ba-4883-4415-8c79-f3811b018fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb84497-1b06-407c-a148-3e79a600aa9d",
        "cursor": {
          "ref": "e9e1037f-3fb9-4ef5-bf4a-2b95585eb9ae",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8dc4ff54-d9c2-4f1e-af5d-4eac7c1c6375"
        },
        "item": {
          "id": "ebb84497-1b06-407c-a148-3e79a600aa9d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "506ae72c-d48c-4efe-bd2e-5c7e2d116c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54bb0f8a-1eca-4545-9738-20f062b07d56",
        "cursor": {
          "ref": "995914d0-1821-4bb5-8ace-63450bd5d622",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "cefc7cf9-c369-4962-956f-b4c4bb84daf6"
        },
        "item": {
          "id": "54bb0f8a-1eca-4545-9738-20f062b07d56",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "e17e4a06-6f51-46a5-8b66-21c935be63a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0216149-c30f-41ce-9223-2f3b0193a31b",
        "cursor": {
          "ref": "6662c0c5-ea72-4a7a-90d5-f0b93b8c69f3",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "63e3bd94-f7e9-4500-8e1e-36fccd5d593a"
        },
        "item": {
          "id": "b0216149-c30f-41ce-9223-2f3b0193a31b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c9c9f130-081d-4c38-bef3-7e9c63ca7ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aeb00d0-6e07-43ac-87b6-be3f50206d9b",
        "cursor": {
          "ref": "a8a6edff-41f8-406a-8f0a-14cf6ce40bbc",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6e63b667-1677-4d48-a36d-d907eaa11c2a"
        },
        "item": {
          "id": "2aeb00d0-6e07-43ac-87b6-be3f50206d9b",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "dd1a2850-af1b-402c-8035-d2334d060acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d52019d3-285b-4d16-b9da-2b498606338c",
        "cursor": {
          "ref": "fb484fa2-5da0-44dc-a048-62542f868ce0",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "938489cd-d963-42fa-8c1b-8c83a490cbb5"
        },
        "item": {
          "id": "d52019d3-285b-4d16-b9da-2b498606338c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8bfe05d3-fbcb-4f59-b562-cb989402a26f",
          "status": "Created",
          "code": 201,
          "responseTime": 715,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "17bd9063-4a20-44c8-b657-ef054a15c577",
        "cursor": {
          "ref": "10117d84-e64f-49d7-a2db-6a295e65ed98",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "aa54e3a3-7443-462c-b723-e1ac8626af7f"
        },
        "item": {
          "id": "17bd9063-4a20-44c8-b657-ef054a15c577",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "dc9b333e-be1c-4fc8-82f8-225a142fe800",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "a02e22d0-cfed-4a15-aba5-f0bfce823a73",
        "cursor": {
          "ref": "ba48083c-ab65-48f2-a722-ff47d4655b1a",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "031d0b9b-e4d7-4dc0-b8e6-5c082c49b90a"
        },
        "item": {
          "id": "a02e22d0-cfed-4a15-aba5-f0bfce823a73",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "6598a6b4-9993-4e10-96a1-5d5d892c9145",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3bdc031a-c5f1-4f28-96fc-4491e2e151b3",
        "cursor": {
          "ref": "ee2aca27-b9ce-4f8c-913c-270cb652da30",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6ec5c9ce-98fc-4714-a82a-e5742fbe450e"
        },
        "item": {
          "id": "3bdc031a-c5f1-4f28-96fc-4491e2e151b3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d9019603-cc80-4be9-a977-a02e90d88d0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acddefda-9ebb-429b-b45e-ce20ef14e667",
        "cursor": {
          "ref": "51b84762-5d15-435f-9803-8b946f2a893e",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a249d12b-a3c6-4d6c-b241-f7722f512609"
        },
        "item": {
          "id": "acddefda-9ebb-429b-b45e-ce20ef14e667",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "28b188ab-862c-41b3-a1dc-e4701ccef715",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f8ce4259-5d15-43cf-b48f-a1e12b8c9df1",
        "cursor": {
          "ref": "02e1efe3-0542-435e-85d8-4453b15786ca",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4d2b5261-a375-4416-bd0b-b5b8cbf20325"
        },
        "item": {
          "id": "f8ce4259-5d15-43cf-b48f-a1e12b8c9df1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "00a20989-9ad6-4386-8386-b2099855e3de",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c639f238-ff41-4c60-8c27-a040a04a16b0",
        "cursor": {
          "ref": "67350f3d-cb0d-44b7-830b-b65c2f7cc397",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "dca24933-2613-4a4f-9403-48adb1c2b259"
        },
        "item": {
          "id": "c639f238-ff41-4c60-8c27-a040a04a16b0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b224a272-15f8-46b5-9a1c-09e27e8082b0",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "74bc8bb3-9378-49cc-b57d-389cc1cf1a08",
        "cursor": {
          "ref": "a271f156-aa07-4453-a94d-3cd4722bce98",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7104858f-07b0-4f41-844a-b94308868728"
        },
        "item": {
          "id": "74bc8bb3-9378-49cc-b57d-389cc1cf1a08",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e2a630b4-5b29-456e-b726-01720c6889e8",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9233ca43-39c0-4b97-aa43-395685146214",
        "cursor": {
          "ref": "d5e71528-ee4b-4a6d-8d54-f67f509ded1c",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a2459932-f27c-45cf-9158-1a099ec97f82"
        },
        "item": {
          "id": "9233ca43-39c0-4b97-aa43-395685146214",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2dc504df-00c3-4856-871f-6f1267b17091",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3a6e89f6-acb4-4463-b97e-b89e9228fd47",
        "cursor": {
          "ref": "f218980c-1e1d-479c-b4fa-7ee2b62c87b3",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4f95cc0a-770d-458f-9470-7718984374cd"
        },
        "item": {
          "id": "3a6e89f6-acb4-4463-b97e-b89e9228fd47",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "beab14cf-b1d0-4f99-bd80-7661231a493b",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "845d131d-5ffb-4061-9d43-fa0010cdba66",
        "cursor": {
          "ref": "fc131cc9-3083-4381-b47e-0c690e5b18ce",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dc704c1d-2502-4807-a08f-4f744dd06557"
        },
        "item": {
          "id": "845d131d-5ffb-4061-9d43-fa0010cdba66",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f5e45a8e-6228-49ef-bf8a-42b68c0ce827",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6b204643-226b-4cc9-bbc3-7665e12e335d",
        "cursor": {
          "ref": "23198aa2-ebc9-4883-9df1-e741f070879e",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8bbaa48e-6896-4006-9533-3f24408e5157"
        },
        "item": {
          "id": "6b204643-226b-4cc9-bbc3-7665e12e335d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "22cb0732-b050-4706-a86f-a0b32c0a4551",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "344143cc-b859-4bac-8896-15469fd33323",
        "cursor": {
          "ref": "3b51ae3b-b9e9-4635-9e9e-9733aa6bcf45",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "446aaea3-7b52-4864-8eb9-c4bebfc7c094"
        },
        "item": {
          "id": "344143cc-b859-4bac-8896-15469fd33323",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "3a797af9-3a0e-45a4-b0ae-6fdaaa1c3cb9",
          "status": "Created",
          "code": 201,
          "responseTime": 408,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f8a5937d-cda0-4c5c-8e0b-cc9d44343062",
        "cursor": {
          "ref": "bda96a96-1f3a-4033-a3a4-bb1fcf80b8c2",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "132fdd5f-1eb0-4b34-b88e-1731e44c5436"
        },
        "item": {
          "id": "f8a5937d-cda0-4c5c-8e0b-cc9d44343062",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4a2faebf-8c76-4b5e-9523-7688ba33ee6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b69247-e292-4dd4-a4e8-fa1711f7b67f",
        "cursor": {
          "ref": "d6f6cdc3-50b9-4169-b362-33d281b46f04",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fa9ace93-f852-4d89-86d3-c28dcb37fe75"
        },
        "item": {
          "id": "23b69247-e292-4dd4-a4e8-fa1711f7b67f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "c774ee49-0ff3-42d7-9db1-06cc1fe23d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3265a99-c34d-473a-9d36-65dceac72c94",
        "cursor": {
          "ref": "674b6d4f-8872-4b46-a0a6-fd3c780cf418",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5e9c6eef-62c9-4ea9-a5bf-3ed65aa2ecec"
        },
        "item": {
          "id": "d3265a99-c34d-473a-9d36-65dceac72c94",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3f24c007-3857-4a8a-91b3-797fce9bc2fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783831ca-77dc-4da5-a3fc-95e61cad2be3",
        "cursor": {
          "ref": "1b918e09-80a2-4812-a75b-3f6ebd5520f5",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f0eacb60-f83e-4648-8f49-6d1328995a33"
        },
        "item": {
          "id": "783831ca-77dc-4da5-a3fc-95e61cad2be3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8f6ca876-3cbe-40be-a9dd-2272caa85ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf458cb-728c-474d-be04-7050e69143b4",
        "cursor": {
          "ref": "0ceb015d-641f-4c94-84d7-61119dc3fe0f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d0594df1-169e-4e4d-ae1d-708ddaa39d18"
        },
        "item": {
          "id": "abf458cb-728c-474d-be04-7050e69143b4",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7b3e84da-6b35-468b-98c8-d15dddc726b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a0c0eb9-f074-4102-91c6-d6aa7245e28f",
        "cursor": {
          "ref": "97e9aac0-d5eb-4bb8-b646-a3d4612a11f9",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "01ae38ad-237c-45e1-8fc3-e727ace41d8d"
        },
        "item": {
          "id": "5a0c0eb9-f074-4102-91c6-d6aa7245e28f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "27ecb64c-6427-49b1-9725-43decbe13b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cb101a-b7f4-4be9-ac71-f16484265bf2",
        "cursor": {
          "ref": "6eb16e03-0467-4359-97d3-5ec24993e275",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "88567950-f0b1-42be-aa99-cb3d0d3cef86"
        },
        "item": {
          "id": "91cb101a-b7f4-4be9-ac71-f16484265bf2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6b0cc0a8-8d8b-4e8f-b113-cc29f74ee959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a07fa8-e297-4e27-b68b-ee24ccdf4247",
        "cursor": {
          "ref": "a4104a16-5998-4ffa-80df-aeda4386841b",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "1bdb45b6-da09-4264-91e2-0dd4ecdc9664"
        },
        "item": {
          "id": "f7a07fa8-e297-4e27-b68b-ee24ccdf4247",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8d081673-7da9-41d7-a0dd-df5dca757bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3d44873-e99b-444e-ab56-07ee1000a790",
        "cursor": {
          "ref": "75ed5078-6e6a-4445-9f8c-13d55bb227df",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2fa09d4c-db7d-45be-b1af-308e36ca8c72"
        },
        "item": {
          "id": "d3d44873-e99b-444e-ab56-07ee1000a790",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "664ab7ce-77b2-409c-ab99-f675f9c2a087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331cb415-7915-49c2-87c0-72b3ee831acc",
        "cursor": {
          "ref": "b85dfdef-3e88-4c6b-810d-20f5a4f1c9ae",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "5a01d106-9ea4-4074-916c-a1ad29ba8132"
        },
        "item": {
          "id": "331cb415-7915-49c2-87c0-72b3ee831acc",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d2d4ab90-9524-4b8f-941a-6a187201058b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c7c2ff-de4f-4ef5-8605-356de1e43ee5",
        "cursor": {
          "ref": "aa5183ab-81ff-4f86-a352-cbc29d4c942d",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ba075cca-a322-4616-867a-cf8f56ae0334"
        },
        "item": {
          "id": "c1c7c2ff-de4f-4ef5-8605-356de1e43ee5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "66ee742f-9116-483e-aa32-d0470bfe3eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ca029b-50b0-4e03-bb70-5035f1d10921",
        "cursor": {
          "ref": "b077ba1c-e99b-4822-99ba-78c0d59204a4",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9bcfc127-7639-4cec-9147-12b861aa2d50"
        },
        "item": {
          "id": "11ca029b-50b0-4e03-bb70-5035f1d10921",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5fc4ad71-9354-4c28-8b8e-1237f9f2ff3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9620b5e6-9b84-452d-87c3-2c4c4fbb9685",
        "cursor": {
          "ref": "fe4392d3-06e5-41a1-926f-164944070885",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cdb9c53b-e7ac-40ef-9313-ba34f3af02a8"
        },
        "item": {
          "id": "9620b5e6-9b84-452d-87c3-2c4c4fbb9685",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "374a48eb-4ea5-4d9c-bfee-f2c39d15a4c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98752d5-f7e7-4600-868c-9a29c75edd9b",
        "cursor": {
          "ref": "942ce531-3945-4985-80da-98d8d0f2bc57",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b840dc23-62b8-46c1-9eff-5125221875e4"
        },
        "item": {
          "id": "e98752d5-f7e7-4600-868c-9a29c75edd9b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a057384d-17a4-468e-a064-1916deb34722",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "d8f6d624-f08b-4f79-909f-4bfb7aecff20",
        "cursor": {
          "ref": "647ba8c0-5d2a-469a-9211-513ee969c5f0",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "ceb09a4a-8279-4922-b026-42e0c84a4f26"
        },
        "item": {
          "id": "d8f6d624-f08b-4f79-909f-4bfb7aecff20",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "420d2f46-1cdb-42a2-84d8-7a7071e3c17a",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "9d513b69-d583-4bfa-8a2b-1591801cc0c0",
        "cursor": {
          "ref": "ff916d0a-7404-4292-acbe-c83e7362a274",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2f81d976-fc7a-4966-8b0c-9894d175d363"
        },
        "item": {
          "id": "9d513b69-d583-4bfa-8a2b-1591801cc0c0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5c3b013a-7a52-4941-bb69-8e87845a3126",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6d0e3cdf-b53c-4fbd-a02a-96657bf778e7",
        "cursor": {
          "ref": "c0c20063-e48d-4707-9470-eb0cc7d5477a",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1945547d-ae2c-47d0-9320-97138f33390d"
        },
        "item": {
          "id": "6d0e3cdf-b53c-4fbd-a02a-96657bf778e7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "671b561e-e399-4142-81b0-22f657e3e452",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f0eac8c6-497f-4e1d-9901-52cd02fce886",
        "cursor": {
          "ref": "4ceb2826-f30d-4694-8504-bb74b9ba9121",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1b2238d7-782c-46a0-a1c3-f94a46acc10d"
        },
        "item": {
          "id": "f0eac8c6-497f-4e1d-9901-52cd02fce886",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "38d0b81f-b7f9-4383-9482-42c7fee79f12",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8e122a37-2e85-4b94-8fed-2efca41bb19c",
        "cursor": {
          "ref": "5b75ff7f-27f6-49a0-be78-79d45f481a17",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4710b256-7b6f-4405-aaf2-4a1e55d2c9f9"
        },
        "item": {
          "id": "8e122a37-2e85-4b94-8fed-2efca41bb19c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d6a4a3f3-8287-40db-8d1e-81e2391f6216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e5a469-44df-4371-b575-a0fc195908d5",
        "cursor": {
          "ref": "72992ee8-fba3-42e2-84cd-220c1195f0b4",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6e734209-7e06-4915-a319-b786dd30aec2"
        },
        "item": {
          "id": "c3e5a469-44df-4371-b575-a0fc195908d5",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5cb60eb1-c90e-43b1-a437-b228fd1856de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843b0a5e-2133-428a-98b5-c4d01c0fe2be",
        "cursor": {
          "ref": "6a5a4ecd-311d-4c6f-9856-79e3cffe4fca",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "591e26f3-84ff-4c67-b053-a89dab4a26dc"
        },
        "item": {
          "id": "843b0a5e-2133-428a-98b5-c4d01c0fe2be",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1376bdca-7208-4ea3-8c74-93a709654fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1faa3f-49a3-42fb-b10a-7555a18b8d7f",
        "cursor": {
          "ref": "1b48ef45-641b-4568-b0bc-f1b9de47bbc4",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d90e2f02-77b7-4d34-95d6-208543645c38"
        },
        "item": {
          "id": "de1faa3f-49a3-42fb-b10a-7555a18b8d7f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "87c66606-de02-4b47-9008-60d37d1e5193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3acfaaa-4237-4089-bbbf-27c437dbd792",
        "cursor": {
          "ref": "60748375-a78f-46a5-9de6-de32ccb79e77",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3956fd72-a99d-4a8e-a366-5ae5f578daba"
        },
        "item": {
          "id": "e3acfaaa-4237-4089-bbbf-27c437dbd792",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "98e0a41f-73df-4ca7-917a-42d70a2954ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0bf7db9-802f-4cc9-994c-a6caab8bc82d",
        "cursor": {
          "ref": "73852774-9b92-42e3-925d-3226e80e981d",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "3a35b1c6-669d-4c8b-9fa2-bce2c2c0dfdc"
        },
        "item": {
          "id": "b0bf7db9-802f-4cc9-994c-a6caab8bc82d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4ef86590-1497-4be0-b1c4-8be41f5be752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad0ace9-c3b8-495c-a245-10c823c3a1ad",
        "cursor": {
          "ref": "3769e1d8-92de-4172-80db-8c4046b8bfd2",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "662689d1-12b1-4d23-ab70-1831ad12c4ed"
        },
        "item": {
          "id": "6ad0ace9-c3b8-495c-a245-10c823c3a1ad",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5e50d8cd-681f-4ce2-b446-f833ddadc505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f59b2c-5a3e-4535-b422-dc402916ac33",
        "cursor": {
          "ref": "d60a0033-6f58-48e5-81e4-2cd8bc691953",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a54930e2-b90e-4ae8-b28a-4a2419e61b78"
        },
        "item": {
          "id": "33f59b2c-5a3e-4535-b422-dc402916ac33",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5f8ffd37-c578-419c-b9a5-49af85dca497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3f26cc-ff23-432e-9012-af8c1afb5b46",
        "cursor": {
          "ref": "2eed887e-d5ef-4b57-8acc-e0f6c5b4c1e3",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0ff4dbc1-0613-4c4c-a250-bffed3d58109"
        },
        "item": {
          "id": "ea3f26cc-ff23-432e-9012-af8c1afb5b46",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d49e4b5e-694f-4a59-b220-630993c1c2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c0d6a1-07ce-4169-89b6-7cddfeef2c78",
        "cursor": {
          "ref": "653c85e2-a7b5-49c7-9f12-c76fa8939371",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "185ae4f8-3f06-4bbd-bf7f-dd62b028b6e9"
        },
        "item": {
          "id": "a2c0d6a1-07ce-4169-89b6-7cddfeef2c78",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e6a633e4-df50-4da4-ac38-75c9c9d9a058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa99cbb7-d6f5-4314-a82a-eaabe25be995",
        "cursor": {
          "ref": "e1ef3e80-da89-47eb-a61e-3e1366ca054c",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6bd8d514-eb4f-4965-a42b-64105a84b8c7"
        },
        "item": {
          "id": "aa99cbb7-d6f5-4314-a82a-eaabe25be995",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "11b4fb61-ec96-47e8-bf52-9f1e0eb554f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7db83eb-4340-4664-a0d4-f0a65126dae7",
        "cursor": {
          "ref": "ef718365-4df0-437a-a1a3-b2a66b3df515",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1971bc10-b5b2-4089-958d-6a42d0c71e02"
        },
        "item": {
          "id": "f7db83eb-4340-4664-a0d4-f0a65126dae7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9561f1e5-8d85-49e3-8096-cdc5a23bb34f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2fdc30-c17d-4049-916a-8439131f8d74",
        "cursor": {
          "ref": "af75b572-807a-41b4-8a14-364119eaa159",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d4486d68-4534-4bc1-81e4-d5807462708b"
        },
        "item": {
          "id": "ae2fdc30-c17d-4049-916a-8439131f8d74",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4aad0426-3f2b-4dd5-b230-6f0e8fc1ce96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ad4d77-fea7-435f-b8c8-8432c949d8df",
        "cursor": {
          "ref": "ff979967-dde4-433d-acd0-9365909958ce",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "661221ba-9024-4f2e-bfa5-0e4a04f957ef"
        },
        "item": {
          "id": "a1ad4d77-fea7-435f-b8c8-8432c949d8df",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4b4bc3d5-2abf-4d7d-a961-1b37e1849ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8d2114-decc-48b5-ac16-65d3af59b157",
        "cursor": {
          "ref": "b9a449f8-b6b7-4e50-bef3-4f90135e4d54",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ad4ece78-1110-4d6a-98ec-ebb87a94dfd2"
        },
        "item": {
          "id": "dc8d2114-decc-48b5-ac16-65d3af59b157",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a857b388-8182-4033-9d9e-f2a59838dec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7363cb23-67da-4992-8f41-2a657169201c",
        "cursor": {
          "ref": "a580e340-b850-4ef4-8bb0-159787e36465",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a4fcc153-7f7c-496d-b32c-9f8fb668bcbf"
        },
        "item": {
          "id": "7363cb23-67da-4992-8f41-2a657169201c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f747102e-db3f-4a6d-b50b-87160f60f05b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0324db96-0522-4307-8e9d-b274e96ab644",
        "cursor": {
          "ref": "50a07dd7-806c-44bd-8236-ac63feef4867",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ba5f736b-6e2e-4243-88b0-08f28a964b2b"
        },
        "item": {
          "id": "0324db96-0522-4307-8e9d-b274e96ab644",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9892428e-c5a6-45af-8db0-2452b567a6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8054d298-d546-429a-ab03-a7754b918c40",
        "cursor": {
          "ref": "e0f6aa1d-868d-438d-ae64-f6da55c1fc31",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "bfd73d87-31f6-4bf8-91ad-cfab28a42568"
        },
        "item": {
          "id": "8054d298-d546-429a-ab03-a7754b918c40",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7ef768e8-dee9-4c3d-9cf6-a26fdc1fb406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217a5578-a12d-4acb-a968-51e461ab70a5",
        "cursor": {
          "ref": "fc267509-8e0e-4e73-ba15-8fe90233737a",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "43b79bec-a2f0-4387-b6f5-71f2f174d1ec"
        },
        "item": {
          "id": "217a5578-a12d-4acb-a968-51e461ab70a5",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a99f6fad-75ef-4628-97f9-b2807700be76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c23d67-326f-4676-94c7-77c2c865d32d",
        "cursor": {
          "ref": "709bdf5e-5e8c-4479-89cf-1c46ed87f9f1",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "52307894-01c8-46ca-9a34-e8b8868658e5"
        },
        "item": {
          "id": "24c23d67-326f-4676-94c7-77c2c865d32d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d88064c8-8ac1-49dc-87cb-679bb9d9254b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25d3a71-e14f-4888-9ae2-e8d3e28c5391",
        "cursor": {
          "ref": "455473d4-0dec-4709-ab95-5ea5e777a42d",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1cb080c9-a18a-45b8-b68e-f0bcebd0344d"
        },
        "item": {
          "id": "f25d3a71-e14f-4888-9ae2-e8d3e28c5391",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b2df9809-2b66-48ed-98a5-13deba348917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c3ded1b-0cf4-4635-b890-06a531da2a21",
        "cursor": {
          "ref": "9ce0650c-837f-4e5e-80d5-bfa3ce8bdd0d",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "fd033324-7183-490d-b226-403a97466f2c"
        },
        "item": {
          "id": "2c3ded1b-0cf4-4635-b890-06a531da2a21",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e8f074be-ff6f-400d-9b7a-826f3df3e981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da66e83a-bfee-4bab-bf09-d8a7dc39f051",
        "cursor": {
          "ref": "a3a7053c-4e7f-44ff-bcaa-87ac75621840",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "75384864-c289-4aa9-b304-c2eaf528bee4"
        },
        "item": {
          "id": "da66e83a-bfee-4bab-bf09-d8a7dc39f051",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "afb9f286-3bbe-4626-8b02-538a65a53844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4969812-d19b-4067-995a-0f309de8ac53",
        "cursor": {
          "ref": "f973e86c-32e1-410c-b240-f36ffef81e0d",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0c113b17-bfaf-4ffa-b5a9-8086dc9b8dc5"
        },
        "item": {
          "id": "e4969812-d19b-4067-995a-0f309de8ac53",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "adffbfb6-ab68-4459-b498-9cb97d571a8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab80004f-dd78-4fd7-9f9f-bd2ef1950f63",
        "cursor": {
          "ref": "340ea604-ee09-49b6-9e23-cbe076a8d7fb",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "009361dd-c73b-4c2c-a29b-9706c71ed770"
        },
        "item": {
          "id": "ab80004f-dd78-4fd7-9f9f-bd2ef1950f63",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "24ce4ef2-82fd-48b4-ad86-d953fa45bc38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6054a4fa-3490-4ad0-a181-69d3be0e7070",
        "cursor": {
          "ref": "fc4728a4-7c33-4163-ba76-b611c64d3c9a",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a7b83bb0-34e5-4595-bcfa-5889bfaa15a7"
        },
        "item": {
          "id": "6054a4fa-3490-4ad0-a181-69d3be0e7070",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "56798261-fcb3-40ca-ae6a-f96f5487388b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46bf566a-b997-4f88-b9a2-27a64dbb8116",
        "cursor": {
          "ref": "230b65e3-bdd0-4e14-bc81-ffe4afaef2c7",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e869aa8e-d978-4e52-a106-2ea56bcc19a2"
        },
        "item": {
          "id": "46bf566a-b997-4f88-b9a2-27a64dbb8116",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c5d1adc8-1411-443d-a55c-697715db96de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a15ee9e-967c-4648-aacc-e1dafcc6e609",
        "cursor": {
          "ref": "0d1d0606-1165-4f15-b2b4-897e00296e7b",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8a193eb1-4d1d-4254-ac22-33e8c81b3de6"
        },
        "item": {
          "id": "6a15ee9e-967c-4648-aacc-e1dafcc6e609",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "f11fdb47-a158-4701-afac-acb996eb57b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801d2ce0-72c1-47a6-98f3-312b39a4b638",
        "cursor": {
          "ref": "cd3f55a6-d0b6-4e58-8d20-65f1b955c8f9",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0606d9ed-48be-4a81-bc33-45edf4feb0a3"
        },
        "item": {
          "id": "801d2ce0-72c1-47a6-98f3-312b39a4b638",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e371803d-f11f-431a-b471-e97250b5f4be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1addd31c-ace4-4d7a-bb02-5dcaacc3617e",
        "cursor": {
          "ref": "4a103597-47c8-4860-be8a-50605a5775b5",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4d25d9f8-1036-43d3-8b0a-2a20bbc6fc17"
        },
        "item": {
          "id": "1addd31c-ace4-4d7a-bb02-5dcaacc3617e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ffb5f1d0-ed97-4984-8411-c09bd6554089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d08a767-c6c7-4c39-872c-8457b0f1f084",
        "cursor": {
          "ref": "ca526b24-d2f3-4c97-b8db-f213625e142a",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "dc927b62-ad2e-41fe-a135-e630f0ac60c2"
        },
        "item": {
          "id": "8d08a767-c6c7-4c39-872c-8457b0f1f084",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d17c30c4-6c6c-41cd-95a3-d6ebc25de233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae1bdb25-e8f3-4a28-afde-add8349edc44",
        "cursor": {
          "ref": "840c841c-ef04-4076-a9c0-d14f9f46c554",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "664b5e92-60de-499a-b7c3-775040dd9417"
        },
        "item": {
          "id": "ae1bdb25-e8f3-4a28-afde-add8349edc44",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "88c54d1f-16e5-4129-980e-2fe3546ead9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32d25e1-ede6-4462-b17e-c141cd40eeb7",
        "cursor": {
          "ref": "85d85864-6bc4-487a-8482-7dfa172d74bb",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "88afe423-49d0-4916-9944-1a27c183f75a"
        },
        "item": {
          "id": "f32d25e1-ede6-4462-b17e-c141cd40eeb7",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "f45e7137-e498-4c16-a068-38e40be61c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "03e1abda-794b-4707-9936-b17a1041f677",
        "cursor": {
          "ref": "1b63dae4-36dd-44d2-a85c-7402dab7642f",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "326af8ca-2cd8-4ff7-9902-82b9a8601416"
        },
        "item": {
          "id": "03e1abda-794b-4707-9936-b17a1041f677",
          "name": "credentials_issue"
        },
        "response": {
          "id": "153be8c2-9520-4f88-b070-fc20578b81dc",
          "status": "Created",
          "code": 201,
          "responseTime": 343,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "7abe7bd5-2566-4b00-bb72-2504ddd10b69",
        "cursor": {
          "ref": "951e5be2-03bb-45f7-8fa7-3fad0501c6e1",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "31ff04e9-11cb-4158-9b88-51b60469229c"
        },
        "item": {
          "id": "7abe7bd5-2566-4b00-bb72-2504ddd10b69",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f320a806-b423-4171-8b6c-d660fa28af35",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab4e7df-ed7c-411b-8393-687f80430493",
        "cursor": {
          "ref": "ca569587-e0dc-4b15-bf83-ef8a535b72e2",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "206f515d-227f-4a27-85b3-ff7d9a0edffc"
        },
        "item": {
          "id": "2ab4e7df-ed7c-411b-8393-687f80430493",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "886d8e01-d218-40bc-a226-29d98db54377",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f08faa-aefe-4cac-a72d-dbc30cdb6138",
        "cursor": {
          "ref": "e88295d6-93ef-4c17-a001-cfd972ee41c1",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "436583ff-9cff-46a2-855e-06fba33ec3dc"
        },
        "item": {
          "id": "e3f08faa-aefe-4cac-a72d-dbc30cdb6138",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a988a489-1583-4442-8974-35ba4ddbbfe6",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d9212e-6a9d-4864-a2ca-854065951ec9",
        "cursor": {
          "ref": "57dfd6a3-687d-4068-bd09-02d7ce5ca91c",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "51815fa9-7c91-4080-b15d-05299a9c9fcc"
        },
        "item": {
          "id": "52d9212e-6a9d-4864-a2ca-854065951ec9",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a45570ec-85f4-4afa-b355-aea353ac5791",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-11T00:37:28.558Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-11T00:37:28.558Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "42d5a2f4-f06f-4d8e-91ef-89b2ed95aead",
        "cursor": {
          "ref": "49ae7b01-0037-4686-8a14-eb0f712defab",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "edf6e4e0-d6f1-4b6b-9575-7a44e4fa1df6"
        },
        "item": {
          "id": "42d5a2f4-f06f-4d8e-91ef-89b2ed95aead",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e4cf28af-ee70-4938-bd26-36bc12ad1912",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e73400d-58fd-4e9a-baf7-0bce5f873d75",
        "cursor": {
          "ref": "fd363333-95e0-44ca-aa6b-b73287f38e87",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "17f3e07c-ae37-4390-94f0-2c236f124265"
        },
        "item": {
          "id": "9e73400d-58fd-4e9a-baf7-0bce5f873d75",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "922c124a-9510-4ec5-a58e-8379ad9454ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26202016-b5d2-41aa-985d-0f8768be7d7a",
        "cursor": {
          "ref": "91a5b0d7-1e1d-4dfe-b8da-f17925797257",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5829f4ad-991c-448b-a901-88d5389854f8"
        },
        "item": {
          "id": "26202016-b5d2-41aa-985d-0f8768be7d7a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "57a925c3-480f-4ff8-9342-85aafc51b545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29965690-acd5-4c65-849b-98acf664f072",
        "cursor": {
          "ref": "1aaad457-d9be-4503-81dd-1c118df62416",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "686a3f95-802f-492a-a4e6-a1ddb6c740d9"
        },
        "item": {
          "id": "29965690-acd5-4c65-849b-98acf664f072",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6438a26e-488b-463a-b153-b1891aa7504c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfa1513-7cdb-45db-81ca-65af51e86fa0",
        "cursor": {
          "ref": "1aac00fc-93c5-41ff-baf3-1b9227b28168",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8b05acfd-a9f6-40ff-90a1-5ead89aab697"
        },
        "item": {
          "id": "fcfa1513-7cdb-45db-81ca-65af51e86fa0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "4573b341-f43a-440b-a82d-e5bcccb53d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92ed5a8-2792-41cb-a21d-918160e518dc",
        "cursor": {
          "ref": "d2b56434-57f7-48fc-8ac0-4877ab7953e3",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "6f35f002-b13a-4215-8a8b-702234aa4baf"
        },
        "item": {
          "id": "b92ed5a8-2792-41cb-a21d-918160e518dc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "51825a03-a9a8-4997-8574-1421a6355b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7328d7-4793-4704-95fc-efa353f07c3c",
        "cursor": {
          "ref": "85d06539-a162-472a-8b84-bfefbdbec968",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c2240412-e645-434a-b8b0-5cc8ac83f278"
        },
        "item": {
          "id": "1f7328d7-4793-4704-95fc-efa353f07c3c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a913f133-f80c-47cd-b210-8656566cda2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9541814a-553c-48d4-a1cf-2d85f1fa139d",
        "cursor": {
          "ref": "ce8ef964-b81c-464a-99e2-7af238dadacf",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8c141a03-7f7a-43a1-9639-57390558bff7"
        },
        "item": {
          "id": "9541814a-553c-48d4-a1cf-2d85f1fa139d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "45607a3d-9c51-468a-8a60-1c80c849d3ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ad49c72-6ed8-4871-8036-62d17e08519e",
        "cursor": {
          "ref": "1bfa5d28-356e-4fa3-bb91-1cf1b7f8eb9d",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "897fe78e-72f1-4922-9e59-ccd4756c36ca"
        },
        "item": {
          "id": "3ad49c72-6ed8-4871-8036-62d17e08519e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d5147e45-bdf2-46b4-9fc9-b68bc954d394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8664c3ba-cc95-4938-8ce2-f282699d034b",
        "cursor": {
          "ref": "337ab8e5-8f74-4e58-bf57-e8a5e0817979",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b024d783-0021-4912-a4a9-59a253ab6632"
        },
        "item": {
          "id": "8664c3ba-cc95-4938-8ce2-f282699d034b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "37246c10-9ccf-421f-8624-de4a6efd27c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caab70e9-06c4-4660-9d00-ba8a1313dc9d",
        "cursor": {
          "ref": "f3597eed-8512-448c-a517-ff63720ef8ea",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7f37c8be-16a6-4dd8-8c3b-3c685f840ea7"
        },
        "item": {
          "id": "caab70e9-06c4-4660-9d00-ba8a1313dc9d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "557ab745-10b7-4d24-8c81-e4c5f655bd2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c768f5-5c2c-4fcd-a0f6-0dadcc365526",
        "cursor": {
          "ref": "33ff83c0-d68e-4464-a846-4fca40bcbab2",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a3ff7e53-1317-46c4-8755-eefd7da43572"
        },
        "item": {
          "id": "a4c768f5-5c2c-4fcd-a0f6-0dadcc365526",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9dbcd852-f2cd-465b-9753-359a35117874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32841e63-b7ce-45b1-a6fc-17e29cc1f974",
        "cursor": {
          "ref": "b5418fe3-d94e-44ed-8cd8-25cead701d5e",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c7247855-a36e-4dc5-a97a-40bad4da4c41"
        },
        "item": {
          "id": "32841e63-b7ce-45b1-a6fc-17e29cc1f974",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "92dea87e-ae93-447b-ac24-6eda39d43613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55410b01-145d-40a1-af1f-076e13ccb35e",
        "cursor": {
          "ref": "b2267218-3698-40fe-a1ea-90e8d786d0a1",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1d5c95cb-d8e5-41ad-bcab-58aa9432b6b9"
        },
        "item": {
          "id": "55410b01-145d-40a1-af1f-076e13ccb35e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0ce635f6-b112-4424-90bf-515a7a55319c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 117,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "f5e5f9f0-ce99-4ca8-872e-a8c2a6e688d2",
        "cursor": {
          "ref": "0897e53f-cff9-4424-8b1d-c912562baaa9",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0959ce59-727f-4811-be25-94f6fa9dc3cf"
        },
        "item": {
          "id": "f5e5f9f0-ce99-4ca8-872e-a8c2a6e688d2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "26566731-fd80-45a8-85d9-169f1325eace",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 127,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "33ab1a00-9fdf-4878-9543-0e87b48d1772",
        "cursor": {
          "ref": "1d89ee19-5c61-4fef-ad54-ec454e6559d9",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1476994e-7add-4e83-8946-99c036f0738f"
        },
        "item": {
          "id": "33ab1a00-9fdf-4878-9543-0e87b48d1772",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9c30c887-12b8-4f4b-897a-7a5465db0829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79b76fb1-24d1-4a43-8881-fcdc388dfd71",
        "cursor": {
          "ref": "03db5423-6b1a-4de4-9097-dc18578714c9",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8786c9f5-704e-4cd5-8bc5-075d7891616d"
        },
        "item": {
          "id": "79b76fb1-24d1-4a43-8881-fcdc388dfd71",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b09cca07-ddb9-45aa-84aa-078ea8007572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9798c072-f9e6-457b-9978-476a68106932",
        "cursor": {
          "ref": "75f9c235-5b48-42f3-b34d-7924fe3510c8",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "b28e2ccc-fa5e-4537-a50f-d0b49e9be3fd"
        },
        "item": {
          "id": "9798c072-f9e6-457b-9978-476a68106932",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6eaf2578-8f84-4211-9ad9-43cc18b6ecba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c704bbb-5e1a-41c9-ae70-5588712b3046",
        "cursor": {
          "ref": "5f17e034-6a4f-4e56-a78d-a4a572ff5289",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2a812e7b-6717-4e71-b33e-6b55c42f3a5d"
        },
        "item": {
          "id": "6c704bbb-5e1a-41c9-ae70-5588712b3046",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c468b048-6b6f-4ace-9bee-4681acc9610e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1346ed-d779-475d-8397-4b8a2309f7ec",
        "cursor": {
          "ref": "764c4847-a240-4b70-922b-b4c1992d839b",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3354d1d7-40ed-4023-a686-e4fb42e6a0c5"
        },
        "item": {
          "id": "1d1346ed-d779-475d-8397-4b8a2309f7ec",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6308b01f-51dd-4ef7-8f86-39b21483529c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd29df2-8b09-4050-99b5-6b87dc5c45bc",
        "cursor": {
          "ref": "62264f51-ba78-4797-8b0c-784a7e67d8f7",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "a698f934-7b11-438f-aa41-04370d10948f"
        },
        "item": {
          "id": "bcd29df2-8b09-4050-99b5-6b87dc5c45bc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1999fde5-3bd5-4a7e-a74c-85d5f932a9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e27311-8a95-465c-9fdf-3a4fcd7b1f86",
        "cursor": {
          "ref": "b9cc42ca-0734-4e94-8fdc-eef19a4271d3",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1feb1a48-6fef-4917-83ff-06cb9fdba1c8"
        },
        "item": {
          "id": "20e27311-8a95-465c-9fdf-3a4fcd7b1f86",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e50d443b-f5ee-44e9-8a39-cd7868510707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d190a8d7-6b12-4c70-9272-e886439096c7",
        "cursor": {
          "ref": "fd3c2db1-ad15-4559-9886-7fafb35bfbbf",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4dee9c3d-8fc2-4890-b40e-0a83016db050"
        },
        "item": {
          "id": "d190a8d7-6b12-4c70-9272-e886439096c7",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8957fb58-6037-4b90-9542-b304835ace96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96542234-9479-42d3-b7a8-4bc9f33ee89e",
        "cursor": {
          "ref": "f48983fa-6e92-432e-bd4c-ca02357cf307",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "786b38db-af1d-4791-b7cc-e8ad08db9074"
        },
        "item": {
          "id": "96542234-9479-42d3-b7a8-4bc9f33ee89e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4c5bb1f1-0343-4751-8169-57ddf2e82f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e68459-9da3-42a6-81f4-cdaf0f414c51",
        "cursor": {
          "ref": "6addcdd8-5bd6-476a-b62f-f73b1f89db06",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b3b748a9-dfd6-4352-9ac3-74afeea68d98"
        },
        "item": {
          "id": "38e68459-9da3-42a6-81f4-cdaf0f414c51",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3e1ebfc3-c762-4baf-b7f5-91e756ae40a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e3e114-f7fa-4671-9a65-72d6d716a20c",
        "cursor": {
          "ref": "7c9979fc-9072-4db5-b931-953e20b3c0df",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0a8cef91-6fe5-485f-902d-db01684cf6a3"
        },
        "item": {
          "id": "b1e3e114-f7fa-4671-9a65-72d6d716a20c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1aff8f13-62c0-4e88-ae53-06345d9cc50f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64213669-a921-47e8-98ee-ea78755b7965",
        "cursor": {
          "ref": "fe50b587-cbcd-4a70-af8f-4159d0a628ee",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "efcd1e8f-0aa2-4306-8381-39d8fc03f95d"
        },
        "item": {
          "id": "64213669-a921-47e8-98ee-ea78755b7965",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "40487c7a-7777-4213-bbfc-5c01ec1b7181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2af5636-89ea-4d45-9acd-b11423266d1a",
        "cursor": {
          "ref": "b474bc4d-deb3-4527-8c04-75d065c7a39d",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "56a47da5-b971-43a1-b616-c7be8edd6421"
        },
        "item": {
          "id": "e2af5636-89ea-4d45-9acd-b11423266d1a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "dc394e3f-6580-4dd2-88ba-0d3be2f287fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb492deb-c1da-43bd-84d8-b001133661aa",
        "cursor": {
          "ref": "a9ead867-63ca-4162-ba15-9d80e0000382",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "61d53e0a-dede-47ef-bd10-538342a4b373"
        },
        "item": {
          "id": "bb492deb-c1da-43bd-84d8-b001133661aa",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9c5b1f4f-5afd-44bd-b2d9-dce32f8c0e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e88332-a458-4725-8713-83d73a5c48c3",
        "cursor": {
          "ref": "4310919f-0561-4539-a28b-b94f0e1b3459",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3004ee34-d6f6-45a9-afba-46bba96e8718"
        },
        "item": {
          "id": "18e88332-a458-4725-8713-83d73a5c48c3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c8b0e31d-922b-407d-9056-87b658752696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1e80bf-34a5-44a9-95c9-9e90a42aba87",
        "cursor": {
          "ref": "f5ca4824-b5b3-4ced-b532-86a1e5191bea",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5c7b4734-d20a-429e-b5ca-891ff9efc7b5"
        },
        "item": {
          "id": "0d1e80bf-34a5-44a9-95c9-9e90a42aba87",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f5622b02-5f4d-4a1f-bf47-7cd2542ab39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b79b106b-18f6-49e3-b350-6052b2ccea9d",
        "cursor": {
          "ref": "97cc2676-c547-4f22-8a4e-9caeca064f98",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "dcf55f7a-752a-483f-a8f2-ef091b2fea9a"
        },
        "item": {
          "id": "b79b106b-18f6-49e3-b350-6052b2ccea9d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9cc4aed6-a205-4500-af05-3ee40421e953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8970bb9-5c7d-472c-968c-e49ca169edeb",
        "cursor": {
          "ref": "8c00b40c-ef8a-43f0-8a8c-ab5d564904f5",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d5c9b3c0-65c0-47d2-bdd2-f053a4a1ee00"
        },
        "item": {
          "id": "b8970bb9-5c7d-472c-968c-e49ca169edeb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c061c44c-693c-41e6-a73e-f667708b666e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 115,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "06a011ab-d110-4593-98e7-049ff2375513",
        "cursor": {
          "ref": "d3bc4fda-cce2-42e7-9363-88c186ac6d62",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f33b2594-4b31-47f9-b1a6-2ce26698b379"
        },
        "item": {
          "id": "06a011ab-d110-4593-98e7-049ff2375513",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f7317d3b-8bc3-423a-baf9-493687871041",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37173dd-94d8-42ef-aa38-8b941f7ce210",
        "cursor": {
          "ref": "d7eb8d6b-9b40-47f4-b6fe-1329611011d7",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fe22a0ed-1a7b-4a5f-bd78-7bb625562a31"
        },
        "item": {
          "id": "c37173dd-94d8-42ef-aa38-8b941f7ce210",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "062c93e8-cb8f-416a-879d-1aea17d8729b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb986f52-6d31-4aba-b08b-1881e7e70daf",
        "cursor": {
          "ref": "431165cc-64e8-402c-b0dd-8b2dcba3a900",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1a9efe45-9015-4bb5-91ef-6016063c443b"
        },
        "item": {
          "id": "eb986f52-6d31-4aba-b08b-1881e7e70daf",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "80d157a1-1411-4597-ac69-e37b9e2f5f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8cade7-e0dc-45b0-9f69-c71402c57019",
        "cursor": {
          "ref": "4b6dc98b-a7be-4083-bfc2-2b68fd85f870",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5b8f47ea-818a-4628-a845-03ebbc6b58bf"
        },
        "item": {
          "id": "9e8cade7-e0dc-45b0-9f69-c71402c57019",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b64ccc51-a9a4-49c6-8e89-1ee9a412b377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a4e6b5-8229-40cc-a2ee-19111df62f7b",
        "cursor": {
          "ref": "ea040385-38ee-4ff2-9c79-dcf443bb016c",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b5710755-e51b-46fd-8e9f-2c488ea17bcd"
        },
        "item": {
          "id": "48a4e6b5-8229-40cc-a2ee-19111df62f7b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "05a37a61-adc0-4ac7-b616-2dd2e5522675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e017a22-3ee3-4ac2-ba43-5d969bb83e7f",
        "cursor": {
          "ref": "bda0f912-ab15-4432-86f4-7ac7b89c7bbd",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f5ea53bd-c003-48d9-92c6-6040ef0ae57b"
        },
        "item": {
          "id": "3e017a22-3ee3-4ac2-ba43-5d969bb83e7f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9cf363bf-914f-40b9-8e15-8e2b2967ff53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e9c5fc-3d69-44a9-bb91-da784dd10c90",
        "cursor": {
          "ref": "cf9b9c7f-3bc0-4508-94c1-07d34ab0ee3d",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "48ba5df4-3708-449d-a7c7-412b2a9c6b7d"
        },
        "item": {
          "id": "33e9c5fc-3d69-44a9-bb91-da784dd10c90",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7b572b47-a55e-4f53-90e9-d1e7682a3298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e42f96-a4d6-4614-9179-d1e5148712f2",
        "cursor": {
          "ref": "a986c650-961e-4144-ac39-b86146356332",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c28df9db-02cc-48cd-ab95-5529d2edb0fb"
        },
        "item": {
          "id": "44e42f96-a4d6-4614-9179-d1e5148712f2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9114b175-7759-476a-8e4d-c73714e4b965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c999e9f8-6bdb-4638-8420-f9a18dcec5c7",
        "cursor": {
          "ref": "dd80af57-05b1-48c2-8ff6-b68284fbe3ef",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "44aaa290-5e12-4af9-af21-e07fe76384e8"
        },
        "item": {
          "id": "c999e9f8-6bdb-4638-8420-f9a18dcec5c7",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e550f7a0-1ba2-4db6-92cc-2153516838f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0dead80-8308-4739-8cc4-73ed4a2e40bc",
        "cursor": {
          "ref": "baf98c5c-04a7-48d9-947c-ae4564fd3bb3",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "08d84bf9-ae2d-48cc-a634-3cb9145db032"
        },
        "item": {
          "id": "b0dead80-8308-4739-8cc4-73ed4a2e40bc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9ad34371-a544-4ddb-9264-832ca7537b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cead72d-a968-483b-a39c-f7fdfffb4d90",
        "cursor": {
          "ref": "f18d0989-bbf2-4b5f-bc38-8b7d6da1cbba",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "15bcdaa4-0b1c-4fe7-91ab-2aa669aa53c9"
        },
        "item": {
          "id": "8cead72d-a968-483b-a39c-f7fdfffb4d90",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "500f2789-26fc-42ec-950d-c1cd339dc3c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c35648-4cf4-4e0e-a1ac-74dd5b32e0a8",
        "cursor": {
          "ref": "e3d1e500-479d-4e75-97d3-0046a5a569e4",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "33557de9-9d44-4f6f-b33a-ce5a429d3144"
        },
        "item": {
          "id": "86c35648-4cf4-4e0e-a1ac-74dd5b32e0a8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "55e19ebe-1566-4123-93eb-2028446da649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d45d86-0b55-4832-b810-5ac2619dcb7e",
        "cursor": {
          "ref": "f496beea-fff2-46d8-90ca-c057b63f3f5d",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8dac00eb-eda0-4602-8134-c675090ff15c"
        },
        "item": {
          "id": "60d45d86-0b55-4832-b810-5ac2619dcb7e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "23363a8f-128d-4170-bdca-9999c8782120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec9a83a-ef23-4a4f-8922-ceac09b5d56c",
        "cursor": {
          "ref": "b6b00400-c6aa-4b7f-8a1d-728852aadd36",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "80653a72-8ac9-4403-beb4-da3e39d795f5"
        },
        "item": {
          "id": "0ec9a83a-ef23-4a4f-8922-ceac09b5d56c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e365af5e-455e-406c-9a17-fd48c9280baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48d2de53-4f49-4757-a419-2e8478d4d833",
        "cursor": {
          "ref": "6c7bbebd-f6be-493d-b74e-de696eb0b8fa",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0e9d6010-18c8-44e0-8a38-f182e2508eea"
        },
        "item": {
          "id": "48d2de53-4f49-4757-a419-2e8478d4d833",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d7ba7fbc-85f7-444e-9202-f10f4faf097b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 173,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "0284fbaa-e987-44db-801f-8c880b2bfeea",
        "cursor": {
          "ref": "7347f539-35ec-4493-9c7d-84c8cc6514b4",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "82257274-5df5-4bc1-b03e-09e711c5ef78"
        },
        "item": {
          "id": "0284fbaa-e987-44db-801f-8c880b2bfeea",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f2aada06-884d-4754-aa85-259427a7499e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd64aa46-8312-48cd-8017-10c3dc4e526a",
        "cursor": {
          "ref": "0c975aa2-ca72-4f7d-88de-c5e659422928",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "40b1f373-5201-4248-8795-dfac5e42a374"
        },
        "item": {
          "id": "fd64aa46-8312-48cd-8017-10c3dc4e526a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "71bd26c7-2828-4718-9f9f-61b967f4b9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4086d089-8f85-41d0-a4bd-d5206c96ea5a",
        "cursor": {
          "ref": "e104c376-59b6-4155-9501-3f4c8ec7c534",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7d700cad-b7c8-4a32-baaf-f7d8fb0a8c1d"
        },
        "item": {
          "id": "4086d089-8f85-41d0-a4bd-d5206c96ea5a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9df0bd2d-9cf1-492c-8d7a-6526dffa89b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b263193-14c5-4f5d-be20-ac46dc1d048a",
        "cursor": {
          "ref": "088d4ea5-95fb-4d78-9b95-8ac2aeb372e5",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f893f08d-0c87-4fa6-94a6-3653657c52e3"
        },
        "item": {
          "id": "3b263193-14c5-4f5d-be20-ac46dc1d048a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cf6b2216-ef24-4c84-bbf5-40f8a748fe27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbf2ec55-1501-44b8-8955-cb72858510e0",
        "cursor": {
          "ref": "7e3e25cd-7644-42d8-8614-ac02426dadd7",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ed4b16b6-b319-42a4-af88-e2a9699ba183"
        },
        "item": {
          "id": "bbf2ec55-1501-44b8-8955-cb72858510e0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3fb615e1-9d60-4023-a7d4-043198c09bbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd094867-e5b8-4bcd-b522-0234fe910851",
        "cursor": {
          "ref": "ca316c1c-a8d1-48cf-b9b3-29edfbbd3c27",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6b16ff32-ddf5-4b0a-9058-095249cd1ba3"
        },
        "item": {
          "id": "cd094867-e5b8-4bcd-b522-0234fe910851",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b19a5640-500a-47b5-a706-ccd5c07090fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18d17486-ddcb-4be7-80a1-f4d59600430e",
        "cursor": {
          "ref": "15b3c23b-a3be-43aa-b096-b008077fe17f",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4a64802f-2d17-4776-855a-215b856ddf83"
        },
        "item": {
          "id": "18d17486-ddcb-4be7-80a1-f4d59600430e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6da05eed-fe67-4d20-a52d-195feee2a0a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20fb51b-ad3d-4eb7-9274-113ed5298dcb",
        "cursor": {
          "ref": "8d84e725-473e-424d-9ac5-20ce39fae672",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "98aa3792-f73b-4e67-98ab-deece6699519"
        },
        "item": {
          "id": "e20fb51b-ad3d-4eb7-9274-113ed5298dcb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5d839dbe-91b0-471b-a0e7-f21aa121ad69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95bd8f84-84a9-4ac7-92f6-900c65ebefcc",
        "cursor": {
          "ref": "4f5fe96b-ada9-44d8-a8f5-dfb781cdf079",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "35829696-8a58-4b31-bf4a-e1a408dbd481"
        },
        "item": {
          "id": "95bd8f84-84a9-4ac7-92f6-900c65ebefcc",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1a126073-b5c3-4d80-a513-c5e35ad81efa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "435575c0-99a5-4b35-a659-c0841e1fbadc",
        "cursor": {
          "ref": "52278bc9-2a73-47b7-8236-948260354ef0",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d1f626b2-58b0-4865-bebf-b7ffa91b2638"
        },
        "item": {
          "id": "435575c0-99a5-4b35-a659-c0841e1fbadc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "778dd6ff-37c2-410d-ae32-d8e239e1d467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b1711c-d546-4563-899c-67d4cf620881",
        "cursor": {
          "ref": "0e0764dd-a206-4509-8d6c-09959da7db02",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e38ce027-ade7-47e0-a3d8-31deb99c2178"
        },
        "item": {
          "id": "08b1711c-d546-4563-899c-67d4cf620881",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ce0d4006-6775-4c63-b894-1ac17c9c0cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9c0f7b-7c28-4b78-ae34-aa8847d3d8fa",
        "cursor": {
          "ref": "d16a5cc3-082d-4c98-9f73-58bc14b8778d",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1dcca83c-ab7f-4e11-8a67-a1761dc981a6"
        },
        "item": {
          "id": "aa9c0f7b-7c28-4b78-ae34-aa8847d3d8fa",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "bd3b75c4-118e-452c-8ba2-f6a829ab7cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e3bba31-d557-47fe-b711-78493eb05307",
        "cursor": {
          "ref": "0bd6266c-7638-4d08-8b68-abbd8087ca04",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c339d98b-0f8f-49f5-a86e-a7dc73fdc138"
        },
        "item": {
          "id": "9e3bba31-d557-47fe-b711-78493eb05307",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "381cb741-a26b-421c-af95-c18d1aec1904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6671c847-bc66-46b9-a535-706c38c80bbd",
        "cursor": {
          "ref": "41573df5-56bf-4b3a-a0c3-b934539f183d",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "fadf6fe1-cd47-40c3-ac04-c481595ef72e"
        },
        "item": {
          "id": "6671c847-bc66-46b9-a535-706c38c80bbd",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cbfece4a-e960-45a8-b693-ac18a1ede9ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544b1601-9141-41a4-8814-a40c2e2a7c9c",
        "cursor": {
          "ref": "84616fed-a68a-47b9-b51a-44b65fcc7562",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "dd028538-1a32-4fb8-bd40-fa5a4140b61f"
        },
        "item": {
          "id": "544b1601-9141-41a4-8814-a40c2e2a7c9c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "859d8627-d1f6-4f84-a10e-8a9f0cb50173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5fd0bd0-e964-4de2-bb6d-4235743b8111",
        "cursor": {
          "ref": "29145a56-ab2a-4968-8896-870f9b4191c2",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "fff59cfa-dd60-419f-9880-ecc5ed12be67"
        },
        "item": {
          "id": "f5fd0bd0-e964-4de2-bb6d-4235743b8111",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "32491c65-5ad9-4098-b39b-3a0225edf78e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752694bd-c4ae-416e-9679-6562df13b5fa",
        "cursor": {
          "ref": "92f5b8f6-742f-4f9e-a70e-733bef26b66a",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d4c1ba55-1f03-4653-b16b-f38be96f44b2"
        },
        "item": {
          "id": "752694bd-c4ae-416e-9679-6562df13b5fa",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "73ad0abe-8038-4d68-87d3-f2bd3e8c9c21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547821bf-5c23-4033-9956-f75794ae1517",
        "cursor": {
          "ref": "48aab991-82ae-40a3-aef0-5dbb9efdc66c",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5b1c044c-8ec1-46c4-aeea-55289136eb73"
        },
        "item": {
          "id": "547821bf-5c23-4033-9956-f75794ae1517",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "72d3c94c-ea35-423c-ab6f-195585a27900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0456beff-b5d3-4f44-9a61-1ecf0d970f42",
        "cursor": {
          "ref": "90a2b3c4-56b9-4459-8bbf-99edefe4bd20",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "057c8033-8aab-412d-b99a-17c1c5394a12"
        },
        "item": {
          "id": "0456beff-b5d3-4f44-9a61-1ecf0d970f42",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "0a02496d-f81f-4169-8445-f578c78fc5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2386e29-04e2-4dcf-86c9-7d6676c1dea7",
        "cursor": {
          "ref": "26ac603d-39fc-4b77-a768-27bc88226afd",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "d0e2bb6c-912d-478b-acc9-0025d03dc858"
        },
        "item": {
          "id": "b2386e29-04e2-4dcf-86c9-7d6676c1dea7",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "aaeb38b7-d1e1-4bb3-b9e9-bb45ce641a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74935754-674d-4e11-b8fd-f7f9f2d254da",
        "cursor": {
          "ref": "b7c0f201-3aa6-4268-a1cc-b1539d2560c8",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7809959b-4f0b-48d3-bdea-e9d05eb07a03"
        },
        "item": {
          "id": "74935754-674d-4e11-b8fd-f7f9f2d254da",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f5d1b594-c97f-4425-8f58-4b04f20b489d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2339da2-6b06-45a9-abda-5673d379d2ea",
        "cursor": {
          "ref": "9d230add-6879-4bd6-9f69-b505e1a3cd2f",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c3c3513f-c3d7-40ed-8d0d-9ebf865e3c87"
        },
        "item": {
          "id": "a2339da2-6b06-45a9-abda-5673d379d2ea",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d54cb689-9079-4423-a82f-d680695a90a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fad253-87d8-4c20-8878-7f1de8d1fd53",
        "cursor": {
          "ref": "53d301b6-b9aa-4827-9d2d-e2a1a9d4c727",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "545ac218-21a2-4b6d-aead-3e434863275e"
        },
        "item": {
          "id": "28fad253-87d8-4c20-8878-7f1de8d1fd53",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "8472a8ad-25bb-4847-b290-e4fc4bdd61cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b72572-0478-48d3-832c-5ce464288a3d",
        "cursor": {
          "ref": "023d44e9-1d82-489b-8064-b766ee9ace46",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "86fac3ed-a55a-4651-b97e-7ff81a427c00"
        },
        "item": {
          "id": "52b72572-0478-48d3-832c-5ce464288a3d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2b353a4c-32ac-4723-b2e9-fe227a439e79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072b3675-ed9b-462f-882d-12173ba3d130",
        "cursor": {
          "ref": "a70cde22-4a84-4259-b71d-d53137f93090",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "e3ebc285-056b-42b6-9070-8ba0d1e61a62"
        },
        "item": {
          "id": "072b3675-ed9b-462f-882d-12173ba3d130",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "516339c7-c475-434e-9829-485ca50f8ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1bb480-9b12-4d60-b785-7b59ebd2e71f",
        "cursor": {
          "ref": "dfd232a0-98fa-4920-94e7-5559757b7e06",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ac5752b3-a4ac-43f9-9da6-b1e8c295428f"
        },
        "item": {
          "id": "4c1bb480-9b12-4d60-b785-7b59ebd2e71f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bd13c501-9942-4714-807f-efbcaa08239b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dd99146-6d99-426f-a1de-93b3974f8ac5",
        "cursor": {
          "ref": "57fa71af-d090-493f-a127-9cc65ef835da",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "270f7951-28c4-487c-9991-40fe1ea82bbe"
        },
        "item": {
          "id": "3dd99146-6d99-426f-a1de-93b3974f8ac5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "439b38b8-2d48-4f92-90e0-ee3b743e346d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504a4e8c-8be1-4363-a3e7-e9e2c7f273d9",
        "cursor": {
          "ref": "9803cdf2-310e-4937-b155-990807117b16",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "644bbab4-f5ba-4146-8014-ec1266d43b7a"
        },
        "item": {
          "id": "504a4e8c-8be1-4363-a3e7-e9e2c7f273d9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "dd055125-e994-4fb2-86e5-d44a33d159e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d788f0-cdef-4117-a5db-04cd4c1e3280",
        "cursor": {
          "ref": "352ffd96-9262-41eb-beff-b9e61c80ec43",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "e9eb153b-5911-4f6c-830f-d021e9e5b6db"
        },
        "item": {
          "id": "b4d788f0-cdef-4117-a5db-04cd4c1e3280",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e641d714-643b-4cbb-87fc-8bfb26510fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724f8cd0-9a72-44c2-863b-dd910709fbab",
        "cursor": {
          "ref": "70e4e718-2a50-421f-8577-359232b4b23a",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "256e9b74-24c7-41dc-804e-c1a52a0999f5"
        },
        "item": {
          "id": "724f8cd0-9a72-44c2-863b-dd910709fbab",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "da36ff8c-a38e-4512-a688-50ec2600a4b2",
          "status": "OK",
          "code": 200,
          "responseTime": 170,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "a5b5d6e8-0b96-44d2-a9c0-0309b909c40d",
        "cursor": {
          "ref": "59d76120-8f43-496a-a12c-2adb866c1986",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "882f3b23-ea34-4c61-acc2-ee4ee802af51"
        },
        "item": {
          "id": "a5b5d6e8-0b96-44d2-a9c0-0309b909c40d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "dd45ba33-4592-4e3f-82bf-bf0ce4de8e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d448d539-bbb1-4942-90f7-adcb16e62403",
        "cursor": {
          "ref": "973ed4d5-dd6a-4e75-b5b7-5f640f79a3ab",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b22135cc-52ac-49d4-9d56-722279a654c1"
        },
        "item": {
          "id": "d448d539-bbb1-4942-90f7-adcb16e62403",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6c808e20-f1a9-4fa2-abdc-7104bc68bfc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ae2b2f-f22d-4266-8240-1b880aeeaabd",
        "cursor": {
          "ref": "d3eeeca6-402d-4bfc-8f6d-f3a002cdccf1",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a21aa4d8-7e72-4f12-b3cb-7006237faaa6"
        },
        "item": {
          "id": "06ae2b2f-f22d-4266-8240-1b880aeeaabd",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "41d10d30-7d36-426f-a44c-fdc0a085c980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d18815-23bf-4c23-90c2-d5a769667bd9",
        "cursor": {
          "ref": "d0bb7138-a7e6-4f0c-a89b-22bb491a8f07",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "90304e71-8c36-48e1-a518-ee5236069bc2"
        },
        "item": {
          "id": "90d18815-23bf-4c23-90c2-d5a769667bd9",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c45afdd7-c814-495c-9f5e-39f0738146d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf33ca1-90d3-432b-a0b8-233e9ee8bd16",
        "cursor": {
          "ref": "569ed2fe-ee7b-4d28-b389-5afae64b82a3",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cc4e8e23-6e3d-49f1-9910-2ea420aef365"
        },
        "item": {
          "id": "acf33ca1-90d3-432b-a0b8-233e9ee8bd16",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "835445e9-a673-45dc-b213-5fdf9a2d570b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35149a21-090f-434c-b216-6cf153a50a09",
        "cursor": {
          "ref": "1fe2e1d9-3a33-41e4-89df-35095a178ede",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f814296b-f5ed-4f20-a367-1aab5b0e9261"
        },
        "item": {
          "id": "35149a21-090f-434c-b216-6cf153a50a09",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "28aa14ec-c3be-4eed-868f-0a6e3750a71d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9187a1f9-fbed-4198-87e7-ead444b6d020",
        "cursor": {
          "ref": "441d74ec-9bf2-499d-bda5-7adf58fc459f",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "099d0051-8364-4b0a-ab3a-4c0967173df0"
        },
        "item": {
          "id": "9187a1f9-fbed-4198-87e7-ead444b6d020",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5f647a82-be61-49ee-840b-f7644046b100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb9a19d-5683-48e8-beef-eaceb31ec2b2",
        "cursor": {
          "ref": "4b2e7c56-94b3-4606-a09e-262c3f9d5d21",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4da78466-9e6c-4457-a5ba-7abaac036fa9"
        },
        "item": {
          "id": "9bb9a19d-5683-48e8-beef-eaceb31ec2b2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "53952761-0de1-4014-9c47-2f36cc406e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d60f13-8c5c-4fc6-9a83-f6481ea968d0",
        "cursor": {
          "ref": "20c12162-fb69-4b95-b22d-2c11d50e064b",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "dcc62387-06b9-4f32-9db3-f7d2d3e606dc"
        },
        "item": {
          "id": "d8d60f13-8c5c-4fc6-9a83-f6481ea968d0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c9dc8bc3-9121-4c7d-b1cf-4cdfb925fd2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d16a7a-5563-45ba-8ce6-f9c5bd4cf0a6",
        "cursor": {
          "ref": "3f512534-f120-4653-805f-ad0ff3e4ae90",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "41518223-f4dd-4750-a7e2-6670e83c8d17"
        },
        "item": {
          "id": "02d16a7a-5563-45ba-8ce6-f9c5bd4cf0a6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "53f023bd-1605-4fdb-9849-4ee9e982a48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a729fa7-a550-4aa7-a707-f91fea725855",
        "cursor": {
          "ref": "16b165c1-2452-4db3-bcee-3d8281af2eb1",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a85b530f-bdbd-4bc0-ab83-66b446b441f3"
        },
        "item": {
          "id": "4a729fa7-a550-4aa7-a707-f91fea725855",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6539fd49-35dc-4632-8f16-7cb5f4dc4792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca40b763-f1a5-4536-9d32-f8f4727f3689",
        "cursor": {
          "ref": "57b80f4d-145a-4d2e-96ba-d1df9e698a51",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "89055db1-fc3f-460b-895b-8833450ef13e"
        },
        "item": {
          "id": "ca40b763-f1a5-4536-9d32-f8f4727f3689",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ec43e575-4b0e-4c5f-82df-9cc0028cb969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e28b255-f31d-4bd1-9499-26eaa2b2b7b3",
        "cursor": {
          "ref": "5ddfa466-fa8e-406b-bdc4-28ad0a0c6a84",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "17f414de-74ad-4f2b-bf19-3caa59d15370"
        },
        "item": {
          "id": "4e28b255-f31d-4bd1-9499-26eaa2b2b7b3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "292f307d-603b-46cf-a9dc-9da2353e59c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbd741a-26b6-4d4c-b809-94eb8fe596e0",
        "cursor": {
          "ref": "f97d08ed-4ecf-41ef-b9b8-aa772266418e",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "966409c4-1b55-45db-bd41-5b7e91eb9e1b"
        },
        "item": {
          "id": "5bbd741a-26b6-4d4c-b809-94eb8fe596e0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ff664df3-9664-4b43-b5b9-d9974a8a86b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e967f5-ebf8-4d38-809b-e9823ec27e2b",
        "cursor": {
          "ref": "865d3c45-83a9-49ed-b494-00b5f101bcad",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ba45c97a-f0af-478f-87ec-953f6ffb41ba"
        },
        "item": {
          "id": "c0e967f5-ebf8-4d38-809b-e9823ec27e2b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1d2957a6-a933-41ab-8161-014f49e1771b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cc036c4-1b6c-4f82-ba3d-1b78300623e0",
        "cursor": {
          "ref": "10ac20ca-7108-4d07-8a99-bfa167ee37d0",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d58fcdd7-7e1d-4b8c-bcee-5e2a0e0261c8"
        },
        "item": {
          "id": "1cc036c4-1b6c-4f82-ba3d-1b78300623e0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "a5607d43-bf1e-462c-8bab-0ccde1b3cb60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e31c8f-3339-469c-bad6-8f1555110727",
        "cursor": {
          "ref": "c5bdc6af-85ca-453b-b0a7-e5670325f783",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5f1aa10d-1304-48fc-9628-58a042b3bfe2"
        },
        "item": {
          "id": "c6e31c8f-3339-469c-bad6-8f1555110727",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "58a58cfc-3343-488c-856b-add09a95a227",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3a2681-f8ad-437e-a030-9b294f6db51b",
        "cursor": {
          "ref": "4bcc42e0-054d-4706-a6fa-359bf1b8b87c",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "79654745-3cc7-486d-ae74-aec3b706cfd1"
        },
        "item": {
          "id": "4c3a2681-f8ad-437e-a030-9b294f6db51b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7cbf3a36-0d34-4458-9e76-57bb9f4d21f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32177db-79c2-4d2f-80d7-7d22a5f1512a",
        "cursor": {
          "ref": "c4e993b6-7990-442a-ac5f-6bc5959de7db",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1c044891-7104-4cb6-88a0-15f6d3d6bd19"
        },
        "item": {
          "id": "f32177db-79c2-4d2f-80d7-7d22a5f1512a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f4763d50-b83a-4bd2-9ffc-a8cfa82cd8eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ac4bc3-74f5-4234-b140-398ff1f101f4",
        "cursor": {
          "ref": "dc0ddbc8-5a1f-4bd9-8ffa-76449d489ed9",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "502fcd58-7301-459f-b467-4f35b5c211e7"
        },
        "item": {
          "id": "55ac4bc3-74f5-4234-b140-398ff1f101f4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9cd3ff07-3828-4e95-83a3-6b5ea09e4df0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f6ae37-4a34-44df-93cd-83281b1ebb26",
        "cursor": {
          "ref": "032b805e-d24f-461d-96f3-99f829b04617",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0f451b98-c40d-410b-bfb5-9a12a7b6ac26"
        },
        "item": {
          "id": "b2f6ae37-4a34-44df-93cd-83281b1ebb26",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a8621b55-41f5-41a8-a85d-ec09305fe1eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b528036b-f4f3-4af7-b135-9e944c770269",
        "cursor": {
          "ref": "e2d2a0eb-67d7-4af3-a7a3-0f0e296fa897",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b831ec7a-5717-4bff-bb59-b63c880120fe"
        },
        "item": {
          "id": "b528036b-f4f3-4af7-b135-9e944c770269",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6dda5a05-06b5-4eb6-966b-efe6c15235b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06edda4e-69fa-4410-a43e-757382c0d1b0",
        "cursor": {
          "ref": "6180daf0-cafc-4d2e-8048-386da26bbd32",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e3a9d14b-9cf5-45c2-bdf6-c1a6669f74d3"
        },
        "item": {
          "id": "06edda4e-69fa-4410-a43e-757382c0d1b0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c42d3138-a320-45ae-9e44-048fb1ff0169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d036ef0f-0cb5-4643-9c7a-aa3865d410fe",
        "cursor": {
          "ref": "19aeb4fe-b31a-4b94-a32d-82412bdd2028",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1c5511c1-edd0-4086-9fa5-c87b17b6c7e3"
        },
        "item": {
          "id": "d036ef0f-0cb5-4643-9c7a-aa3865d410fe",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7141cbdf-9a4c-4f6e-aa71-78762fbccdaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e7ab28-7b49-4b80-a4fc-c7c7296b018f",
        "cursor": {
          "ref": "e6cc262c-2b32-4873-b68b-c2321e3ab035",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "345bfeac-30dd-4437-a99d-523c0593b580"
        },
        "item": {
          "id": "76e7ab28-7b49-4b80-a4fc-c7c7296b018f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "68e4ba5c-d4f2-4ec8-91e3-8433cd0e0377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6a1feb-5630-4c79-ab26-2da947c2c97b",
        "cursor": {
          "ref": "e2fbc056-2575-48d6-93a2-a0156269f076",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e03e404c-5650-403e-a086-eddff1c5c426"
        },
        "item": {
          "id": "ea6a1feb-5630-4c79-ab26-2da947c2c97b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5eaf3a14-d375-408d-a626-a7abcef6c795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0370338e-9430-4935-a5fb-a2d3b68c6d06",
        "cursor": {
          "ref": "0e2b3211-5693-48ea-ac5b-6721a5c43130",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "718933d3-e5eb-4026-b73f-50770ebf26d1"
        },
        "item": {
          "id": "0370338e-9430-4935-a5fb-a2d3b68c6d06",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ad03b4b8-80a4-4106-ac2b-40fca0b00f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1704b07f-4469-405b-ad75-b0eaa52df0a8",
        "cursor": {
          "ref": "cf7b7e37-34c5-426c-8d96-5660e1808179",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ab82b35f-7aea-442d-862b-e11456b25008"
        },
        "item": {
          "id": "1704b07f-4469-405b-ad75-b0eaa52df0a8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f2fee5bd-07b1-4ab2-afb8-775d89f8273f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68d55f9e-f655-4710-8a65-a4cd34362097",
        "cursor": {
          "ref": "d71e3cc6-7ec5-4ad9-be2e-2c4ceb2fb0d3",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8d1fc054-9b53-4614-887a-f26846ac15a9"
        },
        "item": {
          "id": "68d55f9e-f655-4710-8a65-a4cd34362097",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "bffc3c27-a138-4bef-88e3-bf092ae7de68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd275cf-0d7e-402d-9b47-79beb120fbe9",
        "cursor": {
          "ref": "beb53096-c0dc-41b1-9dde-33a5bd75ff45",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "78fbe046-cb46-4980-8aa3-910498ef8bbe"
        },
        "item": {
          "id": "cbd275cf-0d7e-402d-9b47-79beb120fbe9",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f71426d7-140c-45c7-be16-41f771a83973",
          "status": "OK",
          "code": 200,
          "responseTime": 184,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "f2f0b2dc-85de-4fc5-950b-6e5c6b0b5919",
        "cursor": {
          "ref": "864f031d-b924-4871-a8e0-6b5929ad95b4",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ce15f451-18ad-43ee-9f91-7d8af6c7b355"
        },
        "item": {
          "id": "f2f0b2dc-85de-4fc5-950b-6e5c6b0b5919",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cd98fcb6-1323-4965-a480-7fc3727cc581",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "10ae3c30-a256-4716-9d61-ed7c8a9f10ec",
        "cursor": {
          "ref": "78c5e348-51d2-4990-94b7-657c1f210010",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9650789d-60a1-4829-8196-527bb6a7e82e"
        },
        "item": {
          "id": "10ae3c30-a256-4716-9d61-ed7c8a9f10ec",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "4c6e212b-a550-4b1d-9f53-84f28ce14e38",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e9927897-6015-4f39-ad53-ababd090478b",
        "cursor": {
          "ref": "611f7132-b05b-4c21-90a8-43c39a256613",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "c4d255f1-0e63-4b6d-bf82-5528309f1df1"
        },
        "item": {
          "id": "e9927897-6015-4f39-ad53-ababd090478b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3a21e13a-25a3-48b2-9ef1-b722de38886e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782aaa1c-343e-4df5-9975-ef357502db9d",
        "cursor": {
          "ref": "85b0948a-ac6d-40ba-9ebd-71705a9b9c1c",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "71309524-6b54-44b6-9533-46645157ffbc"
        },
        "item": {
          "id": "782aaa1c-343e-4df5-9975-ef357502db9d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "461970d6-106d-41a9-b620-e832a3272b63",
          "status": "OK",
          "code": 200,
          "responseTime": 189,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e6f7d65b-83e0-47c5-9e17-6aacc6ecca90",
        "cursor": {
          "ref": "c4a9fdee-e637-4685-a3dd-3504960860f2",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "fcf69f20-0a2e-4d81-896b-1bf40f37e300"
        },
        "item": {
          "id": "e6f7d65b-83e0-47c5-9e17-6aacc6ecca90",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d19ac2d1-b1cb-4ee8-be85-d73c6bb321a4",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4c95fd10-9033-4d34-9654-d8caff15db54",
        "cursor": {
          "ref": "1ff49f98-d4fa-43b2-81e0-ead3ef8ab572",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "95eb159d-79a0-4593-8936-2e4d7e592b05"
        },
        "item": {
          "id": "4c95fd10-9033-4d34-9654-d8caff15db54",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "24ba1cac-b749-4b2a-aba9-97c079a78418",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "da81fa37-9aba-4a9b-9e0e-ff4c5cb6ed27",
        "cursor": {
          "ref": "1da7fc13-e0f7-4c67-b90b-60fbc8445398",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d08aa845-d2a7-4ccd-b511-96bc703d5b5c"
        },
        "item": {
          "id": "da81fa37-9aba-4a9b-9e0e-ff4c5cb6ed27",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4af1decf-2f5c-44d4-abe8-f4e8a1bb9d97",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "27db837c-22c4-474a-b2fe-441cc2d4818d",
        "cursor": {
          "ref": "06ed86b8-4a39-4d2a-8183-8dbd7c9c89b1",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d3006f50-0917-44b7-ae6a-668188c39d09"
        },
        "item": {
          "id": "27db837c-22c4-474a-b2fe-441cc2d4818d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ce06f184-2c98-4a23-9e96-a378e4662e04",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "3ce24787-f275-4990-b11b-abffb5cb3a75",
        "cursor": {
          "ref": "d5e1e24f-cb69-4e97-b029-cd58ca907d5f",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e82f51f6-81eb-4fbf-973f-6b1a23e8fd8f"
        },
        "item": {
          "id": "3ce24787-f275-4990-b11b-abffb5cb3a75",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "afce158b-6623-47ef-ae9d-167e6a55628c",
          "status": "OK",
          "code": 200,
          "responseTime": 181,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "28e06842-943f-459e-b70e-fd4cc71eeddd",
        "cursor": {
          "ref": "29996fd9-7194-4b49-b8fc-be2f8b159b05",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "175b462b-1dbe-4df6-ac5d-1ba80e5ccbfe"
        },
        "item": {
          "id": "28e06842-943f-459e-b70e-fd4cc71eeddd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ad02c16f-6aa3-4a94-9ea5-903fb1857592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecf7099-490f-4fed-8d5b-c4b10037e5f0",
        "cursor": {
          "ref": "090e096d-ce77-4784-ac8c-171b50276efd",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0cc03c41-e5f6-4594-a4d3-48d8e7669a37"
        },
        "item": {
          "id": "6ecf7099-490f-4fed-8d5b-c4b10037e5f0",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7ee3e595-d254-449f-b7c5-df923b772ee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21104f6e-5405-418b-9347-e95b9f3fdf76",
        "cursor": {
          "ref": "3c6a5dc6-773e-4978-bda0-21fd89e0e1a2",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "03c4a197-0e10-4809-a6d4-1169105a5b68"
        },
        "item": {
          "id": "21104f6e-5405-418b-9347-e95b9f3fdf76",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "43659f0b-133b-49d3-bd28-7adbba6e67d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eff5db9-a750-4210-bf5a-bbd9d54a8248",
        "cursor": {
          "ref": "2a30f8f7-8538-4f5a-8fd0-cbdd4a1d6a3c",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a9f4b67e-6ac8-4e75-bd10-b57bd9f54948"
        },
        "item": {
          "id": "2eff5db9-a750-4210-bf5a-bbd9d54a8248",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "daf720ea-471e-4ce2-b145-7798f578ddd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4729c6f-86b0-4aed-ba0e-124b432179d4",
        "cursor": {
          "ref": "373c4e65-7166-4739-825a-81d2d7607502",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "da1645d4-b801-4f3e-8890-28dbb22a64a9"
        },
        "item": {
          "id": "b4729c6f-86b0-4aed-ba0e-124b432179d4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "15589cb9-dc4b-4053-9a71-1fc3f64f29d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433a5419-b24e-4292-a4ba-dbabb6adc1f4",
        "cursor": {
          "ref": "7956b717-0c7f-4ec2-b3b7-71b659e5dafb",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7e09fac7-3dba-4d1c-98b5-51718ebf85a7"
        },
        "item": {
          "id": "433a5419-b24e-4292-a4ba-dbabb6adc1f4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "084890c9-5f68-46c8-a612-15cd2085b7af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf189c5-ad60-4ced-ba07-cae52d453e84",
        "cursor": {
          "ref": "8b8d7f4d-dfd9-4c98-8823-b3c8e9e291f7",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ac4a9105-50cc-4473-8ce0-9e2210551335"
        },
        "item": {
          "id": "adf189c5-ad60-4ced-ba07-cae52d453e84",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "939433fa-deb5-4c6f-8d47-bf3554b5a77f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f12d23-f9b1-4e16-b2ae-32eb5a980dca",
        "cursor": {
          "ref": "ca938096-df43-422b-97ec-7a4f6d527e0a",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "bcf80f2a-1f1e-4035-8531-b8512f5ab520"
        },
        "item": {
          "id": "52f12d23-f9b1-4e16-b2ae-32eb5a980dca",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "d4419264-a3fb-4fe7-ab5c-7b0767643a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305788bc-5a44-4b3f-a4e2-63b5cb260edb",
        "cursor": {
          "ref": "c7c8b6a9-0faa-4e71-abc3-039ead5d0b1a",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b786fd3c-dfec-4ad4-b25e-c64e453a05b3"
        },
        "item": {
          "id": "305788bc-5a44-4b3f-a4e2-63b5cb260edb",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7283b89c-1365-44fb-a8f4-58ebab510594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c84edd-960e-4e83-ae18-1ab00447b286",
        "cursor": {
          "ref": "bc2c5464-01c6-4273-b528-c00dc0ec27cb",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "190ae25c-d18b-4c78-bbc8-e31345c92bc5"
        },
        "item": {
          "id": "c1c84edd-960e-4e83-ae18-1ab00447b286",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "65c4dbd4-9111-402d-9286-f6d71490156c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3fc4b3-5e9a-4bad-aea3-d7b07fd2abd8",
        "cursor": {
          "ref": "ca13a6d8-977b-4174-9dd9-3f83b8186ca2",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "26b6f7f2-8e27-45ee-9872-781e1a475810"
        },
        "item": {
          "id": "fd3fc4b3-5e9a-4bad-aea3-d7b07fd2abd8",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "bc664c1a-ce25-4f46-bdcd-d838ec983dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e52cf38-dc31-43ff-ba91-ec353d371dcb",
        "cursor": {
          "ref": "bbbd3e0d-fb6e-43c0-b200-0fbb69119a7b",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "828fda28-d01b-4c13-b341-c62f8235a674"
        },
        "item": {
          "id": "6e52cf38-dc31-43ff-ba91-ec353d371dcb",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "59f1a475-dccf-493e-8d2e-7d87c5716d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c12c7b41-b1b6-4721-a3cb-f6307eb9dd88",
        "cursor": {
          "ref": "a43073fe-9f5e-4a84-aa83-0d0f0cc31783",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e1a5729b-d274-4cbd-a021-16814b99f120"
        },
        "item": {
          "id": "c12c7b41-b1b6-4721-a3cb-f6307eb9dd88",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c1283895-cfdd-4555-bba1-9fbe4c6fe20e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8adf16-3528-4203-96f2-ebed979c32f9",
        "cursor": {
          "ref": "c7d62e1f-663d-4fa6-82d3-efbfff7457fb",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "86e0d884-aae5-4cd7-9e7a-d57efdde13e8"
        },
        "item": {
          "id": "fe8adf16-3528-4203-96f2-ebed979c32f9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "53a8add5-1d06-45af-9cb5-e439c6c943dc",
          "status": "OK",
          "code": 200,
          "responseTime": 178,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7da711ec-079d-4bbe-9746-2cb545d12189",
        "cursor": {
          "ref": "43472677-8cdd-4633-9492-38232b1dc5f2",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "250eeee9-b1df-44a6-9d21-d09acf183e5a"
        },
        "item": {
          "id": "7da711ec-079d-4bbe-9746-2cb545d12189",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "0e881b32-1282-423e-8914-18b82dc8b291",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "5eadbcb4-09e5-4a68-8a0e-6271cd4a312f",
        "cursor": {
          "ref": "6343f248-35a3-4170-91d3-a6099763a7bb",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1abb5a12-003d-40b1-abda-6d964da5b3d8"
        },
        "item": {
          "id": "5eadbcb4-09e5-4a68-8a0e-6271cd4a312f",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4274f7e6-2eb5-4ac0-a9d2-f54b4876ab08",
          "status": "OK",
          "code": 200,
          "responseTime": 183,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "8b71318c-f21f-4bb7-8fb0-94e4cb417db9",
        "cursor": {
          "ref": "2511ab0f-bfbf-4dd6-8704-8b69ac80aa52",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0ffa9ba5-5b40-48f8-867d-2a5c61623d26"
        },
        "item": {
          "id": "8b71318c-f21f-4bb7-8fb0-94e4cb417db9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d39eef20-b0a4-4014-bb1e-0229c1208332",
          "status": "OK",
          "code": 200,
          "responseTime": 169,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d8d910c4-c1ce-4438-bbd7-911c97154596",
        "cursor": {
          "ref": "b631223c-863e-4b63-805a-b487b0a61370",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ca643b6d-e441-4b15-81d9-ad903d91188d"
        },
        "item": {
          "id": "d8d910c4-c1ce-4438-bbd7-911c97154596",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4b293451-5e31-4a10-a576-bf82d7b70c2a",
          "status": "OK",
          "code": 200,
          "responseTime": 189,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7a6f756a-fa9e-4caa-81f9-794dc7f0f799",
        "cursor": {
          "ref": "4811bba5-af3f-4ad8-90ce-25f17cd8ccc8",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d7909a1e-d207-44d9-89e1-d81e093da68d"
        },
        "item": {
          "id": "7a6f756a-fa9e-4caa-81f9-794dc7f0f799",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ded5f071-c532-45fe-8f69-789fff636331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34973380-32d5-47b0-8fc7-7f59aad6b7a8",
        "cursor": {
          "ref": "4d97979b-4caa-4689-a726-76826d3066a1",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "42684e23-e445-438e-b2dc-2d8c92001829"
        },
        "item": {
          "id": "34973380-32d5-47b0-8fc7-7f59aad6b7a8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "a7f85c21-2c31-45ba-afcf-13fdee7df112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5441bf6b-3f4d-46cd-99d4-ee436c6bfa81",
        "cursor": {
          "ref": "713b90a0-ccd6-4099-9b20-e7bfe9e767cf",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b801a5f3-11e1-428a-8708-3c691bf22d95"
        },
        "item": {
          "id": "5441bf6b-3f4d-46cd-99d4-ee436c6bfa81",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "313bbb76-9b75-4cd5-bd56-624862909304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eff41d5-3822-4b31-85bd-4b5b8d2db1b9",
        "cursor": {
          "ref": "a580b620-ed1b-4629-ab0b-da9b12bd25c1",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a367d1bd-fa99-439c-ab33-890562305f8d"
        },
        "item": {
          "id": "0eff41d5-3822-4b31-85bd-4b5b8d2db1b9",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "992c76b7-ce25-45ef-8430-f8ada5e81551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22ffbe9-670f-4c59-83cd-2ec85c89d486",
        "cursor": {
          "ref": "c221d16f-54ee-411e-92ae-4968b254de66",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4258f658-a814-494d-b2ff-ba06b09906c6"
        },
        "item": {
          "id": "a22ffbe9-670f-4c59-83cd-2ec85c89d486",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9c18aa1d-514b-4d6c-b11a-85852b261aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f211975b-723c-44a1-bcc7-95edd2b3ac12",
        "cursor": {
          "ref": "b776cd97-1da2-4639-9b42-17dc6471816e",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e76b27db-6a37-4aa1-a679-66b370b8f924"
        },
        "item": {
          "id": "f211975b-723c-44a1-bcc7-95edd2b3ac12",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8caba302-b694-4374-a11d-cd67e99f9fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a800cda-bdc4-4697-a84d-b85a361ef378",
        "cursor": {
          "ref": "61cd5056-b7ac-4a5e-8fdd-7a74f90c2e78",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8f8f3fbc-66ca-4bea-8c4a-568a2a13fc47"
        },
        "item": {
          "id": "1a800cda-bdc4-4697-a84d-b85a361ef378",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c3355d2f-e466-473a-8812-459601b978f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32e8d59-b060-4859-bb95-467837c98955",
        "cursor": {
          "ref": "2f4a4e0c-b91f-425b-8425-47dd037eafb6",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5889c4e7-02fd-41a0-8e3a-25c799a45ba7"
        },
        "item": {
          "id": "d32e8d59-b060-4859-bb95-467837c98955",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "a4e00b7d-3a67-434f-bb9e-d066f1067f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b71f55f-fa71-4629-a7a1-f92eb7c6a190",
        "cursor": {
          "ref": "9271ffee-6eed-4859-860a-517ee5213ec1",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "12a59b65-472e-4ca3-b487-be653c28957a"
        },
        "item": {
          "id": "8b71f55f-fa71-4629-a7a1-f92eb7c6a190",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c39e641d-2484-4afe-bd12-4c8b501ce165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6818ca09-836a-4d3e-a39e-8b892564bf6e",
        "cursor": {
          "ref": "77f2f06a-4855-4fcb-906f-4b7c6d8c953f",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e7751528-b764-462d-a864-e9560d95258f"
        },
        "item": {
          "id": "6818ca09-836a-4d3e-a39e-8b892564bf6e",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7830405f-8d46-4dbc-9d92-ecda38310c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ad2deb-85da-4476-8f80-7a5a3a4743b3",
        "cursor": {
          "ref": "5aad8d12-a8a2-4ee8-a3a0-0228f35f8453",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "1a980ebf-70dd-44f3-b3b9-15a8eb4c150e"
        },
        "item": {
          "id": "f6ad2deb-85da-4476-8f80-7a5a3a4743b3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "937af29e-40e7-47b1-9bdd-08db191ff69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40754864-37c9-4c83-a820-3e419a169802",
        "cursor": {
          "ref": "28736e29-27c3-41cb-973d-abc58e2245a7",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "3047cf06-600c-4433-b5cc-7780b3f0ccfe"
        },
        "item": {
          "id": "40754864-37c9-4c83-a820-3e419a169802",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "08953028-9103-4ddc-9338-2a6f08bd27f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ba476f-76e4-4630-bc6a-e0b56879e3ca",
        "cursor": {
          "ref": "b5a1cea8-4a6d-47f1-b57c-412789644344",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "8706088d-cc29-4227-9fd0-b7e8a3ba6783"
        },
        "item": {
          "id": "32ba476f-76e4-4630-bc6a-e0b56879e3ca",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "110f2dee-0c2a-478c-a442-93a945c66af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "136c43c1-a8be-4283-ab69-415ceba889e7",
        "cursor": {
          "ref": "c61a1a65-ae1d-45a9-91c3-121ff8de5f33",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "e3666a61-903c-4ca6-ac0b-8b02e447222b"
        },
        "item": {
          "id": "136c43c1-a8be-4283-ab69-415ceba889e7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "afbe2403-a307-46eb-ab35-2c8aae88a3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82de0a46-048d-4787-96e0-d2ed0194c0a5",
        "cursor": {
          "ref": "8cab143a-ffaf-4a09-a371-141f5ee6860e",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "ae4c087f-8264-4283-b8f8-e5d31c6c57b9"
        },
        "item": {
          "id": "82de0a46-048d-4787-96e0-d2ed0194c0a5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "869a6bfb-1b64-455a-80c4-0bdd387d8369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "368c466f-baa0-4710-bdff-a479072fbe52",
        "cursor": {
          "ref": "1ff9598a-5433-47d6-9aac-6991d0a2d056",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "5ff06bc1-ff26-4b27-bb2b-48514ca1bcdd"
        },
        "item": {
          "id": "368c466f-baa0-4710-bdff-a479072fbe52",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "65594f20-c247-4c55-9f25-a4722287b7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c91b769-4401-472c-a4dd-522073faa017",
        "cursor": {
          "ref": "22102ee5-ac23-4d19-9f8d-d47706edd040",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "5a97cdb2-d970-4f7e-a6de-f3794b1f4a24"
        },
        "item": {
          "id": "5c91b769-4401-472c-a4dd-522073faa017",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "62562c8c-a63a-4f38-a9fb-bf5e252d44fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ccaf73c-519f-48f9-8617-280227245fe6",
        "cursor": {
          "ref": "0cc53f0d-5a7a-4d72-8f8b-7eb15dc6fd65",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "89190101-b4b3-46f5-a7e0-43376675928a"
        },
        "item": {
          "id": "3ccaf73c-519f-48f9-8617-280227245fe6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a3ace4a8-a391-474d-9571-c8bd001946dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be47216-458e-4ba8-9992-45a9b25a4c78",
        "cursor": {
          "ref": "bd99f5c2-30ac-48b8-b23a-5ff225b965c9",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "5f9c9b70-bd66-4a45-bd9e-e21f9f01f10b"
        },
        "item": {
          "id": "3be47216-458e-4ba8-9992-45a9b25a4c78",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b31f8697-0da2-4f62-8ea6-78e857c29360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d001e7-74c3-412c-80ec-5b1c6533df0d",
        "cursor": {
          "ref": "345daf9f-92b4-4be9-bdc6-e5c88209590b",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8e03cc05-2ca0-4c5f-98b6-d2182f650f19"
        },
        "item": {
          "id": "77d001e7-74c3-412c-80ec-5b1c6533df0d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f65c906f-d9ae-418d-bd84-b9f14ce927be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1755a0e9-6c55-4778-8244-2f420fd64d7f",
        "cursor": {
          "ref": "74755e02-e167-4167-92d7-c5437a5fac80",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "edb8f34f-c296-4edb-8893-94fa9d24998b"
        },
        "item": {
          "id": "1755a0e9-6c55-4778-8244-2f420fd64d7f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "584ceb32-ff47-4c23-ad8e-56f3d44ed6a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1d5f05-5903-49e8-a5bb-cacab3a67156",
        "cursor": {
          "ref": "bb23c429-4e24-40fb-8ee2-1b7057b68d91",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "2e5b6d47-6b52-4929-9a69-2732b9671a00"
        },
        "item": {
          "id": "9d1d5f05-5903-49e8-a5bb-cacab3a67156",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1968a21f-33da-4282-a575-f8fbd9d9325d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa4e574-3769-42dc-886b-081d12f5c744",
        "cursor": {
          "ref": "d0a962bb-6a6c-4dd9-8dce-b97fee5b28d0",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "7f6c99f1-fd99-4b1d-b096-d11cdf8277af"
        },
        "item": {
          "id": "7aa4e574-3769-42dc-886b-081d12f5c744",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a447945d-2c4e-4cd5-be90-9a383573e400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8cc1c97-132a-4373-8d2c-1b10ec1457a4",
        "cursor": {
          "ref": "dfbb7edb-cad3-4216-b11d-d297682d73a3",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "19283f6e-0e36-433b-8a6a-299611f63259"
        },
        "item": {
          "id": "a8cc1c97-132a-4373-8d2c-1b10ec1457a4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "924efa07-52a2-454b-a687-f0eec4bd7092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f74d5e2d-6918-40d1-b95a-c26d715255a1",
        "cursor": {
          "ref": "6456f11f-8e5f-4f9d-96c1-804292f69c31",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e9134cb8-b760-4a58-a1c7-7f1ea254103c"
        },
        "item": {
          "id": "f74d5e2d-6918-40d1-b95a-c26d715255a1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d33fa535-2a15-4b47-bfe7-58e17fbdbf3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1041cfbe-8116-47cf-a6a7-512c9b982d2c",
        "cursor": {
          "ref": "503a85ca-912d-4a6d-9167-19d5bfe0d1f5",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "ac526c4f-3c3b-4019-a776-d173ed3c1788"
        },
        "item": {
          "id": "1041cfbe-8116-47cf-a6a7-512c9b982d2c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "860a52b6-e7f1-4bb2-af93-e45425e5c67b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5094ea2-f9dd-440e-a5f5-74f960fbccf7",
        "cursor": {
          "ref": "d3246004-cfe1-4ad0-80d2-552c631f1735",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6a11374c-2ea2-46f8-8006-85f435f0531a"
        },
        "item": {
          "id": "f5094ea2-f9dd-440e-a5f5-74f960fbccf7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "352e4e60-445d-4dfe-8998-1e4fc9a04bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56b4b60-0d2c-48bb-8114-fa4177fe3f71",
        "cursor": {
          "ref": "9cd54275-989d-4189-884f-c917b3ef9ff5",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "40171769-fd4a-49c5-9ab5-201c1874d4e6"
        },
        "item": {
          "id": "e56b4b60-0d2c-48bb-8114-fa4177fe3f71",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "dd071d69-bec5-40f2-a981-79953928ae34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57432ce-cd48-437b-a7d4-ae59043dc50c",
        "cursor": {
          "ref": "f16a493d-540a-4cef-bbd9-1b9e38706011",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "ed77115e-cd27-4362-b917-a877f97ad6ad"
        },
        "item": {
          "id": "d57432ce-cd48-437b-a7d4-ae59043dc50c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cd041380-152d-4476-b109-cceccecd0f16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a65a2df-594b-4298-8b69-c535a178504a",
        "cursor": {
          "ref": "ecd40a7d-49b3-4dc9-ac52-777a2a47df82",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "f372fbe8-62c8-47e2-bf9f-eb3ef253d34f"
        },
        "item": {
          "id": "0a65a2df-594b-4298-8b69-c535a178504a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "77f294d8-7a2e-43da-8539-d9a0007a5511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3e401f-dd40-441a-b005-8017bb77b35d",
        "cursor": {
          "ref": "0aa3ae25-5139-493d-9d43-80f87460516c",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "606a6d59-5e98-41c8-9f86-8cbb35e7e41e"
        },
        "item": {
          "id": "4a3e401f-dd40-441a-b005-8017bb77b35d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "eaa86c58-ab74-4bf9-826d-ab1a0b730245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fc4e40-1cf0-4619-90c3-65f94cc5073a",
        "cursor": {
          "ref": "7a0a8586-6117-471a-aa94-e0c108f29331",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "1515b4c3-c792-4bd7-8102-d43610946448"
        },
        "item": {
          "id": "03fc4e40-1cf0-4619-90c3-65f94cc5073a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "bd94dcf1-b2b2-40a2-9147-495f314b9460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131d751e-dc70-4366-b6e4-450d9af8e4f6",
        "cursor": {
          "ref": "86fa9fba-1077-497d-b0e7-b44190e98dbe",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "40873cd8-6b80-480d-b2ab-79526ade1364"
        },
        "item": {
          "id": "131d751e-dc70-4366-b6e4-450d9af8e4f6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "364a06fc-db1d-4ca2-8c68-1b6d5dbbddbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d01002-37fb-41f0-9676-01850a8de0a0",
        "cursor": {
          "ref": "a1b2fab0-5575-4e9a-bc8f-edd27a13d572",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "41db50b6-ed7f-4f28-9279-c55fa3e38de6"
        },
        "item": {
          "id": "43d01002-37fb-41f0-9676-01850a8de0a0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c453e64b-ce0c-4e30-abd0-c665d88f0c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f781fa5-6130-4ab5-b649-8b8ca0596638",
        "cursor": {
          "ref": "fa69b612-f163-47e7-b387-ee1b84bef8e7",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c2dd085f-62ad-4d3f-96fb-5958a7d36cbb"
        },
        "item": {
          "id": "5f781fa5-6130-4ab5-b649-8b8ca0596638",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ce5dee6f-834d-4b73-9a8d-38056183a8b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0afbe93-0eb0-4bba-b486-7d569a3a6270",
        "cursor": {
          "ref": "fe26f12e-3a69-4a94-868e-aa054c167a50",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "8cd797b4-837b-4591-941c-4eb2ce42ac67"
        },
        "item": {
          "id": "d0afbe93-0eb0-4bba-b486-7d569a3a6270",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f882cd4c-ba88-4208-a3be-e17a7edd14aa",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "812d1429-f597-407c-80e4-34ed52fe47b5",
        "cursor": {
          "ref": "eaf38c03-1a65-402b-b96a-3e5c61c61886",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "fb68df2c-35f8-4f33-b663-3e98cdc534fa"
        },
        "item": {
          "id": "812d1429-f597-407c-80e4-34ed52fe47b5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d3bc7eec-8a30-4687-86a3-721b069c9d53",
          "status": "OK",
          "code": 200,
          "responseTime": 244,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cda3975-3d8c-454a-82a0-db0b3b8d6a59",
        "cursor": {
          "ref": "10c6ba5e-7efc-4f09-a920-6c4c13745a2d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ed4530a6-5506-4430-be62-24f41d034e7d"
        },
        "item": {
          "id": "2cda3975-3d8c-454a-82a0-db0b3b8d6a59",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "89398104-4a17-448a-ab50-306d0ace193d",
          "status": "OK",
          "code": 200,
          "responseTime": 167,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "261326a7-8e3d-45f9-b22c-b25720a95747",
        "cursor": {
          "ref": "1d86b93e-9a8d-4640-9830-8c2cdfb3a516",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "aceab51b-03d4-4783-9c18-dbacd973c90d"
        },
        "item": {
          "id": "261326a7-8e3d-45f9-b22c-b25720a95747",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "531882e5-cced-4d8a-ab40-8ea3f297a5d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261326a7-8e3d-45f9-b22c-b25720a95747",
        "cursor": {
          "ref": "1d86b93e-9a8d-4640-9830-8c2cdfb3a516",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "aceab51b-03d4-4783-9c18-dbacd973c90d"
        },
        "item": {
          "id": "261326a7-8e3d-45f9-b22c-b25720a95747",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "531882e5-cced-4d8a-ab40-8ea3f297a5d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c01d37-96bf-4cc1-b600-67e7e82cf306",
        "cursor": {
          "ref": "1cba3e39-98bf-4a2b-89d2-1898e683fa63",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f62ba658-dd61-4d30-8bbc-344b044a4f6f"
        },
        "item": {
          "id": "07c01d37-96bf-4cc1-b600-67e7e82cf306",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "10d11c1b-311f-4cad-81e7-6caa63a035b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "181384f7-7483-47a5-a122-97cee30d51e6",
        "cursor": {
          "ref": "861017a9-0d27-469c-bbd5-a6e0bc8608f6",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "46d73e27-3e26-480e-967f-dd98a8126b0b"
        },
        "item": {
          "id": "181384f7-7483-47a5-a122-97cee30d51e6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "533a16be-0b2b-417e-acad-29655029ddb5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}