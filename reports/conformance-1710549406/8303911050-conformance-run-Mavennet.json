{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e42d8b70-0b02-4f00-b9a9-09efdc01d3bd",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e439b8f2-9f8e-49cb-9c35-48db48b5efa8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "724503e8-8cca-4861-a1f0-26fc0d0e5dc5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ff031c96-795d-4a70-b6da-90572f6e7cfb"
                }
              }
            ]
          },
          {
            "id": "74028b6d-6fd1-49ea-98f9-50d1235d44b9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81b3483b-346d-4ecd-9412-e8cae9f511b7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2e9362e1-ad94-43c8-b8e0-d3b33668a46a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b2d99e77-4510-4dbf-be50-c5c36362ccf6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "08ae971c-9b22-409e-80e8-7414e3f34e00",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eb767e2a-e108-4acc-8b30-71f91e5a490c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0660248a-9ea6-4ef6-b0f2-982cd60ab7aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2aee9bea-7ff4-407e-8d14-ba7fad96912c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bbf00367-33d9-48c9-a8cc-1f45773ba7d8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "436b56f2-c64f-4ad4-8846-c10d32593f79"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fb9ef0c6-14e9-4155-8fb5-fb52c4b43391",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ffb6d15d-b0f8-413d-8fc2-c19ada26099d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "996c8903-7412-4c21-8849-ec78bb68bcd5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d944f684-d74a-4bdc-85dc-5250cce7a2bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5cdeed02-2cde-4625-b8f8-2611913f3335",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3a3fa2e-5374-4734-8ce8-5211382dc7fe"
            }
          }
        ]
      },
      {
        "id": "31c5ebe9-3ec4-49d0-a044-30360bf1c73e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0217e5c0-973e-4a34-8d55-5467238a386a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f1fdf2d2-2ba9-42e9-ac3f-81b8e140ae75",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0d52b31d-53d0-460c-bbd0-6f6891635c07",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e240a3-046d-418a-af16-72504ba639ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e3e7229-f54c-4bf6-b28b-de7dba62ae7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb94c136-9e05-4600-91ff-50c63f342088",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1517cb1f-44a7-4bce-b0a8-3146cdb47209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "235ac49c-a84a-4dbb-a078-9ef59683a1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7bb083-9f07-49a6-9067-8e60ef2b7ef3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7237e6-eeb5-4d43-b696-88c8ee0e267b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3aab7243-bffa-428c-9b87-d777d0823a09"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "682f672c-803b-48f4-a150-9ff1c327a559",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e14271de-089f-4733-b22f-532c4315248e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "034d523b-7da7-4055-b48c-61a60795856f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "785387b7-ae3d-47f1-9cca-355b192c48ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63632006-1cb3-440d-b489-4ecdc9a85187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b33400e2-8f62-40d3-b83e-26eaf375b25e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "079bde57-b315-4a16-9012-5675c68285fa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4ae6be50-1327-4823-951d-756f413ebb44",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6adc47f3-420e-43f1-ae21-490bf183361a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "adb4a4ad-2274-4458-aedd-0dda41a0841f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "422ddc54-620e-4045-8045-da32c7dbf5f3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "745536c9-4299-448e-aef5-72663b27faa4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88902882-b67d-4638-a5e8-3ec740c4a50f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7345982-18f4-4467-ab1e-c11a7a2a4b29"
            }
          }
        ]
      },
      {
        "id": "0527adbc-20f1-4750-82d0-3d4cbfe353da",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4455bdaa-919d-4a9f-a6c8-f96b8d59e580",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da2dca7f-631e-4019-b2f3-06b187e0c25f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f5c5a26a-d52f-4e1a-83f7-5be954550e5d",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8fda8c-7822-4953-abb6-6f785d541f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f48393-3307-4a03-840a-1265e9dac742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab8ed4c-061e-4bb0-ad54-2ee5799fffcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "412065c2-f505-4f06-b2d8-72d55caed00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a97f04-f7a9-4250-8098-aafdc5683595",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab463171-e576-44a4-800f-267a9916d699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf5c386-03e0-40f1-ba7e-7bf9925ff2f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f9048b-6634-4cdf-853c-a41141e59098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67a1d840-098d-49a5-abea-3f02a87e669a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "164e4828-7d9f-49f9-a702-094aa477d1fe",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7539cf8c-bd0b-457d-b54a-3d5a62c79929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e328647f-b028-4b6d-bd22-c389bb5230fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a08343cc-c185-41a4-9b48-9fe4bc9729dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9a03d38-edb9-4c2a-bf25-d23c5c4105ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d456367b-43ee-4091-a7c6-0af6d3c501d6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c779b600-47ae-43dd-b3f4-cb0e57339434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ba4117-a0f8-408a-9c43-9654a72c638e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "563681c5-6577-443c-80ba-04ad03fea7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f30f23f-e8c8-4090-98d8-374332399156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de876764-c7f4-42f5-8982-8d963fdaae34",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641dc93c-f2a3-4255-bcf2-b77d37d5f639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a9a82e-411c-4ba9-98a1-c69dec83bbd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1b2372-53cf-45e7-a526-d10bee4a2fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3b7b5a7-1485-48b6-b693-0e58888c0ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08feaefe-a52e-4225-82ed-39cce65ae005",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb6e9f4-921c-4baf-902f-898dfbd1ba4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67e13d0-935d-4276-a174-db3fa2a2fb66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efe112b-9ea5-4d61-8851-14d1236d50a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "814d4d73-888e-4f39-a76c-1915a3ec6c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf456d6-f5b6-4d17-b248-42c15a1d791a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d8f910-68bb-4eb1-b1ad-dee6b9e677b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5154736-f89b-4782-8bc1-70cdca044d3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d85a503-c820-4082-9d67-01fb85891183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9fec42a-c01e-4e75-9196-77b879863dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e6f163-301c-485a-bb0d-50c669e00948",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739629e7-f50a-4aa0-8236-9bf00a460e55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f78461d-bfbb-43b1-8f04-435b2cd175f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32b68d2-b047-4f6f-accc-a281b208432a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d08b7a91-58f8-4e5d-aee7-4fc89c1a2faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a6936a-3a56-4ccf-99e2-6f6acaf3a93a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1882b9-418b-4228-96c4-0ac3a1dc3b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23be6c5-4c94-44c2-854f-8f73b7312fed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61c9e29-2d13-446b-b3c1-7be9613aed6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec4d72b8-cab5-458c-95e2-e5f635863d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351a3d01-3415-441f-a17f-ea045692c483",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61f3496-8fb6-44a5-aa89-0af8f155047e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fef56350-a3fb-4d2c-8cc5-b436c300e981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39bd14c4-b045-4271-91e4-120c92f5834c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bc95611-7a90-40da-be4a-ade03d09d5f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dca7ce9-91f8-4355-b621-a5e00d7b2e4c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6ae3f4-3b5e-4206-a443-7ae4c8519a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a722b484-3f1f-4ea2-a763-c00bd3cbe69c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21dc1b0-0bcd-49a7-a497-71a62e14db85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "987442a7-3c48-4566-95d6-0c918fbaa79e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa8ffce5-ffb6-449d-8836-94a1df3591f8",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9963c9b5-8b96-4d9f-a4d7-b195729f5bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09b097d-3751-448b-81d3-ddf11c6af54a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c9ed2c-9551-4a3a-a014-5b0210e761b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ab28ae9-3635-4afa-a683-43c9948c23a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174bf645-ed4a-41f4-a5be-0ca21aba3233",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78123f09-6a43-4e00-8c9c-53aa0d3dfe77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac6fab0-ed67-4f84-b4aa-fe9006efcabe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e4f745-5fd3-4140-a585-ffc9f7a7a726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05f7daab-02ca-41a6-878f-65f143e7660d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e568f614-b8e8-434c-8ef7-7fc4dcecbb53",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d376d242-ea19-4018-829d-44e98ccb76bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521b354d-5dc2-4270-8d60-49c90c9998bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f43d49-9f6e-4f3f-ac41-ffcdcab241a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49655c89-6214-4c73-b248-d3bc70a65d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747c4be2-9292-448a-8206-4f8a66807e12",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b620dfa-c5a3-4bdb-a358-a18589b2f028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6532eb-d6bb-4185-932f-743fe7d1eb5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5506cdcc-7ea1-464f-abf3-96e8f4d0f03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1276a939-b4ed-4759-812f-59d534da2d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a60c8da8-3866-48f1-a1d3-c36bc7fe9d62",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02748ed-f684-4970-a369-f2a5afd5ea99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a133d339-ea45-4965-8fa1-c2acb953041c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1d3aa0-e254-4c83-b2be-20de73cbf69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c9e0e3f-047e-43c3-8b78-e07dcf25b426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6dad84d-e5b7-4cfa-a417-01ee72289ff0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6121ec0-03b3-48da-b634-f54bfa8adebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41e28c57-8d1e-4de7-938e-b00d4f02ab81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81cd9854-cb3b-4403-b661-e395cc17499a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2adfac4b-5206-4cb2-8049-35bf71635037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92008de5-74f1-4752-a1ad-56a2d66221dc",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be52f02-953a-4b39-84d0-6a085a6df640",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41641b3a-da57-40ff-bba3-9ab11f48e6a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b85e5fa-c3e5-4925-b17c-cad082997ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f894e72-3988-448f-8e9b-e676075a065f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d114529-6880-40d5-bb88-6dea8628a902",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e1174e-bea1-433b-b277-32546cfc4eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63e1a20-1d96-4b9b-97d7-64e18848fdc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ddc1e70-873b-403c-94c8-775861e9e541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38a4a9ba-3016-4db9-b818-3755b11ce746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a9f4c0-3e65-4eb0-9237-cd7fcb9ef3da",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5acebb61-5a68-4c60-8448-02e029e70d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48bc662b-56c8-45e7-804f-09ff281536ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fcfc60-6a3c-41a3-a501-9738912433b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31e9e12f-67d7-4468-94af-d0bd52459a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4917df7f-0b80-4a34-9c4f-43524e272990",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b6bebe-248b-4cb0-83f1-8f566dca7907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a497be7c-75dc-42c5-b492-e111bd40c32b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf797dac-38ac-4f99-bc96-939dea9cf68b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e4b88e9-086f-42b4-ae71-cda154f921c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fa87eb-d9c0-46ed-be2e-ed2b5e6b9ff3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f078a9-8911-4575-9960-51d29dfcf726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d68a474f-64c7-4323-964c-8b1411159467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138b866d-532c-4a7b-a1f7-bfbd54c2b2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5f7942-0e8b-44a0-aa27-c622a676ee04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad132c8-3db2-465d-97c6-8cae52ba0df7",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63405d0-2ab4-4fcb-979f-9f0906c32274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a42568-0c89-453d-b8f6-f240c7996dad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "615c1f45-61ef-4a39-9d47-ff3ffbab6dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d61973bc-38f5-4109-9925-8afe3798a7ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4feed434-ce7f-4980-85a9-850abcb2d309",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc086ac-2436-44ce-8331-0674837208ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3699f02b-7494-4717-bddb-8cda6e3300e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f0e6dc-dd57-41e7-979d-d7eaecea470c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e299f6e-66ee-4dc2-a37c-fe8e8bb5180d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ad4669-79d8-478d-a6b8-01342249fa08",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f1f249-99fe-454c-842e-5e0ee141e00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e0693d-80a4-48d6-949e-0d17adc0c9fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "073d8688-8039-48d4-8a42-84ecb04b5ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9cfbc2b-4513-4698-8da5-6cecf50ddb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62fc9a80-929f-43a6-9ad0-d9e45516cb0c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d91a38-3bc1-4cbc-94d5-6ba3bd24c43e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a51c18b5-046b-4848-9e10-4b457b6e66dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4741f8-c51f-471b-b344-20da6bf684f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "763a4ab2-452c-4fe5-8dac-c970e430055a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19dc048e-6947-4eb0-b30c-dee8bc88c4bc",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68438d85-8a0e-499c-b7d1-b7cb7d84ba41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc731ef4-62d4-4582-8610-2b85705c6ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb94b0f7-4024-4c54-95ab-48c4e20ba531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8525c1d7-755c-4a5e-9b57-6f271c7cc26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ef9228-075d-4798-afa9-0af92dd6cc17",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21af3c7c-f8f3-4196-9be4-438d3c5504b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b35350-77b4-42cf-8b15-b280b1612135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c53dbbf8-cdc0-4543-bded-e77c8fc8e52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce6491d-908b-4539-b8fc-61879ae261ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49aea2f-dec0-4c71-98a6-3a4417f0b6e1",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e45aa6e-a6da-4957-824f-d7b5301b541b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc68725-f79a-40c6-9817-cc7fe1bc9f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b3131f-90cb-4e88-9d5b-1dc3776a8c23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "38f25611-90af-41a7-8d8d-4fae849cef33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c049b8-3f78-4d6b-9315-06bb7b0ca52c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c55d4df-8de9-44de-91f7-72291f249503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68529859-b03a-4706-a9d5-5ea0ae30e76e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5daa417c-f9fb-4723-84a2-94f4f4e8f309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "249667f8-9691-4f5b-8627-b63bb740a865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1970a16-9046-44cf-9c80-cb4ba0f4d767",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e6fdfe-9baa-4ecf-a604-1511e5cee675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4dd0f5b-abe3-4c0c-989d-f01393ae2c7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836d0b98-3408-4a1f-8d1b-ef411342b22c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffba304d-f217-4934-8f92-affb61452332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64e8336-4626-4246-b69d-fd930307c712",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "497d48e2-f8fb-4b6c-a2b0-a974dc4da32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c67da2-f1af-4bec-98a0-1380d7531a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc04c803-81ca-4bf7-827a-ba62a7d793dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24195d8a-3a93-435a-b13f-e5faeb19ecb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a188e67f-d9e0-4cc5-bd1a-c43a32ef8e4f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18cfa586-5497-4d30-ae31-457fa258988b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8992800f-3cb2-4914-9f2b-90403b2cbca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735e0e0c-ee71-4c12-8489-83c4a2dc3d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0bc3d7-df09-4744-b007-a4a3322e5633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22b60e1d-4316-4605-961a-7534ce329286",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1bdbeca-d741-47f5-a7ff-e17401b69c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bd130f8-3d92-4c8f-a45f-4373344037c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc24f6d7-28c6-4b44-a02f-44656a5e4891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2f95cd0-f942-4561-8d75-1548f487d879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71a4d09e-c1c1-44c4-b065-f7cbcc0ddced",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df8e85f9-1728-4674-ab1e-90951bec8c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "566b835b-7790-4cda-a9ca-6f61cb633442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8e151e-a29d-4557-a0bb-3644a7dbc7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "032b3cf1-8b42-44c9-b8a0-8e1ac6ea8ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28635cc-b332-4ab2-b911-6390a100f791",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b92445-0d55-46a1-b6f9-264e3282ae21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f847415b-0458-4a9c-b168-1c296fdc7314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f9d7fc-cdd1-4f78-a55d-6eb976217cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "986ce78c-439e-49e9-9cd0-7a4a33a28390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f612c0-f3d4-49a3-ae56-a6f1789cc3ce",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "445f1b59-44a3-4b59-b367-825197575e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ae7a1c3-c33a-456b-b04e-27bf0cd84288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "596196d3-ca7a-4188-a193-fc95ea6f5432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6faa1ab-c2f5-4c66-815a-25e162c3c5a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965624a3-6219-4cb3-845f-2f760bb3e8a6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea48123c-7097-4242-86c0-61cb672e57f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279899c1-c30f-441c-b014-ad4a59d42d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8a48b0-e40a-4c17-8c10-3ab4b1b4ad35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "15e9fae2-2a3a-4a44-9ce7-656a3c355286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "710ee62b-c040-4f27-a1d3-ee98f2f2fad1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0547c6cc-279d-4e63-940a-ac2917d1ef75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "544407f0-6a41-4615-ab0c-8f8a565f9d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d82eceb-5334-4985-bf33-8c7b59763a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8030179b-5bf7-4705-82f0-c54234a88c54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e45bfb-1247-47e4-9fee-40b15fd39278",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "575a343e-ee8b-4c19-a7a4-c41f2b9396c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "121ccb27-bf6a-4c1e-9f9e-13671c594633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b4722d9-3521-434e-bf4a-c170b5b4dda5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e70b42-52e3-4641-8041-45f17a19e44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a2da7f-8cee-490b-9f40-70d677959220",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "921a19fd-7173-4623-b78f-e1db6b5d97c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518d5c8d-bc44-4d97-9c6b-bf1d8e3ef37f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b775ded-8b3c-47b1-b52e-e756c992d775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "74f655e2-8245-45e4-a2b6-71adb46a89cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93bf9af3-7f38-453b-b13c-079390a82239",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54064a1-324f-4a6c-9a99-c6c7f3e0a7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8c0171-d1ba-49b3-9cd5-ab57f86b820e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5f0f2e-89dd-4f1b-baa7-98a7a1e05848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "72a71e86-7393-4a8c-8718-f63e746bc6cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1074b8-b5a8-4bb4-b228-b1e8d2b31a23",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3247c78-25b9-4ccf-aded-57353cbc1ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16798eb4-5bfa-449e-a2d4-45e9762919ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a28f5d22-9504-436c-83b6-e34718f59d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "10f99984-5be3-4c9f-9005-dbee422021b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0915747-11e7-43db-8dae-b9ce4b06d0b6",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "808612d5-3ac8-4008-84f5-16fc30559b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47925516-2fd4-489e-9276-0b925bae2885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d53e5ad-2c83-4b92-af9f-b820e86a2339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "820755ed-0078-4877-9839-795f6cfaaec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be21958-3a52-44ad-83ba-e9eed068ddc9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d00c85-75f4-47e1-89aa-e0c7d91151ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d9686b-6a60-4227-b962-a41f585b81a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ab0cf1-f78f-4ecc-86b1-e0a8665aa71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c7a88e-9783-4ab9-ae8b-cd8c491c5e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935fcbfd-1749-4829-b04e-38a837bcd81f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1991b8-3f16-44c0-900c-1aa173161785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb19b557-b0e2-4069-a3b3-36890e6fd1b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3a147d-2d84-4d56-9692-42bf4d6a1da8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd192b0-6009-45a0-9837-af7822cb6bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2abed687-dc70-464d-b605-8ce69ce6108f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9aad879-919d-4235-a405-38520b115839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82c3ee61-5ca2-4cdc-b2e2-fad86e734880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc5d80e-9f47-4ee2-9727-5077c80c8cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e77758ee-30ff-48f8-9555-9745d5f26abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be45513-032f-47a0-b555-68d5bde4a50f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fccb23-330a-46cd-af14-cea470b98610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "937ed6fc-cb94-4765-823d-c656652d6e93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72dad5f-54bf-4923-8843-746bdb0f01a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e3939aa-87e5-416c-8086-b1ccc6afda2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fdc4d6b-a3f8-4fe1-9f6e-66503a7aa48e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "925bbfeb-88d9-498a-9abc-43c8b11e7e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e13f53a-62d5-43bd-ba24-701fbd8eb057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0061665d-558b-4f2f-8d98-caf3c24e7d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a37b7098-69dd-43f8-aa94-5cdc92535ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d5b860-a900-44aa-8dde-14acff0311a0",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cb24ed-f5fe-4883-9e11-f2b30db92c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0360f71-485d-4037-93a8-1c0b28c574df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e13fc1a-6eca-4187-a302-729cbb41d091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31936fc3-28ac-4a1c-b5c3-69a5d72c2cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd5b3ff-5f37-42c9-98bd-686bd2b6f6dd",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3859213-b902-4958-b6a5-8327f1c5470d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "902156e1-8eb3-40bc-b028-9921da65b086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6105e87f-c798-4545-8d97-6c37f4774cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "98422260-478f-4b5f-ae27-e827a6a18c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007123c1-6a02-4bc7-aa4f-28e835547707",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d192e3e8-ce83-468c-b48e-b51867ea1fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e511dc-80da-4bc9-82d7-9db4baf895d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8810d22a-267e-400f-83e5-c04ee137217c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd971390-9cd5-48b8-be96-115f4c9ecb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104e488c-ab59-46c1-80cb-d1040d75f2ee",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9876aefb-3789-4c48-b979-10ac648211e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72924dda-4868-4d2a-aee2-a309380e8346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c5dc30-e633-44ca-a506-8763796d59d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22f3c964-a62d-4bdd-8765-4e1533faf619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b0a14b-8550-44b8-a119-5b5f3c0f763e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a5da959-5de9-40d5-b502-25a05241d520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85b37a10-069e-490b-9352-9060217f989e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7768399b-3860-41cd-bc60-629197d678eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "78814125-d4f6-4741-b6cf-8d25f062c649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8bd3d4-5865-4e31-9989-bb25f25db420",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fdf0fd7-f6ff-4027-ac37-0933b8c323de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4763dbf7-f740-4fe3-b6da-4b997f61a825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fddc98-323b-46e3-b8b3-d5d4a6b0c85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bbcaade-6579-46a6-8dd0-c2db62f2ac61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2014ec7c-9912-474c-9e02-3bb21656e493",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb4a93a-9cc0-46b9-8239-3e01da77ca01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95f0c846-1f67-43c5-b9ae-03cca8c79b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15ecb4c-2add-4ce5-9a4a-c6b617b612a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "48746322-16e8-434c-8b88-5934825c8c4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb817cf2-47f0-4286-a525-dab2e12db43d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c896e2-0f7e-4e73-bbfa-aea7d7a819ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e64089a-5ad4-4113-8471-31b3c6e2a895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08013b12-9527-4a74-8af2-bff409b40782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "113e7e0b-8efa-44fa-9a21-f5c3a2ced854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a302e1e-57ac-4dd7-897d-f25a7ac48b2c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c5cfa3-8c75-4e3f-9f8b-486b1f2134dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "416e6115-e72e-4f4a-ab71-8e52d4a1a90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f3951e-f1d8-4004-bb9b-056fcfa39ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a42461f7-bfc4-4f1e-b06e-5694dad2356f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05942f3a-c4bc-4e3d-8a14-00600cc308fc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f536c82-a789-441a-9461-e09def0a4a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57130c0-2fd0-4463-a4d1-097f969e8def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36eb82d4-9171-4de0-b137-e7d2703fe87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff88396a-ccae-4420-bc8b-acc1b0c9ec15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a0ef19-4336-484d-945a-a624022d0c6f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee44c2e-438c-450f-bd04-6805cafc03fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fe4691d-3e78-410c-a4c9-462ea8ddd875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609f170f-2ba6-49c3-8ccb-2685b26eda32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9aed3655-046f-45e2-8cf1-e14ed6cecdc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c502d27-2854-4da4-9696-1ed7c32c7d40",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c40cf8a-c3f2-4d3a-a311-29b2df276f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563025f5-0f60-4f6b-80f3-dc0366bbb73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae793728-e040-4fb1-83e3-f5788f770a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "909ef0b1-efbf-4794-a5e2-9b6c0b125bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c73d48-de9d-47ac-8891-e5484244336d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d622da8-d3f0-442e-bd0e-864130f8207d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92023ca4-6834-48eb-832e-c7addfc85fa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac9dc8a-36c3-4993-9918-49609137e696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab53f01d-96da-4fff-b1c7-4abeb48f804b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190bd392-6ae1-423d-b660-81b3ee53ad06",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c31c059-80b6-4b26-bf73-bc48d6e12cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcead5ae-573a-4740-9ef9-fe4c52545f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5472e7a-638f-41c2-a5fa-c4c58e17d28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa65989d-5203-4c1f-a9b9-4c30cd46c2cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c8df79-a356-4046-8dc9-bcc424bf9556",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b624a0-df4d-44af-aa56-9ca4e70e45fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3c2007b-4389-4a30-983f-d38bd4f69edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1f5cc57-d674-4409-8eff-06238599856d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7d0651f-f26e-4eda-98df-96741f563941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159e4fa0-5aee-45f0-83cf-1bc15dbf69f4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a37af5-9614-4991-b79b-4c2f16792e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a339aee-1caf-43f8-a24f-42cd3bcf711b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0421eb2-8773-48ec-9874-89460aaf796e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82c136cf-bdf1-4747-9235-8f264810fe11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db778f88-c48c-49d5-bf60-7a468441cc89",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8f5d03-8f47-45fd-a7d4-31ab71a3d627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd15893-666f-4e39-8f02-c9c385b37ec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7d3fa4-4791-4d63-83c3-b62fea3c76d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "43c2be36-7fca-4677-a5a6-da72610494a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57d80ea-8d7f-4b95-b1d2-1d239c135dfd",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe3a67a-db3c-4733-bcfa-69c4a9edd277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e52e2305-2071-44c5-9e7f-64e00a0b1500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c072cad3-7ff1-4bce-8e71-877e68d05498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31acd748-5488-4a8e-896f-b4783d29520b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f403f9ad-c9ad-4006-8abd-850b0c2dfa2b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b7017ae-4a9c-4160-8ee1-ca1c58a2aa08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8dfa373-9050-42ef-b110-8d4378b47fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9f7bc0-72f9-4ad2-b620-601434191071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "776296ed-764c-41c9-94d9-a68e36e50964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ea38d0-672b-4bcd-aa22-4e25972b902e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af23d6e-532f-494b-bc9a-76bb185d7966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63375b9d-5b9b-4cbb-91fc-c1fe7e44a514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bfc00d6-43c8-4c31-8321-aaf63130a849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0210930e-7fc9-4aa9-9616-9a4f8b741b28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7097e42-9892-4e33-b14c-d79665905b56",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a421fbb-6437-433e-938c-98cadaccf34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae50b8e-a0f5-4ff7-865f-8abe0016523a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010cc230-e010-4b66-a8ff-dd6bc42c6bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b52418d9-cee0-431e-95ca-a06b546e3873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f255d9-be83-4be6-af49-24424730bd3a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "636988f4-d0eb-439c-9e0b-22df3f736494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799932b8-422b-4988-8b97-2b1e191da84b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d8ee6b6-6ba1-42e2-be2e-951e1a4d669e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb794a3a-84f3-4dbe-a7dd-4ca433821209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ed1c18-7cdc-4a39-937a-206c66f1a3b9",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eba5444-ad3a-4ff8-81d1-25a5dbcf8954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d2f181-da40-47ef-aaf1-39398f5aea03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dad4896-af3f-4a29-b57a-fa39f3a63f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b03c919-dfd1-4e26-8f0e-d936809421ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e3d813-92d5-4cd7-800d-1381be6c2a4b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c06eef-cc21-4477-884c-a85780f7f7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42c0832-9ad5-42c4-a3d2-be68fdbedf78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23458e6b-4701-4313-9ad3-40dae8b7594d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "941c67a2-dff6-4793-ad4a-ab76ec7efbdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c439ace-c0ab-4494-b8c0-0885f07c3858",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b4e275-e5ff-44f5-b4ad-16d86e765cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00839f73-932e-4be4-a4ab-d36c55e346b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ecc736f-69bc-443a-8aa8-f4929d9e66bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b64d08-6719-49c7-b8b4-ad51fe2db8d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f562812f-97b8-4d67-b1ea-7bf00bd04a96",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f67524f-c97c-4089-8945-7b6c52ff8813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3c3ee8-1489-43ac-846e-163c8b0185f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1daa56cb-9fa1-4c03-add0-1d8c8c36716c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f14217f-2850-4f64-808a-62e19eff1852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a50d5e8-55fb-4081-a799-55f31b8912a5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1736642-ef6e-4227-8b9d-38d24499558d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e80b63f7-3b7f-4d84-978b-33cfa7077e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb44afe-05bf-4de4-9b5d-8618a097b56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4d59898-2ca2-40df-95e3-4f8ca5fcd206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107c2fa9-0a29-43af-96e4-8abfc334d91b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f713d04f-cf90-4a3d-99e5-235b920e7750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c02e8a0d-cc18-4e08-8f9b-6d6c2effcb66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecdfbc9-acc8-41ab-acf8-5e4c4a7ad9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0924f4e2-f47f-40b9-9a9f-8ade11f75910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b661533e-bd54-49ae-9ce5-3c4279eb4dbb",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2789dfe-1c90-498e-89ca-2d3bbdefe531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e504f3-d121-4294-8abb-ea0d7bee5925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ad7706-b6ab-42cc-acf2-669424b8cba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1700f67-6d89-4285-b256-7bc03231f07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3371cab-043c-4bf2-8f8e-ea0908537846",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1a0a6d-23d2-4072-b989-db9ac5f07c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7901f60f-2883-494e-8975-2fd0763765ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aff352d-9265-4bf5-beb8-d5dcf187b669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "37df1d0c-c995-4ecb-93c6-55185ee8f963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bad982f-dfcf-469c-be10-eab5a368d1ee",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0052624-4d5a-42c9-9195-51bc5ed5aa43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c2bde0-32f6-4bd3-8533-b83c5d3631e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41e5bd8-e52e-49b0-89fe-3ff6ce8158f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e81e96e4-819a-48ef-8104-1e3a96bdc4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6976a7-d331-45ec-8048-969f025cb361",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63450f1d-4d8d-47a2-abff-4d0006460b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ca2ca3-e458-460f-8367-bf9ab322104d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d610f636-7ac8-44a4-a80d-2a4903e2ea00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "72a25ce4-23f8-40b8-a0bc-61f730fb48b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b219b0d-245b-4d6a-8ab9-f94bcc28049b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cb5c6d-14f1-40a8-a50c-79172e724241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "107716c3-4b02-4e27-b8d8-10ffd2985eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4bcf0e-34c3-45af-b10f-2c5659173cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "448685ac-999a-431d-8671-2d85147629b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab0b438f-f559-48ce-bc5f-140ecc166e36",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0faeeb-08b5-42fc-838f-71f9a8188d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c69c85-f698-4b46-91bf-fe458f024f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c6d292-d5b4-4db0-a7b7-0d4515cf831d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab76ab3-4efa-4b0e-9a22-78b937429623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591de547-b74c-4f54-b00c-64e56e409863",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766f6537-be33-4756-9549-948f89f51510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3195f42-3e2a-4e60-a018-e72d2b8456ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1126239-c858-4155-9ab6-68972faf9d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c251928-6561-459e-ae41-d396a53b665f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a25104a-79ef-4a10-9f10-3dc983432787",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43dc65df-f1cd-4145-8b1a-b2d834b3a29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae7a1a0a-03c0-44f5-a93c-95f20ac5424e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301a94ba-435a-44ab-b036-d3b7c84e5438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "75db5991-5957-46c9-95fe-c20eaeede076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d66cf42-1a47-4535-88fc-48532c76682e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346eff93-5dbb-4157-b606-8b2834742cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0cd4881-b840-4610-8b86-f2fbb7c5a096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d88e010-1bbf-402f-9c8e-e585163c7af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b01b3c7-6ab8-451d-a03b-c04d5e911ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d034eed1-5b67-46e3-b867-f997df24e992",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb22090-c12d-4433-8a3a-ae62a5726fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ad8efe-ffef-483f-83b8-fb6eb3b0b6c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "765bb32d-f18e-4fea-8185-fa1002e68814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b2da245-c29e-4743-962b-a709273e7a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1c5189-54f2-4dff-993c-71394a4af719",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104aa4a1-a52d-45d2-be85-9146d15f610c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45bdde42-7e73-47d5-a15c-0706c6de1698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81f6b13-5427-4952-9827-ea2769cedebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "712542fe-f006-4f85-ac58-e034ff3ecea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc170b6c-40ca-4c46-a45f-a6e69293b193",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da5c159-3dc9-4560-9c63-556206a32075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb346ef-4051-4fea-8618-090477dad477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d627adb-972b-43d7-a4a9-ca99e27540bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea2bac0b-f83f-457e-95eb-71e8c6392dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57b71ded-d53d-4d9b-a106-53e31b79a573",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee53c190-7f91-471f-b41b-b892179d5cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ac28b7-0131-4456-a1c7-076df0a54259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2585d6b7-3ec2-43e9-b389-677484aff65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "77403ef8-1f73-4b01-add7-afdf4c2422d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b5de72-5757-48d6-991a-470710d0bc2f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc5a241-41dc-4456-9358-d616486d5dc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6224d9a-7ac2-4f85-9ed1-3a2dcd83c77a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb6499b-11e3-46d3-8f33-7257926d0969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "51acfbd2-2bcb-4265-baf6-fe9b5f75f6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f4723e-6c40-4587-a0de-56b1cf08e8e4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9263a28-6ed2-4838-aa59-9c52c1c397c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "16087086-75e6-4a56-8b75-2879f0f069ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861bd6f8-82b1-48e0-a6a2-5bd83f3521b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "475035fc-0396-4a7a-9fd2-24dc1425f2bc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5a35eee8-31b3-4874-bf61-82d1e07280b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ceb8ba80-42ab-4898-8ddb-268388690921",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635e8f8f-6551-4b55-9115-2da7d9fee8ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "193b46cb-f715-492f-b9bd-8a4dd75ffb93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81118a57-35d1-4aa7-9dea-c9f3f73468d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fdc6671a-9535-46f8-ad9a-39351d67dd4b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef43b373-2edb-4dae-a599-b23c145f4c52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a257dd66-74d9-4bdc-8c9b-5d1c89ba6ef1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4b683e5-d877-451e-bb4a-82e13edd2330",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97ba1350-5da6-4445-b37d-24d52e571266"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "640c8385-19f9-4891-8da9-69ef488e6303",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "abcf2d28-bd77-46be-998b-b5013bd216ea"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "122084e5-4efd-4ea1-a16a-f91f55e5fd65",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2ee5eaa6-9c43-438f-bc7e-88ac0020829e"
                }
              }
            ]
          },
          {
            "id": "eb6871a3-e9fe-4ea6-ad33-99307fdbc53f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0e489ca9-d65b-47aa-9b77-66a4a76c0331",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "77d615db-a512-4fa9-b81b-17e68a29ea24",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af522fa1-af04-4ce3-80b6-428d82587783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "9846fd63-cebe-47d6-b445-79dc35cd7089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e574f11-ff88-4815-8f31-ede499594eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0bf1306-486a-48d2-b7ce-f2dc61d9c889"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d7db4300-cf23-46ad-b8f0-51dccad86d86",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f97acfb-a0c9-4198-8248-3e9eb57089a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e4b61d63-525f-4bac-b6e1-14aeeaf7eb17"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "593ceb1a-92b3-4074-be96-f7bd51eaeab1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0cf8a854-9f82-4be2-89cc-ba8b5738c8a6"
                    }
                  }
                ]
              },
              {
                "id": "70bb6da0-a97b-45fd-9c4f-27e8b38560f4",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d0bc0eb-68ba-472c-bc31-95d4be64e1ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "69798494-3962-4442-a626-1d518691a355"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "952bff92-116f-4063-8985-eb053fb4e20c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "41db7682-8ccd-4b48-88d4-62c95d1cad08"
                    }
                  }
                ]
              },
              {
                "id": "93dc6fd7-5ce1-4ea2-975a-f689aa9c8b9e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9f8acd2-c0d0-4c68-8243-c2ba861c8942",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d0b1553-6593-4f18-af54-3dcd30360b2b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "805c0126-d024-41df-b07a-5df51a787b5c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "99684186-4f44-44d8-ad6b-c36d00b00642"
                    }
                  }
                ]
              },
              {
                "id": "ffbc7731-b0cf-43d9-989f-2adae48241ea",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "41768781-b6ff-435c-99e4-1ac87e229743",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f56b4b12-9849-47a9-abdd-4f8101584b7e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30ef571a-595a-4661-815f-cd0f69168db8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "67138093-be57-4b8e-a518-9e953e5e09a3"
                    }
                  }
                ]
              },
              {
                "id": "a55a6903-c3a9-4fa1-8aca-705ae7c03401",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1432289-b3a5-4088-9a71-3c4cb4330d15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8b5630ee-8749-4397-9213-86d8a8552b4c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81dbee73-39b5-4b2c-a216-30de3967258f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "492f2de6-9078-4755-b881-c647d68b28be"
                    }
                  }
                ]
              },
              {
                "id": "4fd7c341-32b8-4fc3-a680-2f12e77d905b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa0f50a2-ed61-4129-a6d4-e2150406cbc4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fa0cf2ec-b772-4de5-b992-1a5c90c31199"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7efd897-fe90-4006-b9b5-5736a4d4f532",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4fdef177-dbe2-4761-9718-2cf621de1fc7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d74a8be0-0b23-4710-b0fd-926bd4900d13",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf307bd9-97b3-445e-ba72-0ec6e452aa4c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d66bd823-c7dc-4434-b4e8-0dddd8889536",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2137dbaa-2021-4f88-a0f5-b844171409fe"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c649bdc0-3bd7-4400-8654-26ee49fc11b9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5d87d183-7c37-47a5-a683-85ba03fb3c3f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1c1135a6-b7e0-4af1-9534-38483e88ac23",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "28f8b5ef-4013-4122-8b47-edc7724837a1"
            }
          }
        ]
      },
      {
        "id": "44bd18a6-a439-4819-876c-7fe9d21db5ad",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "96e21705-bae4-482c-a50b-2a98178ed3a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "42875945-4c1d-41ac-883a-887f15bdd2f0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6d152170-a535-4632-ba94-2e24d18f303d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a7b7aab-ea07-47de-b01c-9f14d1fc4012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48cb5d3b-cebf-49af-b66a-ca3d08decd11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0257f448-ea85-44f8-a295-257e12fccda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a93ef75-71e6-4408-bf77-ae16c11f9789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268e506f-1312-41a7-9c15-7d21412bdb79",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4311d50-56bb-41d5-9575-3390ed8c9173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e1c9f28-e409-4b35-b7bc-88584116a0dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1c0b15-a311-445a-8c3e-f9cd913145bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "807be9c6-4f35-4347-98ec-54e22dbf99ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac30f22-f468-4841-bf60-279b14c51039",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8918238a-785c-4bac-84a9-fa0713fb5a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a390a075-6585-4f41-9c86-adb9eab9f6f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd8632b-da9e-4995-9aef-39cbd987c822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "34cc1592-6660-4f62-a152-8552ca2a7877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca5a51b-f139-4908-973f-a074319f2584",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18201792-6f29-40c9-b95a-1250bda8f45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edd2fc0b-e849-4a6b-9dd5-a27426c319fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd93dbe6-a2e8-4611-988a-41a334579398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5728ed7-3107-4333-a4c7-30594a3b3087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6548b91f-6bf2-4686-ac83-eefae9cfe56b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3c6dae-5684-47f0-8fb9-3b134daea8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b6f1a9-4af3-4116-9816-16fa503b9cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e7aee7-5a20-4cce-b626-e543b72680df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "884c9283-91fb-46d1-8828-fb960997fd8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6e98f9-b80e-4aba-9e85-08e583ebc531",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c69556-3f7d-45f6-a9fa-596844b896a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58b6f9c6-f109-44f9-b174-b8b0678c2ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3203bb7-be2a-43d8-ba41-238ad4da0ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "25b120a3-42da-4b28-861b-172ce37d077f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b72a33-34ac-486a-9029-ad20c51f2eef",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e0597e2-c688-4ed2-a415-cca6926c1b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "745d1ad5-1550-4df8-9447-90d06993368c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fad0a139-0550-4d19-8ae9-8a2f913761c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d20e1c78-8add-4577-8f9b-65a126981fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958bf812-8a59-4771-9550-faf2c03b53fd",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e83608f-ee7c-47af-bf67-5a9eec0966c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "719a42f8-36f6-4844-b459-82c7aa48e075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8218bae2-534f-4611-9389-2371a620ff87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc32b01-7aaa-46f9-b756-311734605a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b974d076-c74a-4544-a110-6774914a405d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd68a53-33c0-459a-823d-ea6c6f913027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97416492-d42f-4737-bbb7-05f7ea985030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b30c38-c1a9-4e0f-b998-66bf9ffa054c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e3f6fa4-c9d1-4bbf-921c-19bf6e5f3438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2cfdbe-8741-4790-8896-aa0e9afded11",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d74530-0272-476c-8331-e1071226cc35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2f9f016-ad7a-45fe-bb55-287beb0b620c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4647a5f7-03a7-442f-8a69-85932304b3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03e6f01b-f18a-4d85-aae6-69fc0f6d158c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f78bf4-b3b8-4c65-b02c-06c3c69bb233",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73854e0-2f01-45b2-8e70-7e2a4d505456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749e1626-1d7d-4f70-b70f-5305e5188cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145e2b1c-8dde-4a0d-ad92-7b5dac2fc44b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "881d4c66-2d9c-49ce-b1d1-d67bd6d28899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "611b6339-2fba-4f89-99c4-26ca6e2ee8fc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33e7ab1-92c3-4942-a399-738e49cf8442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7ef633d-8159-46b9-b0fc-c32a837a2494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae40098-4a3f-4017-ad49-eec97a70671e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d9dae5-aa66-48b8-95b9-207268d523d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8213fac9-cb0c-43ee-87eb-22b17e4313e6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2dc28da-9f04-46e2-a41f-554ceea880c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703cb592-6049-4f6b-9ffb-4a943987ac8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c2ad279-1310-4546-8ea5-33f0727ee0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3f1597-e8ec-4494-81fa-c24e0e75748e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec185101-ef9d-450d-97a4-f90562cccf02",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "574909eb-c2b3-4f1a-b0fd-245278ee693c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35598c4-4dc1-4615-b6ab-0f2f6d5ab512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0b71a4-83f0-4361-967b-a3292616db09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ac16937-e285-43c7-8543-6ff31fe8165c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad3f2a1-7e52-4fc5-8ef7-ca4ebb26f2ba",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e6c160a-bca8-4f17-be36-03eaaf9f80ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9f70508-5609-4acf-b407-669c3806091d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf3a842-e0af-43a1-8b34-70659bdf302a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "af3555c0-7d7a-46c6-a027-6ff564830d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb68c86-88c4-4ef1-980b-94f6204d147f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70d10e3-934e-42e1-9285-ae12eba9c81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53d8d573-4e47-4c56-a01d-963151f90fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29be69fe-ace1-47b8-825a-939dec37913c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "81c36514-ea1e-4221-a4ea-583b88df55b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83bd2cd9-bc2d-430f-82bb-bc0b13610cd0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb29bc13-226f-461e-86b4-30a559863f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dfc7908-ddcb-49b8-8ab0-3e2a6f71b902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b96d7acf-d40f-4142-9462-98644ee931b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6415eee5-2732-4257-a1f0-028adda32039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2837abd6-4caa-4335-8d94-7b9f3845e220",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6402d2c-4291-475b-8e5b-1070dceca9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6557897b-b02f-4b4b-95ee-e17be90317aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccaa4a3b-d18d-4e66-bf4d-d6d60cea2060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8659a663-9109-4ed5-994e-cb64645d3efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ebb72db-6886-401f-90a7-3af75d7be67c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c6d7f2-6559-4d20-8f90-fb076ce5756b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd61e58-ea40-4d81-a331-5c7487f2077f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9256df6-0f2f-4c6b-8c7e-53dcdd3e0ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "124f925c-6a5a-497d-bfba-e647b8b42682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1760e0a-7e35-4c62-ac6b-9ab7bdc5d72c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb63196-bea1-4d47-8f0f-41a842f56b16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ce44e1-714a-4759-a7dd-18175ba0decd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf538f2-3613-4cf3-9a63-02490ba0434e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf75bf4-b7bf-4204-a572-6d9dd2972829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c09e78d1-575b-4787-9afc-da874f06dfa7",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b790f0-8a58-4274-bb59-1f2471d9f739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbaaf700-a30c-4c22-974c-c30ef91599e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc940c1-8329-4a12-ae62-11d63eaac571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30c8f2ca-70b1-4cf9-9caf-9dab172032ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea91d216-b551-4909-b1d2-c70ae1fffb98",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea9b2a0-9394-45dd-9dc9-db8880d5f96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02db7b54-1cd9-4d2f-80d6-a6342f2c22d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a95f2670-2f47-4c14-a952-7cfd9775627e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efde87db-01e2-4042-b8f5-1f732d5f1965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b3df9c9-36d2-467e-be88-47e7d5abc22d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b1649a-1ae5-4b88-ae10-88d54d50ceba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71de9ab5-3ffa-43d3-84c9-eb751015e829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31ac5c85-60b2-406f-bc29-13d14ef2fdff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e0c2f89-3aa9-4172-bc44-c68e64442cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f78d09d-8f45-42a3-8845-d643441571eb",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa33f7b1-757c-4ebe-962e-b446cce78fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb8aa5ea-d517-46ff-914a-4c34c6c27b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89c3a9a-63e2-41ec-9126-25989e69240c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ded98574-54d7-49ff-bedb-3ed180416118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf40f14-4e46-487b-bbeb-9f5e1f265a1c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8377febc-d69c-41ef-951b-a338cc6034fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e09ca0d-0915-410e-a7ab-67afed3062df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10b6f37c-610f-4408-b222-98a40d0fe5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee7d6ab6-03af-4631-a1ad-ca77a7e7a51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fb8bdd-3292-4939-83b3-04dc59a33acb",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29438dab-5f77-4dc9-937b-58060c141ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ffa23fa-9095-4b87-a982-3eed0f88b71b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d8c0c0-4be6-42fa-af69-704289aef35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40331e0f-7822-4cf6-8383-06546530c918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b84fd3-222d-4d7c-9728-9d5e0bde69f0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43077280-34ed-4ecd-9117-423097939cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfae33e5-f547-435c-9c75-269055f1e03e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310eb276-c681-4b17-9344-cd588b81f385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3102d4b1-ae81-447a-b706-0068ef1cb6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1bf544-fd5f-4ff7-b260-8d273b3f23a3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09181fdd-2026-4cae-be76-757246326e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d90efe-db57-451a-933d-b81bb8382901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16267966-ea0b-45d6-b7f1-b3e32429dc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3acb2a0d-5159-4190-b25e-7c14fab8be6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3608b79-7178-4f1c-a141-485f0a97e1cb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7f6c24-3881-43b3-8ea7-0a0f1a222eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a874196-6643-440c-bf3f-53ed671bf2c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2522a83-ae23-4e77-bf4a-1c01ecd23060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e777f42-da12-4c2e-9420-43329db7f3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f04d084-17ae-47da-a6da-aad137d52b4a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fce1ac5-a8de-4004-b236-cb50290f62b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89d7d464-d4ef-4225-945d-4f1d39d13732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7e40c8-8597-4756-81b5-5b0e49804fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f2d212-28a5-474b-941e-f146600397da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e59c3d7-cac1-445b-baf9-6ec1caeb2688",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61ed2c6-5ea8-458e-a04b-f6c663d2d6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34050217-1312-4c8c-bfc4-8ef85fe85a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d55ff57-041e-412e-ba41-e0d8b8fe01bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "465eeb54-125b-49f2-9aca-3c2b337e85bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d1d9301-0ba3-4f10-9f8c-a833ada26cfe",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3f5e29-7297-4e31-863b-5cdd877dc410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e445702-dffb-459d-a5e6-875c232bc0fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55058692-eb1f-4b83-8e22-36c5eb22db3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "280ad2e4-6ba9-4f7b-a2da-3275f0deff5d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "00ee0b4c-bab2-425a-aae8-97abfe5837d4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3dbad6c3-f83d-42cb-ab16-74efd5d178e3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08c7fde-7987-415b-8297-7bbb57455507",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f14d8660-28b8-48a7-9a94-6a62ac8338e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74499c35-8414-4a38-981e-97e343552a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad68da20-1032-49b3-a95e-56f9299ce8f2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98e68fb9-c438-4e08-b0c9-66c64b8bee9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1dc2699f-6503-4494-8615-9a7074c2e225"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dcef93c-097f-4b48-b344-107c23142a0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5aac6e0-cbdb-4848-98de-07e8061ab230"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0036462-d177-400c-9762-f69326302142",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e1ab2ca2-7e57-47f8-b24d-b6757239bfa5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8213d45-d157-43c1-8a93-7b62931f577a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "923d8d51-46cc-48dd-a26e-0b5a8074d8f3"
            }
          }
        ]
      },
      {
        "id": "fa264034-650a-4753-9e82-86294bfd304c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "e0e86e9c-3b6b-471d-909b-2db5f2a3d5f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db550b1b-83ac-4295-94ae-32f842afe366",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9ba6bfbe-3a11-4c64-8878-86f4b741efa0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16786680-f930-49b0-a48e-326eb7bc1002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "472c22c0-e97e-4910-b544-c74c22c802a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3813c4-1d07-4265-ad25-098a065494ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fba8e1ea-2c78-4de2-986e-bd2c00c4c046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289c6328-22f2-4774-ae15-ec928a114c21",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100818e8-5942-4e1a-9eb6-04fd4ee1e54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef407b4a-0eca-4a4a-9cf5-52b7acbb10e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61a6e96-9db5-4cdb-87ec-78718eff6d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "939cd66e-0aa0-4fd0-b710-7d51af69161b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b753ac-d5ca-433e-b2c8-0065f1a4ca67",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dbf810-f8d2-4a97-a441-e152b123aab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297a9c68-b3df-4e2b-8aad-f49e9cbdf2b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ea6567-9b96-4119-bc84-05b0ca495705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4689ed37-b7c1-4125-b6a3-0c4cae120536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34b9e6e-146d-4e24-ab21-755bb1fc0de5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406c4402-26e5-4637-bacf-68df639acff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42047e87-2b91-4138-9622-0582c594f97b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5e2797-fc72-4f74-9352-4374837d0944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de538ed9-fdbe-49da-b386-3599baddb5cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fded1a5e-00cc-4628-82ec-eef2a813c584",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32cd3a97-b45f-4fc3-b0e0-a5c6ddda0bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cc12b6f-bbde-4825-b6b0-45d7da9ce527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00b39ed-dfb3-4124-9573-1db99b832b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf41012-0bb5-4465-85ea-e2c5573e6630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4509befd-e86f-4ed5-ad42-cd3dc32d88e8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfbd110-ee87-45b4-9694-592ba709a188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c422e675-f28e-4eed-833b-e9cda50e37ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12bc47f2-d2d5-4668-985a-9d61368ef635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97c54846-d1dc-4f59-a1e0-3d0b29330b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccea57e-4343-4b6f-8f74-813738542d22",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4adaa043-90d7-431b-8a5d-0029f6b87b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a01d243b-773c-48ee-a57f-c01cb61ee69d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b80136-5c14-4d6e-84f7-6705e37734c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "df657ca2-d3b7-4885-af18-7a21cb86231d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd820eb-1447-4529-b0de-62362c43e91b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8750c2-06c7-48e5-8686-90035dbe228e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ea5852-bc52-464e-8ce7-9bad797b9970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0f3c2f-0809-4cfc-8f86-6f12997426c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25c5ea70-3edd-448a-aedf-f904c20d8535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56edf0a-c459-4bb0-9434-e583a5854ff1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c57006-d43d-42ca-a189-a0b0ed2d51ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e168a5c-87a5-47b4-957a-faabdf3c4be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b8a79b-6ecd-4bc4-a1ab-c4e40bd7a0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb730f0c-f8e4-49d2-b235-2cd51a04fcc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2098873f-4cdc-4085-8471-420b18a67a47",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c578eaad-b67a-4828-a2d6-3f4da631c5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fea5d29-daec-412f-b498-b68974648af2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b394a1b3-13b4-45ec-8799-9769ca3139d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "264ce01a-dfb7-4e02-94d0-24be6ac7972d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab968f9d-eca8-46e4-bdb1-a457ff8d8f5c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02822404-b3f6-4f62-bb2d-d440066a3bf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a10654d4-d22b-4132-ad07-9cd51b7c8216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122c88d3-1f49-4eba-915b-63ecf4d12bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e16db191-f6e9-4ab6-8dc5-eae8b86f8d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311b8dfb-cc37-4304-b9ba-31e1490d06ae",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "761da6de-c56d-4c2a-9a16-3e5c72c0db7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3745fe-c1be-4f60-a7a7-a31bf716216f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d4acaf-0c51-464e-b8a4-b826379277c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e235494-ca82-4043-8bab-d4a72e0199f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2093ffd5-e942-4c7a-a6b9-281d106830e6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f21e80b-18f3-46c6-9070-01409e624648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5ff49b2-2608-4a86-94f0-88cb744696bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6935884a-82d9-452d-9b12-f50ecd88bbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5492d77d-bc97-4eaf-88f6-4bc4b60aaa85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b64e830a-0aaa-415b-8c1b-b8a9ab155707",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ba17f28-3bbd-4619-bc6f-c9a2d5d3291c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60650e9-d973-4417-ad8a-3641c68982e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12a9d17-d640-409c-806a-fe0c2eea69b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc5acfa0-bd1f-4d87-b96e-8f58933a5e77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661d58de-35c1-496f-b788-22c5fe2922e2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6afa215c-a5de-478e-9193-acaebb7d6dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f146c231-4bb9-4b55-8f89-7c9972b95dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6578bf55-4eec-49b5-bc91-50c21a1a8ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b53a39d2-5648-486e-a859-d87a3241fe3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc05e26-30e4-42ea-92b6-82422292cd5b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63bfff04-b0d0-487c-9134-68c28bee964d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9352f124-5b63-4c93-90e1-6ebdec685435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cacf886a-0a85-4955-a3ee-2367c906a732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0683ee3c-7778-443f-9849-f5ba48a277e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc503496-025f-4faf-90a7-4988cbd819d1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57820312-8300-44f2-a153-34774a28f332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce13aff-0636-4d3b-a00a-123d6defdd03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb8b7fb-030e-429c-8219-df1fe9bce48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "669f61df-93a3-4c75-883e-f8e31ae99a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df49844e-2220-4d29-bcde-3e098bf6ef30",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b71ff2-3046-4a4c-9927-4b153a9a7202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3059bb-4b33-481c-b28f-14ae12508637"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82933dc7-eae9-433d-af67-d9cadaf45d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f241616e-ac49-4b45-9498-0483abaf44c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f773d417-d538-4973-98eb-97401cf2a6a5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7224e0bb-049a-44b7-b639-57490698d3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3657cabd-71ea-4153-babd-7c6a865cb980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8701d219-337f-455c-9a71-14e8025dd22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2afd1ece-3788-49fa-8048-030700f81379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e921670f-8802-4d86-a9b8-1bd5b7e80e0f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed48ca7-ef4e-4661-bfe9-f1ba2f8174e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf175720-ad67-452a-96cf-e2783953d662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60742b69-5525-4648-bc52-8b6d058fcc84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4f5365f-af96-4a67-b660-8a78e06241db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc59c49-9bae-41b5-aa58-410f64362924",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c7d025-f675-4605-b475-02164feda3ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7747ba-a403-4751-a592-83c9e3a56d87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d834ac2-4d18-4c00-b7e6-1276dd9b976d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edcd8310-df17-4971-ad1c-9be2bf06fa80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43fa917-7a6a-424b-a3bf-11e159693c3c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4805655d-baf4-437c-8f5e-9b865578c666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca82d5fa-6ff8-4346-b5e7-a9bdd88726e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4fd6ae-9c79-4aeb-8310-5afe3747eb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca34839-fcd0-44e4-8d75-7a00a7b00b54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b383e2b1-5888-433c-a145-33ac7fa7ef69",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d11a42-559d-48c5-84e3-96fb7ff0346d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "498005b2-8bb7-4478-a8f5-c822de01e448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce65320e-5907-4ebe-9aa4-560342878d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a84eb8bf-8f9d-4f8d-99f2-95d8fa52c711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76a6b1f-0b45-484a-aa5f-2e81692f13f7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b8d334a-d9a7-4c7f-a134-2b46fec88a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ad2a75-589e-4bdf-9cff-70e3c0f1252e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57b35d8-72ae-43a7-b124-4758aa52a76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "800f7be0-22b1-4382-8431-084a8e871b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33ab4a4a-af18-42b0-8851-2c1b868d4d2d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9796a4eb-36bb-44f8-8b96-44674f026779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0feb02b4-fdc4-4e94-915f-4f9213955590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f40db7-4502-4cbb-b77a-d74450b8d059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f57a6c4a-d964-4592-a7a8-d174f2cdb006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b7fbbd-9485-4966-bcab-29bf30ccc6df",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f26e77c-33e3-4ed9-8c40-c34138367eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d123d0-63d4-452b-8704-54bed0cd7ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ba1f3b-29ec-4047-a209-1756622d0f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7bb0226-4c0a-4b17-ae04-9a43c5430a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d715c78d-8e7a-41ab-b68c-2e93e3f6041c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c44c0044-c76f-40d2-82dc-ca7ee649aa03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abeb68b1-0bb5-47f6-9ade-96505294d4db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9afafb19-eee8-42d7-8855-19cb83e03139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33515494-ff75-40f3-9e24-b86be4a25c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b94d28-a1a0-4188-b6d7-0446c700c27b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c9ead9-d97e-457a-98a5-fb8176742dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af40285d-8ede-449e-8921-7e95512c27b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109a73f0-cd5f-4461-98ea-9748d2f98d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62fe04cd-40a4-460d-9f11-5eded0ada95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852d9258-9536-474e-a40c-9d7251fee8a6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27bbb46a-f477-4884-92d5-0605040eb816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6574cc7-d8ae-4f42-997b-9211107fddc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e6a7de-3eb2-459f-a898-c2904d907d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b68e11d-25c9-48c3-a629-5327972a74ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfc5a77-c096-4e2a-9319-ffa952888385",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ddba769-756f-4111-bcdb-37a25c6f1bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b48895ff-c37a-4a37-bc9f-6e1105b347ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4cfc8a-b817-448f-927b-5f8cc8092c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b9a83e2-5373-4671-aa94-a4a1051f12d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d9457e-329d-44a2-a5e9-1f4a0311c902",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f028391-dd92-46e5-b120-ce5a696465ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3186fdce-acb2-4288-abe1-bbeecb8b5219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b6340b-2f06-4e66-9700-c46512cfd8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a65bc37-2661-4a65-8d0b-fc46b9b695f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f4b61c1-db26-472a-9662-9a780b1c3891",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef20ea1-03a7-40f0-99a9-ce3e2aa123f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7666c083-63d1-4472-aa5e-2a7b63dd0228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b96adc-9668-4dd8-993b-a473284f968e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aacd7d75-05ee-45b5-9e28-f6727a0ee845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0097a46e-b35c-4951-850b-c09901a5a0b5",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba347ef-512b-4835-a22d-d4295f05556f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7112450f-f4e2-486d-b561-9ab7519f8583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b60bdd-e54b-4871-acd0-30830a120a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59a9410f-2ad4-4d28-b66b-3225e02cdf78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d62e23-3667-4605-b85c-7ef26f8a1560",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "034ad7da-05d0-4f29-b71e-f59fb1143e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbfdb418-8b15-4124-8fd1-6c8c4922fa85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860ebb35-2402-455a-b96b-efab37fdbe14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71aae748-3111-478d-83a7-789c45a052ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe568b3c-640c-4aef-9655-0a774e350ccf",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11bb027c-e1c3-419b-9794-e14cb8272d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a941289-d2fd-4985-bde0-db212dcd67b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e95413c-237b-44b5-9deb-348665d1cc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df31e783-89fa-44dd-ab7d-7ce805a00dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64b43d45-5acf-4122-b837-f82f9b6d12ca",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3478c4d9-0543-4579-9d01-2d60f95e9698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d2f081-d6ec-403a-b093-ee7fde9d3c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86340c61-9ec3-4f8a-b4b9-9fbef92d203c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e49f216-2af1-40de-b6bb-7e07f72a94b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93af7a23-98a4-40bd-8677-b683888c044a",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fba0c0f-4731-4e9d-83b1-84d69ee90f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96a84e5-02df-4d06-b8a2-496f9ef23886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0899cd-5122-47fd-bf30-a5d277fa350d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a317dcc-da1e-43be-9aa5-f3b3cab07266"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6888a546-a602-48c1-9c53-6d9f83b9ce9c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d9287dc-69cf-4e61-b2f1-105e500320ba",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84fe464-2fc6-4f75-a328-5bdc79532df5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "445281d4-4422-4365-9d38-5300135473ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2fb524d-f633-401d-a589-e1e7ca83e60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8095c141-834d-4e4d-916b-5b95d2f82261"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb810071-6d2d-4f16-b126-1b51af687543",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fc95b9f-2e02-4fcf-84d3-02d542d0b219"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a278975-e8b8-4d87-86f6-1fe042cbd486",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d3111cf-5b00-4ffd-907c-185fa76c70b3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89dba334-3018-48b8-a132-0520201d756e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c67cb8e5-411f-4e24-9e13-08205f9afe33"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "089dc803-6de2-4b9f-8537-d80eee5e8754",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92a1888d-a6da-4911-b62f-07ec2e8c34b9"
            }
          }
        ]
      },
      {
        "id": "efd975c9-bd60-47d6-a13b-60b9888452b5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f361e471-4902-4566-8fd4-0dc6513006a2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e86dd5b7-a9c2-431c-b7e1-7fc02e5060ee",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "884bf99b-c689-475e-b92c-d790191f9e83",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd654a8d-b658-43b0-babe-953c5977c9b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb27c453-77ab-46fb-9680-c343e4608399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76656b3d-4ccd-4c61-ae30-bcb24db6233c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab34663e-d1ff-4424-a7d6-65b248093ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab6cfd6d-3620-483a-bd5e-5c7e6ce4555d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac2c5ff-0c9e-4cb0-acad-522130fd4281",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f096e13d-3a08-49ac-8199-fae1c729ee67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2bd4e4c-fb58-49c9-a349-f19eae3ffd91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82ea0ff-c2eb-4537-b2a9-8f3cdb897143",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552d453c-925f-492f-9ec8-a8e0cedbef4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdabf0d4-318d-4fcd-abb5-7157902fff66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90fa0ca8-5a3e-4936-8d5c-4792bf181f54",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a160f9e5-c0cd-4f08-ba4b-7f78e3cb4b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c92e9a7-314a-44ae-9b1e-8c13c64cbe34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ca958b-48bd-4d62-97aa-54cd9a70d1b4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f396793c-6cdf-4b33-a0d6-1d207593d9c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d15b2c62-1db7-43cd-baf3-88f225942c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c873058-60ed-4c24-ad7c-416972e5a987",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d61521-05a8-411f-8455-707e2b39b48b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cecbd30-aca9-4a24-9c97-53ff66ba8f7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc8c354-b7e3-4dd1-80e8-39bd29e4866a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bf75706-7acc-4832-8564-23955b136b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f18203-dd64-4d45-ad0c-aef99ba0df3f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f7d675-7e17-4f49-bbed-e43f70f21928",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3db777c-4a29-4d5a-8ba1-4f0af269d302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebb0573-dde7-43c5-9835-c5461612789a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa6c09c3-ead4-4575-bc46-da371917f1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd4642b-8291-4774-835f-3330461c7f5d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87aec32-e430-4839-a61a-75e03804f569",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d748686-3190-4e6d-a6a1-a14b4dafa256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "464dfebf-fb9d-42e8-ab24-572cab0dc699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b72f94-8189-476e-a27c-a1d508be8869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d51a475-d082-43bf-8ab2-84b949c51fab",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6bdc48-4d6e-4302-bb25-c3d930d54ff8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc412b71-bafc-4113-b33a-7e7bc176ef17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d7dfe6-a552-4c7f-a9da-c591bdf2534c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f196cfd0-7cdd-4e73-bcf4-c86a5bddd9e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee913926-222b-4308-a437-cb76d7f36c4f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c419ef1b-85dd-4702-8bcd-f6130877a4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "174250e7-ec34-47ac-a020-e0c3c5661033"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c973c0-12a2-4681-8df5-d49218dc753a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "023c704c-fbb0-4e94-a9f6-18857382a76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410c5c62-1113-400d-a1b2-c44c79c95dbe",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1487d8ef-7af1-47c1-8a70-a1c380ea384e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66d5a8d4-6e8c-42ca-8613-1c3e04569796"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50fbcea0-16b5-4140-b8d8-54e42ead0e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc2d193-7eec-4c58-b31c-11448129c28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86b4cf2-76df-4275-8de8-0e053a5f9371",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27893048-4da8-4cc5-81dc-5008eafedd4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2692046-b9c9-498d-a907-058856bc7732"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03746130-1899-45e5-8271-e5002fd4e8e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f1033b-08f3-40fa-9146-f6f87dff6a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97691406-c52d-4fbf-8f20-26f9125e87a7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc1602f-2b62-4d68-8398-a117fcaad5ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc96f3c9-500a-46bd-832f-d72c62743fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "273605c5-acd3-485b-a064-735eb211a142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc48c3ec-f942-43f9-89f3-c3f406eca87a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a0cba8-a944-4f95-8e15-72b2101e8420",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71fdbfcc-6387-4941-bc32-a316ee0a34cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7ba72c6-0a29-4c9a-9e39-246b10438459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "668f62e2-7360-4556-928f-514a770e37b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fbef6b6-6507-4335-af63-8df27f01d0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055a163d-5a41-4799-b188-539c7e43c8b9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2297c8-3a70-4e22-a840-084320162462",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7382b764-27a4-4021-803c-0b6376eada52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd96ae1-fe5b-461d-a184-74dbf1055ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3a6ac2c-95a4-4dcc-a9d5-032553656bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88b11ce-a50e-4d3f-ad63-b0bf8c357be8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42dcd99-dad4-4665-97da-5147f13511c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04449773-75d9-4529-bad9-2968dbaf06cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "952f0f78-e92b-4391-83e5-1c62a93f890a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac1a7ee3-9d9e-4837-bb95-6a7be66fcf8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4889c26c-036a-4440-b9d2-1169c8ee667e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f52bd6-3119-48b5-8759-4f63553d7b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c65949d0-ef71-4581-97c1-05f65d69ea67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d7ac01a-e772-4318-b9e9-c0f9ad2a6091",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16bf7d6c-974a-47f7-8797-55360c00057d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f53364c-7f02-4a4d-afda-2e8f89dc04a4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ddaef2-47af-4b67-9401-00af171bebc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac6bc5d8-4fd9-406b-924a-0abab48d90de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "489cae01-5879-4b97-8b51-fdbba4184266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f171cca9-a5f4-45af-8bf0-e8a0626091d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6be5481-80d1-45da-9a65-9cb3f6f45901",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643dcef7-5131-48bd-8d05-7b843c3b0086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41cd4904-a7a3-48b1-887a-229db6d73ea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f522daf5-8000-4185-9f76-b47f7fd6cbb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5ea6226-e956-496b-897d-92398d1ae491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc9c7c6-949e-4f65-89b7-9c822fda1e14",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294774e9-056b-45e2-9d64-f733b735983a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eda12e21-990a-4599-8a2f-42e9b1760273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1438f25-814b-4b0f-b2cf-1f4b690959bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15921d99-a907-415e-81c3-52e5e6982358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09eb61bf-0598-46ad-af8b-6fde2a34c8cd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd0dd2f-2a7f-4692-83cd-53c53e2ab396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aca02ac7-4f7f-46d8-8d48-b53c9324c7d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ff6812-b964-436e-ac8b-3e81eca66663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396239f3-7a53-4685-878f-99cba48d6d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e32448f-86de-4aae-8a08-f81368c40782",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d669173-bbcb-4d3c-911a-39dbdd418d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a815ec5-6d5e-4682-a0d0-a93163db4ce3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cc93e9-815a-42a7-9f56-4ad0737d02c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d5bdf64-5b99-4e05-8717-4be3cbc8d142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ae6734-86fb-44c3-878a-c10b26b471b0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5073cffb-b80a-43cd-8e40-46ec4671ac89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bd2f396-f25b-498d-9932-f744a89b3814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ecc24a-42da-448a-89d1-98212fd46a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22867b7b-6805-47f2-9b19-b42efd297f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ac28652-789c-4874-871b-15a470e8bea0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf162d19-0c36-458a-a0e7-b5d6b55d4982",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e1cace4-a3f3-414e-9fb1-b8f4c2ad593a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8227975-2df2-46f7-877e-6a67f1f85640",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "457ae18f-bc2e-4ae0-9c89-3317a59f58d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d97d2b6c-d578-45ae-b604-5b51abfa3c17",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967ffe24-c058-43d6-8695-023b95d7b99b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6c59931-bf19-486c-987c-d4e6984ea85f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9caae3a-2c4f-4dac-ad07-e5f0805983de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3c40565-a6f5-4a87-a4d1-37178edf9a5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3deb5c11-9b48-4c28-9885-f9cd6c1ffd52",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2f5783-a30a-4447-ab36-10775e254d10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06d1c2c6-63c4-4778-b124-433b997b2701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a831b80f-e7fb-4193-b682-4af109503543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "915517e0-a97f-4ca0-b314-040ff4612318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15802867-e94f-4c1f-9faf-9f56cd2b8ebb",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49782c89-1753-4080-bfc5-1f7d2a8a8425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0484099-3e0e-4a30-ab95-b1bcd7346f11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d493aa79-6366-4d7b-840e-5f356400cdaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c080c0f-bf7a-400e-90ed-a6df69b6e095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35da5300-8986-4032-9f70-39eb7b1ad635",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad8c7c25-86fe-48d5-b7f6-c9e4006fb1a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99d37bf3-993d-485b-a940-2d6188f0edf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbcbdc39-3c88-4ac9-9f68-345eec60a9d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dc8fa2a-5417-4bfc-9220-234b32f5edba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71831b6e-0890-41d6-8da6-976eab862532",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b60fa5-7ada-4523-88b8-a90709cc1638",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa4eedb3-f6ec-4991-a63d-1f7a8d060672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6967f2c1-93b4-43b4-af2d-e6ba0201dc38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65401a22-cb24-4548-b4c6-9766df26efba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203e050a-462e-4ab9-b4d8-18f3818bd79d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d7d07e-363d-4500-aea8-4398809dd0b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1f18fa8-f94d-4268-9064-d76dcfb9cfad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf54eabd-d349-4014-b904-fda83e7a8b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e41f7caa-c664-405d-9ceb-ea39f3425d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c78b227a-96c3-4369-8900-bd1370708d37",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "552a7e33-c6b2-4258-888c-1bf50976c114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd5f663e-bb02-4331-8386-6e9700f8a503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a2180e-cb65-428e-a6b1-2131e92f6281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85bb0535-b680-49c2-8c38-cec6cbbf19f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70e71b0c-625f-4ae4-aae4-1ff270a02778",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5fbb5e6-33e4-4b39-be34-fc39f0293e82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ce6e9a0-ffbd-41c2-9bbe-7fe2c33ef629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4710c8d-34ec-4024-8018-b39e3968da92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf35ae8-8e3d-402f-a640-466de8c2f7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0df586-3a52-4850-a780-f99c159c2986",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea406b6a-5c86-4ac0-8908-5a27bf09fc98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4f93287-9a84-4e5a-b701-e91d6f703667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2967e6-c533-4588-b52b-4f58b4e87ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c323d155-e5a1-4a9a-bfea-9965c951e331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5ccf81-6508-43b6-a776-a0abd086305c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232ae582-9a26-4d08-a168-c12cbf57709f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c16eb49-92f9-4dc9-be21-c310df1633eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06858232-e49f-4106-98e3-26efd6561b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30febb65-905e-4825-ad58-7de92a28188c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696ac4d5-3bf0-442f-9de7-14a60e19439c",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1da1452-eb2d-41ac-a30b-5ba613bd2d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff316488-a08c-407a-8083-8ba0d00c9ba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24ef976-127e-41e0-a152-1aaadfe09bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e840e45-09f8-4e8b-93ae-11598202c4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2783af89-02b9-481d-84a1-65e390f19d7b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc509e9-51aa-4ffa-8db3-405e44e93001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319694ca-76f3-49a2-8f7f-b4b006ef7190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56473e2a-199c-41b7-8a5d-5af5f4c6465c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2761cc-c3e4-4de5-b007-fc7748d8e53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5482c0ec-18d1-4026-9104-3c9cfc181b90",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ee7b2c-ed24-431d-983f-a9d7e42315d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8937a6c-2791-4bc4-b97f-c4f0298ae6ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "959cb8e0-b6aa-4b80-bf8b-3fecd1ee88e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e999064b-8509-41d0-ada3-682c1abfa252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e7c41c7-fef8-41d9-af3e-2c5a0dfc2e75",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20a7f79-1fd4-4404-b901-fe901f6c2d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ea7f2b-ba3c-4456-aae2-a85ed0eb7ffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f225b5-f48c-482e-aa9a-e6adbbdd9b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "981114fb-eb0f-4cfd-9a33-1bc71fc1f650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb936bb-c5d1-4bd5-a900-732704386763",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbf64ac-f1e3-447c-8977-5676af07ca7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9377522c-9063-4c79-a0d9-62b006b5740e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "521e4adb-e0d9-4b0c-82fc-ad1db605ea5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cd85e8d-ca01-4730-b608-d28e8928dd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc9fab8-3c35-4fa9-b55a-72ef689dae8e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106dc892-cfc1-4a42-94ff-8cf151d20eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e566e9ba-212c-4d28-8e84-dfe3489b07eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28fb23a-7c1b-423f-b5fe-1243ef1e762f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e292fe0-6625-4357-84d5-a65a7659463b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f4df55-608e-48d3-b91f-109d7a5407b2",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da61b6f-4ede-45d0-9a56-688447bac5f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e0df29-8a51-4077-8d4d-55129620aaec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b606d5-4009-4a2c-8059-d34a32fe3335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d06e723-e036-4c7d-8259-7db7ed1125d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fad9d52-337d-4311-a74e-14ccc1508f8a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9696104b-8603-46f7-9925-4a99482c5c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e78306b-1210-40f7-8696-3b9e0e072e29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957d0b2c-e461-441a-8232-e89f83690a49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247672b8-14bf-4563-9a8c-b2fefe70e5b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e80923e-8db9-41c0-8317-44f2914c5710",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c717a7-5378-4f60-8155-945972eba21c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19f66335-313d-4025-91e5-c28db82ce172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80064f2-4268-46d7-9466-a91e0bd3c261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76bf50b8-750c-4165-8da1-0d72609851dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0cfe35-e164-4d56-a533-69eda9820e60",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f68f0f-f158-4cd5-b359-f92a1b66e1a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82861343-f47d-496b-99c3-dabd0075df45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "677da518-8730-46f3-9a12-4fcb45537186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35ed609-4d52-473d-bce4-32fcf2e79d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82295a54-2af5-426d-8771-8429eae3e39d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84126fd-afec-4f7a-a9ee-1325e225696b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fdfa32a-11fb-47b1-bbe3-1eb485e8f9db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8492659-15c4-4f1a-a28c-b31576662f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e047b30d-8931-4c47-961d-c9b24e7dc41c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068b72f2-a9f7-43a9-b8dd-ab1d19b70520",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93755136-ec85-4694-9937-4bb0547d08db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1310fdf1-9cbc-4dea-8426-3debc612b44c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22af188c-f1d4-44a6-b8b5-ca64083b93e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7418107c-4149-4bf9-9e88-b9c8e6df6ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6fb6dc1-a2b7-411d-843c-cc21f0a362f2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c35c6a39-9d11-4aa5-ba04-33d89fc3c90a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c281c4-32c0-4504-adf2-ca0be14e8210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe40a72-9f5e-40d9-8bd4-389d6d0151da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d1c3860-fb84-4f8a-b3dd-06f8dc67f54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa7c895-cdf3-4933-afb8-889db9473a5e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfdd2c9-b120-49c2-bc89-473c446e4f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01c3c393-5a13-4441-b612-4664c8ff54a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "490d7110-571a-4604-b798-e247bdbf5639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ef08910-a354-4d8e-b955-5b551b62f7d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481ee441-d623-4ed8-b2f2-b56b2e715dbe",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4959bb12-8715-4773-8a8b-77140a13292f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62c45f6-bd73-4e02-9943-c32f527dc232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7780b8f-8075-4694-a266-4bf0a010598f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ddd1181-8f05-4a8e-a375-fa882dfb8a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9981154f-7846-43e1-89a7-073a36ca302a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13687307-cb80-4adf-ab6f-93dafbe59d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4228874b-f565-4cbe-b23d-8d671da749b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3b0a70-212c-465d-a21a-14ca047295f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4dfd40e-19e3-4d64-b295-9230df8002c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621c546f-3c26-4ad0-bac5-29ae975220f4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3244fef-c438-417f-bb20-ab15c0f3c6cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa145243-5b79-4f13-ad4d-5ffbf582bd66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b01a039-b348-45a3-9b65-bc85d2337350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6398672e-dc1b-4242-9303-d001d25e297d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6313a0ad-286d-46c3-b90c-f007eef44079",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dec237a-4cb7-4f0b-a742-9baaec549db1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4508e93a-e5b0-4bd7-b97d-a87ba86e5498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aedf8a17-10de-4b0c-ae1e-0ece7112d209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a8cf8e-cd14-44ee-9066-5f124dba1646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdce869-c36d-41e3-a4d2-781d56a75692",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246ac7cb-cb1d-427a-8d44-1aedf810b28b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc96d6f8-7afb-4b5e-8ab1-c08bd7027188"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f35cc3-a5d0-4e80-8a27-19464bdb4f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82087b67-9c6f-493b-8ef8-567eb1408849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f830d0-30f6-426f-ad55-b24af74eb5fd",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1fdbfc-75dc-41b2-b57a-6737a91ec242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fae361f-ea6b-4eec-8bdd-027b3c5e8fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3ca607-02ae-4c77-a41a-58d3d85c79aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ccf30d7-f21b-4e9d-be90-4a56ea07dac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6589e9a3-5c9a-40f6-b0ae-8e21c0979da3",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba67695e-86d9-4f28-a36c-814109db681d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a9001a4-19ce-42f9-99a4-a6fa069b9fd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4bb3f3-4c98-44a3-af64-d2a824d16613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ccc5f0-01de-4c21-bff7-207207268ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892981bd-432e-462b-b418-7326a2c9b800",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70c7194-2c32-4688-a26a-ad3c9d36fa1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66a13dd6-e524-4e25-ac10-1e39d404f89b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1411f93d-687e-4ee3-9505-67f71694bf38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a1afaae-3afc-4aa3-b209-d1d8f4003bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f447901d-0437-48d2-84f8-54d8106ea8a7",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00231fc7-29a7-4633-a3d8-8f672385044c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ca230e5-0a88-4c7a-bbc3-fa7c7e045f7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "508df33d-42ec-492e-94e8-9aba855f431c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47932882-47ab-4523-890a-afae71a74dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b199cf-6fcb-4115-952d-1fec6f16d124",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b333a7f-e86e-43d0-9891-b9a587db482d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d27cc03-b067-4716-a1ad-81db3f3394b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98760b45-1401-460c-81d2-b9de8d4ec673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7617b80-4b94-4eef-b662-8b2bdb4713e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9ecd47-6eed-4276-a47c-c507da43efd1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcd1e22-9f2c-4a8c-97ec-1906734fab4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85e40f8-d73f-4366-b9fd-d658b2ce0e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0892fad4-cfcd-49ac-8b61-01c0b78e22b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700b2237-aaab-46ec-9992-60dd6f557240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfeef5f6-b5aa-4a67-a641-0eb3cb363692",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457465a0-10bb-4ea3-994c-aa64473d9bf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71d84243-32ce-4331-8347-1406626ae703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eefca66c-5433-4674-9d6b-04b23657e8be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c8272d-bec5-43f9-950f-1860a81e8509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe7566c-23c7-4efc-9139-a9375e9a6375",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fefe6c4c-131d-41cd-a696-e73ec04606a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3826cbdb-93d9-4952-8cfd-305fc3be9ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dcd5427-1c54-4c37-ace6-f82d9507c575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be48405d-6de2-4217-9447-6a35e0bb2c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c4a8fa-502c-47e1-b637-6d42b3580a45",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bedeaadc-fcb7-4bc6-8085-8c7cb3aaf920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d12c121e-f549-414d-9e58-3c4e89d32da8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d39e32-37ac-4984-a6d8-da995330f6ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a940f3-cd52-4e74-89cc-1388fed07c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba03166e-1438-4e60-a3eb-7d1ef460046b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356b59ff-75c2-4408-a625-a87e951555bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06c4807a-b53c-4454-853b-494ea1c30091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4f1201-9ee8-47ab-a14c-e2165800e330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "863ff53a-e6de-44eb-8646-00c2a5fb46a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50af40a8-fe4a-460b-8b6c-f7ad20faf9ea",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11508af2-ad16-404e-9b45-f2d33bf3d834",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbc072fb-fc0d-4c37-b2af-b052e206bcb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8ddd5d-8c99-4f7e-9b15-69a5fe6f8ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe1c9b0-fa45-43f3-bcdc-c0ee54087394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613a9e61-3e74-4fae-961f-806108e0782f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5086489d-cb53-4556-bab6-eb895375d5e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48818397-4357-4f11-ba76-3de7c80b3318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "470893a5-87d3-44d0-b290-292971729933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "623ca72a-b165-427d-a817-e4c5b1aff09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68de19a-5831-4435-b0d1-c1d3c9f7d3d7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55d6bac-0289-48bb-9221-0a2cc520633e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "642ea189-5e65-4f10-8cab-ba8489e97cbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cdb8aa5-0f57-41bb-959f-5708436f13fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a092aeb-2b9d-4fc4-827c-6af2f5af9e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04cadc3-99be-4fde-96ea-3cc3ea1bb98c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cae8af6-c7bb-4684-8a97-62913ae7d0a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d214caf6-c9d0-43a8-ae32-5d2dd0cd832f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "237294dd-3a93-4ab3-8382-07864cca65aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28e317ed-d332-41af-a72e-101b1eb78981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40cdeb56-6a5a-4424-91a3-5761313dd16d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5764d2c4-26d3-43eb-939e-4cac7cc25596",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c5709af-b210-4226-a869-bec29b1645c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d8560e-dcc3-4bc3-a1d5-d877b987330c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9dd8a8-0a1f-4ef0-9308-a3edd01dc612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee2fbcd-c65f-4aac-bab1-9592975d8342",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2936b94-88ed-4b03-9fc3-7bf31cb2e499",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba9dd15d-144f-4bfa-a775-4d0c6a9a20ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7c5e0d-1ce7-415b-a030-21f415f72c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6dadfa1-95c5-4e23-8c39-1a255abe4efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c44503ec-35cd-427b-af09-5c78909dbaa9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93a9384-f309-4574-a96f-f810d0c62bd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55f0b10a-46e1-4f2d-ac9f-bcad4885b899"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aae7066-d2b7-4091-ac04-2a9f006ae2a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb38c95-fa2d-41cb-959a-8bcea86c3307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d85f1b-14bf-4f35-9da9-f9181d7c06fb",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189235c0-ce7f-4ae0-b1fc-9e58bb8a10ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2309fe9b-c746-45f4-be43-ac475cb1d1fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d8b500-c132-40dd-8a06-20b9789915ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f7cd3a8-5c8c-4063-980f-0645f8241d51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326e4182-213e-43a5-9105-7abacb1df62a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f99dd4-e30f-436d-906a-350bcdb1ee10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39f7950f-9b80-4c0c-849e-7d7258ec7de7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1d1b77-fa35-4c33-a7be-13f2198e6303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e559c6e5-86a1-4820-8406-a6a3687f89af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5382cf-b265-41ec-81e2-6325d77abf4b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2294381c-37d2-436c-b617-4d727a5962fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5c88c7f-0ab7-440d-8869-5b740c085d99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d1c812-ee8f-4013-8ae0-233ef481792b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d56c7ea-dcd9-473a-843d-9dcc07bcd39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4de25a6-5470-4d1f-8e24-9fa55eb0c140",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d607fb9-573d-44c5-afc6-e7f55e8127e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57d774fc-33f8-46eb-94c4-3f88b2e5165d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db8b403-ffda-4693-9cce-e99714539bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f47531c-5efb-4e74-aded-9f8faf23b408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9497c78-d679-4b06-bd28-cc2a12335b8a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851fc2fd-4e2c-48d4-a791-27b95401a271",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0f96123-da47-4151-943d-f9921cd1ea7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "082349b5-3255-4041-ad99-da09e8291772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da9ed4f7-eb52-4032-acc5-bab30bdc7bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef2f9cf-5f06-4d9e-b215-d7cbba790011",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7ef595-89b4-48f9-9e91-c9ee0bbeaa02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe3f352c-52b1-4bf9-b2ce-8c20aa7b035a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fde897e-747d-4b32-abab-9881d28f9652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4951dac-7341-478f-bbea-a304b2a5892f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95323fa0-548a-4cd8-ac19-3cad43b479bf",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a729545f-7353-45ae-a7d7-209d47d004fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b2935a1-be0f-4382-8cda-7a63d04b42bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00ff8926-e5dc-496a-bb02-6dcdfb8006cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82583077-09cd-474f-9825-5b5e7e71d6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8d4ed9-a2d5-4c10-8d86-8600428abc96",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf69eff-6ce2-4c28-933c-0d15ff3ddcfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed178b4f-6e96-49ca-a585-6993202811fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cbd78a-efd1-483e-ab64-12099f8da23f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dce195b-007f-432c-9e1f-025d9c1a5684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627b5a87-0e0f-40e6-aaa1-112ebcb226fe",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d7177c-7d92-41b7-b510-b24cef6b6fdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccd3376f-647a-4050-8672-a7317b0a184e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "938e597f-7cbc-4022-8f19-ead2c2131330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7d64ea-54c0-4690-ba2c-56a9212888fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb38dda3-df1f-4630-a1f8-6159bbac0e4a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8202b31-3479-48b5-9260-00204f98a06b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f757d45-eade-4443-8533-7d8283a11676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08970d1-959f-4700-acbc-337a431f489f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd1adef1-1456-4907-bc32-f8081b88b15b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfec3a9-0ddf-46e2-b370-3de8bd6c36b4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87298be1-1aa9-436c-beae-62ac39e2c156",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88508ea7-e355-46b9-b76a-850a8d6b298d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78e0bcb-e95e-4922-98d8-7d57af31dcf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881f4dda-d67a-425e-a46e-88a73ddf7896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a900a175-3d8b-43a9-8ff5-67b83539635b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b14f91d-d6d5-44f4-8b15-155f4569207d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53f2e74f-967f-4d51-a1e1-7927449264da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d313a8a3-936d-48c0-a45c-83757ec31f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a04512d-d188-4242-8640-f8788e06fbe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd5cf31-09ff-49e1-b5a9-6bef76d3d57b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b587d2-05fa-414a-9df1-1584d3707cfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4e0ee96-8120-45ef-af78-14d80cc386e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6f147b-a665-425b-81ba-e85defa66a33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d2d7bab-cfe2-4203-919a-9b41b4359695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6805c1-2bd9-435f-a0de-bb1ef52043f0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228b06ce-9765-418d-b01e-8e9db653032a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "846869f9-ac9d-4e91-99bc-199e655f0d20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b47e1bc-ab9f-4aa1-b456-a2fe5c93d9de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6994abc1-dae5-46d7-bbb6-d2ca78f4c156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac647d4d-4091-423f-986d-584d73399f7b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5912183-9669-4e2a-acad-9550f973f3f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f33d4e81-93d2-456c-ab8b-081985189e4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade71af1-1c17-4c89-a97e-acb1399f880f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b157a8a2-5837-421e-ae2c-a66dca25dcfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e366544b-d8d4-4715-8bba-a41723753c3f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b4d577-c1fd-40be-a72e-c5d30f11becb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd53429d-46aa-4020-96aa-f5d10062467d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c06355b-e2ab-4a91-af6d-00056d696cfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a6a640f-a262-46da-9541-18213f42b2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b6f641-3f4a-47d9-828c-ad3016b6106e",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8ee93b-5a00-4428-82a7-50827886c9ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7103d7c-b555-47a4-91b3-26e869914a74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29667d8c-4ac1-446d-9118-7e162dd27dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b55f0089-0c13-4e5d-90ae-cf4af3b59b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db626ae6-ed98-402a-a36b-8e0b04e1e478",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18e9ad1-5007-410b-83dc-3e87d8a41343",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13654ef9-67ba-45fb-b7f1-ff66f76318d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e83c3c2-c9f6-4e80-a5b8-85ef5e67a2b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c50c6c0d-1030-4ad2-a7d0-2cedc4dcc243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49d8e5fe-ab8d-40c1-8d27-405dacafa577",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22be1f1-0b1e-4dad-9298-678ad715adb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6b9c0a0-d12a-40f5-87fb-37c0fea78757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd3f99e-1c12-4204-bdc4-2f4a9dbdb7bb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e89ab8b-9757-4113-b51a-56bfbb90e7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38545cd2-e2d2-4e69-9cd5-84efb8c19724",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed99f34e-8d81-4e79-abee-1e6c40ae824c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b7454f5-b6dc-43d6-b124-e9dc4eefac70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "973fc1b3-9041-4b33-813b-654988c21594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0573043e-c46c-41a1-9689-eea96b2cbf9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ee1d64-75b4-4a6d-bb19-7ab43f3cf357",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f809d1c8-4ecb-4f7c-a261-f98ef943f849",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4f7c0d5-9a6d-4bb7-be19-a04f14229c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd91f98-29b2-4324-9656-609c6fb6be5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b46f50e-4dfe-480e-a751-0c69f4b34b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cec010-dc0f-4492-8ef4-fa3c3295464e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75eee0a6-4a88-4ee9-a47f-cdc7a7e46064",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a50ee248-48d1-4125-8d12-f42130dc9012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1369ed9-5d79-496b-bc8f-a1c7ddeebbd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4baa277c-15b0-4682-93fc-13e567dfe20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76b335b-0a71-445c-87f5-98b94a73a709",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da52e1fb-cfe3-4274-b00e-974ea19d8e05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f98303f-b71c-408b-b950-2997f08a69c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52261b6-0c2d-4948-92c4-d38bee4c09f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74bc573d-ff68-47ba-950b-d87cf74ff810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616f3e9d-61c7-4bc9-a0f2-f6e29f0cd0c6",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8aad1d8-1056-4e21-bd21-46a6ce5dd4ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "098ced8b-e1dd-4d86-aaae-e5d634b0f89d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ca4e5a-caae-4f2e-b673-2839201ca5c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9070fbeb-e97a-4acd-83de-f306d085e2a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66a67ac-80ed-4296-ab61-c9c9b55d5801",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b817083-912d-4450-b76d-4a8b35891dc6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b73ca161-9198-40c6-84e3-bd1da32940ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b0defe-c38b-4279-873c-634dd6857c34",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a15c7f35-cc7e-47f1-8ad0-9523edc0fc50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44717f48-e2dd-4363-a391-3a70c5488147",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ed92de-3f73-4046-b6df-e7eb7a8bc93b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c70fa37a-fa1c-487e-9aa2-6773437e132f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dedc381-2954-49a5-bdfc-c86bff7a4a53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672b1ea0-d679-4022-8d03-6efa14a108cb"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e23539a-138e-4131-8c85-ce560ae5943f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6645b539-b703-445f-b9f5-1bb01a5192bd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "30f7327b-12ae-4c32-a7e1-6cf835a1cf9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3df680ef-2e79-4a06-8fb4-c88d0216b9bc"
                    }
                  }
                ]
              },
              {
                "id": "1aa7ba0c-fe34-4278-b578-61fb8b4dbbd1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "319703de-89a3-482e-9e2e-1fcaa665d344",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1521add-8fb2-48f9-bb64-0d2dae0d126f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9b14a7a3-c049-4fec-b81f-d46e01c5743a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "243d6c9f-7a45-406e-8e87-887ead678109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06dd9b0e-0f63-4960-80bf-8bb608064092"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5cd81c1f-75dd-4234-824b-cfd297b2c3a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c0b9072-7c35-4575-b46e-7852830a38c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e3b570bd-33b0-4755-8320-649b71f1de63",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de9eea7e-3e81-4368-8eb2-a4e413111b4a"
                    }
                  }
                ]
              },
              {
                "id": "73b28329-ff17-4b69-b8a3-5a15eca310cc",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c7803306-4632-4162-86f4-58d1b60b6202",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c2f699-0302-4911-86b6-b0c8c7d12175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e8baf1aa-319c-48c8-8186-3ec3861ed08c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61464ea-a556-45ce-969f-898b62556a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84fc0153-011c-4e36-9740-73a150a43e05"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3491ecb0-f1c5-4496-8619-2b033d12dbe0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bd08aaa1-83b9-4532-8007-1bcd4dc57f03",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "108542d2-6566-4ebb-962f-0e9e97492837",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2f70ba67-cb53-472d-87f9-58f989f4c2e3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4fcdd8c-1f69-499f-a7f8-0fab8cc2541f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11754998-410f-49ba-90f3-5f5196028777"
                    }
                  }
                ]
              },
              {
                "id": "d6d9809c-8b1e-4874-8f7e-483d99708cf9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e91e1217-1455-4491-8629-9d434c9b5204",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b2090586-6614-4f2d-8683-e3260ff1b45e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae2bd5ab-32d1-418e-b662-0cc294a8b3eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb8745e4-0130-4fcf-a1eb-089eafefc0af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb9c0ec9-f396-43f0-88d1-c335e33d0b34",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "075c63c9-421a-4542-8a87-1b1c5b298e81"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a3f1d56-e593-48a1-8d86-5c03c0afd76a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "035eaf57-51a2-44e7-8c49-caea04fcb2f0"
            }
          }
        ]
      },
      {
        "id": "3b25c85c-707d-4b61-aee1-19f33541ddc7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b9d0cdd6-f4bc-4651-8fe3-bdedcaf882f5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb5e854d-0092-47ba-b2ed-20accc0869e8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a144e14-526e-4555-9d9e-f84e36ea5455",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b8473e-7174-4c35-acb5-1b4475c05c50",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "aab312be-6268-4e98-b05d-0b3bbb3110df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1426d354-93fd-4121-8cc8-f20328b1e256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e65eb791-2fef-4e82-964e-009dc14a5946"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "583de6d8-239c-49b5-a327-291817a1b6e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d64e34ae-2afe-4db5-a059-c9b78df18caa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f0f69ace-c0cd-4232-ab04-649ea22d9470",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49ce43be-1afe-4ae4-9318-9bdcacdf2ba2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f24bbe04-8ffd-4445-ad3d-2d33ac9b8de5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7d07fdcd-037b-439c-8bda-887eb445bb7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1865a36e-b0c4-4bce-bd41-417f5f4bf7e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "40c18086-28e5-4687-bb0b-50b61e796907"
            }
          }
        ]
      },
      {
        "id": "23477c59-f1b4-4643-acd0-e8749bbacb16",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7ebe7d68-8724-476d-ad5b-9465649b824c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f60af185-55ec-4ecf-a099-5f3d9b9ba059",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d57547f2-bdf3-4480-b936-4a77b1671cb4",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8e0ae9-f82b-48a1-9374-aec8f6b764e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1dee0395-4b50-4679-846d-15bd8f5cda6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6da0f7-c7af-43b7-a8ff-4268ed0efed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2c98bb2-08e9-4c8b-9dc7-0dda462090d7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e592c5f7-fa96-4a84-87dd-a3ed131c2cd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2003e8e0-b68e-4188-a29d-f4b8f7d2818d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "922a6a45-6577-4a7e-b8b8-dfec0574ba79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "584b3fdb-fe12-4c93-af5a-76b35b6accd1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "88b87cd2-68a9-43fc-8770-1cfb476a6225",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dd3e93b7-3892-4de8-bcd3-9f94f4170dda"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6fcbd4c1-9b35-4878-be92-fa344f4332f1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "354e633c-e01f-4604-8b4b-3938bd515ac3"
            }
          }
        ]
      },
      {
        "id": "02fa68f7-f9eb-4aa1-a807-f6bcce94af66",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "860392de-8f65-4a07-a398-0a8c35328f88",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ab44f7d-bb1c-4aa7-abb3-146399fd3cfa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8cfa45a1-adae-4ccd-9ded-a1019044c4b7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6276c0df-28ee-4795-88bf-ba40574744db",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eae69e8b-b0e1-4ea7-9d4d-c82e14b57454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d2d13a-4be4-436b-b935-042f2b3544fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "36ca99c1-cf98-4913-aefa-f7495c5c2850"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1dc5b2f-5597-41e1-97df-669c577f5bf3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48f20f46-7246-430d-9d39-b618c3f71158"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f06b4f1-1cb0-462b-9595-c4e4635fd25b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "caacaf8f-1475-4016-9e70-afa8973456f9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "11549c93-a3b3-4c9c-8840-9635c6a6befd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "df788ade-2127-4fa3-9797-ab463cecc54d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "44c9ffaf-a80e-4328-a94b-0ab7ba1ec8ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a7003038-0efc-420c-a84a-5fcf282adaf6"
            }
          }
        ]
      },
      {
        "id": "301d3b74-b2ea-433b-bba8-8231ede709ee",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3412f027-6a9b-4483-90af-f9a536ff1808",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86862d47-c5c1-485b-8728-4e53ec1a799c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c7977b3e-79b1-469e-b548-784b36f4ac12",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cbe4c1eb-029c-4240-a1d8-83d09844f47f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f901a345-f115-4bad-9dee-efff2ea492fa",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.7894736842105,
      "responseMin": 8,
      "responseMax": 536,
      "responseSd": 74.02411575802905,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710549156516,
      "completed": 1710549183623
    },
    "executions": [
      {
        "id": "e439b8f2-9f8e-49cb-9c35-48db48b5efa8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "42b781d1-2ec9-4443-bfab-c216d52f612e",
          "httpRequestId": "bfdd97f3-25e6-416b-a432-9eda1f9bc8ad"
        },
        "item": {
          "id": "e439b8f2-9f8e-49cb-9c35-48db48b5efa8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "df99037e-f18e-48ec-9054-631c2d971788",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "74028b6d-6fd1-49ea-98f9-50d1235d44b9",
        "cursor": {
          "ref": "4016147a-755b-43d4-9d2c-16be3036af94",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0dd4ccec-8c80-41f3-b7f4-21e281b7f5c2"
        },
        "item": {
          "id": "74028b6d-6fd1-49ea-98f9-50d1235d44b9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "94e677ab-a537-409b-94ef-2739e3f0d5cb",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "eb767e2a-e108-4acc-8b30-71f91e5a490c",
        "cursor": {
          "ref": "d0b14920-c3fb-494c-9e5b-a1206ad6b66c",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "85f0f1fc-4ba7-4494-8312-b25a90056674"
        },
        "item": {
          "id": "eb767e2a-e108-4acc-8b30-71f91e5a490c",
          "name": "did_json"
        },
        "response": {
          "id": "fc748e10-116a-4328-b0a0-688f50a024d3",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d52b31d-53d0-460c-bbd0-6f6891635c07",
        "cursor": {
          "ref": "8071652c-ba26-4d04-9dd2-b578bd354f9b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a556267d-c7be-40ee-bd3c-0488d5988f1b"
        },
        "item": {
          "id": "0d52b31d-53d0-460c-bbd0-6f6891635c07",
          "name": "did:invalid"
        },
        "response": {
          "id": "32578511-e345-480e-a03d-8d510e895bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d52b31d-53d0-460c-bbd0-6f6891635c07",
        "cursor": {
          "ref": "8071652c-ba26-4d04-9dd2-b578bd354f9b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a556267d-c7be-40ee-bd3c-0488d5988f1b"
        },
        "item": {
          "id": "0d52b31d-53d0-460c-bbd0-6f6891635c07",
          "name": "did:invalid"
        },
        "response": {
          "id": "32578511-e345-480e-a03d-8d510e895bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb94c136-9e05-4600-91ff-50c63f342088",
        "cursor": {
          "ref": "6fb28aa6-2e3d-4002-8df0-1fe2d658064d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "959b1a4d-a10a-47e4-b0de-35f9107748db"
        },
        "item": {
          "id": "fb94c136-9e05-4600-91ff-50c63f342088",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "532e6081-3843-4b60-a5f2-990b58f8b541",
          "status": "Not Found",
          "code": 404,
          "responseTime": 89,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7bb083-9f07-49a6-9067-8e60ef2b7ef3",
        "cursor": {
          "ref": "b8e8376a-0d7a-4561-8c16-8d78f441130f",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "22b7435d-51dd-4eb8-a124-b2a011455ab9"
        },
        "item": {
          "id": "bf7bb083-9f07-49a6-9067-8e60ef2b7ef3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d25fa2d7-483c-4f5a-b695-f92bc9b685e2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 37,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e14271de-089f-4733-b22f-532c4315248e",
        "cursor": {
          "ref": "822bd345-ea89-411b-a8f6-25cba432a01e",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "feefd911-0d7f-4f09-b31f-512750107cdd"
        },
        "item": {
          "id": "e14271de-089f-4733-b22f-532c4315248e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "969a052a-5f3e-42ac-a8ab-9f86798a3e5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae6be50-1327-4823-951d-756f413ebb44",
        "cursor": {
          "ref": "a89ddf7a-839f-484f-8b5f-3d874aeba404",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9279566b-7bb7-41be-8715-12f8cc8b6e36"
        },
        "item": {
          "id": "4ae6be50-1327-4823-951d-756f413ebb44",
          "name": "identifiers"
        },
        "response": {
          "id": "2639a394-e57f-48df-9bb3-62621a7002bd",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c5a26a-d52f-4e1a-83f7-5be954550e5d",
        "cursor": {
          "ref": "0b9728fc-cc5c-4404-b1e1-5de27c59d8d3",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "2aed1fec-72fd-4353-921e-ebcdd5d66618"
        },
        "item": {
          "id": "f5c5a26a-d52f-4e1a-83f7-5be954550e5d",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e259fb79-c227-4389-ae5f-161db54c6bef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a97f04-f7a9-4250-8098-aafdc5683595",
        "cursor": {
          "ref": "8990a24c-d100-44eb-b5cb-b6e753078348",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ce61be09-9b63-4d54-91ec-c89aa1b6ccd2"
        },
        "item": {
          "id": "01a97f04-f7a9-4250-8098-aafdc5683595",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "dbec8e01-1e2d-4c34-9736-4de3676ccde0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "164e4828-7d9f-49f9-a702-094aa477d1fe",
        "cursor": {
          "ref": "5ed444b6-eb59-41f9-a477-8def79062bab",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e7b9edfe-80c6-4efe-bc68-a689ec287e82"
        },
        "item": {
          "id": "164e4828-7d9f-49f9-a702-094aa477d1fe",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b319e192-0fc5-4d21-816d-f73ec7c0329f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d456367b-43ee-4091-a7c6-0af6d3c501d6",
        "cursor": {
          "ref": "fc539431-fb5d-472f-afd8-3dd78563d40b",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9cf2862a-37c4-4dc9-9dc8-470b2ef56009"
        },
        "item": {
          "id": "d456367b-43ee-4091-a7c6-0af6d3c501d6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3a756cee-0e5f-4c6a-ab6a-edb5960c682f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de876764-c7f4-42f5-8982-8d963fdaae34",
        "cursor": {
          "ref": "6ee9b202-7dc6-4ad1-b76b-1637227cdeb3",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3b401270-bbaa-42fe-8f58-192eda2781d5"
        },
        "item": {
          "id": "de876764-c7f4-42f5-8982-8d963fdaae34",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "090f5204-eaf3-4c83-9baa-3da4e0b3defd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08feaefe-a52e-4225-82ed-39cce65ae005",
        "cursor": {
          "ref": "6f21fe02-5b62-4a96-bce2-b2ae644ab246",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7eceff2f-5ff1-4a5c-ad31-c7685291cc63"
        },
        "item": {
          "id": "08feaefe-a52e-4225-82ed-39cce65ae005",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e12743d0-0c9b-4227-acf7-700d66f83570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf456d6-f5b6-4d17-b248-42c15a1d791a",
        "cursor": {
          "ref": "836ebfbf-ab34-4003-8ebc-c996c744762d",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d1c98517-b4e4-4c0f-88b9-5f0e35902e9c"
        },
        "item": {
          "id": "ccf456d6-f5b6-4d17-b248-42c15a1d791a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bbabb24a-885e-495a-86a3-3529a7405383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e6f163-301c-485a-bb0d-50c669e00948",
        "cursor": {
          "ref": "9c8be162-3724-4cbd-970d-f904fb61e161",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "43c9a902-449a-4d14-a983-b5c9046fa10a"
        },
        "item": {
          "id": "37e6f163-301c-485a-bb0d-50c669e00948",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "38e73e99-142f-4d61-ae7a-24464aa19b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a6936a-3a56-4ccf-99e2-6f6acaf3a93a",
        "cursor": {
          "ref": "365347e2-f842-46dc-96e4-199223590b4b",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3df6389f-3b77-4095-a7c4-2ac3fdb66ba8"
        },
        "item": {
          "id": "28a6936a-3a56-4ccf-99e2-6f6acaf3a93a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "975f5dac-251a-4d21-b78d-9b7b66b1d78c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351a3d01-3415-441f-a17f-ea045692c483",
        "cursor": {
          "ref": "5e52c217-6b73-40de-8de6-1b69e5dd3e7a",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "aa0ae7a4-aeb0-4031-bf79-8ae27303b04c"
        },
        "item": {
          "id": "351a3d01-3415-441f-a17f-ea045692c483",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a92ef04e-5e2f-4386-a7d2-fb8c5bd33cec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dca7ce9-91f8-4355-b621-a5e00d7b2e4c",
        "cursor": {
          "ref": "6f7fb2a1-4f1d-486d-ba2b-e15040a47012",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1759c540-add5-4e9f-b2a3-5a961d741ec9"
        },
        "item": {
          "id": "1dca7ce9-91f8-4355-b621-a5e00d7b2e4c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "7224106f-35ad-47a8-bd20-dc4ba0949d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa8ffce5-ffb6-449d-8836-94a1df3591f8",
        "cursor": {
          "ref": "5d5fc1dd-a214-4782-96a9-f1a6e517f066",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "bb74e521-a28e-4d54-9da9-c6dda611f41b"
        },
        "item": {
          "id": "fa8ffce5-ffb6-449d-8836-94a1df3591f8",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f755b238-2a4a-40ba-bf04-52810ffdab11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "174bf645-ed4a-41f4-a5be-0ca21aba3233",
        "cursor": {
          "ref": "9af5dc86-0023-4aa3-ae30-a403daae42e2",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cdffc3dd-dd27-414e-aede-8809a0a3e9fd"
        },
        "item": {
          "id": "174bf645-ed4a-41f4-a5be-0ca21aba3233",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "347157a7-ebaa-493d-8491-b911b9425fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e568f614-b8e8-434c-8ef7-7fc4dcecbb53",
        "cursor": {
          "ref": "49b794aa-fa37-4706-a398-319ebc22e6c1",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "be8afb74-7217-41b8-8fe1-d8c73c94c36d"
        },
        "item": {
          "id": "e568f614-b8e8-434c-8ef7-7fc4dcecbb53",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d5db0727-05f5-4277-9812-efe31c7f2a90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747c4be2-9292-448a-8206-4f8a66807e12",
        "cursor": {
          "ref": "f7300113-47a0-4f98-9285-42a0a54c8269",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8858c57b-a06f-4a23-8d66-76950b980f61"
        },
        "item": {
          "id": "747c4be2-9292-448a-8206-4f8a66807e12",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e90c71ff-0afe-4fc1-b59c-6ad209681474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a60c8da8-3866-48f1-a1d3-c36bc7fe9d62",
        "cursor": {
          "ref": "9a53ba20-9cb9-496d-9235-d224847bc001",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "908da600-d38c-4c45-bab4-c9629e8e1455"
        },
        "item": {
          "id": "a60c8da8-3866-48f1-a1d3-c36bc7fe9d62",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ee090169-9fd5-4cf0-b906-67c705bf9d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6dad84d-e5b7-4cfa-a417-01ee72289ff0",
        "cursor": {
          "ref": "ca2688a3-d121-4931-86a8-c445ef0673ef",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "73302ed6-5eb0-41ca-a06e-80cd0b029899"
        },
        "item": {
          "id": "d6dad84d-e5b7-4cfa-a417-01ee72289ff0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ae5c2bac-3f99-49b4-a9f3-1fe112f408be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92008de5-74f1-4752-a1ad-56a2d66221dc",
        "cursor": {
          "ref": "160c8884-ec3a-4ee2-bf07-d18f355a9369",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "47154343-ce92-452b-a2a9-f43a9780d52b"
        },
        "item": {
          "id": "92008de5-74f1-4752-a1ad-56a2d66221dc",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5a5e2886-9976-4b5f-b86f-53b2168ec76e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d114529-6880-40d5-bb88-6dea8628a902",
        "cursor": {
          "ref": "a7162533-69b5-4f1b-b36c-60e5a9e4a911",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6a156a68-0e80-44eb-a834-240866f0d275"
        },
        "item": {
          "id": "4d114529-6880-40d5-bb88-6dea8628a902",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "dd7f02e5-373c-4800-a601-b2c07a2fa617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a9f4c0-3e65-4eb0-9237-cd7fcb9ef3da",
        "cursor": {
          "ref": "f9402217-be28-4b09-85a5-30b37315f427",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "53df2721-479a-4ef6-bf24-32d06a5b398b"
        },
        "item": {
          "id": "50a9f4c0-3e65-4eb0-9237-cd7fcb9ef3da",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ddf18f6a-f02a-4d40-b002-2ac40c4135cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4917df7f-0b80-4a34-9c4f-43524e272990",
        "cursor": {
          "ref": "b2c76ace-c8d7-4dc1-927c-7a3128b5d27a",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1bfd248f-c315-43e8-8ba4-1cec2c562754"
        },
        "item": {
          "id": "4917df7f-0b80-4a34-9c4f-43524e272990",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7ef9d320-6693-4eac-914b-546751158eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fa87eb-d9c0-46ed-be2e-ed2b5e6b9ff3",
        "cursor": {
          "ref": "3ffc83c2-55b5-48e2-a972-ed56e2dfb126",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f2889a2f-f2f1-4728-8662-6b27a58abfd3"
        },
        "item": {
          "id": "28fa87eb-d9c0-46ed-be2e-ed2b5e6b9ff3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "eb5ade5a-5a92-486f-aa35-b772843df8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad132c8-3db2-465d-97c6-8cae52ba0df7",
        "cursor": {
          "ref": "b07308f2-4af2-4c3c-b39a-e758a860bfc9",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "1384fd9a-105a-4a19-9f7a-3c36d076b98a"
        },
        "item": {
          "id": "5ad132c8-3db2-465d-97c6-8cae52ba0df7",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "de9da073-c21d-4e44-974f-33c9dc7c595e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4feed434-ce7f-4980-85a9-850abcb2d309",
        "cursor": {
          "ref": "79c70885-8f19-413c-a6fd-2f54e288cde5",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "50ebbf7f-874b-4141-9d13-b951e6319a88"
        },
        "item": {
          "id": "4feed434-ce7f-4980-85a9-850abcb2d309",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "eaa804cd-b473-4f9f-8669-3ef82e7dc041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ad4669-79d8-478d-a6b8-01342249fa08",
        "cursor": {
          "ref": "d55a0835-ebf0-4329-b599-82fe73d6b084",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3a5d0a8d-a406-4b91-aa7a-ab9062ba0bd1"
        },
        "item": {
          "id": "94ad4669-79d8-478d-a6b8-01342249fa08",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "20fd98ea-59c6-4e5f-a8d7-4ea2a8331f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62fc9a80-929f-43a6-9ad0-d9e45516cb0c",
        "cursor": {
          "ref": "ff4de772-03b0-46ac-9fb3-996a928b45bb",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0a7e92f6-0301-433d-ab1b-b443dadc9aa9"
        },
        "item": {
          "id": "62fc9a80-929f-43a6-9ad0-d9e45516cb0c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2cdd8284-4503-4d92-bf7f-a83d472ba3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19dc048e-6947-4eb0-b30c-dee8bc88c4bc",
        "cursor": {
          "ref": "589564e9-b001-47c4-8cda-4ed82744fe16",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c88162ad-149f-44ee-be65-89e83d22c0cd"
        },
        "item": {
          "id": "19dc048e-6947-4eb0-b30c-dee8bc88c4bc",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "59f80b0a-c0d4-434c-88f7-4c775adf6263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ef9228-075d-4798-afa9-0af92dd6cc17",
        "cursor": {
          "ref": "09c43220-e59c-4ec4-a2df-95223eecf91d",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "955e6b35-2cc7-4568-8c44-82110e06ad1d"
        },
        "item": {
          "id": "11ef9228-075d-4798-afa9-0af92dd6cc17",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7b6cb798-c329-4298-bde2-459ebff008c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49aea2f-dec0-4c71-98a6-3a4417f0b6e1",
        "cursor": {
          "ref": "b482b2cf-11fb-48aa-a89d-9db06981858a",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "de6372b8-0b91-437e-b8c6-5f8a13d25405"
        },
        "item": {
          "id": "c49aea2f-dec0-4c71-98a6-3a4417f0b6e1",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7921ca18-22bd-4420-8458-b49ad974dca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c049b8-3f78-4d6b-9315-06bb7b0ca52c",
        "cursor": {
          "ref": "11102d25-7378-4da6-8371-3f2573c9ebb3",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "53034c68-9217-48e5-993e-8ef15aa5b2ee"
        },
        "item": {
          "id": "b7c049b8-3f78-4d6b-9315-06bb7b0ca52c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "8632f744-a36e-4635-8f75-428d12ad066f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1970a16-9046-44cf-9c80-cb4ba0f4d767",
        "cursor": {
          "ref": "49aa55a7-57d0-4677-93a9-64dddddf9978",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c951df85-418e-4e27-a5c9-03d2bb8fa511"
        },
        "item": {
          "id": "d1970a16-9046-44cf-9c80-cb4ba0f4d767",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3a25c9af-95cd-4991-8c94-3d16db47f465",
          "status": "Created",
          "code": 201,
          "responseTime": 536,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e64e8336-4626-4246-b69d-fd930307c712",
        "cursor": {
          "ref": "199f7305-8a9b-4dad-897f-8ad4e156954f",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f63a3a08-1df2-4baf-a00c-c91cf039756b"
        },
        "item": {
          "id": "e64e8336-4626-4246-b69d-fd930307c712",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "5342818f-16d9-4713-8ea9-06c6b2b30fc6",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "a188e67f-d9e0-4cc5-bd1a-c43a32ef8e4f",
        "cursor": {
          "ref": "fa00f8aa-8c6f-4af8-980a-05c272b08840",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "03c76d9c-2078-4be5-b7b8-f8c5dbdd0f9e"
        },
        "item": {
          "id": "a188e67f-d9e0-4cc5-bd1a-c43a32ef8e4f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3736b372-62d3-4d7b-a4c5-39e7caa4c9e3",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "22b60e1d-4316-4605-961a-7534ce329286",
        "cursor": {
          "ref": "9db5ea7b-892d-41bb-9a7f-7c8d687a2c59",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b5e4350a-3d3f-4f2c-8750-97c631bc15ad"
        },
        "item": {
          "id": "22b60e1d-4316-4605-961a-7534ce329286",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "31a932df-cfd9-4f39-b3e4-760f8b4b5585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a4d09e-c1c1-44c4-b065-f7cbcc0ddced",
        "cursor": {
          "ref": "cc36402f-5b81-4855-9595-a87669506839",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "38a6b9aa-8446-4392-81a5-cd143f2f5361"
        },
        "item": {
          "id": "71a4d09e-c1c1-44c4-b065-f7cbcc0ddced",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "fcd2a8a3-e551-4ca4-85e7-daaaa7b6e790",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d28635cc-b332-4ab2-b911-6390a100f791",
        "cursor": {
          "ref": "d540cd02-a987-4fe0-b82e-f8a5219aaf1e",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e5d617a9-7809-4293-a863-fca3a5c70d60"
        },
        "item": {
          "id": "d28635cc-b332-4ab2-b911-6390a100f791",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7a80a146-63a7-45f6-85dc-0f5c5524aeec",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "55f612c0-f3d4-49a3-ae56-a6f1789cc3ce",
        "cursor": {
          "ref": "f5f2f662-c767-47f4-8be2-6c62b25a0ca2",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "25935309-0c8d-4782-bbae-1c678a517405"
        },
        "item": {
          "id": "55f612c0-f3d4-49a3-ae56-a6f1789cc3ce",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8ab215b9-89d1-4a07-b1b0-251db7705974",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "965624a3-6219-4cb3-845f-2f760bb3e8a6",
        "cursor": {
          "ref": "5efaefb5-97e9-4ed5-a333-1f8412db5926",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "756bbdf3-86e2-47fc-8e5c-35ca750534a5"
        },
        "item": {
          "id": "965624a3-6219-4cb3-845f-2f760bb3e8a6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4b22f0b1-3f29-43bf-a793-c43974695464",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "710ee62b-c040-4f27-a1d3-ee98f2f2fad1",
        "cursor": {
          "ref": "203656d9-417b-498a-afdf-2afcfb1c4c72",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "56cb9cd5-cc29-4aaa-89a3-080caeac595c"
        },
        "item": {
          "id": "710ee62b-c040-4f27-a1d3-ee98f2f2fad1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6661e704-e264-4d7a-a2dc-db69964f35ed",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d6e45bfb-1247-47e4-9fee-40b15fd39278",
        "cursor": {
          "ref": "fec7c856-85b4-461b-b41a-0eadfb6baf1d",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "12410a1f-203f-4a59-999f-704ae5b4570a"
        },
        "item": {
          "id": "d6e45bfb-1247-47e4-9fee-40b15fd39278",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7d2127b2-f15b-4133-94a9-131622299fa4",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "23a2da7f-8cee-490b-9f40-70d677959220",
        "cursor": {
          "ref": "436f8acb-1e44-4e92-a928-873b8d1eb554",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7e4cff93-54f3-4fe4-ab3e-5f20abb71ec8"
        },
        "item": {
          "id": "23a2da7f-8cee-490b-9f40-70d677959220",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "76747dcb-46d9-4f00-b331-1c6a8a4b3ba3",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "93bf9af3-7f38-453b-b13c-079390a82239",
        "cursor": {
          "ref": "0c77a194-1e35-4441-8aee-da0297d28e7b",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3dd82993-145b-4b2d-bf44-39c871c40170"
        },
        "item": {
          "id": "93bf9af3-7f38-453b-b13c-079390a82239",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "0d744a06-8e25-4567-a36b-6e4069c1ea94",
          "status": "Created",
          "code": 201,
          "responseTime": 401,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "3a1074b8-b5a8-4bb4-b228-b1e8d2b31a23",
        "cursor": {
          "ref": "56006b76-fff3-4c4e-af43-8ce407090a8c",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "02e51c3c-319e-4f13-a84e-0291308e9f92"
        },
        "item": {
          "id": "3a1074b8-b5a8-4bb4-b228-b1e8d2b31a23",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a3846777-373d-45a4-8285-1fd8e1352553",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a0915747-11e7-43db-8dae-b9ce4b06d0b6",
        "cursor": {
          "ref": "a1dce45d-caf9-4e2b-8599-848f900354e6",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "7d737502-591a-48cb-b573-c4746a966968"
        },
        "item": {
          "id": "a0915747-11e7-43db-8dae-b9ce4b06d0b6",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "802fec66-13f8-4e30-b97f-1590e6510ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be21958-3a52-44ad-83ba-e9eed068ddc9",
        "cursor": {
          "ref": "7f87b68a-f38d-4db1-a87a-5697f2ba0ac1",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "673c73f4-e33f-4166-ad11-2d5fbd5bf918"
        },
        "item": {
          "id": "5be21958-3a52-44ad-83ba-e9eed068ddc9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "63401c68-f243-4785-9b85-62a7e259ff54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935fcbfd-1749-4829-b04e-38a837bcd81f",
        "cursor": {
          "ref": "5a775d28-d66e-40ed-a888-3bd1f02df720",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0d03ab42-02d6-4dd0-8297-64928e6008a2"
        },
        "item": {
          "id": "935fcbfd-1749-4829-b04e-38a837bcd81f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6913e60a-9fd8-452e-bde4-f4fa1413bc39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2abed687-dc70-464d-b605-8ce69ce6108f",
        "cursor": {
          "ref": "83180006-766e-40be-b80b-82dabd3745de",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a90f4231-6183-4a51-83a0-e977a3bd15b8"
        },
        "item": {
          "id": "2abed687-dc70-464d-b605-8ce69ce6108f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "5324ee41-1219-4d2f-a10e-ad6a22c448a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be45513-032f-47a0-b555-68d5bde4a50f",
        "cursor": {
          "ref": "7fd8be32-c954-4063-98d4-cff5d09c0bc5",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "befe25e3-5241-40dd-8f2f-b661acc30f30"
        },
        "item": {
          "id": "7be45513-032f-47a0-b555-68d5bde4a50f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3f5529bb-15a6-4344-a6ae-03e7c83e1658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fdc4d6b-a3f8-4fe1-9f6e-66503a7aa48e",
        "cursor": {
          "ref": "bc25b45e-3fb7-4f52-9d92-fda48b1cb1b9",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "941dc1cb-f0bb-4bb2-8f2d-55de1957ca7c"
        },
        "item": {
          "id": "3fdc4d6b-a3f8-4fe1-9f6e-66503a7aa48e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ecd36dfe-4400-4379-8342-2c319d3937c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d5b860-a900-44aa-8dde-14acff0311a0",
        "cursor": {
          "ref": "e8ffb050-f369-4851-a65f-1f718e74773b",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "857fb616-2adc-4d20-9adf-dd95b56d3574"
        },
        "item": {
          "id": "b6d5b860-a900-44aa-8dde-14acff0311a0",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f25e27cf-a8b4-4b93-83e0-1c66aeb37909",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd5b3ff-5f37-42c9-98bd-686bd2b6f6dd",
        "cursor": {
          "ref": "e8183400-2443-4c83-9cb4-7f3379203b28",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f51abd70-efd5-4e4c-b9ed-ae78ffe9bb0e"
        },
        "item": {
          "id": "ecd5b3ff-5f37-42c9-98bd-686bd2b6f6dd",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f13ddf41-32d3-4c94-8534-42ad23391837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007123c1-6a02-4bc7-aa4f-28e835547707",
        "cursor": {
          "ref": "79094d8c-158a-4ba2-84c7-50273278f588",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "6967bc33-3a22-411f-bb37-1edf21083416"
        },
        "item": {
          "id": "007123c1-6a02-4bc7-aa4f-28e835547707",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1905ada5-226d-4db0-8a89-339a5e87af43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104e488c-ab59-46c1-80cb-d1040d75f2ee",
        "cursor": {
          "ref": "96ade7fa-81b2-4123-b295-aafe366ec95c",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "497d941a-6a62-4f13-8f80-ae5c6ee023d0"
        },
        "item": {
          "id": "104e488c-ab59-46c1-80cb-d1040d75f2ee",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2dfe5284-52fd-4e7e-92b7-8e0e98107b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b0a14b-8550-44b8-a119-5b5f3c0f763e",
        "cursor": {
          "ref": "f8fc908d-bf7f-4b9c-b805-a48bc6935c30",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "037fbb15-7325-41cf-9ca0-5e7457320bc2"
        },
        "item": {
          "id": "c5b0a14b-8550-44b8-a119-5b5f3c0f763e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0a1b8bb5-427b-4029-9b2b-ebeec640c389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8bd3d4-5865-4e31-9989-bb25f25db420",
        "cursor": {
          "ref": "2487820c-9a4b-4359-bbe2-419f0ad4c07e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "19ca3c59-f439-49b5-91b3-56a3741041aa"
        },
        "item": {
          "id": "af8bd3d4-5865-4e31-9989-bb25f25db420",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f1b7b535-b820-4a87-bdbe-73fc886194fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2014ec7c-9912-474c-9e02-3bb21656e493",
        "cursor": {
          "ref": "8b331cde-d118-4293-883f-a80b303613ef",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "945159c4-523d-4f02-ad46-30c8060aa398"
        },
        "item": {
          "id": "2014ec7c-9912-474c-9e02-3bb21656e493",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d191bba3-fa95-4b17-b848-16a273b2e34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb817cf2-47f0-4286-a525-dab2e12db43d",
        "cursor": {
          "ref": "c331e4b3-a74a-4631-8d0c-3b684284279f",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "982b8e23-5172-4115-b7e4-13123b077319"
        },
        "item": {
          "id": "cb817cf2-47f0-4286-a525-dab2e12db43d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "be6b7e80-aad3-40b2-a13f-ecc40a6e323a",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6a302e1e-57ac-4dd7-897d-f25a7ac48b2c",
        "cursor": {
          "ref": "3a0f36c0-9527-4218-9797-805cd9a04666",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "044eb235-66f2-4a86-a2ed-f1f0883e5aa3"
        },
        "item": {
          "id": "6a302e1e-57ac-4dd7-897d-f25a7ac48b2c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "56d0a6e2-0645-4ad6-bf4e-b61367f75845",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "05942f3a-c4bc-4e3d-8a14-00600cc308fc",
        "cursor": {
          "ref": "fc28e29d-969b-4ae3-9d8b-e1465ac9a444",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "179cfe84-b054-420d-86c6-fd5b2d1ec5c6"
        },
        "item": {
          "id": "05942f3a-c4bc-4e3d-8a14-00600cc308fc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "eaf345ac-4270-4303-94b0-d30822662fb9",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "91a0ef19-4336-484d-945a-a624022d0c6f",
        "cursor": {
          "ref": "8b601df8-5355-4fcc-a125-b28f2b92002c",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9bbd9a36-7b4b-47e1-84bb-b21ae7e1be3b"
        },
        "item": {
          "id": "91a0ef19-4336-484d-945a-a624022d0c6f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5c7a2ac3-9476-4b47-a54f-c650e17551e6",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9c502d27-2854-4da4-9696-1ed7c32c7d40",
        "cursor": {
          "ref": "1de1dceb-b1dd-48a1-a99e-0d3e6704a5e1",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fedbf9a8-ea4d-4ef5-a022-ba5b76a41174"
        },
        "item": {
          "id": "9c502d27-2854-4da4-9696-1ed7c32c7d40",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c89a0b63-e0ec-4a30-b354-dc5c41daf09e",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "f9c73d48-de9d-47ac-8891-e5484244336d",
        "cursor": {
          "ref": "aada7013-863e-4273-affd-eabe570eb859",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "57b4c11a-2566-4c13-a1c2-6d84c90317aa"
        },
        "item": {
          "id": "f9c73d48-de9d-47ac-8891-e5484244336d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "5b9a6a6f-28d4-4112-878e-8c719898939a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "190bd392-6ae1-423d-b660-81b3ee53ad06",
        "cursor": {
          "ref": "a87f95f0-ae82-4b77-8034-52132e8818d0",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a443985f-6cba-4485-8823-2f80410857e6"
        },
        "item": {
          "id": "190bd392-6ae1-423d-b660-81b3ee53ad06",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8e2441c5-bf4b-47a8-9934-b0b4c78ad908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c8df79-a356-4046-8dc9-bcc424bf9556",
        "cursor": {
          "ref": "4a8a8cc9-351e-47d3-9af5-4f4c2438bb97",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2024ad5f-2e99-46b1-9949-9b16e0b776f8"
        },
        "item": {
          "id": "24c8df79-a356-4046-8dc9-bcc424bf9556",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "aef2781b-437d-4579-8e84-775447aa137f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159e4fa0-5aee-45f0-83cf-1bc15dbf69f4",
        "cursor": {
          "ref": "f9b1292a-3e59-41e3-a0ce-110ece2a833e",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "425ca0d8-7614-4821-a8be-119a29ce0b80"
        },
        "item": {
          "id": "159e4fa0-5aee-45f0-83cf-1bc15dbf69f4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7a421cc0-77f7-4c20-9cdc-e2fe6d745a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db778f88-c48c-49d5-bf60-7a468441cc89",
        "cursor": {
          "ref": "24e8f50d-20e7-4020-b980-94c07fcbf35f",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "326f01b0-5f22-46cd-9369-1d122236637d"
        },
        "item": {
          "id": "db778f88-c48c-49d5-bf60-7a468441cc89",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6d51a1bf-c211-4959-9fea-79b5d06eb1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57d80ea-8d7f-4b95-b1d2-1d239c135dfd",
        "cursor": {
          "ref": "2d1e2864-53f1-4b86-a8d3-b4b608d90a92",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "98c99036-74af-4bdb-8d24-dc777073a2e0"
        },
        "item": {
          "id": "a57d80ea-8d7f-4b95-b1d2-1d239c135dfd",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b4de17b6-5794-4408-9bb5-65342715b3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f403f9ad-c9ad-4006-8abd-850b0c2dfa2b",
        "cursor": {
          "ref": "bac027b5-84cc-4b44-abe7-9b53e595abfa",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9f0e0118-efa0-428e-aced-f842f7dcebdb"
        },
        "item": {
          "id": "f403f9ad-c9ad-4006-8abd-850b0c2dfa2b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2649bacf-b961-4ee4-9359-0fce0ee7bb46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ea38d0-672b-4bcd-aa22-4e25972b902e",
        "cursor": {
          "ref": "27dc87be-9d02-4a9a-8c50-ed1b1f02601c",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "b51c065a-9fb4-4c17-8e3a-4eff0ffb9746"
        },
        "item": {
          "id": "d6ea38d0-672b-4bcd-aa22-4e25972b902e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "044b02b3-231b-4d08-aa7c-3bf347e2640d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7097e42-9892-4e33-b14c-d79665905b56",
        "cursor": {
          "ref": "be18729f-0647-4583-862d-442890c22dd0",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "37a98fe9-1ed7-4797-b405-95bcb91a927b"
        },
        "item": {
          "id": "c7097e42-9892-4e33-b14c-d79665905b56",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "1f2420f7-3eb4-42c3-9da4-83fd5333295d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f255d9-be83-4be6-af49-24424730bd3a",
        "cursor": {
          "ref": "934a7ecf-72fc-4853-9b07-3774e6f2c07d",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "79fcb4d1-32a7-4195-ba1a-5135440b2059"
        },
        "item": {
          "id": "91f255d9-be83-4be6-af49-24424730bd3a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0b2474a5-1078-49a0-b4cd-952a5cca1ef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ed1c18-7cdc-4a39-937a-206c66f1a3b9",
        "cursor": {
          "ref": "8cd0e2ed-525e-48ef-b831-65814d8ab427",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f6798808-ff55-4589-a64c-2812c13cd97a"
        },
        "item": {
          "id": "41ed1c18-7cdc-4a39-937a-206c66f1a3b9",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2fb019d1-307f-4b6b-bb56-0250f22f466f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e3d813-92d5-4cd7-800d-1381be6c2a4b",
        "cursor": {
          "ref": "0f46e0da-644f-435e-ab6a-d6f104c645d6",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "375342c5-aaa9-457c-b119-8a7e44aa4f8b"
        },
        "item": {
          "id": "49e3d813-92d5-4cd7-800d-1381be6c2a4b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "df87552c-bc1e-4b71-b77c-d704b81d47c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c439ace-c0ab-4494-b8c0-0885f07c3858",
        "cursor": {
          "ref": "8137c4fb-86a7-4d7a-b01d-0b391e3de373",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8b73a57f-69a9-4ec5-9029-abf40ced1c71"
        },
        "item": {
          "id": "1c439ace-c0ab-4494-b8c0-0885f07c3858",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "65ba499e-a559-4495-8f68-2c29829e512d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f562812f-97b8-4d67-b1ea-7bf00bd04a96",
        "cursor": {
          "ref": "f9963fdf-3277-47a9-a5aa-18966e9b40d8",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "88c88103-d5f8-4b19-ac9d-9e88f92858d2"
        },
        "item": {
          "id": "f562812f-97b8-4d67-b1ea-7bf00bd04a96",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "24370c02-5914-4a5b-9951-3451c90eb4d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a50d5e8-55fb-4081-a799-55f31b8912a5",
        "cursor": {
          "ref": "ab0582a0-42b6-402a-a7bc-b7dd53fcd4f2",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5f15b4c2-5b97-4b0f-b973-7e2ef9d7ca5a"
        },
        "item": {
          "id": "6a50d5e8-55fb-4081-a799-55f31b8912a5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2bfbab41-b5a7-4c1a-9984-58168727aa22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107c2fa9-0a29-43af-96e4-8abfc334d91b",
        "cursor": {
          "ref": "c2ca57f6-f98f-49b5-ae82-7de37de4c5c5",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "008c5e93-8e89-47ec-83a2-fd24ba98f0ed"
        },
        "item": {
          "id": "107c2fa9-0a29-43af-96e4-8abfc334d91b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5f6152c4-1dc3-4dda-8d7d-7436ca9fc817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b661533e-bd54-49ae-9ce5-3c4279eb4dbb",
        "cursor": {
          "ref": "84038539-325a-4412-aca9-8d305d44dc5c",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "35396c7a-ff32-46b1-867d-c68badb8b175"
        },
        "item": {
          "id": "b661533e-bd54-49ae-9ce5-3c4279eb4dbb",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "15d6be3c-7db3-40cf-bb08-84e3496c2cb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3371cab-043c-4bf2-8f8e-ea0908537846",
        "cursor": {
          "ref": "739d25f7-975c-4806-bd17-b33b54806f6c",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "70641856-27fa-4003-9a81-bd59d232923d"
        },
        "item": {
          "id": "c3371cab-043c-4bf2-8f8e-ea0908537846",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c3f8f09a-47cb-4227-9a5b-7eb93add9444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bad982f-dfcf-469c-be10-eab5a368d1ee",
        "cursor": {
          "ref": "f2c61831-9e1b-482e-b6f8-22769d4cf0de",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9b442001-342c-4022-83a8-8d2748390d39"
        },
        "item": {
          "id": "0bad982f-dfcf-469c-be10-eab5a368d1ee",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "083d6728-797d-4b05-a9e4-3d4a130a7c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6976a7-d331-45ec-8048-969f025cb361",
        "cursor": {
          "ref": "6afb02d6-a479-43cc-be8b-16119ae1901b",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "752af1dd-7949-45c9-af9b-77189a954bfc"
        },
        "item": {
          "id": "2b6976a7-d331-45ec-8048-969f025cb361",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "26806437-5688-4ab0-a89d-9378733b1f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b219b0d-245b-4d6a-8ab9-f94bcc28049b",
        "cursor": {
          "ref": "d2c6948a-7c09-4ff2-93b0-be5b45f285be",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "45b24e72-a8dd-4ffe-bcec-b4607ef0e977"
        },
        "item": {
          "id": "1b219b0d-245b-4d6a-8ab9-f94bcc28049b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "32cebf27-1fb9-4c47-907f-e6023d580058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab0b438f-f559-48ce-bc5f-140ecc166e36",
        "cursor": {
          "ref": "a08bbf46-1dd8-4532-ac7d-b9f1951bbb2b",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a57376e5-50bc-4f96-aa16-e64e0b13f71c"
        },
        "item": {
          "id": "ab0b438f-f559-48ce-bc5f-140ecc166e36",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "904d43df-ed7a-4979-abd4-9f01e52483d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "591de547-b74c-4f54-b00c-64e56e409863",
        "cursor": {
          "ref": "47731eb0-9b41-4993-a837-946120bac772",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "085f5f53-9ffe-4d01-9913-4c9ee30e6ae9"
        },
        "item": {
          "id": "591de547-b74c-4f54-b00c-64e56e409863",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "eec5ee69-fa4f-4dda-a5b2-b14fa1ace922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a25104a-79ef-4a10-9f10-3dc983432787",
        "cursor": {
          "ref": "e3c90c7f-4c69-49e2-b60e-4650cbe0cc41",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0fda8327-7e3f-4265-8c8e-9dd58b15aa13"
        },
        "item": {
          "id": "5a25104a-79ef-4a10-9f10-3dc983432787",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "2a4366b3-900a-4026-bcef-9f5ebccab3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d66cf42-1a47-4535-88fc-48532c76682e",
        "cursor": {
          "ref": "589e41f4-2ef2-4644-bf54-6fd900cd8dc9",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "430bebed-61b2-4a76-b27a-6c36fff7b510"
        },
        "item": {
          "id": "3d66cf42-1a47-4535-88fc-48532c76682e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "2094b5da-eb78-47e8-9e14-b15151e734ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d034eed1-5b67-46e3-b867-f997df24e992",
        "cursor": {
          "ref": "6626213e-6244-424a-8cc7-81c1ce93b10a",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3fc337bf-a363-4216-bfe3-1fab7fbf74ad"
        },
        "item": {
          "id": "d034eed1-5b67-46e3-b867-f997df24e992",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "aa86a9c4-c02f-442e-a469-c14836ba0f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1c5189-54f2-4dff-993c-71394a4af719",
        "cursor": {
          "ref": "8dba40aa-6d7b-43c7-b5b1-706c445cc7e5",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c54615e7-f7bb-4949-b112-f55324b77707"
        },
        "item": {
          "id": "9c1c5189-54f2-4dff-993c-71394a4af719",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "92ab11af-600e-4770-8b2c-f871b58938b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc170b6c-40ca-4c46-a45f-a6e69293b193",
        "cursor": {
          "ref": "ed6c78b1-db05-495a-ac67-308d2a77442a",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "dc3cc233-f318-4fd5-be97-f2024b00acf4"
        },
        "item": {
          "id": "bc170b6c-40ca-4c46-a45f-a6e69293b193",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "668b07e2-5b31-455c-9910-06e80759d2a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57b71ded-d53d-4d9b-a106-53e31b79a573",
        "cursor": {
          "ref": "32df8854-bc91-413f-a393-0ea59412e810",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9072a5d9-7e4f-4b30-b955-e8608cfd8c5d"
        },
        "item": {
          "id": "57b71ded-d53d-4d9b-a106-53e31b79a573",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1070b7f5-09ce-4d60-a833-11e5b304e59e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b5de72-5757-48d6-991a-470710d0bc2f",
        "cursor": {
          "ref": "ca31609f-99ec-481f-8772-ef2123133429",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "cd81eb4c-8092-4cda-b959-f3ea50d9ce56"
        },
        "item": {
          "id": "b6b5de72-5757-48d6-991a-470710d0bc2f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "27bb702b-fd96-4462-b74c-7522d32619ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f4723e-6c40-4587-a0de-56b1cf08e8e4",
        "cursor": {
          "ref": "9a8b2b0a-2543-4f4c-b3a2-d8df799f5dfb",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b7937963-4ff7-45c2-98ad-6f925b26bdfd"
        },
        "item": {
          "id": "74f4723e-6c40-4587-a0de-56b1cf08e8e4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "683d7067-ab54-4bde-907e-9de3e6b4da22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb8ba80-42ab-4898-8ddb-268388690921",
        "cursor": {
          "ref": "7ed8a31a-8cce-45c2-95df-0a297bc96c11",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f718f631-0f37-4772-b6b1-aa6b759e62df"
        },
        "item": {
          "id": "ceb8ba80-42ab-4898-8ddb-268388690921",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a6f2d5eb-2167-4777-919b-36d330d29589",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d615db-a512-4fa9-b81b-17e68a29ea24",
        "cursor": {
          "ref": "174f9c32-cb0d-47ab-89fa-143b5c8c59b5",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "67f34c77-6ced-43a9-a67e-a0bcfe327cc4"
        },
        "item": {
          "id": "77d615db-a512-4fa9-b81b-17e68a29ea24",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "fa5cf2cb-50a0-4031-b3d4-8bd7b9cfa237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "d7db4300-cf23-46ad-b8f0-51dccad86d86",
        "cursor": {
          "ref": "f420137a-85e4-4268-9034-632b28ac26d3",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "86269d86-cc06-4c6c-b6f6-27c3b7d5c6ff"
        },
        "item": {
          "id": "d7db4300-cf23-46ad-b8f0-51dccad86d86",
          "name": "credentials_issue"
        },
        "response": {
          "id": "031c6975-830e-4e32-9568-05de56067395",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "70bb6da0-a97b-45fd-9c4f-27e8b38560f4",
        "cursor": {
          "ref": "56296eee-981d-4d58-84eb-5a79ec19cf91",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3e67209c-a362-4b06-a5ff-6d3c0f48d8a0"
        },
        "item": {
          "id": "70bb6da0-a97b-45fd-9c4f-27e8b38560f4",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ded76a50-342b-414d-ad37-b16f2cdafad0",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "93dc6fd7-5ce1-4ea2-975a-f689aa9c8b9e",
        "cursor": {
          "ref": "4a173807-5fd8-431f-a20c-2eed851f8693",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "97c94579-bf94-42e1-8243-77c2295f8414"
        },
        "item": {
          "id": "93dc6fd7-5ce1-4ea2-975a-f689aa9c8b9e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "66549eb4-5c46-4770-9b93-f4afbad21c58",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffbc7731-b0cf-43d9-989f-2adae48241ea",
        "cursor": {
          "ref": "c4f12f74-7c6e-4135-b904-d1429050f45b",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4904c331-3c88-4360-8e56-a6443019b914"
        },
        "item": {
          "id": "ffbc7731-b0cf-43d9-989f-2adae48241ea",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d5f599c8-ad6e-446b-b3c6-eb7cae9ad1c5",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55a6903-c3a9-4fa1-8aca-705ae7c03401",
        "cursor": {
          "ref": "55ff53a3-20cc-4950-8560-916dd365ed50",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b714a0c4-1b5a-4544-8d51-eaaa5cca619f"
        },
        "item": {
          "id": "a55a6903-c3a9-4fa1-8aca-705ae7c03401",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "53ca3934-27b9-4d61-b4aa-4b7866fdb7de",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-16T00:32:49.955Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-16T00:32:49.955Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "4fd7c341-32b8-4fc3-a680-2f12e77d905b",
        "cursor": {
          "ref": "57c4158b-e3d6-4b5b-aa52-6003e9d5ab0c",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "66696dcf-a3a5-464f-8942-d93374ac16be"
        },
        "item": {
          "id": "4fd7c341-32b8-4fc3-a680-2f12e77d905b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "020627b7-72a0-4c4c-a0db-5bb3cee1f221",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d152170-a535-4632-ba94-2e24d18f303d",
        "cursor": {
          "ref": "96649916-f8a8-4d11-ad38-b2980128cd9b",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "43aac4a7-3b1b-4ca0-911f-15ff7e1845c9"
        },
        "item": {
          "id": "6d152170-a535-4632-ba94-2e24d18f303d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2d934c86-d2ed-4fa6-81d8-be49bda82279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268e506f-1312-41a7-9c15-7d21412bdb79",
        "cursor": {
          "ref": "52475a55-2ef3-4dce-859b-fe1c0da7e990",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "dcedaae0-8f4b-414b-a2d2-02cee14c0f7f"
        },
        "item": {
          "id": "268e506f-1312-41a7-9c15-7d21412bdb79",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "707745b7-843b-401a-8f38-ca8452e4ba23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac30f22-f468-4841-bf60-279b14c51039",
        "cursor": {
          "ref": "5f79d446-7539-417a-8f04-d532e8eac0a7",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "493101fa-cb8a-4872-a883-c9cba859bf65"
        },
        "item": {
          "id": "dac30f22-f468-4841-bf60-279b14c51039",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c2d669e0-481f-41f6-918d-dc562f41b4ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca5a51b-f139-4908-973f-a074319f2584",
        "cursor": {
          "ref": "66296a2e-aced-4ce7-83cc-96d57be40ced",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "fcf3d9aa-5c3e-4e3e-a9e4-7d6822ba07cb"
        },
        "item": {
          "id": "2ca5a51b-f139-4908-973f-a074319f2584",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "75d01f1e-ad4b-4dcc-b70a-a3330768c8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6548b91f-6bf2-4686-ac83-eefae9cfe56b",
        "cursor": {
          "ref": "9baea538-d1d7-4adb-9da5-e0950aed37d6",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d6761330-d8b0-4340-b8a3-a36e80372fdc"
        },
        "item": {
          "id": "6548b91f-6bf2-4686-ac83-eefae9cfe56b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "baf5e652-9460-4bf4-86cc-d702866ead87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6e98f9-b80e-4aba-9e85-08e583ebc531",
        "cursor": {
          "ref": "ad321b5e-8179-472c-ba01-e1c6dce2fda7",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3e36b7c5-739c-4137-88ae-9cd21ae3792a"
        },
        "item": {
          "id": "4e6e98f9-b80e-4aba-9e85-08e583ebc531",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2be01d80-8344-44c9-a1dd-cbade490c440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b72a33-34ac-486a-9029-ad20c51f2eef",
        "cursor": {
          "ref": "6cbfb622-54b6-47dc-8919-9cc732c2d134",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "13428843-54a5-489b-a147-0ec230e1f790"
        },
        "item": {
          "id": "17b72a33-34ac-486a-9029-ad20c51f2eef",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1821cf7c-7c03-4a60-9568-fc79c44fb893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958bf812-8a59-4771-9550-faf2c03b53fd",
        "cursor": {
          "ref": "88f7a45e-0652-47e6-9a8a-691000bd77b3",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "452400cc-2a90-4ada-9c15-03d1d24b510e"
        },
        "item": {
          "id": "958bf812-8a59-4771-9550-faf2c03b53fd",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f82044eb-4946-4384-a5dd-4e4b65998536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b974d076-c74a-4544-a110-6774914a405d",
        "cursor": {
          "ref": "01db3f4f-bf3b-478b-92ab-e20f3735df6e",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "27011803-dcd4-4903-a04b-5da1f88cadfd"
        },
        "item": {
          "id": "b974d076-c74a-4544-a110-6774914a405d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "065aac5a-1bb3-4225-b372-53cb18292a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f2cfdbe-8741-4790-8896-aa0e9afded11",
        "cursor": {
          "ref": "aefd40cf-31a7-4842-8123-05cc04a91f9d",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "457366e4-ef91-465c-9f9c-46659b5266f6"
        },
        "item": {
          "id": "7f2cfdbe-8741-4790-8896-aa0e9afded11",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9c5b92c9-4687-4517-81af-ca8d13a1c9c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f78bf4-b3b8-4c65-b02c-06c3c69bb233",
        "cursor": {
          "ref": "3bbbffe1-04db-45af-bc21-6ca18a8c1479",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "90a713ab-71fd-4506-9ceb-5e00dffb5885"
        },
        "item": {
          "id": "e1f78bf4-b3b8-4c65-b02c-06c3c69bb233",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9212e9f6-c180-4a68-b52c-037dc226dfc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "611b6339-2fba-4f89-99c4-26ca6e2ee8fc",
        "cursor": {
          "ref": "d2220248-ef5a-4d87-9f09-850f842b7505",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3c9fab00-d64a-47ee-9f60-fa50bf7b0e9a"
        },
        "item": {
          "id": "611b6339-2fba-4f89-99c4-26ca6e2ee8fc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "10d73280-03f1-4127-b3b9-af3aed205ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8213fac9-cb0c-43ee-87eb-22b17e4313e6",
        "cursor": {
          "ref": "51191cae-82f8-42bb-9b5d-0162a583c6a5",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "bbd35fb4-9606-443e-9ec1-e73d6dca92bc"
        },
        "item": {
          "id": "8213fac9-cb0c-43ee-87eb-22b17e4313e6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2f2cb632-1c6c-44a2-aa69-50270521494b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "ec185101-ef9d-450d-97a4-f90562cccf02",
        "cursor": {
          "ref": "e62d3285-eea0-4711-b2dc-21614ff3a6aa",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "37abcea7-ba8d-439f-9a50-d91c93cc8171"
        },
        "item": {
          "id": "ec185101-ef9d-450d-97a4-f90562cccf02",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e60ae3c6-ec6d-448a-8c72-43b85d8af9f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "7ad3f2a1-7e52-4fc5-8ef7-ca4ebb26f2ba",
        "cursor": {
          "ref": "9f46cafe-3697-47de-a0ff-9843384071ce",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "874afd1e-79d2-4f90-9f2b-0b602e7464f9"
        },
        "item": {
          "id": "7ad3f2a1-7e52-4fc5-8ef7-ca4ebb26f2ba",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "db342b46-acb8-4b76-b93d-af1fe664f677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb68c86-88c4-4ef1-980b-94f6204d147f",
        "cursor": {
          "ref": "568ee7f8-a559-4e65-be8b-0e9e64f95015",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b10c86c4-e5ca-4bec-8f89-e20b7b7d4d14"
        },
        "item": {
          "id": "0cb68c86-88c4-4ef1-980b-94f6204d147f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1f6a3655-f6c9-4020-b454-5dc758df80e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83bd2cd9-bc2d-430f-82bb-bc0b13610cd0",
        "cursor": {
          "ref": "c33ec8de-595f-44ab-94e2-316d16eebc9d",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2f5d6227-825d-4121-8cfa-80e3d410a3e2"
        },
        "item": {
          "id": "83bd2cd9-bc2d-430f-82bb-bc0b13610cd0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "eb72ac52-83de-4838-8b98-b92f67ee8d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2837abd6-4caa-4335-8d94-7b9f3845e220",
        "cursor": {
          "ref": "2726a66b-0fbc-4251-8c6c-c40be6f5c9f8",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "879654fa-79a4-46a8-9907-b61f77ba61af"
        },
        "item": {
          "id": "2837abd6-4caa-4335-8d94-7b9f3845e220",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "114abcb5-d19a-4b83-9d30-c11d827a1d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ebb72db-6886-401f-90a7-3af75d7be67c",
        "cursor": {
          "ref": "d0c0ffde-7dd2-463b-bb7f-fa06510d256e",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8c1085ce-f11c-4e80-9189-878d5a04313c"
        },
        "item": {
          "id": "9ebb72db-6886-401f-90a7-3af75d7be67c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f7e3e7e7-fbfa-4de9-8b1c-77375b1956fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1760e0a-7e35-4c62-ac6b-9ab7bdc5d72c",
        "cursor": {
          "ref": "460062b7-85f2-4d93-a528-46e88e1158ee",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9a88e377-862c-4622-957b-fcecf5576eed"
        },
        "item": {
          "id": "c1760e0a-7e35-4c62-ac6b-9ab7bdc5d72c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a8eb31ad-6a0d-477d-bb9f-0777222ce9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c09e78d1-575b-4787-9afc-da874f06dfa7",
        "cursor": {
          "ref": "6d63b7cc-ca57-48d0-b7b3-01b86bd7991d",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "91bdd189-2bae-42af-81ab-505b5296df74"
        },
        "item": {
          "id": "c09e78d1-575b-4787-9afc-da874f06dfa7",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "20f00775-3da9-410c-a69e-2def1cdd60a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea91d216-b551-4909-b1d2-c70ae1fffb98",
        "cursor": {
          "ref": "73405db0-5721-4bbb-a7cd-6075676f9fcd",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "4f336f0b-ae97-475c-a487-6666a98edbbe"
        },
        "item": {
          "id": "ea91d216-b551-4909-b1d2-c70ae1fffb98",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1a541d36-2671-4e38-b26a-53999a6a679d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b3df9c9-36d2-467e-be88-47e7d5abc22d",
        "cursor": {
          "ref": "d8543af4-efc1-40a4-8606-755c2bb2ea7d",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fbe102c9-97bb-4e3f-b832-d7aa0bf71560"
        },
        "item": {
          "id": "4b3df9c9-36d2-467e-be88-47e7d5abc22d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "55860b15-2960-4a7d-96a6-f0a111276cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f78d09d-8f45-42a3-8845-d643441571eb",
        "cursor": {
          "ref": "eb392be7-4b77-4bd6-94f3-765e408272e0",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b0df6b56-ab5c-47d0-985c-7432e961e871"
        },
        "item": {
          "id": "0f78d09d-8f45-42a3-8845-d643441571eb",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "79a1e4d8-3d60-4aab-b02c-78c203954cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf40f14-4e46-487b-bbeb-9f5e1f265a1c",
        "cursor": {
          "ref": "6ba3ecad-798d-40b1-8c06-3a31f2d92726",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1c6e19a1-1c54-409a-8db9-3b89ef01fdc2"
        },
        "item": {
          "id": "0bf40f14-4e46-487b-bbeb-9f5e1f265a1c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a9277ac2-23a9-4183-9caf-aaa4921548b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fb8bdd-3292-4939-83b3-04dc59a33acb",
        "cursor": {
          "ref": "bc6f0c77-5315-421c-9556-f74a4deec7e8",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b26ed435-0276-4ac2-bc67-e38d6987178a"
        },
        "item": {
          "id": "b8fb8bdd-3292-4939-83b3-04dc59a33acb",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "73aaafbf-bef4-44b3-b1c5-a2562fb75b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b84fd3-222d-4d7c-9728-9d5e0bde69f0",
        "cursor": {
          "ref": "b1570155-c48b-4a36-bca7-62f52c9974f0",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "67d7b3ec-05a7-40e2-9ae1-bc17c93f56e1"
        },
        "item": {
          "id": "53b84fd3-222d-4d7c-9728-9d5e0bde69f0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "578895f4-f38e-4537-a8a6-24b325ad2b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1bf544-fd5f-4ff7-b260-8d273b3f23a3",
        "cursor": {
          "ref": "8fa23848-2e88-4fa7-a030-d3ad1f416fe3",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "bca7be5b-4437-4a37-84b4-57a7403595bb"
        },
        "item": {
          "id": "cd1bf544-fd5f-4ff7-b260-8d273b3f23a3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6f553a18-d287-45f9-95a1-0e0b5c51213a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3608b79-7178-4f1c-a141-485f0a97e1cb",
        "cursor": {
          "ref": "a8e307a1-59d7-48d9-949c-98c16a736786",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "00554f90-8105-44a4-861c-fc01e2b3ccdf"
        },
        "item": {
          "id": "c3608b79-7178-4f1c-a141-485f0a97e1cb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e6148243-0b33-41db-9e83-63b856f293e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f04d084-17ae-47da-a6da-aad137d52b4a",
        "cursor": {
          "ref": "b4cbaae4-4aed-4547-ac23-c072069bcdb5",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6cf12fdd-07eb-4479-bfb6-6a1bcf08e33e"
        },
        "item": {
          "id": "0f04d084-17ae-47da-a6da-aad137d52b4a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6c23cbf6-bdd6-4806-8e3e-7400759dfc60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e59c3d7-cac1-445b-baf9-6ec1caeb2688",
        "cursor": {
          "ref": "75f355b4-61f1-430c-817b-fe96103695e9",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9fb0562f-7230-42c3-8cdf-6ba24c2180d9"
        },
        "item": {
          "id": "4e59c3d7-cac1-445b-baf9-6ec1caeb2688",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "242b9e61-f091-48f0-a7b6-1d6930d66628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1d9301-0ba3-4f10-9f8c-a833ada26cfe",
        "cursor": {
          "ref": "f0b88b73-82f6-461c-b6a0-e97ace48ab41",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "633fac1d-134d-48c7-b634-6b84ad136fe8"
        },
        "item": {
          "id": "0d1d9301-0ba3-4f10-9f8c-a833ada26cfe",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7b29b259-8c56-43ab-ac44-967228ef949b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "3dbad6c3-f83d-42cb-ab16-74efd5d178e3",
        "cursor": {
          "ref": "3ea98e4b-5492-4b5d-9815-a33a6bb17758",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4eb8d1c7-b302-4b8b-a354-cca0d2cdf02f"
        },
        "item": {
          "id": "3dbad6c3-f83d-42cb-ab16-74efd5d178e3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a9c28a98-24db-4ae7-b2a7-1e8ff7de6e51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba6bfbe-3a11-4c64-8878-86f4b741efa0",
        "cursor": {
          "ref": "71f2aa68-2eb1-4bfb-a6f7-7af398b3f382",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ec0ce4fd-41ef-4204-8c24-c7ca042158d7"
        },
        "item": {
          "id": "9ba6bfbe-3a11-4c64-8878-86f4b741efa0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "396d77ca-69e0-46d2-a7d1-354c224c2228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289c6328-22f2-4774-ae15-ec928a114c21",
        "cursor": {
          "ref": "d8319814-0b9f-4f06-a296-484ee455d549",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5a23b77b-f63c-4075-b4c3-0f4742c084b9"
        },
        "item": {
          "id": "289c6328-22f2-4774-ae15-ec928a114c21",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9521af3d-08c6-482c-8464-bf51f935c159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b753ac-d5ca-433e-b2c8-0065f1a4ca67",
        "cursor": {
          "ref": "88185aec-ecfa-4c3d-bf38-f0b8a52d6da1",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c821eb58-fbc2-450f-ba08-0d5eae802543"
        },
        "item": {
          "id": "a6b753ac-d5ca-433e-b2c8-0065f1a4ca67",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d5103eec-5020-483f-bacc-09198e23580d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34b9e6e-146d-4e24-ab21-755bb1fc0de5",
        "cursor": {
          "ref": "8d4c1d2f-4718-4252-92a8-b3bceebb5d2f",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4dd96424-c15a-482a-bd9d-8cf7a677e45f"
        },
        "item": {
          "id": "f34b9e6e-146d-4e24-ab21-755bb1fc0de5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e7d5f73c-5b34-4938-884c-ebf1a72df8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fded1a5e-00cc-4628-82ec-eef2a813c584",
        "cursor": {
          "ref": "862be593-a8e6-4439-96c5-f868f73b5d71",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7fe13b65-111d-4dfb-89b1-9ad827ac74bb"
        },
        "item": {
          "id": "fded1a5e-00cc-4628-82ec-eef2a813c584",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a47d6131-99fb-43bf-9d2d-fe37f7b9da5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4509befd-e86f-4ed5-ad42-cd3dc32d88e8",
        "cursor": {
          "ref": "f19b2200-4245-4dfa-b4c2-03f5fd00ad26",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d6261bba-65dd-483e-863c-3984f57f0682"
        },
        "item": {
          "id": "4509befd-e86f-4ed5-ad42-cd3dc32d88e8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f774d36e-b9ab-49a2-b0be-bdeffac8f916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cccea57e-4343-4b6f-8f74-813738542d22",
        "cursor": {
          "ref": "8bc7dfcb-9f40-4707-bbd2-c2dc963ec6f7",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "06d1444e-e1b6-4ba5-b89d-674c0840e5f1"
        },
        "item": {
          "id": "cccea57e-4343-4b6f-8f74-813738542d22",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dc0fc2f0-2027-4d45-ae67-175b96f6ce3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd820eb-1447-4529-b0de-62362c43e91b",
        "cursor": {
          "ref": "1307d0ac-44f9-4646-8b1c-31414f775609",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "71cc1666-eba6-4c8b-88f7-1862f6c3fe6a"
        },
        "item": {
          "id": "fbd820eb-1447-4529-b0de-62362c43e91b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "edc989da-cd77-41fc-b984-14d73ad0e022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56edf0a-c459-4bb0-9434-e583a5854ff1",
        "cursor": {
          "ref": "f1a0f1bd-2eaf-4d60-ae9c-ef96308ec46b",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "992144cb-58f9-474b-b985-a0674f53f413"
        },
        "item": {
          "id": "e56edf0a-c459-4bb0-9434-e583a5854ff1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "91df3841-7a00-433c-8dbf-214fbfce9796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2098873f-4cdc-4085-8471-420b18a67a47",
        "cursor": {
          "ref": "ac94e24c-e3c9-4143-8ce1-2c2c07d66103",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a491c846-42c9-4cd0-b322-0be57d4da089"
        },
        "item": {
          "id": "2098873f-4cdc-4085-8471-420b18a67a47",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4eab67c1-ae92-478f-84aa-0aef06d2fcd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab968f9d-eca8-46e4-bdb1-a457ff8d8f5c",
        "cursor": {
          "ref": "775d421a-f339-4ed2-be06-ebe4cfa46d71",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9b41aba8-1640-4195-8d65-d693a4b18022"
        },
        "item": {
          "id": "ab968f9d-eca8-46e4-bdb1-a457ff8d8f5c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5b85295e-75f7-4769-8bd7-68ff1a2a7a1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311b8dfb-cc37-4304-b9ba-31e1490d06ae",
        "cursor": {
          "ref": "b12110b5-ddb5-4161-84ae-27ac405d5b56",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1f4b5619-19d0-4754-b31c-15f588fa9cfe"
        },
        "item": {
          "id": "311b8dfb-cc37-4304-b9ba-31e1490d06ae",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "55dd5b74-7b2e-4962-803f-93d68645b818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2093ffd5-e942-4c7a-a6b9-281d106830e6",
        "cursor": {
          "ref": "8037bcd6-abdd-48a7-85e0-4f969acdb91c",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b225c47e-aaaa-4495-968b-be7b384eb3f3"
        },
        "item": {
          "id": "2093ffd5-e942-4c7a-a6b9-281d106830e6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e249b4be-1d31-474c-84bc-7dd16726cd3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b64e830a-0aaa-415b-8c1b-b8a9ab155707",
        "cursor": {
          "ref": "8794a5fd-04fa-466b-b64d-94da1bcf3ace",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "47a3f338-529b-42be-bee4-0c2180b402e2"
        },
        "item": {
          "id": "b64e830a-0aaa-415b-8c1b-b8a9ab155707",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "5e1f1570-5653-4192-bd33-097844d55d55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "661d58de-35c1-496f-b788-22c5fe2922e2",
        "cursor": {
          "ref": "86a01a60-e56a-4215-9e7a-940d7c1476cf",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "397c981c-aa52-4530-b05c-576037288ac8"
        },
        "item": {
          "id": "661d58de-35c1-496f-b788-22c5fe2922e2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "85f04f4a-ac77-4880-a4da-7655425dac5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc05e26-30e4-42ea-92b6-82422292cd5b",
        "cursor": {
          "ref": "4d83e949-2189-4410-a641-7e0f47f1ee4a",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8e29b9af-11f2-46d7-99b0-48f4ab589e6e"
        },
        "item": {
          "id": "bcc05e26-30e4-42ea-92b6-82422292cd5b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8d50e314-087f-4993-bfb9-16e96a951f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc503496-025f-4faf-90a7-4988cbd819d1",
        "cursor": {
          "ref": "7b4b901c-0a1c-4c66-b65b-8ed0cd5a676c",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1f007b73-551c-47d6-8abf-e9aa51c51092"
        },
        "item": {
          "id": "bc503496-025f-4faf-90a7-4988cbd819d1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e2c8fcc3-82c4-4359-a0d1-608023fd5d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df49844e-2220-4d29-bcde-3e098bf6ef30",
        "cursor": {
          "ref": "e4bfb4d9-fbe6-4166-8433-8fa547b6bf83",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "de87d8dc-3f89-450f-acb5-7357a0e98076"
        },
        "item": {
          "id": "df49844e-2220-4d29-bcde-3e098bf6ef30",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cd33d9d2-da8c-4fdd-9a99-73cac9feebe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f773d417-d538-4973-98eb-97401cf2a6a5",
        "cursor": {
          "ref": "e5192f45-9655-4a25-9eb2-735b0fbeca81",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "97d7fddf-d68d-433a-9a18-d0f8958fb00b"
        },
        "item": {
          "id": "f773d417-d538-4973-98eb-97401cf2a6a5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "271d94a2-eb10-401e-8fd5-5b4aa8b1f8bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e921670f-8802-4d86-a9b8-1bd5b7e80e0f",
        "cursor": {
          "ref": "c38764d1-1ae8-417c-acf0-ca5fa1a131bd",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a2e1c0f3-9568-4f2e-84ae-dc31a4538b2c"
        },
        "item": {
          "id": "e921670f-8802-4d86-a9b8-1bd5b7e80e0f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "086145c0-e964-40e9-86dd-02ce8bf14ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc59c49-9bae-41b5-aa58-410f64362924",
        "cursor": {
          "ref": "43c6180f-dc39-46dc-9f68-bdf66fc4adb1",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "dcc215ca-a551-4439-8fac-5b7ebc1fb107"
        },
        "item": {
          "id": "8bc59c49-9bae-41b5-aa58-410f64362924",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "7fb754ea-016b-435b-af5b-a7e8385571f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43fa917-7a6a-424b-a3bf-11e159693c3c",
        "cursor": {
          "ref": "b4154f32-5dd7-4f53-8b1c-e1b4f3a506b1",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8a6cd37b-f56e-48a3-a3eb-7961cc91d4bb"
        },
        "item": {
          "id": "a43fa917-7a6a-424b-a3bf-11e159693c3c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c45705e0-d7aa-4b22-b125-ea40efb46a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b383e2b1-5888-433c-a145-33ac7fa7ef69",
        "cursor": {
          "ref": "5198c0a0-7cdf-4f24-bf86-adc6d67269c4",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f6b43134-1f58-457e-b42d-e18522e1de66"
        },
        "item": {
          "id": "b383e2b1-5888-433c-a145-33ac7fa7ef69",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9893b999-c682-4dd9-a155-a0fba7aab3e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d76a6b1f-0b45-484a-aa5f-2e81692f13f7",
        "cursor": {
          "ref": "be734d13-b958-47d6-89ed-9a0ae7efc359",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b76da3cd-1ddc-45f1-b30d-5ca0d618e429"
        },
        "item": {
          "id": "d76a6b1f-0b45-484a-aa5f-2e81692f13f7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3c51b890-a4c0-4d67-9d17-8fca802ebee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33ab4a4a-af18-42b0-8851-2c1b868d4d2d",
        "cursor": {
          "ref": "176715ff-fb5b-480d-9c96-6085b09125ed",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5927028c-1d2c-4014-86dd-0d3ba7a07243"
        },
        "item": {
          "id": "33ab4a4a-af18-42b0-8851-2c1b868d4d2d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "8ae92dac-9ff9-4f7b-afbb-13efb6d62e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b7fbbd-9485-4966-bcab-29bf30ccc6df",
        "cursor": {
          "ref": "26376c4d-5a7c-4a74-88ac-2a263816b621",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ce9b9f62-1101-4b6a-8d6a-c542c01133cf"
        },
        "item": {
          "id": "93b7fbbd-9485-4966-bcab-29bf30ccc6df",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "49a47c98-5ec6-49e6-b500-8735deb7483c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d715c78d-8e7a-41ab-b68c-2e93e3f6041c",
        "cursor": {
          "ref": "45bd85b2-8b05-46de-8aa6-dc23ac7fe9be",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ef8bf3f3-f855-4e03-9aa5-09ca30ecc5de"
        },
        "item": {
          "id": "d715c78d-8e7a-41ab-b68c-2e93e3f6041c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8ffe1208-e2e6-4dba-be0e-95135ff410b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b94d28-a1a0-4188-b6d7-0446c700c27b",
        "cursor": {
          "ref": "d8f390e3-53d8-4378-91ed-3275201b51bb",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6c303161-7905-48e8-96f5-fbb176ae6a20"
        },
        "item": {
          "id": "31b94d28-a1a0-4188-b6d7-0446c700c27b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3363ab7d-de91-4d29-83fa-c39de4545aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "852d9258-9536-474e-a40c-9d7251fee8a6",
        "cursor": {
          "ref": "68cd1198-99bc-47a5-9bdd-438494b031c9",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "a15a0bac-6c30-465f-8ec8-ec6d0778d1ca"
        },
        "item": {
          "id": "852d9258-9536-474e-a40c-9d7251fee8a6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f691fd52-877c-4cbc-a3bd-3884d2270c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfc5a77-c096-4e2a-9319-ffa952888385",
        "cursor": {
          "ref": "674f63e7-c2f9-44bf-a68f-bb1d3e1c579b",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "87037d8c-49e7-468f-8e0f-36fcc149b146"
        },
        "item": {
          "id": "3bfc5a77-c096-4e2a-9319-ffa952888385",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "da5a3e7b-3af1-4b43-8a2b-43e4bc553362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06d9457e-329d-44a2-a5e9-1f4a0311c902",
        "cursor": {
          "ref": "dfb963f6-f491-45d9-bbe6-b63000265b14",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "610e8f3b-96e3-4789-afb0-0902a589780b"
        },
        "item": {
          "id": "06d9457e-329d-44a2-a5e9-1f4a0311c902",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "93bf1e2f-0aa4-454c-b6ac-0db30d5fe6e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f4b61c1-db26-472a-9662-9a780b1c3891",
        "cursor": {
          "ref": "02dcf17f-39bc-40d9-b170-2685aaa66078",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "09579af8-a7de-4ded-9bea-eff39ad2699b"
        },
        "item": {
          "id": "0f4b61c1-db26-472a-9662-9a780b1c3891",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3fefefa5-613f-42f8-91bf-d88ca5a11766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0097a46e-b35c-4951-850b-c09901a5a0b5",
        "cursor": {
          "ref": "ba27975f-bb22-4622-9d84-4612d830e97d",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e0038cad-5cda-4f7f-abf6-d90aaa695f80"
        },
        "item": {
          "id": "0097a46e-b35c-4951-850b-c09901a5a0b5",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "59516aee-4c8a-447a-8abd-93cf3fc4e21e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d62e23-3667-4605-b85c-7ef26f8a1560",
        "cursor": {
          "ref": "9460db18-eca3-4a0a-bb4d-ea9d2c038614",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c81ce1d1-ab08-41ac-a147-6ae6d57c5bbc"
        },
        "item": {
          "id": "11d62e23-3667-4605-b85c-7ef26f8a1560",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3b58b8ae-def7-4561-8b96-5aae05b6234a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe568b3c-640c-4aef-9655-0a774e350ccf",
        "cursor": {
          "ref": "3d36957e-62a3-481d-a7d5-5e064d1ca329",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "57316c0d-0995-4959-8988-0ded70a295b6"
        },
        "item": {
          "id": "fe568b3c-640c-4aef-9655-0a774e350ccf",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "267a438a-73a0-4d4f-9110-2362f329c0b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64b43d45-5acf-4122-b837-f82f9b6d12ca",
        "cursor": {
          "ref": "38227135-29aa-4d82-b2a8-a1d6fb3c9994",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ae0da7ec-170a-4575-b21c-6c595d6d6c5f"
        },
        "item": {
          "id": "64b43d45-5acf-4122-b837-f82f9b6d12ca",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "201de24d-e7b4-4f32-89f7-9b8c399e9914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93af7a23-98a4-40bd-8677-b683888c044a",
        "cursor": {
          "ref": "342fc948-c517-4eff-91ae-3096a517d1be",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "94ca3567-2c2e-4f33-9388-b15c13292671"
        },
        "item": {
          "id": "93af7a23-98a4-40bd-8677-b683888c044a",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "0a62fedb-4a9e-4f73-b89b-42d774975697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9287dc-69cf-4e61-b2f1-105e500320ba",
        "cursor": {
          "ref": "09882cec-27cf-4433-8ab0-240d893040b6",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "89146a55-1144-4f58-88b3-7a2851e9d5c0"
        },
        "item": {
          "id": "4d9287dc-69cf-4e61-b2f1-105e500320ba",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9c1428ce-6820-403b-ad4f-82fd878103d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884bf99b-c689-475e-b92c-d790191f9e83",
        "cursor": {
          "ref": "9a51e2c6-4487-4f16-8228-fb332464d112",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "04ad9997-447e-4c8d-86b7-c57b2cd1f518"
        },
        "item": {
          "id": "884bf99b-c689-475e-b92c-d790191f9e83",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c9784134-b516-48b9-b7bf-cfef37d99394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76656b3d-4ccd-4c61-ae30-bcb24db6233c",
        "cursor": {
          "ref": "ed1eb831-8b27-42e1-9932-9dc4c08f6b7c",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e9724bcb-1f90-4261-a975-27c9a166e315"
        },
        "item": {
          "id": "76656b3d-4ccd-4c61-ae30-bcb24db6233c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e8d7cd6a-fc73-42ab-9479-de707d39ca84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac2c5ff-0c9e-4cb0-acad-522130fd4281",
        "cursor": {
          "ref": "8e660a67-1d3f-47f0-a740-e970dc1322db",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "24460559-3284-491b-8515-9d814069af2a"
        },
        "item": {
          "id": "2ac2c5ff-0c9e-4cb0-acad-522130fd4281",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d56876ed-2f8b-42a8-9835-9df9d08a5300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82ea0ff-c2eb-4537-b2a9-8f3cdb897143",
        "cursor": {
          "ref": "5aded8b6-d4cf-479b-a5ea-397a7e250e15",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d571646f-0009-44da-b381-ed168d8c62fe"
        },
        "item": {
          "id": "f82ea0ff-c2eb-4537-b2a9-8f3cdb897143",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9779dad4-a0cb-4128-8643-ac1b0bb95340",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90fa0ca8-5a3e-4936-8d5c-4792bf181f54",
        "cursor": {
          "ref": "44a18a4f-96ee-4194-9141-578f68ee4953",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9f46342f-4610-4f8f-9c9b-961fb48d32ac"
        },
        "item": {
          "id": "90fa0ca8-5a3e-4936-8d5c-4792bf181f54",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "161716c5-b29c-4bd7-8daa-34a984805414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ca958b-48bd-4d62-97aa-54cd9a70d1b4",
        "cursor": {
          "ref": "264fbecf-e706-474b-afe1-93c96e2d161a",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e41d1b5a-012b-4760-8e23-00781ef5d106"
        },
        "item": {
          "id": "12ca958b-48bd-4d62-97aa-54cd9a70d1b4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "bed33da9-628c-4ccd-b91d-9d5159391fbf",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "9c873058-60ed-4c24-ad7c-416972e5a987",
        "cursor": {
          "ref": "c4ec5ab1-38b1-4194-8f45-c7fba4d5355b",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4e79144b-4b1c-4b88-bda0-1286e6bce2d9"
        },
        "item": {
          "id": "9c873058-60ed-4c24-ad7c-416972e5a987",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7c4a458f-ca87-40b2-b4b9-37b312fcf9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f18203-dd64-4d45-ad0c-aef99ba0df3f",
        "cursor": {
          "ref": "f9d816fb-649a-45d9-90f1-731c555084fa",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ad231c65-67e3-4bc0-88f6-4fd503adbf35"
        },
        "item": {
          "id": "b7f18203-dd64-4d45-ad0c-aef99ba0df3f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6edffac6-c66c-4cfb-ad72-be7bdfee0b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd4642b-8291-4774-835f-3330461c7f5d",
        "cursor": {
          "ref": "3a13bdae-9e18-4889-93e8-a447fe3c0521",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "848ddc43-5881-4e68-8956-0d605b2cdd61"
        },
        "item": {
          "id": "efd4642b-8291-4774-835f-3330461c7f5d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d350e647-2ece-4dda-a09f-bf9b74776fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d51a475-d082-43bf-8ab2-84b949c51fab",
        "cursor": {
          "ref": "f43c9298-67b6-4f30-ac63-c4d7a8114da8",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "adc3a33a-38a9-426b-8c41-ef3888464f78"
        },
        "item": {
          "id": "7d51a475-d082-43bf-8ab2-84b949c51fab",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "52997207-a149-4977-939f-127dab03700f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee913926-222b-4308-a437-cb76d7f36c4f",
        "cursor": {
          "ref": "9b4cc6b9-4210-42b1-9ebf-8fddab04f917",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8feea54f-8eda-4ea0-842c-1a26a1d90b8e"
        },
        "item": {
          "id": "ee913926-222b-4308-a437-cb76d7f36c4f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "31ed7263-cc82-45a5-9a8f-82460ccc4827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410c5c62-1113-400d-a1b2-c44c79c95dbe",
        "cursor": {
          "ref": "af7d641d-c889-4795-8368-8a1009a2b942",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c454bcb2-f966-4e6d-87c1-62ff11072c61"
        },
        "item": {
          "id": "410c5c62-1113-400d-a1b2-c44c79c95dbe",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "284ee870-a775-4bc2-9cb3-4daaf1e305d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86b4cf2-76df-4275-8de8-0e053a5f9371",
        "cursor": {
          "ref": "f741582d-2366-4117-a607-f7d3173a215e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "52ccf32e-0d37-4c0f-9daf-872bf10bfbdf"
        },
        "item": {
          "id": "f86b4cf2-76df-4275-8de8-0e053a5f9371",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ce9c4452-f44e-4652-9d3e-15006661efdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97691406-c52d-4fbf-8f20-26f9125e87a7",
        "cursor": {
          "ref": "194b930d-a9e7-4e2d-8d53-92c91d19dd0f",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "be4b2bc5-434a-4bc7-9c8b-6ff58090ccdb"
        },
        "item": {
          "id": "97691406-c52d-4fbf-8f20-26f9125e87a7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "aac27296-8ce6-468c-ba79-59038b1936e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a0cba8-a944-4f95-8e15-72b2101e8420",
        "cursor": {
          "ref": "7a9add19-2193-4027-ac81-c7e7ccdfa34f",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c24fcf27-59fe-46ca-9f53-796e1432dcb5"
        },
        "item": {
          "id": "94a0cba8-a944-4f95-8e15-72b2101e8420",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8f1029a4-e3f1-43f0-8946-5dfb84df9a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055a163d-5a41-4799-b188-539c7e43c8b9",
        "cursor": {
          "ref": "5b38a170-7e61-4308-968d-570932b18db1",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "5d89e3be-b125-491e-9b49-784df8274ea7"
        },
        "item": {
          "id": "055a163d-5a41-4799-b188-539c7e43c8b9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6ac76ead-aec2-4929-85d6-48564fc4d4e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f88b11ce-a50e-4d3f-ad63-b0bf8c357be8",
        "cursor": {
          "ref": "ac1d1333-b784-40f4-a4fb-55b8e5d30c75",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e6aa0606-e3e2-48a4-b571-9b2a1086b753"
        },
        "item": {
          "id": "f88b11ce-a50e-4d3f-ad63-b0bf8c357be8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "779fe645-dfde-4e3e-9ddd-c158e170a92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4889c26c-036a-4440-b9d2-1169c8ee667e",
        "cursor": {
          "ref": "2d3edb66-d60b-485a-8715-75ee18eba7ac",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "162f6bd3-127d-40aa-883e-19951c6cebc0"
        },
        "item": {
          "id": "4889c26c-036a-4440-b9d2-1169c8ee667e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c8828fe2-4bf4-44e7-b8c5-a551af2721ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f53364c-7f02-4a4d-afda-2e8f89dc04a4",
        "cursor": {
          "ref": "c04033e7-4cd4-4428-aae9-4a392a493fc8",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "718d5dfb-8410-47e9-90c2-1aaa9df47e1b"
        },
        "item": {
          "id": "4f53364c-7f02-4a4d-afda-2e8f89dc04a4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d9e2c4c1-7dce-4cf5-82d1-ae4ea70b27de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6be5481-80d1-45da-9a65-9cb3f6f45901",
        "cursor": {
          "ref": "77ed45b2-a546-4050-b167-647bcd69703d",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5fe52b32-b417-4caf-b8fd-8136d2c7426f"
        },
        "item": {
          "id": "b6be5481-80d1-45da-9a65-9cb3f6f45901",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a7200c72-e123-45cd-92e2-2d3363d82221",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc9c7c6-949e-4f65-89b7-9c822fda1e14",
        "cursor": {
          "ref": "f009621e-2e94-41d0-9bfb-4801a5636e30",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0a446cf9-1e63-4d96-b769-28cf8328b8a6"
        },
        "item": {
          "id": "8dc9c7c6-949e-4f65-89b7-9c822fda1e14",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "fc7ce127-ffdc-400b-baad-7513e827f230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09eb61bf-0598-46ad-af8b-6fde2a34c8cd",
        "cursor": {
          "ref": "67e5e070-9cc6-44a8-b409-391635db38d6",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "47532a8d-6a53-4ce0-a865-e80056568fa7"
        },
        "item": {
          "id": "09eb61bf-0598-46ad-af8b-6fde2a34c8cd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c3977c0b-a08e-4820-8913-6bbacdae8e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e32448f-86de-4aae-8a08-f81368c40782",
        "cursor": {
          "ref": "55d8215e-0276-4b90-a365-a3c3c1166c9e",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2ad448eb-6e8e-48a5-be65-418cbbe4d2f6"
        },
        "item": {
          "id": "1e32448f-86de-4aae-8a08-f81368c40782",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7532acc0-b31c-4451-86a2-1540abe42d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ae6734-86fb-44c3-878a-c10b26b471b0",
        "cursor": {
          "ref": "cb6fbb40-9be3-455c-aa75-77380f39e23b",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d9244782-9f0c-4e8c-863b-0e75c561bd6a"
        },
        "item": {
          "id": "d1ae6734-86fb-44c3-878a-c10b26b471b0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "560b2526-a7ff-4fcf-8df0-2eb99543ca9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac28652-789c-4874-871b-15a470e8bea0",
        "cursor": {
          "ref": "9fc29263-0665-4dba-a8aa-174d89b5eb28",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "844d656d-b0f5-4818-8b03-70602e1273c6"
        },
        "item": {
          "id": "5ac28652-789c-4874-871b-15a470e8bea0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c6cc9ff8-6a20-444c-be3f-38bd53abb965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d97d2b6c-d578-45ae-b604-5b51abfa3c17",
        "cursor": {
          "ref": "05a30c41-a7cf-46c4-8c0d-378bfd0fdd9e",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "55f6c365-b9bb-4aa3-99a7-7ca95ffba95c"
        },
        "item": {
          "id": "d97d2b6c-d578-45ae-b604-5b51abfa3c17",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "97cbccf0-fc85-456b-95c7-7a14783b6c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3deb5c11-9b48-4c28-9885-f9cd6c1ffd52",
        "cursor": {
          "ref": "1b32761f-4a42-4c20-b308-a7495545eac1",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "ac080c6c-5031-4e18-bf1e-cd7b4602ff5e"
        },
        "item": {
          "id": "3deb5c11-9b48-4c28-9885-f9cd6c1ffd52",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8da85a2c-cc90-4109-a3c7-60b6cf9006a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15802867-e94f-4c1f-9faf-9f56cd2b8ebb",
        "cursor": {
          "ref": "3815bc15-7ef8-436e-9536-f0b94235fb03",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "849235b2-8c72-4fbe-884a-4f1e35783277"
        },
        "item": {
          "id": "15802867-e94f-4c1f-9faf-9f56cd2b8ebb",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b0938146-7690-4541-9ff8-cbc65314ea2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35da5300-8986-4032-9f70-39eb7b1ad635",
        "cursor": {
          "ref": "38c49568-c731-4583-aa2b-5b8deff841d3",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "61af0d84-161a-42fd-9b65-640efffd092b"
        },
        "item": {
          "id": "35da5300-8986-4032-9f70-39eb7b1ad635",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d4c64489-fe08-4e32-9093-bd9ea76d6d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71831b6e-0890-41d6-8da6-976eab862532",
        "cursor": {
          "ref": "c9c2640f-7c47-4771-84d7-3b718cbe81c0",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1a4a558b-2514-4a20-ab76-497ad79e89b6"
        },
        "item": {
          "id": "71831b6e-0890-41d6-8da6-976eab862532",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b400c14c-fdd5-43a8-8617-9b96cc6c0f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203e050a-462e-4ab9-b4d8-18f3818bd79d",
        "cursor": {
          "ref": "f5baabc6-8601-44d3-b762-2ca8e1cada3f",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "fcb0f0db-6af9-4545-b434-5143e6970283"
        },
        "item": {
          "id": "203e050a-462e-4ab9-b4d8-18f3818bd79d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a382b457-d0e2-41e4-a174-07889e98527b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c78b227a-96c3-4369-8900-bd1370708d37",
        "cursor": {
          "ref": "c7859c6a-943a-4c70-a947-83d7114eaf94",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d7b32db3-f740-4a5f-a3d6-17f19ba0a3e6"
        },
        "item": {
          "id": "c78b227a-96c3-4369-8900-bd1370708d37",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "a9599059-4533-4ea1-b8ef-b8f56ec0da52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 164,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70e71b0c-625f-4ae4-aae4-1ff270a02778",
        "cursor": {
          "ref": "947edb66-423d-43e5-9e8f-c500ad7b9632",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "46e61b2e-864b-4b8e-89bf-abe930f5eaa1"
        },
        "item": {
          "id": "70e71b0c-625f-4ae4-aae4-1ff270a02778",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "57deb096-c837-44fd-8480-bfbb01a8f37d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0df586-3a52-4850-a780-f99c159c2986",
        "cursor": {
          "ref": "23eb6c38-00ed-4254-8e71-14a346533373",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "834475e0-bf0f-4f0b-8b9b-bde683aadb34"
        },
        "item": {
          "id": "be0df586-3a52-4850-a780-f99c159c2986",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9bf98fa5-37ac-4c24-a78f-3aa54e676348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a5ccf81-6508-43b6-a776-a0abd086305c",
        "cursor": {
          "ref": "69db784f-d471-465a-bcfa-f0d3cbd932cf",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0da963cc-21a2-4c3a-a31c-5b2de3b0aa92"
        },
        "item": {
          "id": "7a5ccf81-6508-43b6-a776-a0abd086305c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "8bce22ec-404b-41e3-a19b-a515f3d8be37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696ac4d5-3bf0-442f-9de7-14a60e19439c",
        "cursor": {
          "ref": "144d8f3d-2265-450d-9087-9f921d50f378",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2dc66e10-d9f4-4d7b-9a32-81795262bc2a"
        },
        "item": {
          "id": "696ac4d5-3bf0-442f-9de7-14a60e19439c",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b5e8a420-bc34-48a4-a2f5-8909dfc69869",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "2783af89-02b9-481d-84a1-65e390f19d7b",
        "cursor": {
          "ref": "89276b9d-0295-4852-a4a8-e889ed46b1c4",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c53b1092-5daf-43d3-a101-3437d1de5081"
        },
        "item": {
          "id": "2783af89-02b9-481d-84a1-65e390f19d7b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1437c404-92b8-4393-a343-e06c3adfbb82",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5482c0ec-18d1-4026-9104-3c9cfc181b90",
        "cursor": {
          "ref": "741c69f6-3620-405e-afc0-1c23ed432bb2",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5cb0ba99-8b40-4229-af1b-24821985fbc5"
        },
        "item": {
          "id": "5482c0ec-18d1-4026-9104-3c9cfc181b90",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "338fcb7b-2477-4c80-97a4-6e45f09a47f4",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2e7c41c7-fef8-41d9-af3e-2c5a0dfc2e75",
        "cursor": {
          "ref": "35d0ae40-e62d-4a31-ae35-5b4cc33e0015",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3ae9c936-26c4-4beb-a7bc-738c8f90f533"
        },
        "item": {
          "id": "2e7c41c7-fef8-41d9-af3e-2c5a0dfc2e75",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b0fc2a99-3948-46da-ad3b-ea2cf1a47c1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb936bb-c5d1-4bd5-a900-732704386763",
        "cursor": {
          "ref": "43306b2e-5a86-4aea-82cb-c699c15c7cc7",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5b0fd513-d789-4529-8951-3bea14fbe9fb"
        },
        "item": {
          "id": "1cb936bb-c5d1-4bd5-a900-732704386763",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "23da4508-3472-4ad7-8940-68c47759df55",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "5fc9fab8-3c35-4fa9-b55a-72ef689dae8e",
        "cursor": {
          "ref": "8e3d2bf8-5179-41f2-950e-371778e8343c",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "75af48d5-9e3b-47a8-bfe1-355c03f81ee8"
        },
        "item": {
          "id": "5fc9fab8-3c35-4fa9-b55a-72ef689dae8e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6829874b-7f77-42b6-b44d-4c2ea568cf18",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "82f4df55-608e-48d3-b91f-109d7a5407b2",
        "cursor": {
          "ref": "6f884a79-d4ab-49cc-8bc7-0288489d2952",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3b3d8ba4-9f5f-47ca-b862-6e77eef44074"
        },
        "item": {
          "id": "82f4df55-608e-48d3-b91f-109d7a5407b2",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ab23b1ef-9f35-471f-a5f2-e81a105939a8",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "0fad9d52-337d-4311-a74e-14ccc1508f8a",
        "cursor": {
          "ref": "1c9df3e5-0c98-4bea-b4c3-0ce3d11c176a",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "56eb3acc-78ad-48e0-9985-65e74578e24f"
        },
        "item": {
          "id": "0fad9d52-337d-4311-a74e-14ccc1508f8a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4455b0c6-ea59-4330-a5a8-7cc0d26d8797",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "8e80923e-8db9-41c0-8317-44f2914c5710",
        "cursor": {
          "ref": "ab133351-a4b9-486e-9b02-fd2fc310f3ef",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "15fc2a52-ceee-40c2-abb7-2586b01e54d4"
        },
        "item": {
          "id": "8e80923e-8db9-41c0-8317-44f2914c5710",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "80b6e601-82fc-44b7-a182-7223b464d4cb",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "3d0cfe35-e164-4d56-a533-69eda9820e60",
        "cursor": {
          "ref": "fcc056f2-8398-49d5-9c21-873e0e7e4a75",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1682e5f0-f85d-4ce2-9eb5-e411dbac81d9"
        },
        "item": {
          "id": "3d0cfe35-e164-4d56-a533-69eda9820e60",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c5e9b967-391b-4a19-a672-8f0215f1154c",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "82295a54-2af5-426d-8771-8429eae3e39d",
        "cursor": {
          "ref": "84a76a69-f368-4995-ae32-1fbd7fe17d4b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "856ad6a8-9716-451a-ac5b-bd6213595717"
        },
        "item": {
          "id": "82295a54-2af5-426d-8771-8429eae3e39d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c6613d1e-9515-4731-8582-60a0ed04413a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068b72f2-a9f7-43a9-b8dd-ab1d19b70520",
        "cursor": {
          "ref": "fdbee76e-a759-4f3c-a70f-94fe58804a71",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "213bb0f1-7d1f-4d7c-b947-0a7958b4ca2c"
        },
        "item": {
          "id": "068b72f2-a9f7-43a9-b8dd-ab1d19b70520",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e33af3c0-734c-42e5-a27e-c52b48d89733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6fb6dc1-a2b7-411d-843c-cc21f0a362f2",
        "cursor": {
          "ref": "6d28af8a-ef70-488e-bccb-732ba2f952de",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f2ac4283-f147-494d-9554-ffd83940adcf"
        },
        "item": {
          "id": "a6fb6dc1-a2b7-411d-843c-cc21f0a362f2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "bc2f9a10-6e5d-4fea-a3f2-4fe4883e7bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa7c895-cdf3-4933-afb8-889db9473a5e",
        "cursor": {
          "ref": "12c7764b-d12d-4c34-ae61-25c30f6ac8d5",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "33b0fc10-ea9f-405a-9a9d-7d8fdeafa64a"
        },
        "item": {
          "id": "6fa7c895-cdf3-4933-afb8-889db9473a5e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d71761f8-d372-4284-8e3e-00d7423894cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481ee441-d623-4ed8-b2f2-b56b2e715dbe",
        "cursor": {
          "ref": "22c55be7-e96e-4ac0-82b7-f2cb07466fc9",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "0766a97a-05cd-4cc5-8c7f-903bd51313f3"
        },
        "item": {
          "id": "481ee441-d623-4ed8-b2f2-b56b2e715dbe",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "77a6680c-b9d2-44a3-84f5-3781482c4a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9981154f-7846-43e1-89a7-073a36ca302a",
        "cursor": {
          "ref": "18ad447c-7c03-4df4-9aaa-d0d555c9cc51",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cd345b18-65e0-4b58-b56b-9b49eb69b102"
        },
        "item": {
          "id": "9981154f-7846-43e1-89a7-073a36ca302a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6637dd02-dbc1-40b8-8ea3-7206b214fb5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621c546f-3c26-4ad0-bac5-29ae975220f4",
        "cursor": {
          "ref": "b13559ec-653d-4da8-b824-9b95406dd1cc",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b275df34-3f73-472a-8b4c-744b201c00e0"
        },
        "item": {
          "id": "621c546f-3c26-4ad0-bac5-29ae975220f4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ede31d90-09df-4219-8962-25b2e118ca6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6313a0ad-286d-46c3-b90c-f007eef44079",
        "cursor": {
          "ref": "3bb0c03e-8532-4330-9458-6570ff72571c",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4463f87e-7c1d-4d08-a471-4b895ad35569"
        },
        "item": {
          "id": "6313a0ad-286d-46c3-b90c-f007eef44079",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f44f6ba7-dae4-408a-95da-ce07c3febf09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdce869-c36d-41e3-a4d2-781d56a75692",
        "cursor": {
          "ref": "337d98d2-b7d3-4c2c-a75e-db9d249f457a",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "30bbb606-0c32-476f-b49c-acaedc0970f6"
        },
        "item": {
          "id": "dfdce869-c36d-41e3-a4d2-781d56a75692",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "97253602-814f-4bce-ad39-c84754cd9142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f830d0-30f6-426f-ad55-b24af74eb5fd",
        "cursor": {
          "ref": "5670f321-f5c7-41ac-b1f4-49b6778e5d6b",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a7d2e9c7-a560-4dc6-83ba-aee999d6a0b5"
        },
        "item": {
          "id": "b7f830d0-30f6-426f-ad55-b24af74eb5fd",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "995f9ce5-b51a-4331-8d99-cbb5801cf36a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6589e9a3-5c9a-40f6-b0ae-8e21c0979da3",
        "cursor": {
          "ref": "fd6e4a92-bbf6-4622-9507-b47f961de25a",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3accc4cb-f088-458b-8ecc-463d0e857f72"
        },
        "item": {
          "id": "6589e9a3-5c9a-40f6-b0ae-8e21c0979da3",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d7299d75-1ebf-4d76-8b45-08543b32d6ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892981bd-432e-462b-b418-7326a2c9b800",
        "cursor": {
          "ref": "555da00b-0bdd-4c9b-b6c9-591f298e2d1a",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "6b2ac920-f763-4316-9d41-8c51a5c5af24"
        },
        "item": {
          "id": "892981bd-432e-462b-b418-7326a2c9b800",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d19dc388-ea6e-418d-aeb2-4d62a44e8ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f447901d-0437-48d2-84f8-54d8106ea8a7",
        "cursor": {
          "ref": "2e7da972-9a4a-4b8e-bbd2-3668fb313104",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "4719e1ef-5129-4973-b199-fae5051bd938"
        },
        "item": {
          "id": "f447901d-0437-48d2-84f8-54d8106ea8a7",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4123f65f-6226-4c15-b6dd-c27a6607d9f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b199cf-6fcb-4115-952d-1fec6f16d124",
        "cursor": {
          "ref": "169e149c-82a1-4cf6-a425-9eb355e7691b",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "563f6714-31f4-4d25-9c95-da5caf1a59ca"
        },
        "item": {
          "id": "e4b199cf-6fcb-4115-952d-1fec6f16d124",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "547f9e2d-db47-4a4e-82ef-691ebf3d275f",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "fd9ecd47-6eed-4276-a47c-c507da43efd1",
        "cursor": {
          "ref": "960f0f3c-69d1-4c53-97c6-46f4d4a0df0b",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "e9f4ed0e-f284-48e6-a83d-79fa8e710fdb"
        },
        "item": {
          "id": "fd9ecd47-6eed-4276-a47c-c507da43efd1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3206a2d0-7588-4c4c-a182-122f4f4fe825",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "bfeef5f6-b5aa-4a67-a641-0eb3cb363692",
        "cursor": {
          "ref": "4b88d528-29d9-42a1-ae5e-ce030691758a",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "153f3232-9966-4539-95b8-11735f63a239"
        },
        "item": {
          "id": "bfeef5f6-b5aa-4a67-a641-0eb3cb363692",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "feebe637-0555-4872-abad-4a97e9a89bb3",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3fe7566c-23c7-4efc-9139-a9375e9a6375",
        "cursor": {
          "ref": "853363be-2428-4121-ada6-60160caecce3",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "162c644e-014a-45f8-b9be-20c93bdf44fb"
        },
        "item": {
          "id": "3fe7566c-23c7-4efc-9139-a9375e9a6375",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "326db81e-87cc-448d-bd28-317f6784accd",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "72c4a8fa-502c-47e1-b637-6d42b3580a45",
        "cursor": {
          "ref": "1a9afd49-9285-4d06-b6eb-3375f12ad039",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ed9e5a0a-c2b0-481f-9fd4-b5f7371f110b"
        },
        "item": {
          "id": "72c4a8fa-502c-47e1-b637-6d42b3580a45",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "22bae9bb-6aad-4358-9c65-5c7e3c5e2d85",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ba03166e-1438-4e60-a3eb-7d1ef460046b",
        "cursor": {
          "ref": "77cec38f-36a9-4b56-abb7-06f3e27f2094",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "916c3d26-b8cb-4ab5-bade-b6c71f9d018d"
        },
        "item": {
          "id": "ba03166e-1438-4e60-a3eb-7d1ef460046b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7788a6b0-3ff8-471f-87f1-372cea98de71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50af40a8-fe4a-460b-8b6c-f7ad20faf9ea",
        "cursor": {
          "ref": "d5818e17-e8b4-4048-9a5b-354d84837105",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0c51b340-8f7f-48dc-ae23-672ef1ab7f0e"
        },
        "item": {
          "id": "50af40a8-fe4a-460b-8b6c-f7ad20faf9ea",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3ce951b4-ba2e-402e-ad2a-471e42597e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613a9e61-3e74-4fae-961f-806108e0782f",
        "cursor": {
          "ref": "69585373-3c64-4e6f-8963-830c3a746300",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "877a2451-bf0b-405c-8a50-ab989a08b820"
        },
        "item": {
          "id": "613a9e61-3e74-4fae-961f-806108e0782f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "48306df2-1fe9-44b5-a097-24762ca4e03b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68de19a-5831-4435-b0d1-c1d3c9f7d3d7",
        "cursor": {
          "ref": "fa5b068f-453b-4089-a16e-36abd2368bcf",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "21a4865b-dd71-4e7f-94a1-0f2a3bb6bd75"
        },
        "item": {
          "id": "a68de19a-5831-4435-b0d1-c1d3c9f7d3d7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "890316c0-1a5e-4f88-9a8b-11bcd06da7d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d04cadc3-99be-4fde-96ea-3cc3ea1bb98c",
        "cursor": {
          "ref": "c92aeb2a-5aff-411d-a704-62cbedef6d05",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d6126443-14d4-4801-987f-3e589b58e865"
        },
        "item": {
          "id": "d04cadc3-99be-4fde-96ea-3cc3ea1bb98c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b19d473f-70e9-4e14-a1c8-5e1d0c4e17f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40cdeb56-6a5a-4424-91a3-5761313dd16d",
        "cursor": {
          "ref": "a112fdac-1fe8-4a07-93c3-047c8ecacc05",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "29439966-b2e3-4840-a9ee-a6007cd7641c"
        },
        "item": {
          "id": "40cdeb56-6a5a-4424-91a3-5761313dd16d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c078f7a7-21b6-4eeb-9b28-e54d4bb02460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee2fbcd-c65f-4aac-bab1-9592975d8342",
        "cursor": {
          "ref": "ffa84f36-40f5-4dd6-a377-57fef3dd67ae",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bcd67a40-9e81-46c2-b17a-fd40f0dcf247"
        },
        "item": {
          "id": "1ee2fbcd-c65f-4aac-bab1-9592975d8342",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "350c2d5c-8c00-48fe-9828-114e684fbf23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c44503ec-35cd-427b-af09-5c78909dbaa9",
        "cursor": {
          "ref": "f580becb-42bb-45e7-8e97-0a5ae24699b1",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "40255483-91b0-4c0a-bbad-69168a4f9536"
        },
        "item": {
          "id": "c44503ec-35cd-427b-af09-5c78909dbaa9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8b5599a3-fc8e-4594-b622-adcfab8738b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d85f1b-14bf-4f35-9da9-f9181d7c06fb",
        "cursor": {
          "ref": "fe11daa4-cbaf-40b7-a7ab-e0db28824351",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "3ddbe5f4-556e-4845-bcac-28391d3df2d6"
        },
        "item": {
          "id": "d4d85f1b-14bf-4f35-9da9-f9181d7c06fb",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b4d05cc4-3058-4258-ac6d-6f70b751c10a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326e4182-213e-43a5-9105-7abacb1df62a",
        "cursor": {
          "ref": "ee077d3e-093b-4cae-8d78-9ebfbff15bf9",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "364a9781-3c89-40e2-b813-acd49419b646"
        },
        "item": {
          "id": "326e4182-213e-43a5-9105-7abacb1df62a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d8083bc4-c112-4ea9-90d6-24760957110a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5382cf-b265-41ec-81e2-6325d77abf4b",
        "cursor": {
          "ref": "3ab87db8-e240-425b-8fe9-38bf453c8dab",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "72338819-071d-4143-ae30-0fc16f2d1991"
        },
        "item": {
          "id": "dc5382cf-b265-41ec-81e2-6325d77abf4b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5ffa8a10-feb0-4f53-96c0-ea679d136257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4de25a6-5470-4d1f-8e24-9fa55eb0c140",
        "cursor": {
          "ref": "3d429444-f137-4f42-a0f3-879416353bd0",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "db6436ee-4e46-4672-bd70-377af8c73b1b"
        },
        "item": {
          "id": "c4de25a6-5470-4d1f-8e24-9fa55eb0c140",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "357bb641-f456-4870-b6c9-be6fed4d5a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9497c78-d679-4b06-bd28-cc2a12335b8a",
        "cursor": {
          "ref": "8e9777e9-4dbf-4ae9-b5a1-152723afe614",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "82cb3cbe-b668-4f0a-8b61-787fc17898ea"
        },
        "item": {
          "id": "e9497c78-d679-4b06-bd28-cc2a12335b8a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9f8316a2-37f8-48f1-bae8-5f89d3f796bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef2f9cf-5f06-4d9e-b215-d7cbba790011",
        "cursor": {
          "ref": "cf6f9d4b-1eca-4a5c-bf2f-3192051ca939",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "82d4382c-e350-4bf4-9f2a-cf23784c57ef"
        },
        "item": {
          "id": "6ef2f9cf-5f06-4d9e-b215-d7cbba790011",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "313f2904-0996-40a7-999c-752de2dba816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95323fa0-548a-4cd8-ac19-3cad43b479bf",
        "cursor": {
          "ref": "f89c854e-34aa-4651-8db1-7877f0a873f3",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "c37dc681-5d82-4d42-ba0a-e40c9274b077"
        },
        "item": {
          "id": "95323fa0-548a-4cd8-ac19-3cad43b479bf",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d67f9f43-9826-4461-852c-b56bf56ee575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc8d4ed9-a2d5-4c10-8d86-8600428abc96",
        "cursor": {
          "ref": "0c0b839b-6772-4683-9b96-33386506c758",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "e7fcec1a-c22a-4cd7-9fdf-7abdc04fe65d"
        },
        "item": {
          "id": "fc8d4ed9-a2d5-4c10-8d86-8600428abc96",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "516448b9-37fa-436c-bbd5-ca14ccd5c2c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627b5a87-0e0f-40e6-aaa1-112ebcb226fe",
        "cursor": {
          "ref": "0a983184-71ca-4dd0-a403-89cce8587c14",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "b65b65c4-9a43-4d2e-be83-ef970522f18f"
        },
        "item": {
          "id": "627b5a87-0e0f-40e6-aaa1-112ebcb226fe",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "40d8ce2c-2eb8-47a5-a705-d425f795f816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb38dda3-df1f-4630-a1f8-6159bbac0e4a",
        "cursor": {
          "ref": "ce896388-cc87-4362-ae75-160e0cd4328e",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "cbf4f58d-5089-4559-b6d4-e94be5d888fc"
        },
        "item": {
          "id": "bb38dda3-df1f-4630-a1f8-6159bbac0e4a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c003c385-80ea-4557-8c83-0b80273bfba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfec3a9-0ddf-46e2-b370-3de8bd6c36b4",
        "cursor": {
          "ref": "821ddc53-e6a3-4e95-9b1a-082bb6e30636",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "553355b7-d574-474c-ab65-d80f71b352c1"
        },
        "item": {
          "id": "fcfec3a9-0ddf-46e2-b370-3de8bd6c36b4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "37850124-92c0-4576-8529-bd891272b75f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a900a175-3d8b-43a9-8ff5-67b83539635b",
        "cursor": {
          "ref": "ee7b2db2-a2bd-4ae5-b5b0-54985625bd00",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "091283c1-b434-40a4-9f15-4974a6dd9b3b"
        },
        "item": {
          "id": "a900a175-3d8b-43a9-8ff5-67b83539635b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6bc25a7b-5976-4ace-80a2-e540d5271b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd5cf31-09ff-49e1-b5a9-6bef76d3d57b",
        "cursor": {
          "ref": "56c08940-9f5d-4f91-818a-3c642cf1d30c",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "e2138c17-79f6-4315-b28f-cd24cd8e5079"
        },
        "item": {
          "id": "6fd5cf31-09ff-49e1-b5a9-6bef76d3d57b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "aae9b821-dd12-4a69-b6ce-f04a9683aad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6805c1-2bd9-435f-a0de-bb1ef52043f0",
        "cursor": {
          "ref": "8d386d93-5ccb-414a-9f1a-30b2fb14e180",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a35237cb-98cc-4806-9495-840343d801f8"
        },
        "item": {
          "id": "9e6805c1-2bd9-435f-a0de-bb1ef52043f0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "523da5d5-bc37-4ca4-a625-c6a261af5279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac647d4d-4091-423f-986d-584d73399f7b",
        "cursor": {
          "ref": "39a44bb3-11b9-4701-b45e-8ee645fc5b5b",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "b092a45e-da4d-4423-88fd-e5eea1f4b272"
        },
        "item": {
          "id": "ac647d4d-4091-423f-986d-584d73399f7b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d6ae046b-c702-497d-812a-adabf3052adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e366544b-d8d4-4715-8bba-a41723753c3f",
        "cursor": {
          "ref": "9fa672c9-62ae-4c56-828e-b5d82c404f43",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "6795ed4b-99d5-4666-832a-a46f4b98723b"
        },
        "item": {
          "id": "e366544b-d8d4-4715-8bba-a41723753c3f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "45e071f5-8108-4bb6-a59d-f5a02264d822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b6f641-3f4a-47d9-828c-ad3016b6106e",
        "cursor": {
          "ref": "165f5d10-a6a9-460a-93e9-8da502fb26cd",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "2e818c7d-5c95-4e73-b56f-df6ecc0b4902"
        },
        "item": {
          "id": "44b6f641-3f4a-47d9-828c-ad3016b6106e",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "09ba182c-fab2-4059-980b-d04880d25963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db626ae6-ed98-402a-a36b-8e0b04e1e478",
        "cursor": {
          "ref": "20119c02-26b8-48d6-bfce-e9e6bb8774d6",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "2c3019e5-2f85-419b-88fd-4ce82af962c3"
        },
        "item": {
          "id": "db626ae6-ed98-402a-a36b-8e0b04e1e478",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "649beb44-c38f-4897-a19a-2a67d2809fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49d8e5fe-ab8d-40c1-8d27-405dacafa577",
        "cursor": {
          "ref": "b4dcc201-6a2b-4309-a6c9-5aeb2d0214aa",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "565609ec-ff66-41a2-9de9-96ed045f46a7"
        },
        "item": {
          "id": "49d8e5fe-ab8d-40c1-8d27-405dacafa577",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "abea8293-15f7-447b-98ba-348ef9912e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38545cd2-e2d2-4e69-9cd5-84efb8c19724",
        "cursor": {
          "ref": "929b81df-839c-4023-9559-558fa41249f0",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "8c08c7d3-47f5-4f2d-94e6-7e601bdfefa9"
        },
        "item": {
          "id": "38545cd2-e2d2-4e69-9cd5-84efb8c19724",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e9aada51-bfe5-435a-85c1-71acdfb0b0a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ee1d64-75b4-4a6d-bb19-7ab43f3cf357",
        "cursor": {
          "ref": "5d0a7f96-a4e8-4099-afb1-56879b4a2690",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3d2708b1-5a40-47fa-b267-0dbc47d6d79d"
        },
        "item": {
          "id": "62ee1d64-75b4-4a6d-bb19-7ab43f3cf357",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e393a01e-ade9-4ee8-affd-63047abe430b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87cec010-dc0f-4492-8ef4-fa3c3295464e",
        "cursor": {
          "ref": "e871c3c3-10d0-4b70-8f05-0d08608f7494",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "f10343d9-68c0-4af7-8ee2-89e6a950c8eb"
        },
        "item": {
          "id": "87cec010-dc0f-4492-8ef4-fa3c3295464e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e48f491c-1675-471c-b092-e065f17dfcb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76b335b-0a71-445c-87f5-98b94a73a709",
        "cursor": {
          "ref": "295acd23-28fe-4c0d-bd37-3fe0a82ac391",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "a3b6d0d5-50d7-4abe-ac57-0accf7ec853b"
        },
        "item": {
          "id": "a76b335b-0a71-445c-87f5-98b94a73a709",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9ca26c2d-5dee-42e2-b7c4-9b8cc9164ff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "616f3e9d-61c7-4bc9-a0f2-f6e29f0cd0c6",
        "cursor": {
          "ref": "f0ae6fa6-f90a-48fe-b6e5-994450ed5300",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "adcb5332-b6ed-4c60-9676-54754695132a"
        },
        "item": {
          "id": "616f3e9d-61c7-4bc9-a0f2-f6e29f0cd0c6",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2a3035ab-5575-4dad-954c-2e7396204273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66a67ac-80ed-4296-ab61-c9c9b55d5801",
        "cursor": {
          "ref": "679d719e-504e-4197-88bd-5d9c7077ca45",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "bab390ad-7865-490f-91b8-cbc7f9ea7916"
        },
        "item": {
          "id": "a66a67ac-80ed-4296-ab61-c9c9b55d5801",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "a3941fe0-0024-4a27-866f-4f2fa9358ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44717f48-e2dd-4363-a391-3a70c5488147",
        "cursor": {
          "ref": "38266d25-4056-4c26-9afa-9a6ad95ea5bd",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "406dbc5f-c3b3-4a43-a920-7fc550e69922"
        },
        "item": {
          "id": "44717f48-e2dd-4363-a391-3a70c5488147",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8d6ce1eb-16d6-4974-91a7-b36feb603571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "319703de-89a3-482e-9e2e-1fcaa665d344",
        "cursor": {
          "ref": "51e1a7ce-a89d-4e63-a464-c61a8ef78a68",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "357e7c31-c674-4ec0-bc01-dae528653432"
        },
        "item": {
          "id": "319703de-89a3-482e-9e2e-1fcaa665d344",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a75601c5-91c2-4131-a025-c3c272a9ddf2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7803306-4632-4162-86f4-58d1b60b6202",
        "cursor": {
          "ref": "54fc3b9c-7f8b-4b78-b412-bb944aec479b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "49eab068-7ae7-47a6-9d24-947cad28d585"
        },
        "item": {
          "id": "c7803306-4632-4162-86f4-58d1b60b6202",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d4294c05-84e7-41d9-893f-c52022b51cc7",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "bd08aaa1-83b9-4532-8007-1bcd4dc57f03",
        "cursor": {
          "ref": "71432c69-4bfa-4ec9-92d6-1f7e23921112",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "52ff52d9-0f10-4bb9-9be7-7c25920ea430"
        },
        "item": {
          "id": "bd08aaa1-83b9-4532-8007-1bcd4dc57f03",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6c69280e-b8db-4472-aa69-0b6a5d421f53",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d9809c-8b1e-4874-8f7e-483d99708cf9",
        "cursor": {
          "ref": "554c4666-b883-4a01-8d25-c23a06209a9b",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "5c6a9fca-a2d7-4771-92db-176d0beab9da"
        },
        "item": {
          "id": "d6d9809c-8b1e-4874-8f7e-483d99708cf9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ef8df96e-5e7d-4fcb-b401-9fb3445f624b",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a144e14-526e-4555-9d9e-f84e36ea5455",
        "cursor": {
          "ref": "54b83c78-ec7c-47db-a3be-68380f29ab9a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a9a03427-dfba-4f4d-abb0-2ca221969e5a"
        },
        "item": {
          "id": "1a144e14-526e-4555-9d9e-f84e36ea5455",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "de03fced-2b8d-4711-a550-92e86bd52b1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a144e14-526e-4555-9d9e-f84e36ea5455",
        "cursor": {
          "ref": "54b83c78-ec7c-47db-a3be-68380f29ab9a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a9a03427-dfba-4f4d-abb0-2ca221969e5a"
        },
        "item": {
          "id": "1a144e14-526e-4555-9d9e-f84e36ea5455",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "de03fced-2b8d-4711-a550-92e86bd52b1c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57547f2-bdf3-4480-b936-4a77b1671cb4",
        "cursor": {
          "ref": "f6d9fc77-eb48-4ab4-a228-76fdb4658b30",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "22419440-0d2c-4e50-92c3-6f4377e9cddb"
        },
        "item": {
          "id": "d57547f2-bdf3-4480-b936-4a77b1671cb4",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "a1e71bf3-cdd5-4abc-90c0-6960c06ec35d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfa45a1-adae-4ccd-9ded-a1019044c4b7",
        "cursor": {
          "ref": "f4ea6f5a-40ee-4e62-8784-ce14c0a2d541",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "b7d25cee-832f-475e-9b47-883193d9a92d"
        },
        "item": {
          "id": "8cfa45a1-adae-4ccd-9ded-a1019044c4b7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a6874415-cbf4-471c-a55c-9203b06c77c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}