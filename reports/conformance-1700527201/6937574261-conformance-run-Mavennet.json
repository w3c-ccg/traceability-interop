{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "486d9384-0ad6-471d-9d47-57ff3f47f51a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8752bbea-86f0-4164-a8b5-9866ab931605",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8a6a3836-ac15-4041-89f7-eace0754c6f1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "cc074bd1-1759-4e5f-bbed-b91c38595fa0"
                }
              }
            ]
          },
          {
            "id": "7322b7b7-fcd6-441e-91dd-1fbf3544aecb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9eeaa053-6db3-4fdd-92cb-882d03c2ccda",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c7a338be-04ec-48f3-88b2-88d8ae7435b5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "58a01879-7641-4d15-8828-354c29a9090f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "dd96b7b5-7d32-4295-bbd7-032c91f1fc14",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8d8af5f5-a783-4fd4-a149-8fd9dba8334c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "171eaa0b-a4d8-430a-9ccb-b47edf14c78d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4d296d9d-49d2-43cc-89cc-672f06078162"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "094dabe2-d1a8-4298-9c0f-19f24439cb80",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9fabb543-e424-4d8f-9ec3-04a36f6758a6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dbed2fe9-2b36-44e6-ac9b-990fa5b3bd49",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "473188b7-34f9-419f-837a-e15f78f674d6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30c538e2-d10e-4be5-8684-823fcb8ecf40",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ff474cd5-b929-4414-b884-db3673d89638"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "353c49bc-72bd-4e75-b854-7399f2e6ef2b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c818c587-7ed3-4cb1-a79f-a7d9472c2aa4"
            }
          }
        ]
      },
      {
        "id": "b1b3bd1c-a83a-484e-8114-e981b4b479ed",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "24d41259-e1cd-4b5e-9154-48cbd81cb4b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e4a6175d-9486-44f0-aaf5-189f2f5f6833",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f97b4d2-952e-481b-8d30-8abbc360dadc",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c0ed4a-1960-4d54-849c-49ef6713e35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0402239b-5979-4d21-9db5-9254b3a1e355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964e00c9-59bf-4122-8980-917c0135e228",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e6728d-aa0d-40d7-b2fa-52866fd75133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01200220-98b0-4c74-b398-b5ae03a14b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03998c2d-33e1-484a-8048-b1cf488c35da",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f396e32-03f4-437b-9ad7-cdc971bd1f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3af2de3-c868-4d41-8395-f282e2495c0f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e1aaeafd-178f-478f-9735-8f0b71b4fe3b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "48283b26-7abf-4a7d-bf8e-939e9c7d0f20",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1835c81-61bf-46fe-bdc5-65223024748d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67f2d5a0-2e42-4308-be3a-10caf85192b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b576e2-6e2b-4313-a8fa-bfb1a5135d6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a3fa67-1b3e-496c-9836-e44d63bca9c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7319917b-99c3-46f5-bfaa-1ce5973fff4f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c2b6fe6c-60c2-4712-bbe1-3bee0c845e95",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9e96207-d136-4980-8fd3-a382895297a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6c8f778a-e618-4514-8b57-473a57b42d3f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc89ee87-d434-456d-b231-fff12c7f1913",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f5502ac9-ee86-42c0-8711-27c90392a8ba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eec5cb91-5957-4414-bbc8-29d7819d9ab6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f32feb72-6453-4816-914b-cb1a3da0a4cf"
            }
          }
        ]
      },
      {
        "id": "e63b0948-4850-439a-992d-e265b6e3657e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f2f5f6bf-145a-42b4-a93c-380dd7dc5d78",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3334c393-ff42-4ebd-b443-693d9b56bec8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7d54bc9b-29a0-436f-813d-9995e605b409",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46933a94-7a02-458b-b2c7-3743811eced6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5b2693a-11da-4d26-9217-b4a8b3be16d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935bdb86-7459-4623-b970-9b1c7454341a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4835a41b-1125-424f-bc1e-f0a3dfccaf28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee931e4-2e97-4ab1-a404-9065e04add03",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b539f70-93d9-458e-bbb8-a6bedde4435e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02dc5270-50d9-43d3-8ce1-c5ae01a3562d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab550c14-515f-4265-ad24-43ea8985456c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9cf28384-fb79-4ae5-8188-6da2646f324a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8359e80-29fa-4928-8d95-73228e5d1f83",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62f14ce-d7df-4133-bc9a-087d29b1d1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cadb1892-9dcb-4d08-b2a6-aa6742e2b0c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825c4150-e187-41ae-8498-b22d21d840af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e51857a-7765-4348-924b-3d42349838c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff892ac2-6d4b-4394-add0-9c9e9f7aeb8d",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee7437b-252a-4dea-ae74-5f5cc3ed1914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50cbda2a-e20b-4c59-a65d-8c96a05a7ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c635bd-cb06-4a8b-9a42-92cc46a29c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "599412a7-ec51-49e5-ac45-ba84f7945604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc84bd27-86a9-49ac-b759-22eea80cd10d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf33d6d7-5541-48cd-83e2-fa7217aa4594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c41761-ed90-4e44-bd46-65f7fce46b82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6feb9a8f-7a09-4116-8619-429e95c2fd81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "794290a2-6288-4464-92b2-b207949b9680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "415dda26-7799-4ace-9933-db08ec8c7c9d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad77d9e-61da-408c-b9c0-ea4cb0efb44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8a9d5c-8225-4081-bae4-5e4ef8d50d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57486859-51fd-4261-8d00-39394ce4d36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2056b502-de38-4197-8636-108147abd643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6126dfdf-d330-4e40-9d29-465af449c391",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99e3516-9de8-4c11-9d5b-39f8c9201fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6039cd-566e-48f5-ae1d-843ecd5c10b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a338e3ec-0058-4129-8d0c-090616bcf13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "674927b6-c8ab-4705-bec2-fc868c6a412a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf044850-44b6-41de-8f69-ee2d1698fa6a",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ba896c-b710-4906-96db-d42d5543a5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5102dd60-fb7d-4474-a344-f79dcd46e2d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b17384a-41e0-4769-b255-5fe69ce9e0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac436e28-c5de-40ac-98e1-e8cda8be56c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b39027-dadc-4b76-ac11-560a0a2c37bd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6deef1a-c95c-4360-af39-9191e9d50719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9383d9da-c746-4106-8348-c0b03bca7670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9369d301-b12b-4a4e-bfe6-dbd729566ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c68535cb-b165-47a8-8d82-195f631380a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "888edce3-0eed-4060-8b16-a1a382ef06bd",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16aa8282-4586-4560-8002-c6545412548a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c938087-e26f-4484-92c0-b8dd91e56f9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb3ab6f-6f0a-459e-8ce6-5c7106133498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffef017e-ca1b-4f4c-a287-27a233610efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff760e91-d5d1-4eb9-ab3f-f3d9bdc626d3",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1604bb76-fbea-40bc-9502-32c8f4d0392f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f09f23c-a680-42f6-a034-5406683c4519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2b8247-8c37-4f2b-9dc7-104ef8161e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a198f799-63bb-4c3d-889e-b1a5d9b0fabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df0169b1-a8f0-465f-8602-862162980475",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91572d4-50ca-4df0-98d0-4d5b8639abef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "837ab011-8396-4712-9547-732e1408c266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9236f5f8-e90d-4a4e-88a8-0142034fa0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5582d2f7-92bb-4cde-aa49-53b97cea389f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29060392-b0f8-4439-851b-aef301f56a39",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8762dd8-ee68-4af4-91a1-7bf2668d313c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab736b72-aae4-4891-a3ea-e5fa51942dde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5a9ae1-0fda-4577-8a59-2ab49ca9c646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ccb668e-80c4-4a9e-bf5c-964f301f54f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb570f38-eb46-4ad3-bc8b-b987bba15131",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3489f219-c32f-49a9-83b7-f0e5499bd12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8b6fe6c-8fa6-40bd-b1d9-f657bd89d3d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced17987-ad18-4f34-af3d-f048fa9ea379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6653e3c8-8154-4ec1-82fe-4b09792e2d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb50987-9f97-4615-bfe4-e3383daebd0c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3f3a31-7911-480c-8a4e-f91b495a5678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a325fd52-b912-41ea-9f56-f35affafe8a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "024e6abc-4cf6-49ca-949b-b4e53ecc1f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "451fcd2f-9a0a-4586-8978-4ad81dc13cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6afc093-2e12-41c2-bc7d-f02b8c01dd9d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a37a29-a004-43b2-bf96-155a2cc7b7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95dff0cc-12e0-4dcf-b2d9-37b4a123789f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8819d55-45f5-4843-b5ff-dbcc0b3e6ac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84389e5d-6862-4f7c-9087-78de188a09ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f398943-8ef2-4652-a666-37c96236499b",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b5e6ebc-4e05-4b6a-b4e0-e502fed470c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38038488-3b6c-4a07-baec-0408a65c9a9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f2ac67-3d15-47db-abca-6ee056e71d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b475b83-a27e-4ded-ade5-ab98fc8465e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d54bb5-12bb-4641-8854-9fedb58d65b3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1db18aa-412e-46ba-b57c-e3b83b891636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba574e82-e39b-40e2-983b-c98579472991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91dc037d-141c-47e3-8b8f-8315b218874c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7068d32-9ea7-4d82-92b4-4c0a7c1a0543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b875db4-2c06-4130-98f1-31015cdd9371",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0dc348-3228-491e-9025-424b3800e8b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9efed9b-b63b-49fe-94c8-d6f969f94a64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e79c88-033f-46d1-96fc-6a3f1428a34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae3fbaec-d911-4401-b6b9-b81500d96817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3f588c-9e9b-44ed-86be-734cc25b9295",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37da4774-575b-4bfc-8a99-112967c3b8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e4ce446-d310-498c-95de-7be8aed18435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c425298a-961d-4585-a984-b52bef100d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "38fe537a-41d7-4440-8bd1-8baf38a7319f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d556a386-1967-4442-973a-9014ecf0b65f",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf04e3f-bcd9-4ce0-ba2a-efa1d30bb4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f555891-5f61-478c-a94c-9232378ac803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a7adc1-2f52-4fcb-a321-4883843489bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9aed7ae-1d81-4267-837d-6932302696b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "125e427b-46f6-49da-883b-dbd300c05eff",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49d3a7e-ce47-4588-923b-64acd9bcaf0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da7de31-9158-43e8-b590-f90cdff5c4e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7891166a-1796-4942-8fed-da64904da2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8998e1b-09d3-4517-96c0-b10d77994b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf83bc4-a5c5-4885-b27c-21402cd45b05",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a9b3b6-61cf-4f57-bd69-4459897e3381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a9f3943-a554-49a2-bdc2-2ffc6df0958d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436dadcc-3611-4e2a-80d9-790083934543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fea08aef-157f-46f2-830b-0fd3e2de987b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3f81a39-4d8a-4f98-ad22-27d91de06aae",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c7830c-9a84-4c46-81e8-c39f4c04d907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb730b3a-9767-43a4-b8b0-fd006b970e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2477c14-55af-4df9-a8ed-94c5ce5bc63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f9ea0cc-5d35-441a-8e3b-64dbc8b06bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22664def-826d-435e-b849-9c957e01199b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0cb085-fdd5-4e2b-a704-342d244fb251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "231bc483-60a9-45ad-8ce8-4381cc66cb3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eff9734-4949-499f-a97f-289f623376f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "92eb77f4-9953-4776-a21d-e230f1460b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff68fa26-bff3-4c55-999b-babc97e663b3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1436ce-57b8-4a25-9bcd-89a41cac366b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbabc302-a60a-4c98-9037-b387512493f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1cef99a-159a-4791-a4cb-31bc4f9776a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "43eea199-f8dc-4dea-ae38-305615bb9f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b92db3b-2651-4718-9841-b11e752241e1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36da30ff-7182-486b-8cca-b7a4912df1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbc1f8ac-c43e-4e5b-a9e6-564e4046cb41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29df760b-1654-4a41-9384-ca7e0450693c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1be7ebc1-d36a-49e9-9e1f-11034ae31d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff5ebe1-88cd-4858-bfbb-55e4b0cf46b7",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f012e5e-8ff1-4bbe-8386-035ea13ad704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a01a078d-2f2d-4830-b174-519c2e7e395b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34bbe722-d773-4943-aa10-64ea313b05ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d7f1208-be3b-4ca3-928f-dedb20d54a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddde0a6-3eca-4fbb-9fea-56d78c282976",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ea4927-d94d-4e7a-835d-6c3354f652fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feeb46fe-6132-4a85-b037-34989194ab47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def77fae-61b3-4ad4-b7b6-4b2e1114c87b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "91db696e-21a9-4434-aa73-b5bea68b3f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613f6fd8-acb8-46a3-b983-8f02d678bca3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebec24fa-666f-4b97-9b5a-7af7eb7e5c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d7ba83-e8e4-4619-9505-1bf5172d5284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279ab979-3e62-4a3b-8acd-d9f96cec4880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e799a6f-7da8-418a-a6b8-cfa343b25eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe70b579-08d9-4cef-87d4-6626763702db",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad2ed26-9475-4fbe-a177-647a9dbec10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "180871a6-e57d-48f5-8826-b541f78adbe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5830335f-3617-474b-9758-bcfba7d80b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "93683fde-c38f-4a35-a4b7-6fc0dfb50aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264d2aa8-7f11-4ac2-9ffa-674b21ed3416",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5431d96-c50c-48ca-a93c-29c2a855de7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ff58942-9752-4c95-aa84-5320fb2eee66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67307536-6203-4cc8-9e30-22393a808839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19253338-e486-45df-a92a-1d984d684c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d854911e-ee9a-41d2-b4c6-87f5e0163879",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc98f752-0beb-4a85-b8f8-35fadb52a5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e10019-2ed0-47a9-9ae4-8e4aa333d0a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f0f3b1-c788-49fd-95f6-4bf40c10908f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c89ea3-f159-4485-85ba-c5de600d502e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd108fd3-2f77-40e1-9ebc-b776ea8e7d34",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2f4bc4c-128a-4413-a520-978295503106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11bc0840-4fb3-45ba-9693-e19f07c3c421"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab9ebfd-c5e0-40c1-b627-6cc6d517311e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dd86a67-2728-4789-8e5a-437f501742ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20300d67-6cdc-42a3-9d04-e11b086461b2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e677854-afbc-4e81-9ede-3db21374701e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6d0dde9-a6d2-41a2-a88f-e98d1a5be8e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0701459e-c89c-49d5-b352-4f44ea06a325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f827052b-a9cb-4849-bc2d-9bf59af1ac64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8517235f-8bfa-43a5-ae07-39276cdc8276",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "241a14ca-15fe-42e4-b195-2429adb045c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38a381bf-3be2-47f2-94a2-c4aa52e23659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342c7478-7f27-4c26-a46f-be00cd63cc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "808d113c-6873-4b08-a52c-3cebdb1583cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8e0fd8-6ebf-452e-8219-b82dd4783237",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54d0da21-9977-461f-8dd7-0ed51ca12901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8db21019-07ec-40e9-afdc-c774163c9af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ded52d8-599f-4f93-af5d-81b3a7a662ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56015095-f0fb-447e-aeea-879b7f43510f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af4005b-3c55-41f6-807b-6bb5e5b16fa2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0971068-a83b-4a86-8092-37c1e1637e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8784238-e281-494a-92df-b3bf4bbb33b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66e40ec-ccbd-45d1-a023-f930efe6645f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8205635c-19a9-4453-bc92-235c15f244a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47add01-37d3-4f22-add2-5541aa4fd3fe",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1440c69e-ce03-45c7-8049-38a2941c9320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdac35fc-c02c-4d23-a8d0-ed0fff414d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd7114a-0fad-43a6-8260-170764c26607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c4e4697-9c55-4ec6-af07-dd28c91f68e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9638d4dc-2103-4204-be48-bdb604efd2e5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db9c2ef-4cbb-4efe-86f4-85f273b2c1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d2a8491-f4f9-4094-a584-406570061740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f19dfd-3e0a-4e90-abdd-d16079c848d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab976c1d-9b13-4f1a-b73e-02ef79ee486b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b9b80f-5f35-4abd-bd6c-bfd7351cdf27",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4a2d39-7dea-4fb4-ad9d-dbc7bf01c091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db3b3fe7-2792-4aa3-a105-497a610a77b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5df033e-5d63-49f9-88ff-f6599174fb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "333fcfc5-8619-4076-9656-0055f38ea265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc2b422-f57e-433e-b878-d39394a73084",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d7ffba2-0379-4495-bb62-d2add564a814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df384f18-4bae-48e4-b121-9b0373c8890d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e3bbb1-abc1-46a8-9e60-d482a2213976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "746c8671-3d9b-4d45-9b36-c3b521207813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40cbb605-280d-4526-93f9-3a6c396ff925",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73fafa8-1af7-4cbc-ac44-ce9a600c253b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dae0bcd-9288-499b-a9dd-380c03710930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7134b407-21eb-4bb4-8498-7bb250daec69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b544fe19-8025-4a07-b7d1-544dcc362851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d8e78b-1e37-4678-9986-7beaf6b02f32",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac79d09-5bd8-4098-8fed-8ef62376a1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d0094fb-d876-4eca-a7d9-54391c134239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed762cbd-c1d9-4222-866c-c8b1935aca9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "794833e0-9d98-489d-83f2-5ccb00fa5b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f588e08-bce2-4491-908f-ba5d8c8254dd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8622f28e-a29c-4aa0-ad75-d530c57fb9f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f555f5e2-607d-4f40-a159-e7f4ed86b445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3799d834-f952-451d-b1fa-2c736a6640d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e351983a-ad0f-48e9-8448-b61fe2bb8843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e1c300-5e8b-4f4f-989e-00620822024b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00deddff-f5ba-4daa-8175-0b7c8b47c1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7bbb431-f133-4cbf-aa5f-315111a32195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e36dffd-e4e7-49d9-872a-3de9ec8ceae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "24476b89-798b-4254-a19a-1384cca0f68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b14034-cd29-42ab-86e8-11982bf97072",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13b78659-ea54-41a1-ac7f-4dff73aa587e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a41382c-586b-4831-a5ff-52a6006902b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd20aed-c802-4800-8e3f-df1bb45d7788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a95698be-de76-4f77-8ba1-27e4274986ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a9343a9-ea95-4322-a40c-6b860d17a38a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239efe0e-e5fa-4702-b882-00aaac1e2576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9f1ddf6-c0af-4148-b51b-63fb7f01b01d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72b1c9c-fd81-4d01-b802-f54c31fa3f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce61b145-6793-4339-9479-b4c0bf53191c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a2d93e-7304-439c-8306-385a3b5cca60",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5b8a7f-2e35-4464-b383-7fd3cb337a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1e6daa8-74aa-46f0-bd15-ae334047caff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5394d0af-ad32-4da0-b816-12eafe4715fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad8788b-079f-4631-9362-dc51003064b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cd44b7-1eec-42cf-b0ad-0b7db9b5513a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315f3c0d-6571-457c-9ed7-d3fe908a6c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dde58a2-021d-448f-842f-a1d01945648b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd1070d-e1f5-493f-8730-250b24773c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed2be5c1-3640-41a2-afb9-737dfc5b00a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b62580-43dc-45c8-b058-43b6c339fd3c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd18abf-df61-4b63-ba1d-b09da678d133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8981f3d-700a-475a-a576-b1581dc84c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576b2595-52a5-43bf-b66a-bf3e8b60822f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f25975bc-f272-47fd-a898-f0607a71851c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d400cd10-dbbb-4324-bcbe-8e836a246c8f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08eb6084-f300-4590-a042-83b2f3d41081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02a8ad0-ec84-4db0-99ea-42f1ce57be3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c0f291-3b4f-45bc-9736-37ccdfd0c3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "941a6b59-7525-446f-8db5-682f490a584b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf5012a-edcd-4c5f-9f76-d2cb4ce3e428",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8dc526-fd80-4378-9db8-d73691f63929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ec0e3a-a5af-4ebc-ba64-c7e549d0c445"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda56916-b64a-4b02-883c-501126db53ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6461494-c35c-4f32-aed3-9bb5c6e9f56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26e6c45-79e2-4a22-aecb-22244a43be32",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a9dc91-5e2d-4f7d-825f-f638380241de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6746de6a-a840-4502-873a-d52d45d2a740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152e5314-6985-4b87-a52b-ddb85ea18f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c46b91a-1acb-49a4-95ea-cd1d325db71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5a225a-e15d-40c0-82ac-07094474f6af",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c144b2-0bfc-4dc2-8522-42fbdb59c99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51931b4a-35d1-4291-b6c1-7b2e1dc7db19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da8d5f6-4972-496e-a528-ce6bff4c2cc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b568162-ff65-4eea-a56f-4d7d79c02505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c65e20df-6627-4004-9169-033de5de2b33",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b433cf09-c9c7-4ff0-a33c-3aaed75a7ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d03ddd1-2806-4f46-a148-162ac4b7a30c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d46a57d7-0304-4c51-b23a-9981efc38e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8c8bb9-946e-4d3c-9ea7-db178e5a7c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd28c74c-265a-4a5b-a32a-eedd29a8d5e0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae48bdd8-7d0b-41eb-bbc7-a2eb2964cadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5637e27-41a6-46a4-992c-2c1034cefede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27dbc451-90d2-4897-9880-c5b9a42bcbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9670a2e-63c9-49de-b701-5e26ec2e2dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29356656-408f-483c-86f9-b77aacd02adc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3632a66f-930d-451d-9ff1-be73f704be6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94228c3d-9e23-49a8-89d7-c4e4e70acdfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730b218c-4d7e-4e10-b258-17e9d17d0658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e33f4549-111a-4b30-80cf-15d972ff3cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a511c533-d87e-4f71-a791-e83fbb5d1371",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2d2514-cb46-43d5-b2f7-3021d2311065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f29f7dbe-9bbe-4dd9-89e4-cb21b62ba808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a356c5-ddd0-4dca-be94-ff7a95a321c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "64104abf-72e4-41af-9ab0-f22d92dec468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adb6e02-c1b9-4148-9acf-aee23ea748cc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b7834f-2b15-41a6-9f48-e32493d76083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b91ebcbe-24d1-444d-9385-3531cf54d1a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb69c02-28ea-4cad-998f-9d1f5046b9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfe10178-746d-4ff8-b8f5-a124469340bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "992436ae-f132-49bd-b2c6-78f73105a3e8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b23dbc-7483-487f-9274-05d5b4067e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4603b713-07cc-4f82-8f91-b0f2969d0915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b92b39b-7656-4f5e-a2d7-d4ba827d5ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a662caf-6ae2-4fac-8d83-0b1002295973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186218be-2c09-4181-acea-db9524c4f978",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d90e9eb-0492-4092-8537-72eda67a0abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e50e24-0379-49b2-8da9-0dd07de9a0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaa9cc3c-c451-4be9-b32a-1e8f08f99e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "69800b07-afb6-48f5-8553-2c72efbb15f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "277d3a0a-2dae-4fe6-8ebc-5fe35dc272b8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c43d36f-477d-4305-a6fe-4ba842ccf563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a620f230-a059-417b-8c2b-bd8f5c6e048d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c489026-93bf-4af7-938f-f11caf38eaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1188f528-6e0f-4c04-9dd9-4c66f81e83bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3096c261-d2bc-4b6e-a739-db1ab36b1cdf",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "999667fe-431f-4949-af0c-50f4db72ca2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca4f8a44-c590-4ac2-b7b6-661a184898ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab95095-5fe3-46b4-9ded-a9760420c6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "527751c0-4da5-448b-afac-f30a97715e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c11d8a-18ec-4504-af3d-9633dc1a309e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "795d9254-aac8-4ba9-bd5d-9b5a231a7a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf4faa5-9e9a-441a-9150-f1c77ad33424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb47b4a6-4f49-44ff-8e5a-2a0d42c4a590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf50f460-68a7-44eb-abf9-78137ed3de7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c04aa09-3394-4e34-ba25-3fde6ede53f0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68bddc32-4ae6-42d1-9f8d-10114d07a1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79cfda22-6363-4f16-b3e2-1cb67c614ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afa1748-a6a5-4c52-b276-be1ac38e7a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "71aaf0d4-e24e-436e-aae5-4858095f7f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c6a283-a757-47c0-be42-5e1c74cee915",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c4110c-5906-4803-96b7-7b37eb9e1086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35876134-46dc-4832-893e-49a7b4de725b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6b7446-0de1-4c3c-b56a-60ec140a62d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "335c7719-84f8-4744-9ebc-d41f2430d74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30430c4-440b-4a89-af94-1be4f859ff42",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "713859ec-afc9-44c6-8d0d-006066e893bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "148ab031-3339-4500-a091-8863bd0756a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d824fd4-454b-4350-9b4e-061fba3fd2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5942e60-9072-45a7-8bae-a391a300d946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806063a8-f7bc-4c32-aba1-75e139b00c14",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83d7769-f608-460c-a2c5-eaafa2adcfb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b4a024-ee48-4d41-98f9-a90787d8efc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003799bd-faef-40a7-b34f-2fdf4a924976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c866633-5a40-46b8-bbaf-8c3abfabdfee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dffa231b-acde-4948-b3a3-4e5587067ac7",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f9a867-e1ac-487f-838d-0821504cebaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3910bb8-e388-4c57-acae-5de60f0407e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9293e00a-4097-420f-9f7a-c0c133c9ca92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b23199b-d9d0-455f-bea4-5fce4ef81f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d33d8dd-c4d9-47c1-8669-c9fd89fe7c77",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e56609-286c-45e6-9e4d-68cce6dc7880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4958aa9c-c12b-439e-ae3f-1b16ea967459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5871c4-06b4-4824-ab5c-bebee1f6457d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c38d689a-2b2b-45b6-9581-aced2c34b469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b521889-7eb6-4c0c-94cd-8e1e4df74aeb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2d4a412-cb73-4bea-a6c9-a32e2b1ee730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9243bd9a-974a-4101-8cb1-804c8398b43d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e00668-885e-425e-b001-f69ac19798c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b968de86-258a-4bda-8337-5622aa3f676d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326839fc-e241-46d0-b1b5-7679d8869be2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e39815-cfa9-40ad-9f58-2990c8dfa0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "443044ca-e912-4900-a50a-f6ea8c190b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a9b75ea-6b90-4481-a209-f9ba3d9b377b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba453e3d-85b4-4e81-ab90-96586a3c63c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913221f2-dee9-4e71-8f2e-fd64fbd8546d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3733896a-b824-4063-b3ab-f420c1adebc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345084fe-8202-4a53-896f-2ea608d6b0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745e7099-52b2-4594-9266-be66353cf59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7a7d5f22-6831-456a-b719-665eae473153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c6fbf28-43bd-4a6d-9fad-e2e25c7d7241",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc141c4b-ffad-4b30-9b18-c6519e8dd0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "501a5ba3-34ff-4daa-8fd4-01658d103e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ae66c4-63d8-499c-8597-02af6938943d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "55bfed25-d0bf-44b5-aabd-923cd3592fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a629e0c3-fcb6-4298-b977-6b6a5c342926",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17974b64-de25-49d7-91f1-73bc0867e5a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13de68d1-af92-4a5d-8216-9b1fdb429f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9011d5-42ba-4b39-b500-0cc5567a26d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9d160db-39a1-4167-ab5b-98d1ead4ef5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a984125-5aa7-4845-a0d9-16169501dff0",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47fafaa-555b-41b5-92ef-896c351453d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42de4412-b5e1-4488-8c9e-636fe62e7da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516851b3-4630-41d3-8a4f-06f6b5cd2a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f747508-b6da-4040-afca-dcf1ef6bb36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71d76e6-5e55-4a8a-99aa-54cf813e68a0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "931f2bd4-ce69-4149-820c-062b204d45f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "596909d8-0262-4c59-95c4-8d1f48d9c416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439a528e-c007-480f-8e16-b5a985d61b19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9b71344-376e-47dc-9a1a-aada864ba651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca64e87-f337-450d-85d5-937ac74dc981",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea23814-ad1e-4907-9542-7870c782a4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dd8959c-0bf2-4eb6-992c-65f3afc28a3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b813bcd-60ea-4320-be3a-44bba7cfe606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf3c3444-03bd-4d20-a7e3-d8c96df43267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc55a236-a37c-4a4b-9ea9-09e82a6eeac5",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c51e376-faf6-40d5-ba9b-205eb7c359ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "541e1184-2dd5-4510-b40c-827305bfa951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "463d1222-157b-4558-93e5-ee13890718da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f760128d-1af5-4dc1-8b8e-03732d82ac4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5606dcd3-57b7-457e-a85b-4b4daf44387e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8e335a-5268-4db6-a56e-235466144b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "747ee89b-6d0f-44fc-89f8-18c893d74d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe6746f-e93c-4417-9fc9-46423e4a4539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "154730d7-d9a3-4135-b6c3-bbbabbccc0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77bc5451-37c3-4c77-9c2a-baae743d1d2a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7bf0a75-b87e-49a7-92c0-da6d40df0af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe600d0-01e8-46d0-9a7c-2fc8a9f210b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e258aae4-6e0d-4254-8cb0-c5f8a7689537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82671598-ac7a-4b59-9d6b-4268cae36305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21eff4ad-50ee-459a-a69e-c7446a6bdda4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6e912d-ea36-41e9-9678-d00f18e0a253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0bd3be4-6a73-4b24-a779-97fee44bbf2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b792b38-c1c6-48c6-8789-b0a8ab1d4303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e82bd1b-33d7-49e9-807d-e39298ef8a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573d9e20-eac1-4c48-aea8-7c501b1472ed",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94053582-c771-47cc-8065-b166b7960122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d30c4a2c-fa3b-46ac-98fd-37e07c9c2e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd69b662-e3b7-4f70-93f8-b90731d10c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ba41c76-e117-4485-9041-a692fa7c2e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4073e403-c8fe-4b17-8be6-acf35793545a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c6ea87c-9e6b-43c7-90f1-26a81b12296f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d17003-90af-41f9-bb46-bf29b59a559f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af410f2-aa0e-4f2d-9199-4a32570249b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "027cc32f-62e8-45d9-b86d-df158d1c2892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f0cbd3-af41-4e2a-bf68-a161baaa65a5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8be15496-5c96-47a8-ab8f-c126e467ee0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c548e5e-10ae-401c-a1ea-0eb67d54f743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54fcd62-062d-4d23-87fd-38f3cba54655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0851a7b-8f1a-4a5a-bec7-5cc8f947cb16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa995ef6-73e3-4932-898b-bdf58e122ad6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99bb99e7-1c48-43e2-8cc9-81e24cc9fde2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eeda346-ee5d-47e9-b4f5-df98eda76a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31bf6aac-8ed3-4bec-9483-c02ff6c45c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0244f2ff-6f28-4b58-8857-c498be7242b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445d5101-d98a-4f5d-8c13-d8889df9fe40",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da2132e-48be-4786-9953-3a25af6bfb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8072ff73-52d4-4483-a972-d44ec29d3508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19c4802-cb4e-4f59-921d-74d89444ac7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8719f5db-a7a4-4e93-a083-7018c0e2c595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014ca527-a8e1-47ac-af0b-2d2f92a054c9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4e80b0-d518-4e0f-b85b-4342c6a866fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7822fe-fb6b-4988-bb56-5ab2f6ce737f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51db8f16-9bce-478f-8792-f4344dd0009f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e01c8314-5d12-4c84-b03d-996a961ab12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd0effeb-8fd7-4183-a960-e93dae77dacc",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33bd880c-7b35-43e9-bd63-9a02d5b82526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4ba04b-186c-4546-95d4-9b137f3c64a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab450c4-41bc-4715-a8a2-4e3921bc9a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a92f23d-cc36-4d49-ab9c-a38e714f1de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "077f2321-efcd-48df-aabe-2d7e9ed82c1c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d7fcf5-a5d2-4133-abc0-abe9027382d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "230b804a-d44e-4a0f-b4e8-08c470f00e30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927c9912-6a30-411a-bff0-a23ef239e388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff85674-462d-4ec8-b0eb-21e3b2bfa9cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3e92d7-db50-4266-9d49-ede2781e668f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "094215af-a5b8-4127-9864-7e9feec08404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "81a95f74-3f42-45a5-a136-6e58e372b519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef6a4e9-7b46-4042-945e-17c92c50b67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "223676a2-15a7-4368-aef5-afc2a8dff605"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f6283642-f371-4e34-a051-93a87677d0e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4a09fbcc-0b99-4445-8268-10cf084ba10d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4be972-85ac-4764-844a-eb1c0275a851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7f32d1d-e500-4508-a4ff-8827bd1627fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd24336e-af41-4bb8-a11b-bbeca1fb42a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae0e0628-a4b4-4ac1-a9fd-65483e87d144"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1666060e-e5e2-4e1e-9ec7-85bd6dd5d41c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dfa9b389-78b0-4e59-92d1-96e1ac6abc03"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3ff5266-9ce7-4b33-b950-fafbb19c3e41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e84213bc-d375-4533-ae38-c9ef84aca7d1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "805f6278-bf3d-4d87-b34b-8104f3080620",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c418fdb6-b2d8-43ec-a89b-f3d5d627d1ad"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7fb421f7-a8c2-4119-85fa-5225462dc77b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5f0fcf3c-9599-494a-8450-4150e077cabf"
                }
              }
            ]
          },
          {
            "id": "57ceeb48-b2f0-4b27-aa39-2835dd60dc94",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9dde816d-5f4e-4b64-ae21-6626f103b98f",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "c23a5931-447a-4952-b732-63e04f748b06",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6e736e-f942-4947-b3c0-fb8806387b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "55cc68c0-44fb-4f11-8475-3d311cc32c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140a9eab-d1e2-4ab1-8de4-bd036de23f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa6bc104-80e6-483a-b2e2-b105e6a1806c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d235e854-0c88-4420-8626-85cb10c61a1e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "60d0b5e7-79d5-42c1-8be8-661bf81c4bef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "175e4755-a771-4d9c-946c-d752db815d8a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e742a078-0165-4759-b199-9cb63358ee70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2cceefa3-8bbf-4e34-8ba9-93ff6aaea703"
                    }
                  }
                ]
              },
              {
                "id": "5f1efeea-9182-478b-b9b8-410a83ce0567",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1a1a46e3-d5b5-4648-8d70-818003c6b4bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "def6b70a-857f-436a-9099-d57e3953fd34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "196fbafa-da90-4d46-a45b-fce560b0aae7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "59491fa3-2cfe-443a-b35b-9a7e318a5959"
                    }
                  }
                ]
              },
              {
                "id": "ac4fd46a-b5f3-40ae-8b23-f4d1ff52e242",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a562da6-006f-4fcf-815b-0ea245ccc9b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d0a6d77-77d5-4ebb-8bfd-ce04f0218027"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7674964b-3235-41f9-aaae-490b658b2d4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d39ff9e8-5c6f-423f-92ab-aa8dfeb75538"
                    }
                  }
                ]
              },
              {
                "id": "1beea5b0-91dd-4f22-aa76-6f980acb267a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0412c410-1b7a-4199-8adb-9e0ee6863431",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "00673d77-341b-4472-885d-0464d5d57a7c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb5ffd6a-ee82-4ec1-af9f-fab6f68f5200",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "15785fe9-a80a-4fdc-b90c-24a9844090a6"
                    }
                  }
                ]
              },
              {
                "id": "c45ae3f1-3fe4-44c8-9e9b-32527626f83d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "818de2f5-257e-4446-9f62-d5950b05a6d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5fe53e49-aa45-469e-ab7c-104c584a3a3b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99a6d98b-3d02-4b18-bcbd-9d2aef910854",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f6eb7161-a82d-4ddb-bc6f-9cb43562f124"
                    }
                  }
                ]
              },
              {
                "id": "2bb9772b-d059-4ba8-9c8e-a567dfef53ed",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "06787db5-c391-4dcf-a3f6-5da496885301",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9882eea-551f-4970-9b1d-2454c874052e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cea56c60-999b-4593-81e0-a0b1566444e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ed78b64d-b245-4c9e-a8af-b9f36e32bd2c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "802a2a8d-a05c-4cc3-b347-ef97b8626016",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "70fd1e7d-efb0-4cba-bcc9-c55e06505079"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5d8c1573-8896-4449-af26-452ec853d8b3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4a2e2ec9-9089-46b9-8c8c-f58d3d073797"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7e695b13-bcfa-425e-98e5-8cada5d27364",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b095e0f3-c937-42af-95c2-d7c2404f4b39"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae8790b6-bf1c-493a-9886-6292fa687413",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "806ce0e6-f4bd-4b26-953c-22c8428e0005"
            }
          }
        ]
      },
      {
        "id": "b542679e-9075-421e-9a0d-980a7096c083",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "69f7ff2b-bb0c-4173-b524-345ecb80ef03",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e0993a43-fad8-40d1-afee-8fc95560a243",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "88726b1b-3da2-46b2-9a33-55925a073579",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f81188-0020-42f8-bace-57b1286f4f22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aadbfb8-11af-4eee-86b2-01b40a0ea67d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839a7879-e3c8-4ca6-8497-644f05027d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "50e6e11d-7816-4b3d-beef-3e1a08b0eada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba630b22-c8ff-4cca-857c-c4d5666ee0a5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9d383ad-3170-4b89-a6a0-b466ac1dbf41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6efc63b6-059e-415a-9347-2425fadb7c9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ceab6e-78ba-4274-91ee-4c48b2d68404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "10159c19-1c84-4ed0-aed0-1753c2d3fa51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25f456c1-d233-4b7a-8373-bf81e93065ab",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7018df07-2a00-4d4d-80fa-fb3f064941d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0feb91e-c008-4fbc-a03a-b50218642d65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72423f0f-d733-41c4-9bb5-31833801b5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "247749f7-2247-4535-865e-a2ec4cea3261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa1c7ca-1ca7-4250-b537-9b014b4353be",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfed6c4-2e8b-4bd9-80bd-f078dec35d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92bc7df7-1bc1-490a-9064-7c2529bb9279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0863ee22-7b2f-4e51-9751-316d8a6a79cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f643b7d2-04ed-4fd8-9dc6-703a7ca664f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d26e85c-e04f-47fd-9190-e34ede461424",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cbd220a-3177-42a0-99a5-6685ed6db95c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b7f1e7a-95bc-43cc-860d-0e76791d3266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4a4ebd-0228-4349-880a-b3bcf09181c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "47e7c287-28ef-459a-8a35-99695e7d4b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb7b465-6635-4318-8f15-98c1e1988162",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "685fd21e-fe5d-4b4d-a8fe-194afdb5e43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c7f419e-505a-4b57-a4a7-1ef02f160eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8a0dc6-ffba-4567-b9a8-73f6d82780f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "73da62c8-1205-4596-9496-bc60ecfcc2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a44a441-53d2-4ea7-a559-c0880588bb57",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c7ae82-b116-4115-bf0b-b4847cef77c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcfd1867-4f87-44cd-9ac5-c06cee163852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1486bb95-5a87-446b-a557-c3f5c6b37015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "07912847-792c-4060-9a30-fd9da9069689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ba223a-58e5-4ae8-9191-e0242ee22e72",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a856f22-1432-4010-874d-3e7c39ec7f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "169c54ee-efac-42e9-a335-d0d106ef1e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2293c2f8-2dd4-4670-9079-3424b79c0b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb54462-8042-46be-ad4e-6ceb15305097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c77bc6a-3ada-4976-9090-c19071cb54b6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d247526a-75bb-4a7b-990b-e543f459394d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b17b04-cb51-4339-8a24-ef6f8396d144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "984fb118-c372-49f1-b9ce-b8b62ac52286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a74a599c-648e-4ed7-8716-e9971626cfa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1e6d37-ecc9-4b4e-82de-646bf948bebe",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60238a9-f846-49d6-ba69-c13fcc011e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db592e94-1f00-4534-8c12-527afa0a1ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9abced-a2a7-49d5-927a-f7ada6202ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07ddfe17-c6ce-412f-adfc-db6af1a89113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce91e128-a6a6-4233-8353-f1f2ec2c58ee",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac68858-8b18-455c-b3c9-4ef3dbe9d081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76b87a63-2077-46fe-b986-32a724d5947d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c29e7cc-3ab6-4ede-ae1e-c22e40f68c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e85ab03b-a7d3-4d44-8c15-0a5de5c94014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3760b738-1b02-491c-88b4-462dacbea87a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac8d67e-7446-4690-b582-015c96442ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "444f41c4-f274-4329-8948-d69942b12489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dec40cc2-811f-4bb5-811c-9e318797511f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4aa5e51c-bf96-49a2-92f5-fee6a37b4d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee89587f-3d52-4b51-bb7f-52efda58b557",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce38ddcd-bbe2-48a6-952d-ec31cde87e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40490e72-389d-41ac-a1fd-b8d680b2cbf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e03bcd-fff8-406f-b50b-7323ced31c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c0a6e40-d4d4-40f3-abe7-ba281a230dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d0bbe9-fb34-4eed-a0af-1a659776fc53",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8684a42c-19fb-4b52-a814-d58a9aa1d310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f6a254-9e23-4da6-afd9-7f276b60e920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e5d84f-94d9-410e-a33e-46854f87eba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "eda72cfb-bec6-4f2e-b038-0905df16db5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630e0440-d274-468d-9a0a-26e6e087975e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e262c53f-eb74-4cc7-b586-d140a5c35add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "636e13ff-f45c-4481-9a62-b0e19b702316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286b4aa6-cd4b-43fe-b1d1-7593e31170ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff3dcc91-bf9c-414c-8ea6-d812ab858e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44206d84-6fce-45e4-813e-213c2345851a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9f3b94-44ae-4001-ab23-95a43f04081b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c87005b-d965-427a-99d0-6c2adb3ddd43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7292ff6a-45ae-4956-8a1d-65ab419af3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe9f4f51-1c87-4fd3-bca8-120d979b8915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87b1a385-9734-4dd1-98de-b70efca5f849",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8999f5-a819-49ec-a34c-606e56711f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf9b5d70-4de2-4ee4-a4ea-7532dd067684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec79fe4-6d79-432f-a790-02c09f3009d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "65409fdf-41cf-46a8-bed0-567d8e4b7928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a31eaf-c55b-4cf1-ba0c-19350d04e91b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667bc729-ffdd-434f-b9dd-a066fffe5f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0fb66ce-f7dc-44df-9f37-f5c0c7322874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4254d36b-83d4-4cf3-b5e5-173a0828e8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "74318196-35bd-45c0-b83e-345a5e0fca3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f948b1f-ea3f-4a2d-8b1f-30e94357d1e7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1529e8c4-947d-4163-b4f1-be3df0eae2d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7305a449-a48b-41a4-8d30-4ff14996e4c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6247c1-9a53-466d-a37f-8f350192335e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc4a623-f6f8-4b4b-bac3-2bdbd287f5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa502c4-f9b2-4acc-8895-50f1703db2f9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af21f16-661d-4a51-a74d-1706f77a8e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "348cc052-0446-492e-a5a3-2ede17b4fdd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1952f7-438d-4c23-b709-bb6a22409602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c895c36-5136-4d90-9171-c7bf7a4b52cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ca4fa5-1b55-455b-ab2b-2e2486ca8dd5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e7d974-85c3-4b98-afa9-68d507e4e6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b561fb-9933-4b76-9c05-620fcf9e06ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c0878f-3c99-400b-b14f-8bfd3b5903d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f49f26a-9e8c-413e-94cd-e5cd0a96d4d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e89c36a-7c18-4e1e-b95e-20d64ce30915",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "594b642a-75d7-4e29-b40a-23d95b6c775e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "896d1fa7-905b-4aa8-b608-5056f3ad00d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2359326-94e7-4d36-9840-0653a6a1aac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c54b2fb0-aaa9-441b-a062-e441c7d903aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9acb70e2-2133-43a0-ad51-ce59814442fa",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e70c6e86-4fa0-43ee-be41-43fbf58bffc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d7635fd-14a9-4a51-875c-d3cda9306fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b525174-7622-4948-a1e1-09441a7724fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f3754c-c239-442f-b180-16ab26d00b6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b45af09-46ba-4fb5-8558-e7538eb8f1a2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a43c67f-f813-4642-88d1-71ddb2117e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044d1315-2b47-4fdc-9bb2-3bba38e6111e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740b5827-7ec0-433b-abe4-f67805272a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7cde70c-83cf-44cd-bede-98953b5136ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9738c09-f3db-4544-8d1b-d6037cd7ae4f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f3b3b5-f438-4d19-a51a-1f02d4339f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a54279-cdad-4f58-9edc-fc3602b9d734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b17dbc-8cab-4658-8f77-435c01ded3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83268f61-609b-48d9-b6e9-a87519077a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289cb7a1-39b5-4638-a85c-87f8434155c2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ffa9f6-da6e-41c1-b4a4-9d7901532cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f64c462-0a9e-47e9-b451-a36389bfd971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e093b9d3-f8a3-4837-b186-f53e0e41317e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5989604e-5873-429a-8cfc-3a2c199d67d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "332cb828-ae2c-40e7-83df-9692b859c2a0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735b9920-9503-4ed0-9a8e-c4255e1d7ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb8db34-2eea-4651-83c5-46f2cf151467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da30cb49-7561-475c-b68e-01b9424d66ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "076f098d-f6c3-4922-9c82-ac0fec93a8c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b8acd12-9a4c-4aa8-9975-21c5f820e66a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71841e0-eb58-4027-9a63-eb06ab69bc9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a8b79bd-c9d1-4414-a0a0-faa007d7de14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be79cf54-791a-459f-96e1-54c3b06ed9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52302774-6318-4d9d-b5d5-7a2dbae83a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91e56bcf-868c-4849-b9dd-f360ea728ee1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0602f56-cf3d-4308-a7dd-09a76535950b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec85934-f1eb-4c66-93bc-ecc97e95116e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b082fb77-312e-47d9-9bea-0ae5ca993275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b135df1f-9ba2-4caa-99d9-e0b9d5c0d8cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c849aaf-2ba1-4a7d-b629-a38c0fadb18f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3eba43-8656-439e-95a0-516490a7fdcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69dc0967-9e5d-48e8-9788-df65a1d471b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418824ec-3160-421a-8f45-774ae79228e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6098d6-1d73-4c01-9650-317f76710db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b39365-9955-4bc7-b262-2ba2bd153a61",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf83d50-3dd0-4d92-96e3-13b5abc8ea5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ffa1284-252d-4c92-b8eb-5c959f0a857b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "413a96fa-c365-4830-8927-77e924a0de8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d7c8df0-eb1a-46e0-a22a-cd4f37befa03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fae9507-4594-4874-8085-326820fb4fc8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a552447c-325f-4e2c-a28e-b10d1e7fae2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a924333e-f168-4ec9-8f73-cad874c87991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b048eb7e-3708-4ca9-90fd-e870c0a986bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d87b4dd3-9a6b-4c2a-954d-fd55619c59b2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6df1bed8-34cc-4c87-97ca-8a2c052df59c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4d3d48d-263f-4f75-8a30-b65fad0c1205",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0daac996-e2da-49f8-89b7-bd953cf4201a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d59a54fc-dda2-4ee8-8567-58551dccad85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49fe2e8a-e522-4585-9353-28bc7d97bb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a79f9e0e-8c65-4af7-8947-21def87be4a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60c8fee3-7ac3-41ba-9f31-811fcaec2e30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0d4aa0e-8c37-4296-9044-84aa6d41d073"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7e0ed19-8705-497e-9e87-c68789be515c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "564cb4e5-36d8-4294-b876-869864fffda4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0213530d-00b0-48a9-a56c-48544c3df1b7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b776cee7-f29c-425d-af23-ce667cbd5245"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "feb12610-67a6-46fc-93ef-a09090e14df4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc58efb3-a956-4eca-b130-c2567742f8f8"
            }
          }
        ]
      },
      {
        "id": "6a35d48e-4c2d-45af-802f-c619c29ac238",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "50127494-5a43-4e1d-8084-f7154f8caaaa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "961f0f81-6e6e-4e66-a852-3c839f86fb71",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a652049e-5f6b-45ac-a41a-a8774c470312",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "113af847-24fc-4225-97b5-057d578c888e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5634b74-28f1-4eb3-9029-3852a6a32d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5db6f5-53ae-4375-999d-fbafa6e1600f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4af8ccb-386b-4346-a69d-67caf9b7cf03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3fdf1f-4fe9-4b2c-bbd6-d8ab5c3fdf81",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1368e2d-6b60-4bb7-af9c-4da34861f1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d821062-46fd-452b-9cbd-06318c86566d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a70718-e820-4978-84dd-6f3075fc1b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3be12ff0-7e0f-498f-867f-b9bf7dc4ecbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f90522-129d-463c-ab7e-2472dd5dfb3f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a8c24de-417f-493c-8fda-5185e91f8209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a987b2-7daf-4962-839c-3c7bd953dd4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912f62bc-2bee-45f8-aadc-3943eeb54cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c27eda0-ab1d-4fca-b906-f5aac480cc64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7928fa27-6dac-4bbc-b3fb-6cd4db25e9f1",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df25becf-511f-407c-a69f-00e3311af065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deeb2b86-0e4c-4f6e-96b0-ae39a8eb5f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913c405d-49a0-4f8c-9aa4-ea0601b1abeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "caec94e0-b85e-49a1-8f6f-81ef5f5ea88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25920b00-87c9-4e10-baa5-d82db5c4f88d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e33ba0-02f5-41f2-95f0-e2d2b124b99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c72d28-876a-4be3-9166-e511e29ddb2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2bfcbf-0a3a-470a-9bbd-b41fa491e737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf52f3bd-6883-4d63-b95f-fbd01cb59e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a6093e-4997-491f-8ed2-82bdf4e1aeea",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3d017b-b014-4746-8560-fde95db88f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32726ba4-dd20-4f75-9c6b-ac995aaeb7ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7ea62c-3dc3-4205-a66a-ce141093c08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c447eede-8877-4c96-b8df-fe812f9eb73a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de1b3c4-ab5a-438f-98be-d8cbe559539c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817bd83d-73f9-4bbf-a4f0-f42818768c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4fff96-dc83-4501-95a6-5ea63e63a0bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0365bd-d357-46fd-b874-ddb321fbb6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a36c3271-36af-48ce-9046-ffec242054f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe86fb88-3dac-425c-b9db-e0be5ccb87aa",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "484fc98a-030c-4cef-bfa8-c3d10a127ef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98361eb0-5429-494d-a9cb-b23475d24239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b738b5cf-7d91-4983-a7df-715aa5e67e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "232ace88-eefe-4cf8-b771-c2465d7edf16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed946a46-583d-489f-9f04-e51c4f74a474",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ec19e6-62e3-41b0-a647-786db3bfa502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec90b03-3eed-44ad-b139-04f3da0460e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166330c9-ca87-48bb-951c-0f2542dc1a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b7ce0a-5599-4ecb-adca-e5c6444a3740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6dda99-38fd-4066-9191-38f36fd5e60c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf859423-8f11-48cf-9dc5-5647f4a02e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9313cf8e-5766-4a4f-af1f-0134a738ee34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af27082-3447-46a2-b8bb-8573fd31ab98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d39a3a5f-fb23-4517-9759-1412d4e3f347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ade0660-8952-4556-987d-57cd29f30912",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbaebf49-1065-4369-85ee-3f19282bc8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "186e07b4-89e0-4099-b25c-3a2c1ca9048c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0fc0bc5-48b0-47e3-bf21-623172ba99d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0fdae27b-730f-4a7a-b499-9616ba79901f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67465edc-024e-4c32-86c4-b12bdcfb2b4f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "860e052c-2cd9-4c05-8572-efdcba9fb3ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "246526d0-f7e2-431b-8f80-e0a7fb124c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9357e9da-bd59-44b7-a15e-23a36d9187cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "edbb0885-c6d8-4aed-bdf3-4e853230aec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e3f2655-0f30-416d-b428-67fd4d9d44b0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a967e419-72d6-4438-81eb-64cb8a3d72d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744d68c1-defd-4a05-a76b-e8dc93255e9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d960a9e5-c363-4121-8a36-58085060522c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4261a18-3969-42b4-b14e-ed6ae27688c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a01086-8f88-4023-a01e-aa3826af21a8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813c8606-49ff-4860-99f3-d5b852cd5df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf6def1-76d0-4020-98a1-b5bc076da935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d1387fb-cdd6-40d7-a9e2-28ad75ada351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8baac5e0-fd9f-46a4-9989-b73e30da7a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44eabc48-d281-4f02-abdd-c22cf9165fcb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4355ec-196a-4b37-ab40-605dda16e9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3637f0d-003c-431f-bec6-1c6785212d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74e261e5-b4b3-4a8c-9d55-ca93d82a8778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f19ba02-1ff7-4a25-ad39-934cbddcf9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320a112f-fdd8-405c-b4aa-886236236788",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "478d834d-50fa-48e8-a137-974eebc0fcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c42bf507-d1b9-4818-bdc6-fb303883eb53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a556a2-8d99-4169-948a-ab5d90788e4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea91d7d-45ae-44cb-9cb5-8dca41f668d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a87414d-3331-4771-bf4e-2809ed562681",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81cca53e-b2f2-4ff3-9479-a043880c6465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9bf339b-b47c-4f18-8905-5d629a760302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "511115f0-6b5c-46b7-8b54-dd38be339d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b91245e-7b20-402b-a596-de943c0323bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84853ed5-345a-498b-9acd-dd6f78c5ecea",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3d3e2c-dbe0-4ee4-8856-a14ee469f7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b778a6c6-fcae-4c23-8755-609ce18b4639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6136d1c-0659-4e8e-82aa-9d6051b0a2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed948141-0674-4111-9860-2328600ef9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73362670-6ddb-4925-aeb1-44213fcf78b6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28f5443-46b9-49bd-ba8d-c9cb2bedd11a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b3a2b42-a84e-4e70-8c83-9f06e1432d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e83d70c-31cf-4372-8320-bcd86d487a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79b44db9-b3bd-4987-9067-f065c7cbb5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb255788-fe68-4cfa-9dd0-5d14b2de844a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06f340ea-119b-46f6-bf4b-5beb29745c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "698946cb-63f4-47b8-9ed0-fd9cc5e64567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a18e5f-b12c-43de-a7a5-9e318f744250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "452a8cac-146e-478a-87a6-c0a82e478039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761d75eb-0778-435d-93d4-492d80a721c1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9735e283-3d09-47f8-bea5-66f89cc13ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a188867-e239-4606-823b-6a0161e45532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deff840b-9b52-4f62-8275-f083d486ce3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89b3981c-60d8-4115-82b6-a14a1f7f1f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e8d9f8-1df6-4b4e-a730-5d03361d3e5b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf0c1cf-8c2f-4f9f-97e8-32e1a5db61a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded3a832-51df-49dd-b855-b79e34999888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ccde7e-c8ff-4ebc-b7ac-5a8dab318b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "376b1d32-f469-422e-814b-98f17d8cc52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284e6728-545b-4c33-8320-0fd54d88bd4c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c5df41-769d-436a-a04c-24e3e6519626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a799b5e2-13a3-4445-af05-d35e188d5584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a856520b-f6ef-48ed-bd2a-5cb3d9256301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7206463-d332-4b66-ab7d-38484dd74eae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106bdace-8c8f-46f2-b1f1-1b72d90f7510",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e6c2e5-b3cd-4edd-9938-2a4e7c224d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "982edc5a-2638-4281-9533-290c509511cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "debe93c7-d25f-4563-abf9-0d94a5689b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40451eeb-acb2-4bd6-bab9-4f169a78791c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec83447-d8af-48ec-b821-9dd071c1f819",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9ebea5-536b-4dac-ba62-b12ba0d3ea72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5689adc0-ad13-4feb-bc78-d017bdf3038c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a67fd5-a107-45d7-aadf-753e4aa35e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "390b257d-48f1-4736-aaa1-46444214dc87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f00a8c9-fe57-42f4-9349-90fdcc201c2b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69929f6c-4b33-4fd2-8019-5257fc2b66a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c99783f-6274-417c-911f-46b9316b01ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3eb41a9-9de1-4cee-a0e5-d0cbefa7bbf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1be21d12-b126-43e6-bd79-df910989a249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aad35fd-3e6b-4cf7-9065-183fac637494",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d171c950-644c-4ca5-a31d-00486f366c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76ff2bf2-c7a9-4bc2-a1de-06b653f7e799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f233df4a-3afd-4f04-a879-77ff9d350146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6595155c-a08e-4549-81aa-aa722e846db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75540884-a8a0-4ae0-9787-c1b8e210f51e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070db6ce-7e22-4258-a9dc-fc4799be65f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0571835-275e-450e-9474-29d827708828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9268ec11-96f8-4e24-a961-0a2ba66c5a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b6ba03-3234-4152-93e6-d0e66aff719b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d8a90ee-0ef0-4a2f-92ea-ab840ec1ebbc",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be82528-2019-470f-ae4e-3f2e2dc1c222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff9515d-0926-4769-b212-04a2aa5958aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a31c88b-9ee8-47e9-bd6f-6159450ae323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "61b60f48-9a9e-4b5f-bdd8-19603fbad446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3c2ab5-2540-429e-b73f-3d8cf2326a39",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca53448-bcdd-42ab-a574-9cb44ee4c375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e26c03-0914-4af9-bba4-e4a8df44871f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49342f8f-780a-4e11-98df-82fbaf0301ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e980de0-be3b-473c-a82f-ad43db1a6ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "070d9405-f4c6-4b7d-8953-5a759f1e9579",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe34d99-e250-4e20-a347-972e66a40f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4d78d91-52b0-46cc-bccf-0bc5135dabf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e9f594-1d4d-4cb5-81da-11c59c1199e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d6cf2e5-04de-4a9e-a03b-6f6d6d8464db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448387a4-47d1-4eb2-b3ba-d281baf25678",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c2ad13-8f0c-4173-bb04-31d1ca3f6da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c268b8-71d2-463a-b22d-002d4356a709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a4b44e-c5e4-4b44-9bd2-20d06d12c5d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dc60984-d1cf-425f-b0fe-b6d61e09c4a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681f1e06-b05a-4dbd-89dd-004f073373a9",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6c00a4-d2a4-4c7d-bdbf-306fe29e78ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4b2117-e8df-4797-92d9-c56e008c69ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61dd837d-3c27-4933-8084-bbbb0d1a6909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f29666c-51db-47fe-9049-39757b055427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb58392-b5d6-4c59-a9f6-73b7fbc75e7c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42d87c7-86f6-4210-94f3-5cdaa7f1a8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "921d6964-2c4a-4783-9423-de2dc2e295d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bb42b0-65be-4af9-82dc-25a5011144e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4744b48e-f2f4-4ba1-8c1c-d185bd0f13ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6cd3750-44fe-4468-8b05-7d9ffcf8abe7",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e47f5b-50f3-47a6-9160-43124ddf7b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a591d5fd-9582-455e-831a-8b722bbfa5de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb98b02-cb50-4ed4-9cfa-055451b330f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "116a31a7-37c3-420a-a225-76bc3e914cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ea6f94-53df-4bd8-b956-7c86c76f12f8",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6cd480a-29c3-4d7b-bcee-3843b5360ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0a475d-3744-4692-b8af-f59834a2b307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ef3ee6-7e59-4b6a-a417-d0d018f69b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b46d6653-15d8-4cb1-88cd-c31fcfad0bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f274b383-9b91-4410-98b3-356f3aad0dd6",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3177415-d5ac-47f2-8ea6-71572e927fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e8b8138-2961-4a61-9dfd-d7371ec15c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dbe9fc7-0f04-4c34-879d-13b2f693633d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb2d42d-ab53-4707-bb4c-4d1cb2f56c0e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f2d84b4b-373d-4c8d-b1d2-7914af667532",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36f5f932-7a8f-4605-bb08-4d1d6234c25a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbfa68fb-dc39-48b4-8583-89e0c5eb5897",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a2af6981-e5bf-4176-89ed-04149aeff3a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad937697-e704-4899-9d6c-340ffca1d947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16c528bc-5bc3-45dc-a5ce-7ab61131186e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "410e39f4-0b77-4f82-ad25-f84ff2e7a1cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58f7f2d6-d351-4779-aa1f-519df85d52fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e2546f9c-380e-484f-8e61-5bad9e6f2c7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08d6e3ec-af9d-44bd-bb52-002af87596bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "494ecb24-bd70-4f10-b6ea-6e4a6dace324",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "db6d52ed-d59b-4a16-9516-db435eca0e79"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c96ff81-7bc7-48bf-8b92-1e8aa701d4a7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "febdbeac-4bff-483d-9937-63ff8f17c056"
            }
          }
        ]
      },
      {
        "id": "3ef95982-96f7-4ceb-8bb4-dc9e4e020f12",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d17217c3-b127-430e-a125-3ae999035b22",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e2b5e262-a3a1-4b0d-abed-8e30d7293be5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "05785740-929f-4815-8c0e-1fda73873383",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cea87a0-d04d-4d97-b9ec-e57f517f0ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56da98a-b401-4ba0-a633-c466338c6bf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca22b0b-89e5-466d-ba9b-fe4452734654",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff242d7-6c8f-4f4c-ac84-086966ef8f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12b4443b-b496-4a12-9487-3abd39d72c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac994fe-0709-4918-883f-cde72c90ff82",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619985b5-14eb-42ee-9506-39826f404875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37d2d0d2-993b-48a9-8d94-e7a04429ce41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce74347-b7c1-4f26-b8f1-0a0d36ac380a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d49c212-30a1-452f-bf8d-4f55975b02f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197079dc-ab87-4a43-998e-62e2584c2325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a77e9c8-a18f-45b3-8a7a-3de42be1fb96",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e50f2f-4613-4a13-9e5e-86b714220133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45203b3a-9dcb-4d95-9ebd-99f5ed294b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c708d2b-c10f-49cb-b119-4605d8d79e90",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd292df-b188-484e-9280-ed1cc3cb2b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bdbb153-973e-489b-8654-c6d589bada57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "553d5167-b60b-492f-a85a-6365dc33b722",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c4b484-f6de-4869-8a89-56263fec2a20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f2c478-4878-41c6-8ffc-dec327e929e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e912ec-654a-45a7-8260-87216389ad67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064077d1-9eda-40df-acf7-53146dbca836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58bf43f-6faf-4e69-b892-6838b9b2e08b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff0841c-38b7-43dc-aafe-bc694a1f03a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f13b2cd-019a-405e-930e-331cb0537bb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f349014-f806-45b5-bd7c-ffc70a47f3e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbce36a6-d1ba-4764-89dc-712995d1fffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93666473-5d3f-49a0-aad2-4dd42e9b807f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560d905a-8b14-4ac6-846e-8cb8927bc1ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0170a81b-ff87-4527-b32b-ba3d0a19a276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dff7a63-bd81-4e09-ac11-5d2d0f3cbce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d60f227-1056-47fb-aa8b-9a043e2297f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2faa38e4-f4f0-4dab-97fb-919e4b29a1f2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794e5266-138e-471a-a97e-fc3fb9b1c3cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e8126f4-dfe2-420f-9fad-3fe1ab3be7a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabaea89-da87-456a-81f7-ef12df0b4414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10b4b29c-58a6-469b-a5d4-063269f01802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03661ce-7fe0-4d5d-8174-f03c745714cd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dad4075-3383-4515-856d-5b66ed81f61b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d14bda7a-0704-419c-8de7-49e4f49b4341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae0e4b7-eb07-437e-9e76-c47d62a45d6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85514a1b-90bf-4fa0-8233-d06bb9b771ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d3eece-f714-4b4e-ae62-5f01c701d403",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2bf1b7-0fbb-40a9-947d-cbe394868c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a957cb6-c52c-4c76-ad58-624e7005bf6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc09d726-b5fe-4dfa-a4e0-a95db207808f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47b9e61a-3201-45d1-a9c8-2bcb6b4f06c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc940999-6cca-4d91-84be-82ebbc57f207",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2aaf087-2fae-4110-939f-0eeaf28ab3dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c334f0f-2029-4627-8b2f-5221fb1550db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab97f878-37d5-4623-af56-cac47c7511bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70ef4912-0e28-4fb5-82cc-f2372ee9228d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0c396c-d2e4-4aa9-87b4-83290d9eaa30",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb9648ab-52c9-4f8b-9298-07f9cffa5855",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afdccadc-f136-4826-8b59-efdc9a5412dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eebbb4a-1bdd-4a37-9e92-d9e321c8d35e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f9f7593-082d-4d8d-af10-1713d2f1d378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71683137-6ee5-451b-a759-ab9ed28d2256",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb8e4a01-0013-4a96-af7c-07b4914283b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e88187ce-6486-42b5-b04d-46476ce13dfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c89fdf4-dbe1-4432-8411-9c59af1327e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f816b4d-839f-444e-87f5-8fd262ed49e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d74c75e-cb5c-478f-866b-f91a195929e9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f10e96d-16d2-4511-b163-dbb683454b41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8385878-1493-40d2-afcf-6fa106bbe276"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fa67a2-9e3c-4807-9426-670382db25bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c13c287b-52e0-456b-9821-13561039dafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f43c864e-017e-438f-8aec-d49632aff9f9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504c4b9e-c8ca-4b0d-8700-e7d8fb129ec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5523a70-b40d-4594-9c87-d55e288b1436"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e93dbca-6f0a-4d5d-b4d7-8820ec14e746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fff09f8-9dc2-4e7d-bb81-254560ab52ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f9e325-f3e4-43de-be72-44664ce9d3a9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce638566-c3f9-4f58-8bfb-6c8285e1bd81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc2785cd-6e33-4d19-b831-914a0b0c1256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ed8df5-8947-4daa-8ec6-1e08b4249efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52052de2-cfff-46b7-85e3-a155e9ff377a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "267cb01c-2a6a-4174-975d-fe79798dd13d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795d37be-1a5e-4538-8eee-9e5c3b89695f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396d9eef-9378-464a-a442-4c6e3c4c6967"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "517d0db0-f73f-4118-9443-65553f8a0fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ed838b-07ad-492f-9caa-f3a085a524e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f53017-3dff-4bab-8133-7fe9d20ace0c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8569efdb-facb-4b17-bf32-4f516c0ef85e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "989e7dc6-c496-48a2-aad5-90c1e61d2087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f866b319-a692-4f3a-8c15-cfa68f2ca612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3c8529-1db3-438c-833b-63750cd3128b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ffdfff2-5e66-4205-a300-d935385b22dc",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cebf9ef2-a388-4ae5-8561-3583e1d3e103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "709d0b02-313d-4c61-be4b-d5a66fe413bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57172c3c-aad0-4597-8eca-9ce56027c3a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "001f122e-bd04-48af-a59b-1ad8d11681d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23606b53-0d07-4e59-9718-704141bc28db",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418c96ac-74ca-40f9-a534-4a5b2517828b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78c81c56-0a5e-4881-9861-647f74e3ce40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e58555f-fc6e-4695-bc0f-137d3fe950fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34f5a022-acc8-411a-8b41-585bf6defb2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b163f6d-b5e5-412e-88a3-461cc7bca16e",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef1b39f-e5de-4168-ae0d-0e434de2aeb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82ef60ae-6b2f-457b-b909-606fdcdf12fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ec8ee9-314e-4b4a-8b48-fccaa4fd32f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc6393c-0cbc-48a2-ad6b-378354433936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b8fc302-82eb-48b7-bd37-940eabbd16d1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fcb967-24e3-4173-9a49-758d24311f99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "545fefdb-410c-40e4-b8c6-338691803600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb0d604-fac8-49ec-820a-f56daf943695",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf908ef0-9e20-4ca4-932b-38c38365a286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc6af6b-c9f6-473b-ab7c-0477ad1a520a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b52ab3e-e5a1-4554-898a-6bd046583e43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39a25630-5c72-4bc8-81cc-bbd9ff6848c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a141c351-22a7-4c91-9573-43d4b33aedd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "421a0be0-a9b9-44b0-8448-3f6d18ee5b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8ade23-74d6-4d17-b7b7-856d2465d6fc",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83592bc9-85f3-42ba-a93b-809892280f27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "911dc685-e64c-4c21-92e4-42b34ee48915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6faa7a1-ebdf-44f7-9afd-8785da2b5600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3e50b3f-414a-4352-9447-3fc27175ffa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58110767-27a9-4af7-bda8-fb1ae2f256bd",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0faaa25b-a010-4725-8102-55051779cb81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "421789ad-1b61-4463-940c-8b3d9fbdc107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "392db420-fe20-4b01-a0eb-355e562250d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b8af8c8-87e1-4a82-b138-8698b8952778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28468d3-dd30-4032-8c6b-2ccddbda16d5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc14c89a-c79d-4d39-ba61-0ce9bd461054",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c0d0f81-6c08-455a-8067-9fc9f891fdb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8773dae8-410c-47fc-bcb4-be6e66ff9ee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "111d4242-97ca-490a-a77f-c9acf1bc09ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e57642-7652-4921-aad0-54dc72638b9e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6ef994-84cf-4534-aa31-46a7e54d91af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c74656a-8d1f-4b3e-a9cd-4232c565a5fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdc3d6b-4d6b-4349-ac97-292638f66501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35aa38b0-74e3-440e-a633-50b41df146d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653d1b98-80ac-40ef-a7f5-6b0f4907f3ab",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d3ae21-4f9b-4472-9b18-b5498f113f1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54587f06-69eb-4ca0-9f65-4e8be9685f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d9679d-7848-4c80-905f-4c8461b0af85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2165aeb1-79cf-400c-b7e8-124f6943b556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bee1d00-c2d4-436c-be0d-5d4c7c4442fc",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b199a44-699e-4dc0-a81d-6198d391cd82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66d0295d-4680-42af-b999-07206522be06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06d05fe-dc19-4788-9418-ca4d1adddd5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3febfa21-a279-42f6-821b-bbdff0730e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa60ad66-8e8c-483a-8f07-884243ce139d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc30757-5359-4b6c-abb3-0e3e045c5e37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afe41cd3-48e2-4b4d-ad8a-5340ee6d5d80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2da7672-0e6c-40cf-a70d-8abbeffbdad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6adbcaa6-a485-49b6-8e28-b1fd86dda259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfae5ec3-d182-45ce-a7ba-b2b5b8ed14f6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e8289d-3521-4341-ac3d-a3d994898d3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d80a459-9391-481f-b94f-56c005302280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b564c3-818d-4f84-af60-f836f0264084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc0deca-fd4d-4874-9e53-58f0c1233a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a714b45d-6fe4-48c7-aa71-1825ebdf461c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f877be-7377-4610-9775-9800d586403e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "930337be-630f-4abd-b6cd-2dc46ac3c78a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cabcb35-6266-4d27-b9a2-e9cb72b5573f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b476ad9f-d149-44a1-a1e5-0d1a1a8ba706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e6fdfa-cc7e-4d6b-8103-acc57be9fa12",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8166b7b0-14f9-47c4-b6de-49786e01137a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e20a30d-dce6-4c71-8559-7a95f3435131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb5e172-ee09-4edf-9b85-1ff1f6095653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9441b19-3df7-40b6-93c1-02fea3c6af41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562db4bc-a85e-43ed-9d74-c60f447d6b26",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472aa09e-2706-4f0e-9e92-beb56a962488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ec9552-b71c-43fd-9385-d1ce46ad74c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0f170f-a92d-4a6b-a29d-099a9746dc98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3998bdbe-8c92-473a-82e1-2e2cf065b5de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acb0aae-0d72-4c89-9301-c76a13b8a31c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0d3746-1db6-4e87-ac81-18c448484df3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01154bf9-dc7e-432a-b241-0d81a975ff22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3542fd21-9f5f-4d98-a937-abbba3b655e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ac51123-a48a-45cd-8de6-9471c338d598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad57351-eb59-4132-9c68-76c304269a2f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbdb3a0d-0c5b-4615-9b6e-b5580c837b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4fac22c-90cc-458c-b76f-096646e379ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce94c6e-4999-4a6c-8ac3-86a3184ffeb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6f11734-5441-44f1-993b-7cabe84510be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce6180a9-1089-491c-9126-dd4b0c43fed0",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7442cb99-3162-4534-bc5b-aff2de4cd46d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61ba90fd-c147-4e26-82fb-eab07f881c6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9770156-d20a-419c-8dac-f868c8cb23c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05cc7071-4391-40ec-aa41-c004d822079d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7df06de-43cd-4171-889e-5cc3f637f81e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ffa22f-f9d9-44e6-887b-ab61527b902e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c65367f-ad41-48fa-95f3-8456c7371d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72f94b4-4805-481b-8266-be81332c4ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb449b4-8c94-4128-8d28-3af5fa5c180b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac6b588-0706-4817-ae7d-3a555434c7fd",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75593dbe-63de-4628-a0cb-57f743adb60e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a490f1ea-b562-412a-820d-99e1c6b91fa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "159218a6-e304-4466-a99d-0be03d3bcc4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c349ea7e-7b87-438e-b1d7-94188020d102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4553be-5214-4e56-9dba-38faaacf5918",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abf9aac-0acf-4470-80bc-4d0d8975bcc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b4d9fd-40b9-4895-8859-656d62a37684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83fad0ba-e0a7-460f-bcbe-b6b813ddb837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e32da51b-b4ad-4f2a-8681-d03c5ff94c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73fd103-369f-4e00-9fb5-e98f6a3c14c1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d1aa07-e8ca-491f-aa7b-bc43b89c0e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b33742c7-0c43-4ad5-a814-477ccb8291c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0554fd-69b3-4a3d-9eba-b8d79dd1ede0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f043be-93a7-41c0-81f4-4a2caaa7f241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454aaf7e-45f9-4b97-b871-d2adaa942bdc",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c4648b-a30c-4fba-a20b-0c2762c77691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e617f7-45d0-43bc-9665-2ebed88b5f3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4ae898-2ffb-4b21-bd68-e95f0f7e2187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f00cae2c-d4cd-4d1f-9520-51beb32e80f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a14206-45c1-4e72-b998-9f6a0fd336b7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe2229e-fbc5-43f5-aefd-f1b978b92ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef62b2f-5c64-4820-9f35-264655a1b718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0420757-ce54-4f94-9dfa-ced2bcece66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2c4ca19-2578-4fe2-adbf-fb853565851b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c9abda-68a1-492d-a6ea-c59ae425a48e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc1e902-0e84-45d2-b03f-223550e7b05e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f9d0b9-6c0d-47d4-af30-1c55ef6f7353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef89a6c-5f47-4bbe-a71d-770f9ed76b1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b97801-1a48-4512-8d51-54a3db2fa9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e40200-a546-4d96-8c12-b4663a4cc11e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f68021-fd75-4fbb-84b9-5e3c59e97045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38801ece-f51a-4c0f-85d2-d14ce2b9ffef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b6b122-2814-4f90-a72f-7c6ad1aed8eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b66dcbd6-d2cb-4ffd-91ad-fb7713782551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1409bc7-b504-4491-8228-966b8245ad5e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4208a2-d8e1-4697-87fa-78eed0b42e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30098907-a984-4e09-b569-f7abff1da617"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea305b00-02c9-4e9d-bafe-1eb1dfa6b5d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4772331a-d5d9-4787-a7b2-8b33e329d735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71e68bf3-ea6e-4bbd-8573-eaf8e7c58d9c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "638b5c2b-14a2-4bd9-9180-9f595ef293a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2250c410-92c3-43b8-8b34-dd20a4c471f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "968ee580-5180-4dd7-a388-578f639083f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a810d7a9-6551-4d5f-8c77-d355b76ae39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bd404b5-f6cd-4ed7-b245-446336d5a27f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241fb3b5-98a9-41f1-9507-33b572a94f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3118a481-52b3-412e-9f1a-2b477690dea3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29211180-d615-4a97-9fef-e87701bb0389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f286a17-7874-48a1-a303-ddc36ca96455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ba4670-00a4-4fca-9ab4-3fbde8a69eb8",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350d0a48-0af4-4147-bfa8-d2a0eff14294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "398b7df7-da62-40b3-9bf1-93a8202dd4a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8d30b6-0049-4105-9833-75b474682cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558d71aa-8ea6-40c6-be3e-d8bfe34ea017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d82a48f-7752-4040-8b62-543db3d0a15d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b754842c-168a-4d44-86dc-0bb11893e282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f33ec95-3905-48c9-825b-219781eafac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd8f332a-1982-4dc3-b323-0a9be57b4879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "734c1985-870b-4907-9382-42233f0974b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab53556-40bd-46c9-9a23-f319c869252d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e73f87-a822-4602-b084-cefbb5e216af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0d8a52-a62f-4a84-bb44-80c62d9262b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "366553e9-f43c-48aa-acd8-bec931a228ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc9f7ef-1366-435a-8423-61da5c7c0211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf094f2-37d5-40b3-a808-7e967d5e3f3e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5498c569-615d-4363-a984-c517be3873c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a8aa32-559b-4f10-a1c4-f53cda12178e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932983dc-bc73-4bc7-8b9c-d04cd53318d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6b16cc1-5c4d-4a78-b969-751d6cc8288b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1797c885-8783-48af-981b-6e44a6e0daab",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14b90cc-f476-4244-b151-9c3bee1ec6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "251990ed-66d2-49ae-a47b-f92e14d614d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "968e9c55-f95a-4fee-86ee-f4c69b49ab49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f705f7ad-b22d-45df-9e52-6fe2e965c95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef7b722-96cb-49dd-aa13-cab3b28e0c72",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d6b4d4-f64a-4869-9485-13c0a70d223d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "758a8fb1-e843-4c66-a0a3-bb8151f50d4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe38f19-c95d-496b-8c72-07612604117e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e2551d8-7cc6-42b0-824c-d2988452d9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caaffecb-7d45-41da-a51d-426b5800d278",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa818146-b614-47f9-8494-f87d3314c572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3daac42a-1364-47c0-b2f3-8014553f73f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d98f347-d45c-4510-bca1-3636a0cb9a7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b56e1cdb-d51a-444b-ac78-4f4f641b18fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8c92d3-23ce-46c0-846f-53cf9aa53209",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17cc946-4d81-4ad0-958a-60e61e406518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee6d610a-e6b6-4936-9cc1-60aafde395a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1ecac4-a95b-427f-8af1-6fbb9faaa3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86fa10af-c4e7-4dc0-9482-b72899149613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d30117-d80a-4cfa-85de-3e183e388c64",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e342ef1b-e076-41e6-9ee4-6fa9eb8090e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b528aa47-137d-4491-a931-4d7639f15623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d62c5b-4eee-4119-98ef-e9ea56226d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46ee31d0-c29f-4f09-8e30-c41026784f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9bd3699-1ff4-4f86-ac9b-75b5b3e03f76",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f1be7f3-1232-46a5-88af-81a561f62266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01547257-f247-4a3f-8d2c-f6cc0de258e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39c038f5-7fdc-466c-82e5-c9c8e26d8994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a9013e7-d6d4-4004-ba39-18748598dbcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2772f3a-3c1d-4943-ae88-d36eb628c45e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066f0ff4-b93e-4a44-a76e-9e1b89686972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc7c8fb-e017-44b0-b4e8-07efe964ef2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc6aa99-287a-43bf-9e67-03131ab99697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3615941-60c3-4485-9e49-625d95402e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aee0b55-0f00-49ce-8bd6-8f5c28f8ee0c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7867f965-44e4-48c7-9c65-16480a9ad6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba2ec6e-2c65-4219-a805-9d3923007ff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fa882c-0ffe-46f6-a780-2d2b76e1a402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6710a416-f429-42cb-8234-263bf8e621b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e4c4c2-5a3b-4841-b1ed-f0541fee09e3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9d5bec6-ea52-4e35-bdf6-85055c739f8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a6a612-6e9c-43dd-b612-8f66544415b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad278977-a0b4-46a6-8604-794d1bffea85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf8c258-f02e-4e4a-a0d9-80f31a2363a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9345f8-017e-453a-ac97-35d2b12fc62e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec76ba71-9d85-45d9-974e-2274ed1dade6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2c591a4-73f0-4906-9d02-39bc57ef0084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f55bc81-0378-4029-aab4-77a179aa3062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f005f806-223f-4b82-b655-2bfd0f44e4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18be0cd-2d70-4fa4-b44a-84d6547b6c5c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a090027-8260-4ba4-ab65-05af96a8591e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d269728-892d-4c6b-bf87-93332eb592d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8973ab65-a3cc-4ad4-8d2d-d84f87b8fcf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a85f4fe-ac6c-4a55-893f-e8fac2d9861e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63eeb33a-347f-4310-bb5f-83129b160a81",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01321ba6-3652-4fab-bc18-afdc8e19d0bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6297b6d-4327-458a-83fe-2c3f68a83834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bbaf7d2-29db-47ff-9cf7-2625ad28e451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77772799-4b28-489f-b67a-666708d9a210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35ac2f8-1124-4942-beb2-01f52c1ed7f7",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff098443-c35b-4b9a-a959-ddf81b48b32a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17ff41e6-0260-4495-ab95-43ebcb54473e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b814e09-24a9-4fbe-96dc-78f3467d5330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77cc36c5-c851-4e8f-8628-17b36346846c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78fede0-edfe-4636-9e5e-c6bb5b62d7c3",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c92fdd2-44a1-4f7c-bfd1-9633c19a1089",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "444f1347-3dd7-4809-8fa3-3cf9ebdae93a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc2ac65-f47a-4b15-9dac-3530c2214960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854b62c1-0d79-46b7-93ce-b2cc83b8d68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086efc75-b044-4bf4-b57d-86291d7e2d53",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d448e3e4-fe72-488e-b648-2b1f1984ffe7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2443cfdc-5f85-4504-b16e-b7d908f1ae9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4b2dc2-c765-4435-9a6a-f6d06d2caff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47238891-7714-453b-8352-036ef543a277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a78a409e-6802-4e89-b604-ad218d56e897",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd718ac-06fe-4ebd-9fd0-b24209b52d6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78a00313-06c0-4e29-8097-37de2132c0d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6faf0c80-6026-4f6c-9e5f-70bd37d385fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a4b73a4-0a6f-4667-8e88-6cc3586a68eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37aea976-b22e-4853-ad1e-7472af820da1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0acdee-5a55-423d-bafb-87d5c2895a37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae7f3a0c-301d-47e6-b521-14b4f649976c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23b1c50-98cb-453c-ac3b-9777d54225f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40c63e7c-cefb-4744-a69f-1051dcbac6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576caec5-0228-461a-805c-277d66180a20",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd198227-22d8-4c72-b3cb-a42b9285fb41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49f6355d-1b82-4104-8ee9-92d120610763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6f08af-6eec-4e2e-a5b2-bedc68f155df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d612d52-07e9-4551-827d-65cef74f72d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c87d74-b292-4ede-8811-563f393408ce",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851aa83b-8ab4-4569-abf5-ef282a22e880",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "620baa43-1ffa-4a56-b3f2-e5c7e6540225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de01f17-e074-4de8-80c3-5007d495b888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fce30b3-8e20-476f-ad6f-08c17fe2b633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df94b36-bd95-49b9-8ee3-07644a9324ba",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62ab9bed-bd30-4ba6-8ce0-c6eec30695ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dec02dd1-0024-4192-8a91-0cb08800b4c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "847d3124-4f74-4713-86d6-8057d2df9f38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9316ce5-d5da-4cf2-aa4a-e7285b38ef7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e01ceea-c46e-4751-a038-471ec1c3abcf",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f4fffc-0b78-4752-a890-0430841fc8f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "463e3a84-0951-4aa8-b5cb-ecd0a78a5b9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "063e3cb5-f0d9-46e6-9eb2-beef9f6c34a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d6d55e-9531-4cb0-8f1a-fb5b88854b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ab783d2-549a-4be6-949d-394902531687",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1a9c3d-f91e-479d-99a1-e8028dacc10e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef82efad-d17e-4907-a9ca-831d9c3cc8e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "339cd379-8f7b-4dc7-9df1-3900b610824f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65c5656-a806-4454-96fd-9765a3beb260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4aecd7-272a-42ea-94bc-37dcb6b163d7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4a848a-7e2e-4aac-8d3d-3f7874b65468",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb17cc0e-5217-41ab-943c-80030fabe485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a85c44b4-0580-4990-8fc3-67bc8852a9b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0bac772-7860-4343-8c5e-379e00df11ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9d8e0b-c532-43b1-b776-5a919965a36f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50c318b-3b68-410c-b2c2-3296071a1a23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7359a0c0-8992-44fe-aa20-1fe67e6d6bd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd413d56-a73e-4a0a-943f-84685ca9e566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9ce847-12bd-4841-9a49-a993495a1d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46387b85-604c-4cf0-8acf-55b0410e5a43",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c82eeff-561a-4be8-af47-794f6c142552",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f26f7e56-33c3-46c1-b866-32df8b59c954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "838bf9ad-8f2d-4347-8f96-57a85b61c409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba6802e-550b-4b22-abac-fac51304d089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd5ef4f-4121-47b8-8f53-6f4f15cb003e",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5afabbca-b16f-4042-8f5d-aa159ab45ffc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9136d691-8d80-4cad-bba1-b8fc38931e0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b003783-31c5-4d18-9d27-8abfa813db82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f20dc032-5fd0-4ec2-8619-64f1905667f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b03746-2a67-4da4-8351-94eb70c4afb2",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8a0ab2-12e6-413d-888e-d22d4163775e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04487973-9038-45f2-8288-1e97a738bca6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6726054-f2f4-47da-9f9f-23c5e9b01ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e34690-c466-4340-931a-00ab31deb362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec2e526-4e2b-4b0e-9968-66c22a8df26c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d84bfc5-b961-4e31-b7fa-8b8f61fc0a97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2a99e80-479f-4aea-95e3-838251a37103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d993def6-05bf-4d3d-8017-0d8aabf1a824",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e108ad3-fb1b-4090-a70d-4c8862e18e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "170de56f-2943-414d-8957-448f873abbd8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86feca3-087f-48b9-8261-50544ae98ae0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b7b0cc4-6548-4f88-b5f7-7618ff00dca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "383c80b3-2fb6-40e5-b9b2-fe1cdf017bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de90025-4043-462f-978d-d3a99ed7be9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f3fa38-647a-4813-9471-4de264577eb3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a605f4d4-d6aa-4bc2-af0b-e223f8ebf756",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64e49777-b993-4638-a237-2bcb4a7b8a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7601ae95-9755-4971-9ef1-a95bb09c4bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6015ab78-b1cf-44cb-ac5a-5258c3a561ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4059fc96-e661-4ab3-b903-781e0d0abb24",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd7de72-b5d0-4064-96c4-efd1862473f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4040e12c-ea53-4b3a-b7da-8f90c3f9a326"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47c092d-f9b1-41a6-a1ec-ad9e0bd971b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07948c8a-7bfb-4afe-b429-33237fc6898b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec8e74a-e4ae-42d7-86e4-5b0e85993b01",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c836f8be-7e5a-418b-9a5b-22ccc23202e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e89d34f-4a4a-4ea5-bd36-6bb3fc0c5b38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06430164-15f2-4b42-9214-c3a567ab20fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21db2607-a885-4d4f-ae00-999d0450a67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf83551b-e060-4872-ab84-fed377a1c29b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0775a1b7-792a-4b87-8a9d-faa24bc193f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "772dce94-fcf4-408b-8972-f51ab6fb7968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a946dfe0-a410-4a2b-9aa0-6d8891f07ccc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abe52516-f15e-4ef8-ab93-ca0855bd66f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2f079a4-1353-40da-9669-4ee863a62bdf",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1491710-5fe6-4d5f-8282-c105bc656e83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2888d591-b1ae-49f5-9e53-a9602eacc7b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f791c8-5db1-4d7b-b902-64a2c9c41bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0500f8f8-c960-430c-b4ba-3eac4e2020d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce4acab-a2c4-48af-b884-64e27245fe76",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4614e9f-d81d-481e-ba19-48fcc87a94f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90668d87-6190-493a-ae7f-11dcf3c8170a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c990e7cb-ee2f-439a-a403-404656456d90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00eb91d-a451-4c51-b0b8-d78fa72bc3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c5828fe-b977-42b3-a5da-1c609b75d36f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694506f0-f2a1-4cbd-9aeb-829ac12d93f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99b9cdcc-0cea-45fc-bc8f-2f9ea5be29ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ebbc15-f008-4ca5-bae4-25e8f3deb2b1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31c5fb12-cc34-4a08-9697-48cfee062d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae9916cf-ee5e-4bbd-9029-374c0e16fd5e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb56a58-f5c8-4930-8993-205d5e61dd72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be1dcd0c-1dd4-4416-84ab-d1cffc236806"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0758a3-f0e0-4466-bcc4-0dfa22d23784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81890d1f-6e77-442a-afc9-c6cb6d32dced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ffba5dd-b1ed-48dc-82b0-89ddce6142b9",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca3818a-4080-4435-bad1-e2fde8359043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82cc753f-1485-48cd-8583-54595b3079c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec37888-8927-4a9a-b186-3e2722b672b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "815c5bfe-eae5-440b-899a-3a5833bf8bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6ff728-a066-4f98-8632-d416621319a3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf02bb45-82d0-4d09-8dc3-e6e0517d7a47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc90748c-bff7-4bf5-a904-36bfb5246db7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b991153-61ca-42e7-9dcf-fc48d1b29269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160c335f-cf31-4de8-99fc-218cf9fb8559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a18dab-e904-4834-bef9-d363917d2bba",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b06548-f592-43bf-b386-72e96151630b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91fcac8f-2416-46db-9227-40cbabef28eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69ac217-5618-4853-b9cc-5825b240ed5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f4fe7d-c435-4d50-991c-b59eac894bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c138156-6511-4781-a48b-fd63d9aa5526",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbe0dc0-34b3-4ace-999b-4a70e728c84b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6e68969-b109-4ccc-b99a-1de1149aaebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4857999-501e-44ec-a671-8e7fb747a449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c41e1a7-4185-4786-ad76-fb2b207f1249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32557373-7efc-40c7-beb2-68466948edb0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e79545-e00d-48d0-bfa0-0feacbe1c29a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3714dfed-8853-4886-bb6e-53a91a24b9b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f31e9b0-f9f6-41fd-b9c3-8f0a1e596bf5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede7d212-d818-4c2e-b4f1-5b4922721b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9d7822-6f7b-4c2f-a28b-59c93e538c86",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda78536-a178-459b-a0ac-294d0a944adf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be39c824-6a0d-4839-bc80-97f429a4f816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d5a915-d27b-482c-94a5-7a88c2b41788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb75f9e-7a81-4867-a7e6-8b5aa11f299f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dcc43cd9-b42f-437c-822c-84ede5a54f3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8be2c292-16f5-41c7-b1f7-6cfb91531fdc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b33d5ad3-15c7-4308-bd86-dd2ad34e344e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b03a36f-cf11-454b-98e2-d36ae315d5ef"
                    }
                  }
                ]
              },
              {
                "id": "fa30a5e6-43ca-41a9-a642-104edb3364c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "69d77572-8ffe-413c-a83b-ed147236e591",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fcb0c70-9d06-4616-8af2-336e8b0eb7e9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "704efd68-5755-417b-9f2e-edc8672d354b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90278ce9-641e-4bd4-a27d-e705049fd3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60b454d6-5132-4a7e-abd2-843deaabc916"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1162794a-47ea-429d-86e8-509670439c90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d111e24f-36c6-429d-9169-adf9648cceb9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a71b780f-fd5e-4243-bcb1-cce89acc4ca6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23dc7050-020d-4df0-98be-5258d28ca4bb"
                    }
                  }
                ]
              },
              {
                "id": "0ce4805e-23a1-44e0-abd4-3555cef95c97",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "196edba9-efd2-4a05-b7a0-65e1dd169a4f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f585e3-1e5f-4da9-8b0a-ea4cf5ca1dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c2413254-a7bd-4fe8-821e-189b2002eb17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4f6dbc-61ef-4047-be98-657730f7ee6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50abd5a8-abd1-4976-b09b-429f6030934f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6093bf7d-213d-49dd-80f0-674284baa63e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f1a4af50-6a37-464b-95e0-84f0c421accd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "40dd50f8-eadc-48a4-abd5-8cf34f011fae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7d7ad159-3460-46aa-9395-2342d327b7b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b4df1fc-7f74-430f-a273-0d941fcc910d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "42e2c173-a6fa-46e4-a05d-9a47bef575fe"
                    }
                  }
                ]
              },
              {
                "id": "fdcfe246-3b06-43e1-aead-c11158eebe02",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18d41641-3823-4762-af7e-51130bc43c9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cf47d810-252c-406d-b5c7-cfdaf97b6006"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11f3ebd1-169f-477a-a4fe-4de7a0dce64e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27fe5617-1523-461f-8100-9845fa15768e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "498e1fd5-70c0-4cc5-9154-f8d9e1149823",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "93cbdc56-1ef8-403e-bcb1-37059b74cedc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2b9856fe-3fa4-4b50-8d3a-71d9087fb232",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a1fc28c-ce4c-44a9-8f6b-97fbd5e9cdb6"
            }
          }
        ]
      },
      {
        "id": "37233ba0-a939-45e4-83bb-ebf35173cb48",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1baa73cf-c74a-47fa-bf95-482b98133ec7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "921bb60b-2aef-4eb6-844e-c69aa72c7bb5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "76dbae3a-3226-47f3-acea-2efa6def0f95",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493d2483-2f8e-40ad-a92d-c615de4d17b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "16974137-74ac-4529-9e30-48b53a5600e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08d0d153-ceee-493c-bfe3-a1cd5a77d6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "09092393-8e32-42d4-b805-45543a87f04e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78bb7ac7-e810-4f77-a344-3c7ec8c4f449",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba21bd07-e77d-426d-ad59-f9ed91fd225d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7835cdd2-8d80-42f7-bd35-007fd9709d4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f5f6253-d3c3-4693-ae23-707e8c43b32d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af1d2c11-6ef9-44bf-9814-3c482d8537f2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d9e98a13-9d5c-48ec-83d2-5975a3f7a008"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf6aeb3e-d3c6-4059-b981-795e89c9bdf8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2690850c-b18e-4022-a60d-cf3f5352a87c"
            }
          }
        ]
      },
      {
        "id": "9d1258ec-b1e3-439f-90f5-7a43dff6c926",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d2465bd4-3cf6-4a84-bcc8-5db5368ef098",
            "name": "Negative Testing",
            "item": [
              {
                "id": "85df2cbd-1580-4686-828f-428d885a24ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d14cae7c-46d2-4e20-9723-70047439791d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4256d302-9c13-4649-b9af-9c97812d6b9e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f044af83-9af1-43f0-9130-96d2ebd7cc41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa88317-d0d6-4f48-8d3f-fe55d4f26054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "871da6e6-0ab4-4b53-944d-e689e9439e08"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0d4df1e-612e-41af-927f-817ca27bbc78",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5709351f-287d-41d1-ad01-b4e89ff6271a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "864fa03d-4ff7-4c20-9ec5-6334965dd2c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56f7b3d2-edf9-44bc-9517-a69b7e6977df"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "581ffcf1-162a-4bb0-b997-812bf06d82cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f825f588-cdc2-415b-ac0f-6c1642bdce4b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69d0dc6a-41e5-45b1-99e6-7ea11dcb848a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "73a56c4d-19c8-4fc4-8b92-ed8e6cc39528"
            }
          }
        ]
      },
      {
        "id": "295d61d4-3d40-446b-8958-faa0d0d82bdc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "559ac1ce-d4a1-4aa6-8422-6aebdd4cb02f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df39387a-7fdd-4248-ab96-ba382acbd691",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d42bcbf-bce2-4887-80e1-6cb7a6a3fe83",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3fcd35-b8d9-4c9a-9966-f4389c687832",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8994f86c-7faf-4672-9f58-b0b077fcb030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce40bfd-7464-44b9-bde9-9a052c110316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0519f87-5395-461c-b8f0-6b5deef2735c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b463a959-c6e6-48e8-a183-e7e4a87a7c47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "952bb39b-ebec-416d-903c-002585a80480"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61ab2f4a-dcaf-4696-a8ee-596d043131ee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "976f6e54-740a-4291-bc5a-c2cf66831615"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6c7d076-0468-4199-befc-2fc28bf74e76",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1b5dbc80-7fd8-40e4-a912-c3938558030a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55c2c4dd-1729-490e-a8bf-cb104b89d88d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "010e01d4-69a1-46af-8cda-5185ec5ceff1"
            }
          }
        ]
      },
      {
        "id": "59232833-2bba-446b-b411-0a7eabee3d38",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f88ead5-f906-4558-9cf7-7addf2107e7c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3431e85a-004d-4d2d-97bd-093dfe364af1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2734b867-5bb6-4358-8ece-c3465ea82c29",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9263eaeb-8461-4ea8-9317-5b33c453a2ae",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f708123b-e5bc-4315-b817-d1a5fe4d8b7f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 82.17192982456143,
      "responseMin": 10,
      "responseMax": 651,
      "responseSd": 72.64145487565095,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1700526974367,
      "completed": 1700527006987
    },
    "executions": [
      {
        "id": "8752bbea-86f0-4164-a8b5-9866ab931605",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "38e18d6b-b165-429d-9398-bf2a3a1fa4a9",
          "httpRequestId": "579a6b4c-9bae-46b6-8b89-f6ccfb7c1ae8"
        },
        "item": {
          "id": "8752bbea-86f0-4164-a8b5-9866ab931605",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "cdc381ee-9cdc-4684-8740-ab366c72b398",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 0
        }
      },
      {
        "id": "7322b7b7-fcd6-441e-91dd-1fbf3544aecb",
        "cursor": {
          "ref": "500f8990-4f93-41be-914d-9ab5f4139d51",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "87a4eadb-e7f1-4077-a277-8da7dc46e19b"
        },
        "item": {
          "id": "7322b7b7-fcd6-441e-91dd-1fbf3544aecb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "055443be-ee6b-418c-aa0d-bafa40ebcf29",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "8d8af5f5-a783-4fd4-a149-8fd9dba8334c",
        "cursor": {
          "ref": "bbb4aac0-873a-45cc-a9d0-6f166576e388",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f92a8416-e0af-4b96-9076-685d069d3e9d"
        },
        "item": {
          "id": "8d8af5f5-a783-4fd4-a149-8fd9dba8334c",
          "name": "did_json"
        },
        "response": {
          "id": "1a15377d-f74d-4381-aa7d-a384370ea7f3",
          "status": "OK",
          "code": 200,
          "responseTime": 291,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f97b4d2-952e-481b-8d30-8abbc360dadc",
        "cursor": {
          "ref": "25a3160f-9f22-4af2-8c0a-370bd6e52739",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7edab8f2-e115-4073-9142-0f291837db9c"
        },
        "item": {
          "id": "6f97b4d2-952e-481b-8d30-8abbc360dadc",
          "name": "did:invalid"
        },
        "response": {
          "id": "444903f0-5189-43db-b6ca-98376dd21865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f97b4d2-952e-481b-8d30-8abbc360dadc",
        "cursor": {
          "ref": "25a3160f-9f22-4af2-8c0a-370bd6e52739",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7edab8f2-e115-4073-9142-0f291837db9c"
        },
        "item": {
          "id": "6f97b4d2-952e-481b-8d30-8abbc360dadc",
          "name": "did:invalid"
        },
        "response": {
          "id": "444903f0-5189-43db-b6ca-98376dd21865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964e00c9-59bf-4122-8980-917c0135e228",
        "cursor": {
          "ref": "e21a4663-308e-4767-8420-ce7fa5add45e",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "274862e5-45c0-4966-acad-22047c036ab3"
        },
        "item": {
          "id": "964e00c9-59bf-4122-8980-917c0135e228",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7085abb1-e476-48e1-a5cd-e34c1566d446",
          "status": "Not Found",
          "code": 404,
          "responseTime": 112,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03998c2d-33e1-484a-8048-b1cf488c35da",
        "cursor": {
          "ref": "97fa50da-6b4d-4c93-95a5-3594fe19374e",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5de26eb7-ef34-482d-9fac-6f8e5b4889fe"
        },
        "item": {
          "id": "03998c2d-33e1-484a-8048-b1cf488c35da",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cc7550ce-aff3-40b0-8e0e-94ae99590099",
          "status": "Not Found",
          "code": 404,
          "responseTime": 59,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48283b26-7abf-4a7d-bf8e-939e9c7d0f20",
        "cursor": {
          "ref": "dd8a3260-d4a8-4c1b-b4d0-d4b14895b3d7",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8312ae6e-557c-4eb2-beac-76da43e47f15"
        },
        "item": {
          "id": "48283b26-7abf-4a7d-bf8e-939e9c7d0f20",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "dbae9c21-2fc9-4581-8540-4980ffab947e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b6fe6c-60c2-4712-bbe1-3bee0c845e95",
        "cursor": {
          "ref": "21e97ccf-4aa7-411e-83dc-ba1739060ecc",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e4eeb06b-fa5d-4e46-8f88-f56361220afa"
        },
        "item": {
          "id": "c2b6fe6c-60c2-4712-bbe1-3bee0c845e95",
          "name": "identifiers"
        },
        "response": {
          "id": "5b398a53-ea7f-427a-8975-a7c2c4557303",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d54bc9b-29a0-436f-813d-9995e605b409",
        "cursor": {
          "ref": "81a9041d-d22b-4f85-8c1e-c80448f4a945",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "bc575816-9fac-48fe-8d4e-334ceb4e0f87"
        },
        "item": {
          "id": "7d54bc9b-29a0-436f-813d-9995e605b409",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2aa73484-ad29-405a-9e49-d4a499e0205e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee931e4-2e97-4ab1-a404-9065e04add03",
        "cursor": {
          "ref": "1d92a067-2552-4ef7-a767-cef76c036305",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6f1ff1a4-2f42-4bd6-84ef-40aaa6857a8d"
        },
        "item": {
          "id": "0ee931e4-2e97-4ab1-a404-9065e04add03",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5d0bb4b0-36df-425b-9895-2c39492fcfe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8359e80-29fa-4928-8d95-73228e5d1f83",
        "cursor": {
          "ref": "38e1a121-be60-44a1-8b57-0630e2158aef",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "57271f1e-4c2f-4cb7-b77d-3b56bb0b4a07"
        },
        "item": {
          "id": "b8359e80-29fa-4928-8d95-73228e5d1f83",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "67bdfab7-0d7d-41b2-8d58-c432d31bc90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff892ac2-6d4b-4394-add0-9c9e9f7aeb8d",
        "cursor": {
          "ref": "a21205f1-0330-455d-996f-061807a74191",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cc4718a7-b646-4a8a-b1fb-8616d1fd7ec2"
        },
        "item": {
          "id": "ff892ac2-6d4b-4394-add0-9c9e9f7aeb8d",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "45416397-4c49-4e72-9d53-a2e6f6968174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc84bd27-86a9-49ac-b759-22eea80cd10d",
        "cursor": {
          "ref": "a13c5093-3c17-4462-bedc-c2b155c21c5d",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "ae96c431-1290-4452-9d47-65da8d4411af"
        },
        "item": {
          "id": "fc84bd27-86a9-49ac-b759-22eea80cd10d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a88aaba5-0c70-4d85-8832-f52ebc7ec146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "415dda26-7799-4ace-9933-db08ec8c7c9d",
        "cursor": {
          "ref": "9e1451b7-054b-4936-9af1-a5303f1ac398",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "4bd1d051-dae8-47a8-af98-bcf4bf1f0dbb"
        },
        "item": {
          "id": "415dda26-7799-4ace-9933-db08ec8c7c9d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a530b50d-8936-4495-8600-71528d6c4cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6126dfdf-d330-4e40-9d29-465af449c391",
        "cursor": {
          "ref": "f898c17e-adb1-4f8d-94e6-f302d1f8b673",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "69b8c13e-a280-4c72-b114-b1e0f70d1e51"
        },
        "item": {
          "id": "6126dfdf-d330-4e40-9d29-465af449c391",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bd351c3f-dd24-4300-91eb-374a10613855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf044850-44b6-41de-8f69-ee2d1698fa6a",
        "cursor": {
          "ref": "7fa4545f-2089-4b3e-9e96-cf6bbea5035d",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ae0a86cb-3146-4ed4-b412-c83a49139573"
        },
        "item": {
          "id": "cf044850-44b6-41de-8f69-ee2d1698fa6a",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f7bf0da6-2daf-417d-93b2-c826ee056248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b39027-dadc-4b76-ac11-560a0a2c37bd",
        "cursor": {
          "ref": "1de1ade3-6130-41b1-9838-f31ea656f1ac",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5a97baed-fda9-4b98-b15b-7f3259e53c23"
        },
        "item": {
          "id": "10b39027-dadc-4b76-ac11-560a0a2c37bd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "9a4746c7-b54d-4e31-aa7a-7fdef4b1044d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "888edce3-0eed-4060-8b16-a1a382ef06bd",
        "cursor": {
          "ref": "dd07c006-f897-460d-bd50-4fa8b3ecfd51",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bc3a014f-7fde-4325-b570-91020c43b7d9"
        },
        "item": {
          "id": "888edce3-0eed-4060-8b16-a1a382ef06bd",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8bac8e7d-887a-4662-a37b-115f0937be8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff760e91-d5d1-4eb9-ab3f-f3d9bdc626d3",
        "cursor": {
          "ref": "4e0e0d29-3369-4c85-a706-df8dd8402b3b",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "551d0d73-2b74-40e6-a209-c04d74036f58"
        },
        "item": {
          "id": "ff760e91-d5d1-4eb9-ab3f-f3d9bdc626d3",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e1eaadd4-a1ab-4649-ad54-c1e8503b4027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df0169b1-a8f0-465f-8602-862162980475",
        "cursor": {
          "ref": "95dcad40-8080-4294-a106-78d380fe6212",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "497f78bf-7a4d-44ee-9594-52f5dc18dd5d"
        },
        "item": {
          "id": "df0169b1-a8f0-465f-8602-862162980475",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "eeb9fd3c-c71a-4a3c-839b-ee3bb7a9fad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29060392-b0f8-4439-851b-aef301f56a39",
        "cursor": {
          "ref": "d9ad0368-cfde-4fa5-9319-3446032ddaf7",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2c8715f9-cc58-4276-8fdf-576920031d7a"
        },
        "item": {
          "id": "29060392-b0f8-4439-851b-aef301f56a39",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "bad109cc-1d11-4010-ae1b-228a34e0fa1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb570f38-eb46-4ad3-bc8b-b987bba15131",
        "cursor": {
          "ref": "a51a524d-3363-4b80-860a-46a8dbbcde15",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "18d55fef-d08f-4b01-ba60-81c20817388f"
        },
        "item": {
          "id": "cb570f38-eb46-4ad3-bc8b-b987bba15131",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9683cbcf-b9c3-4269-af1a-cb77acb1cf14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb50987-9f97-4615-bfe4-e3383daebd0c",
        "cursor": {
          "ref": "614f819f-bc74-4f12-90b5-d91f08ef0e8b",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e79b0264-a071-4f0c-9cee-201c42878a01"
        },
        "item": {
          "id": "7fb50987-9f97-4615-bfe4-e3383daebd0c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ed5cec4d-ab55-480c-b41f-6893656d2222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6afc093-2e12-41c2-bc7d-f02b8c01dd9d",
        "cursor": {
          "ref": "4ef75ccb-1b35-44d2-a544-c56057f43440",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9cc4a55f-869f-4643-b33d-91e8c45f3c1f"
        },
        "item": {
          "id": "d6afc093-2e12-41c2-bc7d-f02b8c01dd9d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a3ff9610-dd03-4c2a-ae1c-6eceda6d1640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f398943-8ef2-4652-a666-37c96236499b",
        "cursor": {
          "ref": "6b252926-75b1-467f-a241-9360557fb39c",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "255d5457-1344-49cb-afec-a45f6b4812d3"
        },
        "item": {
          "id": "4f398943-8ef2-4652-a666-37c96236499b",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bce1753a-a59a-4e5c-8e0a-4a10f717680f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d54bb5-12bb-4641-8854-9fedb58d65b3",
        "cursor": {
          "ref": "27a7a3b4-ad8a-4b3d-a893-e30920952592",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cf31d54c-5686-4a18-9c1e-d76ee055bb82"
        },
        "item": {
          "id": "c8d54bb5-12bb-4641-8854-9fedb58d65b3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "01f2aba3-2e87-47fa-9389-31f60a26d443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b875db4-2c06-4130-98f1-31015cdd9371",
        "cursor": {
          "ref": "27c1147b-1fe8-48dc-9a8f-a56f14df5cc3",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "21b8a21f-a3b8-4a7f-a612-bd0cae1a32e1"
        },
        "item": {
          "id": "3b875db4-2c06-4130-98f1-31015cdd9371",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "89cb0e7e-6f34-46d4-9fc9-45f66c311935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3f588c-9e9b-44ed-86be-734cc25b9295",
        "cursor": {
          "ref": "69efc242-a7eb-4673-985a-91049b3becbd",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8dddc0bc-a09b-4f2a-bc12-7d924da03f02"
        },
        "item": {
          "id": "8a3f588c-9e9b-44ed-86be-734cc25b9295",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7b316dc4-818a-4817-a1d5-3b8efec7ffb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d556a386-1967-4442-973a-9014ecf0b65f",
        "cursor": {
          "ref": "ab21d12e-ad5c-4651-bc10-4743da956661",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "91237ff7-16da-4644-b0fe-da4d2391f469"
        },
        "item": {
          "id": "d556a386-1967-4442-973a-9014ecf0b65f",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "85f94980-35cc-4687-beef-35bc1ae62556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "125e427b-46f6-49da-883b-dbd300c05eff",
        "cursor": {
          "ref": "2f58df3a-7c50-4d14-a553-7906b7e292a5",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4c717018-4ddb-4f55-b524-b85d4939578b"
        },
        "item": {
          "id": "125e427b-46f6-49da-883b-dbd300c05eff",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "efd4e054-d8d0-4426-94ff-e06c6c5df005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf83bc4-a5c5-4885-b27c-21402cd45b05",
        "cursor": {
          "ref": "edb85dc3-dcc0-4f87-9363-087928f1b039",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c34c85ef-452e-4098-891a-f07a11e7e18d"
        },
        "item": {
          "id": "ccf83bc4-a5c5-4885-b27c-21402cd45b05",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d6597c3a-115b-4a1e-b73a-4c3910494319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3f81a39-4d8a-4f98-ad22-27d91de06aae",
        "cursor": {
          "ref": "0be2d53b-9958-4992-9c43-b967f6e2e4cb",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "73b9b02f-208c-40f8-a00d-0ceffde85038"
        },
        "item": {
          "id": "d3f81a39-4d8a-4f98-ad22-27d91de06aae",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6352c37b-5923-479f-bf04-573512138f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22664def-826d-435e-b849-9c957e01199b",
        "cursor": {
          "ref": "37b26491-d98c-4555-a703-ab233f494a93",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cf54adb0-0385-4a69-82cc-531d09437f4c"
        },
        "item": {
          "id": "22664def-826d-435e-b849-9c957e01199b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e1837c86-9284-4220-aa91-55239c353f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff68fa26-bff3-4c55-999b-babc97e663b3",
        "cursor": {
          "ref": "b0446574-90c2-4817-87a1-9ba80251706e",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "203f6bf1-9e14-4a82-a87c-635bcbc50c50"
        },
        "item": {
          "id": "ff68fa26-bff3-4c55-999b-babc97e663b3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "40e2c438-aafe-4638-8222-1ec2b88b8a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b92db3b-2651-4718-9841-b11e752241e1",
        "cursor": {
          "ref": "b7968092-e3e8-4a9a-8901-ded13d9d8ad3",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e7ed7fe7-9bb0-4311-9af7-d74e2a9a3258"
        },
        "item": {
          "id": "0b92db3b-2651-4718-9841-b11e752241e1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "be8e2b0e-0916-4b50-9fee-f3567e7ab13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff5ebe1-88cd-4858-bfbb-55e4b0cf46b7",
        "cursor": {
          "ref": "0e7523a0-ad5e-4ea7-9029-1da14da6be73",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c7931ea9-a308-4857-a009-3f0a191888f1"
        },
        "item": {
          "id": "9ff5ebe1-88cd-4858-bfbb-55e4b0cf46b7",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f0d83828-c70b-4e8a-af87-90fd99bbaa33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cddde0a6-3eca-4fbb-9fea-56d78c282976",
        "cursor": {
          "ref": "60887f84-2b46-4b73-93c8-04fd04adea91",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a9699ea9-2c09-4626-b00e-b98b6e63cf1c"
        },
        "item": {
          "id": "cddde0a6-3eca-4fbb-9fea-56d78c282976",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "fcb34c0c-9a80-4e0a-acda-c8a0d770ff26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613f6fd8-acb8-46a3-b983-8f02d678bca3",
        "cursor": {
          "ref": "5e5e83f1-37ed-476d-8773-e97c87e6cf4f",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "8f5aeb9d-b34a-4ca2-b4b4-62c173cbc986"
        },
        "item": {
          "id": "613f6fd8-acb8-46a3-b983-8f02d678bca3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "992b2b85-983f-4f90-9b85-29d6bd8d1516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe70b579-08d9-4cef-87d4-6626763702db",
        "cursor": {
          "ref": "e862c9ac-a905-4c62-9d4b-8ffd023519dd",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a1f7d1c3-252f-459a-86d1-ae0a912561bd"
        },
        "item": {
          "id": "fe70b579-08d9-4cef-87d4-6626763702db",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "291acd8d-ca0d-4712-b31e-be3e31be7260",
          "status": "Created",
          "code": 201,
          "responseTime": 651,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "264d2aa8-7f11-4ac2-9ffa-674b21ed3416",
        "cursor": {
          "ref": "911ffc8d-213f-422c-a5c1-30a66bea5331",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ac323a3b-b7a6-4e1f-b447-9b79e624388f"
        },
        "item": {
          "id": "264d2aa8-7f11-4ac2-9ffa-674b21ed3416",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9bcd6c10-404d-4ff1-bb85-a523a10fd3f7",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d854911e-ee9a-41d2-b4c6-87f5e0163879",
        "cursor": {
          "ref": "8ad5e8b2-c7ea-4251-8c5f-237d9eb5459c",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3852b2f3-4bd1-424d-ba5d-1a7156d0b93e"
        },
        "item": {
          "id": "d854911e-ee9a-41d2-b4c6-87f5e0163879",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "34af8230-ec6a-4101-8bd7-66046bd98d53",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "fd108fd3-2f77-40e1-9ebc-b776ea8e7d34",
        "cursor": {
          "ref": "450f73c2-123e-4b64-bac5-f219604807a3",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "57b8a8f7-17e3-49fb-8202-6bb053428354"
        },
        "item": {
          "id": "fd108fd3-2f77-40e1-9ebc-b776ea8e7d34",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "66813b31-dd77-46a9-9a24-70f5016bdfbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20300d67-6cdc-42a3-9d04-e11b086461b2",
        "cursor": {
          "ref": "27b895b3-ce12-46de-8931-7d53b9461502",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3554e133-9559-428d-bdf3-2e59e5d666ef"
        },
        "item": {
          "id": "20300d67-6cdc-42a3-9d04-e11b086461b2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8f9a82de-120d-4547-9a5d-8d782ee0b384",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8517235f-8bfa-43a5-ae07-39276cdc8276",
        "cursor": {
          "ref": "2691324c-0728-4eaf-9453-efe5313b2317",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "353c8703-5db6-4b55-ba55-0a9aebfe113c"
        },
        "item": {
          "id": "8517235f-8bfa-43a5-ae07-39276cdc8276",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "26fe8190-9a59-40be-aac2-48123b1945cc",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1d8e0fd8-6ebf-452e-8219-b82dd4783237",
        "cursor": {
          "ref": "52169df6-a1d5-4f3a-aed2-5091570a42aa",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3fb0e2ae-0d37-4065-9625-24b6aeb46410"
        },
        "item": {
          "id": "1d8e0fd8-6ebf-452e-8219-b82dd4783237",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "98bcdfea-4661-4141-ad24-8af3fe0742ce",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "9af4005b-3c55-41f6-807b-6bb5e5b16fa2",
        "cursor": {
          "ref": "a5fb4e66-e4fc-4e68-9692-8d98efe72d27",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1998278a-bc87-4994-98e6-686d9e032424"
        },
        "item": {
          "id": "9af4005b-3c55-41f6-807b-6bb5e5b16fa2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9e39b572-6ceb-46d5-a395-a7af84751f19",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b47add01-37d3-4f22-add2-5541aa4fd3fe",
        "cursor": {
          "ref": "54ba504f-95a6-4b35-b7df-b8f98cad71fd",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "270dd48c-a147-4589-8fe5-716c805a0eba"
        },
        "item": {
          "id": "b47add01-37d3-4f22-add2-5541aa4fd3fe",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "dacd7042-ce9f-48e4-8a0f-b56fa9ad0f7b",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9638d4dc-2103-4204-be48-bdb604efd2e5",
        "cursor": {
          "ref": "b7535dca-5374-468d-a9f1-a80a776101a8",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "678f90de-ce5d-44ef-996f-2b77e2d11eda"
        },
        "item": {
          "id": "9638d4dc-2103-4204-be48-bdb604efd2e5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "df869811-5b7a-4f29-90b6-409ec352f1f5",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d2b9b80f-5f35-4abd-bd6c-bfd7351cdf27",
        "cursor": {
          "ref": "bd88ea24-c24a-431c-953d-e6320a245551",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ce68954b-da9c-4c43-8ed3-264e6447633c"
        },
        "item": {
          "id": "d2b9b80f-5f35-4abd-bd6c-bfd7351cdf27",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "56fa8331-4645-4a9d-84d4-9317b857cddd",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "0dc2b422-f57e-433e-b878-d39394a73084",
        "cursor": {
          "ref": "64890922-42fc-4ad5-bfd9-bc7d26c4845e",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "06c3b9d0-9630-4791-840d-4526df5dc850"
        },
        "item": {
          "id": "0dc2b422-f57e-433e-b878-d39394a73084",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "06b83e29-5915-4a37-b9bd-9c70bbb4749a",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "40cbb605-280d-4526-93f9-3a6c396ff925",
        "cursor": {
          "ref": "3355bfd4-cc3e-4cba-98d1-ad7d8775b606",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dda9243d-ac94-4757-b289-0046985cdf68"
        },
        "item": {
          "id": "40cbb605-280d-4526-93f9-3a6c396ff925",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "239bb95f-dc6b-4f17-bbea-f3c5581ca0b4",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "94d8e78b-1e37-4678-9986-7beaf6b02f32",
        "cursor": {
          "ref": "d5e84593-9270-46b5-94cf-bd23d950aebc",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "88825a5f-b284-4bb3-bbf5-bd0e637dc343"
        },
        "item": {
          "id": "94d8e78b-1e37-4678-9986-7beaf6b02f32",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "82ffede6-de1f-47e4-94f3-425b3288964c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f588e08-bce2-4491-908f-ba5d8c8254dd",
        "cursor": {
          "ref": "55d3e682-36af-493a-b365-aaf1c6839a0b",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3dcdfc51-0672-4bbd-9589-109f73b6f89b"
        },
        "item": {
          "id": "1f588e08-bce2-4491-908f-ba5d8c8254dd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ec1ee514-0f00-4d87-b8eb-c413e9dd9584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e1c300-5e8b-4f4f-989e-00620822024b",
        "cursor": {
          "ref": "8a37c086-82d3-4361-ad89-29a51c7fabc8",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9f38467e-23ae-4ea4-b639-4ddb3cae65bf"
        },
        "item": {
          "id": "46e1c300-5e8b-4f4f-989e-00620822024b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "027135c7-7b72-4c95-a25f-e96930976413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b14034-cd29-42ab-86e8-11982bf97072",
        "cursor": {
          "ref": "4f2ad606-bf10-43cf-b115-2e7a5927b1b0",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ac8501bd-4585-4615-b61c-6380ae74a29d"
        },
        "item": {
          "id": "99b14034-cd29-42ab-86e8-11982bf97072",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c7857729-8253-4f97-900b-dd18ad71f280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a9343a9-ea95-4322-a40c-6b860d17a38a",
        "cursor": {
          "ref": "8336f9b1-d836-4e14-9490-fac0e7df87d8",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d7c4f5a1-8438-42a1-ad45-e241b20eeaae"
        },
        "item": {
          "id": "0a9343a9-ea95-4322-a40c-6b860d17a38a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "72d7e5da-dc82-4328-a59b-01370d5b8dad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a2d93e-7304-439c-8306-385a3b5cca60",
        "cursor": {
          "ref": "6752c536-c31a-4ee7-b4dd-0e7ac3052d97",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ff445162-b4b2-46d5-89ae-3f66144553a5"
        },
        "item": {
          "id": "17a2d93e-7304-439c-8306-385a3b5cca60",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f9e4c850-90fa-4fbc-bea4-d729a2580d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cd44b7-1eec-42cf-b0ad-0b7db9b5513a",
        "cursor": {
          "ref": "7c276848-387f-4e50-80c8-bceffcb1e04e",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "6ff72db0-e1d1-48df-a025-8f4120172f43"
        },
        "item": {
          "id": "53cd44b7-1eec-42cf-b0ad-0b7db9b5513a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0c72ca8f-eadd-4e82-a66c-68fbc909e65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b62580-43dc-45c8-b058-43b6c339fd3c",
        "cursor": {
          "ref": "3cbd2c6d-4025-47ac-b490-d662ba4e7500",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7b31734a-9e48-4de2-b1f9-dc9d61e80d5d"
        },
        "item": {
          "id": "f2b62580-43dc-45c8-b058-43b6c339fd3c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "bfb26fbb-2b29-4e1d-b268-a840f0c7649d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d400cd10-dbbb-4324-bcbe-8e836a246c8f",
        "cursor": {
          "ref": "8c489eac-320b-4720-ad39-389fbf34a1b2",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "503e7258-a783-4a1c-b9fb-6ee1c4d9daf4"
        },
        "item": {
          "id": "d400cd10-dbbb-4324-bcbe-8e836a246c8f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "31bedf05-c4da-44af-9ead-a40e69c1c269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf5012a-edcd-4c5f-9f76-d2cb4ce3e428",
        "cursor": {
          "ref": "f7af147e-5b8e-4869-a55b-c547768cd601",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d3e61a0e-c0dc-4f92-a9fb-531091afcc49"
        },
        "item": {
          "id": "caf5012a-edcd-4c5f-9f76-d2cb4ce3e428",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "42a1bbf7-bc97-4fe4-8523-3e7a9e1d5cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26e6c45-79e2-4a22-aecb-22244a43be32",
        "cursor": {
          "ref": "bcfe2d80-5ede-4fd7-9854-632037673afd",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1875b949-effb-4232-8263-1664342706c8"
        },
        "item": {
          "id": "a26e6c45-79e2-4a22-aecb-22244a43be32",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d9f0214a-502d-4f16-ab82-ced39fbdc28e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5a225a-e15d-40c0-82ac-07094474f6af",
        "cursor": {
          "ref": "d264c7b7-39ca-4c9c-85d5-c9ba0450022a",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "f7c7913d-ed79-4ee0-a128-334a60ca119f"
        },
        "item": {
          "id": "9b5a225a-e15d-40c0-82ac-07094474f6af",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a5213568-22f3-45a1-8f66-2280ba4dcc66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c65e20df-6627-4004-9169-033de5de2b33",
        "cursor": {
          "ref": "56c4fdf8-c3e4-410c-bd1b-42f0a3272692",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "cb9f09cc-ab0a-4115-9cc1-0df66a279af3"
        },
        "item": {
          "id": "c65e20df-6627-4004-9169-033de5de2b33",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8434bc1c-d509-455d-8ce8-d3b2a6d13eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd28c74c-265a-4a5b-a32a-eedd29a8d5e0",
        "cursor": {
          "ref": "3c75e472-f9a6-442d-9828-73a4ddd08213",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f58ebcc8-63f9-49a6-be84-376c8f202f2f"
        },
        "item": {
          "id": "cd28c74c-265a-4a5b-a32a-eedd29a8d5e0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5895cefd-3476-43ae-a691-0b540a43e906",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "29356656-408f-483c-86f9-b77aacd02adc",
        "cursor": {
          "ref": "71fb46dc-6a68-43fb-a234-c387f9c72c40",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4b3ad6bc-4a5a-4daa-b7c2-9f3447ad5baf"
        },
        "item": {
          "id": "29356656-408f-483c-86f9-b77aacd02adc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5c3a906c-f87e-41ab-8360-709623eaa13c",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a511c533-d87e-4f71-a791-e83fbb5d1371",
        "cursor": {
          "ref": "3164eef3-38a4-424c-9529-b0ac9e70714a",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "88e5270b-5e84-4812-a612-423249962861"
        },
        "item": {
          "id": "a511c533-d87e-4f71-a791-e83fbb5d1371",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "efcedd9c-13f1-439e-998e-d286dc0cd41c",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "8adb6e02-c1b9-4148-9acf-aee23ea748cc",
        "cursor": {
          "ref": "ed2b557c-aabb-4f9e-99ec-d12f42ff908b",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "48e512e2-db06-4f53-bcde-dec3aafec096"
        },
        "item": {
          "id": "8adb6e02-c1b9-4148-9acf-aee23ea748cc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "dbd758ef-8a29-44c6-a40f-97234a19df4a",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "992436ae-f132-49bd-b2c6-78f73105a3e8",
        "cursor": {
          "ref": "069886bf-cb37-4447-ac7a-f5589b854ca2",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2cd97d5e-cc4f-4403-9bb0-80768a350549"
        },
        "item": {
          "id": "992436ae-f132-49bd-b2c6-78f73105a3e8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "56b956aa-70cd-4d1b-bc7c-c717066f023b",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "186218be-2c09-4181-acea-db9524c4f978",
        "cursor": {
          "ref": "4df44b0b-6882-4872-96eb-ae796d4768c7",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9ea5956b-a10d-4f94-afa9-f99f37805f0d"
        },
        "item": {
          "id": "186218be-2c09-4181-acea-db9524c4f978",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "231903fd-5fdb-4306-9fbe-46a93ab43174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "277d3a0a-2dae-4fe6-8ebc-5fe35dc272b8",
        "cursor": {
          "ref": "18b48e54-4023-47ea-9700-0801859ddc6d",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b37b9dad-d35f-408c-8eb5-feb777da9429"
        },
        "item": {
          "id": "277d3a0a-2dae-4fe6-8ebc-5fe35dc272b8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f020f967-364a-4b23-aef4-3454223c62f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3096c261-d2bc-4b6e-a739-db1ab36b1cdf",
        "cursor": {
          "ref": "4c9abc41-74be-4a17-ba4d-db0781694abb",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "ac4951a0-767f-42b5-ad78-537fc20c386c"
        },
        "item": {
          "id": "3096c261-d2bc-4b6e-a739-db1ab36b1cdf",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "5fc4eb4f-1e51-4b27-8492-bc9339bcac4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c11d8a-18ec-4504-af3d-9633dc1a309e",
        "cursor": {
          "ref": "2397b876-c1fc-4240-84e5-176950597072",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "96588cc4-c7a7-4416-ab5d-1013f772aa4a"
        },
        "item": {
          "id": "f0c11d8a-18ec-4504-af3d-9633dc1a309e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "de57418f-b5c2-4ea9-a7b7-c9bca8a73f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c04aa09-3394-4e34-ba25-3fde6ede53f0",
        "cursor": {
          "ref": "be58359b-35f0-4acb-b95d-dff517651bf9",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b0e85b1d-08d8-46ae-a8de-f8cf90bfd56a"
        },
        "item": {
          "id": "7c04aa09-3394-4e34-ba25-3fde6ede53f0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b074b801-228b-469f-a815-76560a535ca0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c6a283-a757-47c0-be42-5e1c74cee915",
        "cursor": {
          "ref": "05ff0591-975a-428b-b171-e11fc358f554",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5af0eb73-8e9e-4afb-81c4-68f8103cae9f"
        },
        "item": {
          "id": "e0c6a283-a757-47c0-be42-5e1c74cee915",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a366a651-a9cb-4676-93a4-bb203799b9ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30430c4-440b-4a89-af94-1be4f859ff42",
        "cursor": {
          "ref": "f6afbc4f-2329-4d3f-becc-06acd7db0e27",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "ef340f19-a7e2-426b-bcad-ddcebb8deaec"
        },
        "item": {
          "id": "b30430c4-440b-4a89-af94-1be4f859ff42",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ccf3e5ac-e6b4-444a-86b6-90cb556281e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806063a8-f7bc-4c32-aba1-75e139b00c14",
        "cursor": {
          "ref": "e2cfb6c5-5cf1-4522-b931-4a441ccbc98e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "44aed682-1602-48c4-9a98-b34665cfad26"
        },
        "item": {
          "id": "806063a8-f7bc-4c32-aba1-75e139b00c14",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "84fffd42-789b-4dad-8fc0-0ff56ac7a6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dffa231b-acde-4948-b3a3-4e5587067ac7",
        "cursor": {
          "ref": "44ee7a2a-c158-47ae-a3f2-5aef5c93c661",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5f3cbdf0-ef36-465f-8915-7e884fc950c0"
        },
        "item": {
          "id": "dffa231b-acde-4948-b3a3-4e5587067ac7",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "138fb145-4c1f-4583-b9a6-a18d07bc5aff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d33d8dd-c4d9-47c1-8669-c9fd89fe7c77",
        "cursor": {
          "ref": "f3fadbdc-53f1-41b1-b22d-92fbecc614e7",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2bf9b91d-5c30-4de6-901a-1b0004495511"
        },
        "item": {
          "id": "8d33d8dd-c4d9-47c1-8669-c9fd89fe7c77",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7929da08-5f24-4cae-b8c8-89055c1ac208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b521889-7eb6-4c0c-94cd-8e1e4df74aeb",
        "cursor": {
          "ref": "e5be5d10-60b5-4b96-a4ec-fd02f3696cd3",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2ad75d28-cc3d-4cec-ae4d-b44080a6f0c2"
        },
        "item": {
          "id": "8b521889-7eb6-4c0c-94cd-8e1e4df74aeb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8a6a9457-1fc8-4d60-a6a0-99d5e63489bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326839fc-e241-46d0-b1b5-7679d8869be2",
        "cursor": {
          "ref": "da3da3cf-b2e5-42c5-8afb-7d4b8654aebf",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "f0b0d89f-ac58-4b44-aa76-7a64fa08ddf6"
        },
        "item": {
          "id": "326839fc-e241-46d0-b1b5-7679d8869be2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "86dc7d42-6313-4dc9-a78d-35db51505747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913221f2-dee9-4e71-8f2e-fd64fbd8546d",
        "cursor": {
          "ref": "a581af41-b58d-4f5e-aa75-1ea29500b793",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "99d4e4b3-c5bc-4623-8a20-b948ac6508bf"
        },
        "item": {
          "id": "913221f2-dee9-4e71-8f2e-fd64fbd8546d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "73197bde-d5fd-4bcb-8e9b-6d0afad6cdbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c6fbf28-43bd-4a6d-9fad-e2e25c7d7241",
        "cursor": {
          "ref": "d6273bb7-5ee8-43cd-8f93-424849818a73",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c63a49e4-35f8-4355-a24a-9edbfbf201b4"
        },
        "item": {
          "id": "5c6fbf28-43bd-4a6d-9fad-e2e25c7d7241",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1093a6e0-271c-48ad-b02c-3e57a152524a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a629e0c3-fcb6-4298-b977-6b6a5c342926",
        "cursor": {
          "ref": "9a8a73b2-6eeb-4d1e-990c-ec0bfc95106e",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e0baabdb-e03c-46cd-be7d-7b9790da9231"
        },
        "item": {
          "id": "a629e0c3-fcb6-4298-b977-6b6a5c342926",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ce34698d-761f-4ddc-933a-78a733a6c1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a984125-5aa7-4845-a0d9-16169501dff0",
        "cursor": {
          "ref": "9743a358-ecb1-4cd7-a0a2-d284a8c9e251",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a578718b-3912-4fd6-aac9-9559f92ca4fa"
        },
        "item": {
          "id": "0a984125-5aa7-4845-a0d9-16169501dff0",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ab07a990-c70b-43be-895f-a0af7111a5d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71d76e6-5e55-4a8a-99aa-54cf813e68a0",
        "cursor": {
          "ref": "2144af10-8c67-4894-a1a9-4c3db786d24d",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2c0c4397-2f8d-4cc6-8497-0c9fe9791206"
        },
        "item": {
          "id": "e71d76e6-5e55-4a8a-99aa-54cf813e68a0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "4a93a985-a7a2-4ead-bb68-61311c61aa09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca64e87-f337-450d-85d5-937ac74dc981",
        "cursor": {
          "ref": "734b40b3-26ac-4367-9414-37d6314fa653",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "af8c7a4c-2bd7-47fd-bbaa-b2c678682d40"
        },
        "item": {
          "id": "eca64e87-f337-450d-85d5-937ac74dc981",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f06a7b3f-513b-41e7-8166-ac6ede166707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc55a236-a37c-4a4b-9ea9-09e82a6eeac5",
        "cursor": {
          "ref": "701098b2-662d-4f4a-be00-d0a2157d78a7",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7a78cd18-e1bb-4061-9661-6ede16286d33"
        },
        "item": {
          "id": "fc55a236-a37c-4a4b-9ea9-09e82a6eeac5",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "05317d99-d525-46b0-8938-87ce9e649a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5606dcd3-57b7-457e-a85b-4b4daf44387e",
        "cursor": {
          "ref": "8656b1c0-fa0f-4826-a03e-f46fc5750b97",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3b0bfddc-b393-4ab0-bd71-f65ae9d94239"
        },
        "item": {
          "id": "5606dcd3-57b7-457e-a85b-4b4daf44387e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5e29ff46-4bc0-4ff7-a78c-c9827023f769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77bc5451-37c3-4c77-9c2a-baae743d1d2a",
        "cursor": {
          "ref": "dd76a699-795a-414d-8075-36ebfa32b2c6",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "61f30220-ed43-416b-8de3-13bdadf5b33b"
        },
        "item": {
          "id": "77bc5451-37c3-4c77-9c2a-baae743d1d2a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "18197bfe-47d5-4d3c-9491-d4e35a6560b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21eff4ad-50ee-459a-a69e-c7446a6bdda4",
        "cursor": {
          "ref": "8454e666-b52b-4bdd-8b80-84ec30bdcda7",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a4eea491-4ed2-4ffd-bfdc-5ecc989dff7d"
        },
        "item": {
          "id": "21eff4ad-50ee-459a-a69e-c7446a6bdda4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "4a4d8ee7-d0e4-400c-a2f4-b9747a3e0b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573d9e20-eac1-4c48-aea8-7c501b1472ed",
        "cursor": {
          "ref": "32454e26-a711-460f-97bb-e403947a649a",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ad569145-618e-4b16-8d2a-f53be32e4021"
        },
        "item": {
          "id": "573d9e20-eac1-4c48-aea8-7c501b1472ed",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "84043b91-b241-4c35-969d-33ba45cb133b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4073e403-c8fe-4b17-8be6-acf35793545a",
        "cursor": {
          "ref": "b34119af-5695-4f49-8c02-ace84500226e",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "aa57a826-95a8-40c7-a924-3a3ed2f77507"
        },
        "item": {
          "id": "4073e403-c8fe-4b17-8be6-acf35793545a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0e187d34-8799-4adf-b191-ce020e1226c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f0cbd3-af41-4e2a-bf68-a161baaa65a5",
        "cursor": {
          "ref": "9757102c-99ee-4bc6-bd0f-26c68712ce35",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ab7d2f9c-11a9-4527-9c96-dbd6b88add47"
        },
        "item": {
          "id": "77f0cbd3-af41-4e2a-bf68-a161baaa65a5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f638ab70-468c-4412-9e63-5e1ac50d9f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa995ef6-73e3-4932-898b-bdf58e122ad6",
        "cursor": {
          "ref": "9f50cc4d-dd4c-4a3b-8e62-456f6a32ef11",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3e80d09a-492c-4016-8385-dc9fe38e8eda"
        },
        "item": {
          "id": "fa995ef6-73e3-4932-898b-bdf58e122ad6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "cfa063d6-2b50-4b60-a3ed-bcb6c6d7d174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445d5101-d98a-4f5d-8c13-d8889df9fe40",
        "cursor": {
          "ref": "4a06365b-38d8-4fd6-9187-94f938006e29",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a0089a8f-7556-475f-9f14-061c888617d6"
        },
        "item": {
          "id": "445d5101-d98a-4f5d-8c13-d8889df9fe40",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "108a8b94-811b-4fab-8390-42868cef329c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014ca527-a8e1-47ac-af0b-2d2f92a054c9",
        "cursor": {
          "ref": "6137caba-ce00-48b3-a32e-d7cc876700c5",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "547bccf3-800a-4c26-8ce7-e5a849e17b15"
        },
        "item": {
          "id": "014ca527-a8e1-47ac-af0b-2d2f92a054c9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "93099d90-1374-4c40-9f04-ba2535659036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd0effeb-8fd7-4183-a960-e93dae77dacc",
        "cursor": {
          "ref": "781c1c34-a227-422c-b3d9-c4620e508ad6",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f9a3305f-3143-4c45-aff4-6b0f85afa86c"
        },
        "item": {
          "id": "dd0effeb-8fd7-4183-a960-e93dae77dacc",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "dc9ce9f3-3b3e-4b04-b163-80ea585518b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "077f2321-efcd-48df-aabe-2d7e9ed82c1c",
        "cursor": {
          "ref": "4cea42ae-26af-4dc6-9c81-43e7f2185c08",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3ae0409a-f919-49d1-a084-3b3db8f1d0c2"
        },
        "item": {
          "id": "077f2321-efcd-48df-aabe-2d7e9ed82c1c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "32128bd4-4bae-40a8-af4d-371ca74c25b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3e92d7-db50-4266-9d49-ede2781e668f",
        "cursor": {
          "ref": "f199ff10-d603-45ba-bcfb-0a96fec64623",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c7c6f3a9-6216-4d34-9076-b4b144ed4614"
        },
        "item": {
          "id": "cc3e92d7-db50-4266-9d49-ede2781e668f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "79f295e1-4105-4943-a41b-68d4b6a385a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a09fbcc-0b99-4445-8268-10cf084ba10d",
        "cursor": {
          "ref": "21bc462d-ce5c-4f38-9448-bf8de131bb59",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "90df016f-ea3d-4f05-8dfd-aa6627163665"
        },
        "item": {
          "id": "4a09fbcc-0b99-4445-8268-10cf084ba10d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "48e87b9d-9558-48cf-affa-40105c3ca568",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c23a5931-447a-4952-b732-63e04f748b06",
        "cursor": {
          "ref": "2080cba7-fde2-4119-9da9-b431368ae40f",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "204f7052-9c82-4071-9d61-0c186988725c"
        },
        "item": {
          "id": "c23a5931-447a-4952-b732-63e04f748b06",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c6dde18e-ce94-41d6-a511-6ff27e54a88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "d235e854-0c88-4420-8626-85cb10c61a1e",
        "cursor": {
          "ref": "06dc7614-cc88-449a-af71-d64b53407911",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ffb9eea3-532e-44d9-8485-32fe3fffb205"
        },
        "item": {
          "id": "d235e854-0c88-4420-8626-85cb10c61a1e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "712e1baf-cea7-4306-af56-bce42064da25",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1efeea-9182-478b-b9b8-410a83ce0567",
        "cursor": {
          "ref": "5ed453ee-2665-4924-be7d-1016cd89926e",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c0206b27-a3ea-47be-8d9d-e1822c9ee8e6"
        },
        "item": {
          "id": "5f1efeea-9182-478b-b9b8-410a83ce0567",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "666285b2-21d9-4e0c-af38-dd62527ab927",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4fd46a-b5f3-40ae-8b23-f4d1ff52e242",
        "cursor": {
          "ref": "b4e65af9-e009-4582-913b-e9dd1302401d",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8826d934-0060-4809-b2da-97f69c50fbbb"
        },
        "item": {
          "id": "ac4fd46a-b5f3-40ae-8b23-f4d1ff52e242",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d887e0f6-55eb-4bbe-9d9d-067e8345bfaf",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1beea5b0-91dd-4f22-aa76-6f980acb267a",
        "cursor": {
          "ref": "ba766dd5-20ae-4a1d-b285-63ff83747083",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d9e3c039-c133-4686-a670-bbf99188acce"
        },
        "item": {
          "id": "1beea5b0-91dd-4f22-aa76-6f980acb267a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e59671d0-4168-45e4-aab2-b2a28ae4c486",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c45ae3f1-3fe4-44c8-9e9b-32527626f83d",
        "cursor": {
          "ref": "9a9a486b-3c6d-4275-b40c-7bd75c70dcf3",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "18ebff03-6f21-43bd-bcb3-0d68d33c6edb"
        },
        "item": {
          "id": "c45ae3f1-3fe4-44c8-9e9b-32527626f83d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "86453766-5585-4282-86c0-2299f8f9e460",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-21T00:36:29.917Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-21T00:36:29.917Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2bb9772b-d059-4ba8-9c8e-a567dfef53ed",
        "cursor": {
          "ref": "75ce4246-f51c-4ea0-8c7d-6b8fa3379423",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8bc89d84-9b71-4ae6-ae42-e96913e4380f"
        },
        "item": {
          "id": "2bb9772b-d059-4ba8-9c8e-a567dfef53ed",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "479868af-9d2f-4c9a-a9ab-0e9ea8595696",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88726b1b-3da2-46b2-9a33-55925a073579",
        "cursor": {
          "ref": "ada015d9-6727-4b99-99d5-6853913b26b7",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6ed6287e-362c-4b53-a1f1-d7f5c0776d2e"
        },
        "item": {
          "id": "88726b1b-3da2-46b2-9a33-55925a073579",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fd226712-2687-448d-a6ac-bd3ca21262a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba630b22-c8ff-4cca-857c-c4d5666ee0a5",
        "cursor": {
          "ref": "f95297bc-6b6e-41b3-b68f-de33c03b3447",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "97acf010-bd77-44e3-83ff-0f06ef9478d0"
        },
        "item": {
          "id": "ba630b22-c8ff-4cca-857c-c4d5666ee0a5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1ff90019-fbce-41b0-894b-1ab75d72ca3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25f456c1-d233-4b7a-8373-bf81e93065ab",
        "cursor": {
          "ref": "d318c099-988b-42bd-8c90-fda22da3b63c",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "83670fb3-eb55-41fe-8fe9-112d72f6be4a"
        },
        "item": {
          "id": "25f456c1-d233-4b7a-8373-bf81e93065ab",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ac852b90-16c1-43aa-bd68-3f79d8d3470b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa1c7ca-1ca7-4250-b537-9b014b4353be",
        "cursor": {
          "ref": "89e3f44a-726a-45c8-9c39-e82b9f9ad12a",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b21a7908-b009-409f-96c6-4be2c5a14b08"
        },
        "item": {
          "id": "2fa1c7ca-1ca7-4250-b537-9b014b4353be",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "1a6f52d7-39a6-4478-9740-61b9dae0615b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d26e85c-e04f-47fd-9190-e34ede461424",
        "cursor": {
          "ref": "c97e096c-5cd8-4845-b56a-9cd8d23b5da3",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "985e01af-3c03-4789-9109-f80168918b0b"
        },
        "item": {
          "id": "4d26e85c-e04f-47fd-9190-e34ede461424",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "91d76b90-3229-40f4-a53d-0bfb37737ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb7b465-6635-4318-8f15-98c1e1988162",
        "cursor": {
          "ref": "a9771212-23d4-4991-aec3-5d41f8b0e6f0",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "76877c12-7ad3-4f53-89d3-c2fe729534a3"
        },
        "item": {
          "id": "adb7b465-6635-4318-8f15-98c1e1988162",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e8534257-861f-446a-b39f-40ae6f14dcb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a44a441-53d2-4ea7-a559-c0880588bb57",
        "cursor": {
          "ref": "b05c1850-60cd-43a3-b071-dcdb6d35da02",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "254f5f88-7cff-4c2c-b681-c16053b369d2"
        },
        "item": {
          "id": "4a44a441-53d2-4ea7-a559-c0880588bb57",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "cc6cbbd7-2140-48b7-8cd4-65ff001478e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ba223a-58e5-4ae8-9191-e0242ee22e72",
        "cursor": {
          "ref": "a94877cd-03c1-4388-81a8-b7fab21c1376",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2ef7f18e-389f-4999-b2af-621b7e987321"
        },
        "item": {
          "id": "c2ba223a-58e5-4ae8-9191-e0242ee22e72",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6d8ad4c1-0ce4-4e6b-a2d2-28af55ad38e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c77bc6a-3ada-4976-9090-c19071cb54b6",
        "cursor": {
          "ref": "93374020-997f-4bd7-837e-eea76f757a9f",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bb45af0c-98b5-4811-bc7a-3bfde6955561"
        },
        "item": {
          "id": "1c77bc6a-3ada-4976-9090-c19071cb54b6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c9327532-4bf0-42ef-b81f-5cdf240b5fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1e6d37-ecc9-4b4e-82de-646bf948bebe",
        "cursor": {
          "ref": "1ba64d57-d761-45b8-bbb2-5d256acf70aa",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "34e4b3f6-182d-4f08-b493-5558a349dfab"
        },
        "item": {
          "id": "8d1e6d37-ecc9-4b4e-82de-646bf948bebe",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "094a15e4-2bc8-46fe-988a-7324182053c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce91e128-a6a6-4233-8353-f1f2ec2c58ee",
        "cursor": {
          "ref": "f81dda7c-c8a0-407d-be49-cff37837052a",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4e87b033-8d90-4b13-a5ce-b681153db7aa"
        },
        "item": {
          "id": "ce91e128-a6a6-4233-8353-f1f2ec2c58ee",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0106c96c-fec7-41cd-9266-bb30705d4ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3760b738-1b02-491c-88b4-462dacbea87a",
        "cursor": {
          "ref": "698a51ef-c06d-483f-9cfc-92500e3be874",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ffca9a3b-de60-43e8-a851-1dd8921115c7"
        },
        "item": {
          "id": "3760b738-1b02-491c-88b4-462dacbea87a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1558a1ba-cc9e-40bd-870c-ce4f178cd6e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee89587f-3d52-4b51-bb7f-52efda58b557",
        "cursor": {
          "ref": "ddccf375-f19d-4735-9d1d-192198f438c4",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d3db7699-2ef3-4a45-8369-eca40ff06be3"
        },
        "item": {
          "id": "ee89587f-3d52-4b51-bb7f-52efda58b557",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4988baed-df2e-4a66-954a-e33c574cdf6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d0bbe9-fb34-4eed-a0af-1a659776fc53",
        "cursor": {
          "ref": "002a6cde-5944-47c8-82c1-58574598884b",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "dd29430b-7f70-451e-acbc-216090dc97d6"
        },
        "item": {
          "id": "c2d0bbe9-fb34-4eed-a0af-1a659776fc53",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "857c0d61-8624-4e70-a3d9-258ff3aafbb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630e0440-d274-468d-9a0a-26e6e087975e",
        "cursor": {
          "ref": "54c2c4e4-02db-4ccc-a446-98b64a426b47",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b30c767f-a67e-4c0e-825b-9d6535ad882e"
        },
        "item": {
          "id": "630e0440-d274-468d-9a0a-26e6e087975e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4a375462-1d50-464c-87eb-1f03bebe46c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44206d84-6fce-45e4-813e-213c2345851a",
        "cursor": {
          "ref": "719b2b93-7404-48eb-ba3f-639497dd7723",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f2ff44ec-6aec-4f92-b36a-1dba36af28d0"
        },
        "item": {
          "id": "44206d84-6fce-45e4-813e-213c2345851a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4708e31c-da04-4f3c-8bd5-89a980ef141b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b1a385-9734-4dd1-98de-b70efca5f849",
        "cursor": {
          "ref": "52bf7f3f-f3c9-44b8-9446-4b78818e9ae9",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "973f887c-ec66-439a-806d-de252aac8ac0"
        },
        "item": {
          "id": "87b1a385-9734-4dd1-98de-b70efca5f849",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "21e99a5a-70da-4792-aaf2-d1e78de4d886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a31eaf-c55b-4cf1-ba0c-19350d04e91b",
        "cursor": {
          "ref": "881ef676-b44d-4913-a5e4-0bb2e6889d7c",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f9e30c6a-0a36-4a3f-a1a6-9e33a885f043"
        },
        "item": {
          "id": "c1a31eaf-c55b-4cf1-ba0c-19350d04e91b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c5d4e569-507f-47bd-92d5-6df9661b36ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f948b1f-ea3f-4a2d-8b1f-30e94357d1e7",
        "cursor": {
          "ref": "b5d0abe7-aeba-414f-9fca-ccb947cb5bf5",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "519a167f-395f-47a3-8b27-6be56444ef86"
        },
        "item": {
          "id": "4f948b1f-ea3f-4a2d-8b1f-30e94357d1e7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "908c9309-7ca7-4d3e-a873-d9af31ed5ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa502c4-f9b2-4acc-8895-50f1703db2f9",
        "cursor": {
          "ref": "2be0e6af-8d52-4e7b-b921-e018d22caf60",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "70be3e21-4000-4dc1-aae7-e41872ca0e25"
        },
        "item": {
          "id": "daa502c4-f9b2-4acc-8895-50f1703db2f9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "657a049e-1c4b-473d-91d9-3bd1726531e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ca4fa5-1b55-455b-ab2b-2e2486ca8dd5",
        "cursor": {
          "ref": "d0727421-0e9a-40be-9b1d-39c56521d395",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9943cc1f-830e-4127-afef-850de8f2d732"
        },
        "item": {
          "id": "69ca4fa5-1b55-455b-ab2b-2e2486ca8dd5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f0d1a908-5654-4f71-95b8-10fb1d5d50a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e89c36a-7c18-4e1e-b95e-20d64ce30915",
        "cursor": {
          "ref": "5ee71b12-47db-4fd7-a7a8-580209d60e16",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "11d203b1-b09d-48e7-ade6-debe974bc301"
        },
        "item": {
          "id": "8e89c36a-7c18-4e1e-b95e-20d64ce30915",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "76e1b1f3-9ce9-40d5-8fa6-70c0829522ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9acb70e2-2133-43a0-ad51-ce59814442fa",
        "cursor": {
          "ref": "9264fd97-bda0-4ab1-81f3-55858e31a1ff",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9602da00-3e82-4b4e-8d5d-20366c07ba21"
        },
        "item": {
          "id": "9acb70e2-2133-43a0-ad51-ce59814442fa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f55cb8ba-367c-42fe-b390-bdeb2041821a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b45af09-46ba-4fb5-8558-e7538eb8f1a2",
        "cursor": {
          "ref": "7db7470c-297a-4495-b8f2-e686348dcf19",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "86ec3123-6a55-4c52-bc73-8495c272e0cc"
        },
        "item": {
          "id": "1b45af09-46ba-4fb5-8558-e7538eb8f1a2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3bb85a7f-6420-4c9c-ab6f-d8ad76a883e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9738c09-f3db-4544-8d1b-d6037cd7ae4f",
        "cursor": {
          "ref": "8074dd8d-9531-459c-bb28-03c0be4c30e9",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b2065966-5534-4a20-a66c-4b2e7be2b398"
        },
        "item": {
          "id": "a9738c09-f3db-4544-8d1b-d6037cd7ae4f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "75846170-a813-44ef-92bc-5ad31b3bb0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289cb7a1-39b5-4638-a85c-87f8434155c2",
        "cursor": {
          "ref": "f4aad2f4-04f9-4462-8807-a8026be58840",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8caea6e8-e0d7-4906-8eab-7c13aaa027bf"
        },
        "item": {
          "id": "289cb7a1-39b5-4638-a85c-87f8434155c2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e7c35d4f-4c9f-4acb-99bc-77f0d793ba18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "332cb828-ae2c-40e7-83df-9692b859c2a0",
        "cursor": {
          "ref": "38d0f933-65bd-44a4-8158-51e6e31aa2f2",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d35b99f9-eae0-4ea3-b11f-747d220c1a66"
        },
        "item": {
          "id": "332cb828-ae2c-40e7-83df-9692b859c2a0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "439633c1-7627-4a60-a932-65b07a821526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b8acd12-9a4c-4aa8-9975-21c5f820e66a",
        "cursor": {
          "ref": "8c4917f2-2dbf-4df0-8d5b-57a83bf81b98",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "65fa82e5-f143-42b3-b902-7a3c6fc9e0aa"
        },
        "item": {
          "id": "8b8acd12-9a4c-4aa8-9975-21c5f820e66a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d347eb0e-7802-4702-a847-0961b18f518b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91e56bcf-868c-4849-b9dd-f360ea728ee1",
        "cursor": {
          "ref": "07283c1d-6c41-4ac6-8ee7-b6893454ee48",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "136b3489-2037-4872-a5f5-9635e99fbcc9"
        },
        "item": {
          "id": "91e56bcf-868c-4849-b9dd-f360ea728ee1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a70fd2db-5dcb-4933-9836-0a469d5712a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c849aaf-2ba1-4a7d-b629-a38c0fadb18f",
        "cursor": {
          "ref": "cbc7c571-790d-4e82-ae4b-886ee89c8823",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "0d060d20-335d-43c6-bbfb-b9981013edc7"
        },
        "item": {
          "id": "8c849aaf-2ba1-4a7d-b629-a38c0fadb18f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3688cb1f-1deb-4c1e-9280-449e2b5b91f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b39365-9955-4bc7-b262-2ba2bd153a61",
        "cursor": {
          "ref": "3b3ea548-0f56-40d9-b5d4-274b708c81b8",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0a1074e0-a48d-46f6-aae6-f784f5977506"
        },
        "item": {
          "id": "58b39365-9955-4bc7-b262-2ba2bd153a61",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8f51c907-b261-48e0-99e8-332632539fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fae9507-4594-4874-8085-326820fb4fc8",
        "cursor": {
          "ref": "b36dc73d-9aac-4355-9c77-a474e552f630",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "74b2110e-33f3-4877-a3d3-23fd79d352ad"
        },
        "item": {
          "id": "1fae9507-4594-4874-8085-326820fb4fc8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ffd27a48-debc-4f73-acb1-735bd9c56a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d3d48d-263f-4f75-8a30-b65fad0c1205",
        "cursor": {
          "ref": "6787b2b9-377c-49ec-ae37-795b34d97da9",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e286ba64-34d0-419b-8e73-2f88e71f1cfe"
        },
        "item": {
          "id": "d4d3d48d-263f-4f75-8a30-b65fad0c1205",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "038982d5-1d36-4ce9-8002-1c9401a818d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a652049e-5f6b-45ac-a41a-a8774c470312",
        "cursor": {
          "ref": "40cccd3f-1b77-4f2b-a06e-d13c44fd64eb",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7f7f85ab-14c0-482e-82e9-ece9cc2bd944"
        },
        "item": {
          "id": "a652049e-5f6b-45ac-a41a-a8774c470312",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3392fb2c-88ac-4b44-bf9b-f9d3af67c37f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3fdf1f-4fe9-4b2c-bbd6-d8ab5c3fdf81",
        "cursor": {
          "ref": "1cb6795c-9007-4cfc-8e8e-b75609e91dd0",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9887448f-2e3f-4509-afff-fc4094176dc5"
        },
        "item": {
          "id": "cc3fdf1f-4fe9-4b2c-bbd6-d8ab5c3fdf81",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e38e6d51-5be9-439e-bfc1-942ef3673451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f90522-129d-463c-ab7e-2472dd5dfb3f",
        "cursor": {
          "ref": "ea5c8a9b-2fe3-4c6d-810f-36030bc70825",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4d70cf74-3d6c-4a9f-a9c5-f4002138ede5"
        },
        "item": {
          "id": "04f90522-129d-463c-ab7e-2472dd5dfb3f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cd05aa68-e7c8-4bfd-ad46-8bd73b4b5952",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7928fa27-6dac-4bbc-b3fb-6cd4db25e9f1",
        "cursor": {
          "ref": "4b374fe5-ff51-430f-bca2-531b42f2b90e",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "193825de-3584-4711-91f5-37ad2e0119b5"
        },
        "item": {
          "id": "7928fa27-6dac-4bbc-b3fb-6cd4db25e9f1",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "07dba5d3-19a3-4ba9-b518-368bdd509504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25920b00-87c9-4e10-baa5-d82db5c4f88d",
        "cursor": {
          "ref": "7dfd13c9-f087-49cf-a39d-ca51c8ebd7c4",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cf50ac41-5936-4144-b81b-a5b93529cb57"
        },
        "item": {
          "id": "25920b00-87c9-4e10-baa5-d82db5c4f88d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6b1f6fa4-beb1-48e6-989d-80a14985b95e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a6093e-4997-491f-8ed2-82bdf4e1aeea",
        "cursor": {
          "ref": "310be3cc-94f7-4d64-84f7-ee0a8154e518",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "fd638f09-a5d2-494c-9920-2baa97c3b6d8"
        },
        "item": {
          "id": "c8a6093e-4997-491f-8ed2-82bdf4e1aeea",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "98cea5f5-5b06-4773-b9c6-a98492587c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de1b3c4-ab5a-438f-98be-d8cbe559539c",
        "cursor": {
          "ref": "7c12ef12-2e30-459e-a928-8523b37c95c2",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "001de9ed-721a-468c-9c81-eb204102f874"
        },
        "item": {
          "id": "6de1b3c4-ab5a-438f-98be-d8cbe559539c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1482f3bb-9e27-4a3c-8fe3-7b1b9931edc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe86fb88-3dac-425c-b9db-e0be5ccb87aa",
        "cursor": {
          "ref": "8fb8ce81-be1d-4ef6-8fec-163f9bdf3667",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7977420b-1cf2-47c3-896c-6335fa61839b"
        },
        "item": {
          "id": "fe86fb88-3dac-425c-b9db-e0be5ccb87aa",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a5411c84-a746-4c88-a680-b1f668d178af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed946a46-583d-489f-9f04-e51c4f74a474",
        "cursor": {
          "ref": "7283fdf7-2cb2-4d20-bdfb-e591f6ab0c4c",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "fdc86804-71d0-41e1-8af7-4f0db71d206b"
        },
        "item": {
          "id": "ed946a46-583d-489f-9f04-e51c4f74a474",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "941f3a26-73af-408b-a530-7db529627cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6dda99-38fd-4066-9191-38f36fd5e60c",
        "cursor": {
          "ref": "bdb42fec-791b-4f60-9993-bca3810d2ee4",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a25fd3ac-18c7-41a2-aada-4aced90efbbd"
        },
        "item": {
          "id": "0d6dda99-38fd-4066-9191-38f36fd5e60c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b8750c96-6316-450b-83cf-33afad7ac538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ade0660-8952-4556-987d-57cd29f30912",
        "cursor": {
          "ref": "b69b8250-934b-49a2-ae13-82666ce4bbe0",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "85fac877-72e5-4587-9baa-0688dabba936"
        },
        "item": {
          "id": "6ade0660-8952-4556-987d-57cd29f30912",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "637fd373-7ce0-4711-bc21-e73a1c857a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67465edc-024e-4c32-86c4-b12bdcfb2b4f",
        "cursor": {
          "ref": "82edf6fc-6230-4ec3-9069-92457d8fb461",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "46e8c7ea-3a3d-492c-a0b7-527cffb6b555"
        },
        "item": {
          "id": "67465edc-024e-4c32-86c4-b12bdcfb2b4f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5037b4dd-fe7d-458e-9549-14dc576b5a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e3f2655-0f30-416d-b428-67fd4d9d44b0",
        "cursor": {
          "ref": "ff59ba81-30f8-42f7-9fdc-3e2f22d2c1e6",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4ca40c96-0d32-4346-b413-fc58cec1bb31"
        },
        "item": {
          "id": "9e3f2655-0f30-416d-b428-67fd4d9d44b0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "dd01dd9e-3b86-417d-8fcc-6ef3ee86d17b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a01086-8f88-4023-a01e-aa3826af21a8",
        "cursor": {
          "ref": "c6d81502-b1c7-4911-8ff3-e495dee64227",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6c106d88-c443-4593-9750-886b25666195"
        },
        "item": {
          "id": "18a01086-8f88-4023-a01e-aa3826af21a8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ab208633-45ee-454c-96e9-3c032e5138fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44eabc48-d281-4f02-abdd-c22cf9165fcb",
        "cursor": {
          "ref": "c40accca-6f52-4c54-aafb-1b287ca87679",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "af6ebb39-1e2b-4d06-b66c-dc79a438b28c"
        },
        "item": {
          "id": "44eabc48-d281-4f02-abdd-c22cf9165fcb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f8ae4dae-d9eb-47dd-9335-c9958032323a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320a112f-fdd8-405c-b4aa-886236236788",
        "cursor": {
          "ref": "387394cb-9412-4d34-a469-77673027595d",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "91c770a2-7a2f-4abf-8722-5950106b8919"
        },
        "item": {
          "id": "320a112f-fdd8-405c-b4aa-886236236788",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "dc5c3c1f-07ee-4291-b8a2-aa6b65e72374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a87414d-3331-4771-bf4e-2809ed562681",
        "cursor": {
          "ref": "04ad6bb4-6726-4fa6-b737-876e1d753465",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "b3c79057-40f7-4cee-8f50-6d598017a97b"
        },
        "item": {
          "id": "2a87414d-3331-4771-bf4e-2809ed562681",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "251bc6fc-7ba3-4ecf-be97-a515a71830bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84853ed5-345a-498b-9acd-dd6f78c5ecea",
        "cursor": {
          "ref": "c3f4db07-3606-462a-aee7-98afc64753b0",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "21e07178-d5f0-4ae4-96e7-dab24dc4fa25"
        },
        "item": {
          "id": "84853ed5-345a-498b-9acd-dd6f78c5ecea",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "848153da-a9b0-49f2-a754-c7241a459d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73362670-6ddb-4925-aeb1-44213fcf78b6",
        "cursor": {
          "ref": "eacf7a9b-c566-439d-a237-7d15b975413c",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "82158432-acf1-422f-9793-85808b2e9e02"
        },
        "item": {
          "id": "73362670-6ddb-4925-aeb1-44213fcf78b6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "60306955-e36d-4c49-b71d-891199df4581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb255788-fe68-4cfa-9dd0-5d14b2de844a",
        "cursor": {
          "ref": "0fe3b909-ddb7-45fd-8796-f2e1bd33299c",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "38238c20-f98e-4201-a371-e38becc5abd2"
        },
        "item": {
          "id": "eb255788-fe68-4cfa-9dd0-5d14b2de844a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a46fe380-1e4d-4af6-94ac-b2a8690247ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "761d75eb-0778-435d-93d4-492d80a721c1",
        "cursor": {
          "ref": "c016286d-8246-449e-9990-a186738a16e8",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0fb9cd26-e668-49a4-b51c-84c6d4559fac"
        },
        "item": {
          "id": "761d75eb-0778-435d-93d4-492d80a721c1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "92cfb19f-7054-4ea4-bae8-60741b9f1f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e8d9f8-1df6-4b4e-a730-5d03361d3e5b",
        "cursor": {
          "ref": "3e92c265-6074-4f6d-92a9-83dc38abf719",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1a4b301c-15f8-4348-8094-fcfe87959cd0"
        },
        "item": {
          "id": "a9e8d9f8-1df6-4b4e-a730-5d03361d3e5b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e4e04eef-80e1-4edd-b908-720c03a2fcc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284e6728-545b-4c33-8320-0fd54d88bd4c",
        "cursor": {
          "ref": "3bb36bc8-1c0c-4a15-bad1-7a8435571a60",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "06fffaa5-dcc2-416b-875e-6a8e106a442c"
        },
        "item": {
          "id": "284e6728-545b-4c33-8320-0fd54d88bd4c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6f544a3c-b27f-48eb-b60a-dd606190f305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106bdace-8c8f-46f2-b1f1-1b72d90f7510",
        "cursor": {
          "ref": "9d9aeed0-1550-477f-9341-1e4e87820c0d",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c63d44c5-5dd0-4ba3-bf81-21acc4c3751b"
        },
        "item": {
          "id": "106bdace-8c8f-46f2-b1f1-1b72d90f7510",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "92e59dfc-7327-48ce-89aa-5e5e08bcd6c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ec83447-d8af-48ec-b821-9dd071c1f819",
        "cursor": {
          "ref": "0f98c8b2-193b-4cb7-984b-e0e8bf6302e9",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5957cef4-72b4-4929-8b90-9fa56f6fab09"
        },
        "item": {
          "id": "1ec83447-d8af-48ec-b821-9dd071c1f819",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0c39efb4-bb84-4d0b-a49d-1a20e7f318b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f00a8c9-fe57-42f4-9349-90fdcc201c2b",
        "cursor": {
          "ref": "909ea741-d4f0-4d73-a380-dc6ebdff10cf",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b9c1b5be-dc07-4454-a3ec-e2a930db7fe6"
        },
        "item": {
          "id": "1f00a8c9-fe57-42f4-9349-90fdcc201c2b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "84ec0755-2305-4171-9708-551a72b044be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aad35fd-3e6b-4cf7-9065-183fac637494",
        "cursor": {
          "ref": "80372304-d0f0-4066-9de5-332f0ceee7fb",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "35a0eff8-7eaa-4270-8f92-7f848a4b82c5"
        },
        "item": {
          "id": "3aad35fd-3e6b-4cf7-9065-183fac637494",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d9e771aa-365d-483d-aea2-12d349e5c7f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75540884-a8a0-4ae0-9787-c1b8e210f51e",
        "cursor": {
          "ref": "c3572094-7e6c-4999-af72-9ccd9e1b2dfd",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f00d0251-0d93-4262-9e4d-ad3fda2b7446"
        },
        "item": {
          "id": "75540884-a8a0-4ae0-9787-c1b8e210f51e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d00b5f52-6260-437d-8a7b-26b383b705bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d8a90ee-0ef0-4a2f-92ea-ab840ec1ebbc",
        "cursor": {
          "ref": "3c089cf5-da14-4d77-8fc4-55cc78fd9214",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1a591aa2-1d89-45d5-8da8-c5104b9c1a3c"
        },
        "item": {
          "id": "0d8a90ee-0ef0-4a2f-92ea-ab840ec1ebbc",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "46bb0b68-b51b-4b4a-92c3-42e4a4c1de4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3c2ab5-2540-429e-b73f-3d8cf2326a39",
        "cursor": {
          "ref": "46ed2398-ed5d-4741-a0d1-cbf398eff82b",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "da978b08-f6de-4b28-841e-7c41c0be1a95"
        },
        "item": {
          "id": "fe3c2ab5-2540-429e-b73f-3d8cf2326a39",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c72b6889-a785-45bf-ac67-b9b77582a27c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070d9405-f4c6-4b7d-8953-5a759f1e9579",
        "cursor": {
          "ref": "398abf93-6de3-4947-b4ca-0b7e6edbc08c",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "1ad25dae-24de-417c-b500-0ee3fe0179bd"
        },
        "item": {
          "id": "070d9405-f4c6-4b7d-8953-5a759f1e9579",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "aa089fbf-b1e7-494b-a304-95b49cad437c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448387a4-47d1-4eb2-b3ba-d281baf25678",
        "cursor": {
          "ref": "eb0602d1-9170-4834-a650-10272feef8df",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "74fd46ce-f21a-4766-8711-95af59975d27"
        },
        "item": {
          "id": "448387a4-47d1-4eb2-b3ba-d281baf25678",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2ca132e7-d438-447c-b5cd-8f6b1cb4d176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681f1e06-b05a-4dbd-89dd-004f073373a9",
        "cursor": {
          "ref": "132f0570-5e4b-44f2-a706-493d80882865",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2340e7ca-9316-4260-b3f4-06034083ae57"
        },
        "item": {
          "id": "681f1e06-b05a-4dbd-89dd-004f073373a9",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "4d78d751-7167-499b-91fd-42a4dc26fe8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb58392-b5d6-4c59-a9f6-73b7fbc75e7c",
        "cursor": {
          "ref": "506013d0-cfca-4768-86b3-1ae63315550b",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e4b208f4-5975-4e0b-9225-db53663b42d0"
        },
        "item": {
          "id": "fdb58392-b5d6-4c59-a9f6-73b7fbc75e7c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7e8ecb17-17d9-4ff6-afd3-1a18a6108c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6cd3750-44fe-4468-8b05-7d9ffcf8abe7",
        "cursor": {
          "ref": "d8ee71f7-398d-419a-9188-f9af991df9b8",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c3940ce8-2e11-4c1e-b0ec-77b53d1e9cc5"
        },
        "item": {
          "id": "f6cd3750-44fe-4468-8b05-7d9ffcf8abe7",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "0f1744db-4723-4f77-98ae-18736d8a575c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ea6f94-53df-4bd8-b956-7c86c76f12f8",
        "cursor": {
          "ref": "ed7e68d5-bebc-405c-9860-32ba772cd40f",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d1353bbf-1b09-4ca5-add0-a53bfe7aa494"
        },
        "item": {
          "id": "07ea6f94-53df-4bd8-b956-7c86c76f12f8",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "7cb09d25-0088-45c0-b442-9d6cf7b803f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f274b383-9b91-4410-98b3-356f3aad0dd6",
        "cursor": {
          "ref": "df57a44c-b6f2-4923-9456-41ec506a08ed",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "03614cac-51d9-402d-bcd9-ba043317f5cd"
        },
        "item": {
          "id": "f274b383-9b91-4410-98b3-356f3aad0dd6",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "894f9f11-116f-48d4-ba25-f2b7b3ec109b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f5f932-7a8f-4605-bb08-4d1d6234c25a",
        "cursor": {
          "ref": "35a87706-b9a7-457a-bb8b-f5d5ff459819",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "803a0ec5-8c60-46e1-9536-d62e1e0170f9"
        },
        "item": {
          "id": "36f5f932-7a8f-4605-bb08-4d1d6234c25a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "939ff110-4454-41d8-86b1-9ac1da1a37a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05785740-929f-4815-8c0e-1fda73873383",
        "cursor": {
          "ref": "e3c8e76b-ae10-455d-98ff-a15cd6c4c3fb",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "40a85fac-0079-4e7d-9222-dbdbba793396"
        },
        "item": {
          "id": "05785740-929f-4815-8c0e-1fda73873383",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "12eb66bd-9e57-455b-984c-7e1ceb673d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca22b0b-89e5-466d-ba9b-fe4452734654",
        "cursor": {
          "ref": "9752bd09-145e-42d1-ac8c-614d4b15fb73",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9585fce2-2c10-4bc9-a91a-039afb0015b0"
        },
        "item": {
          "id": "2ca22b0b-89e5-466d-ba9b-fe4452734654",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "984a4e15-1691-4765-84dc-ab4631eb677c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac994fe-0709-4918-883f-cde72c90ff82",
        "cursor": {
          "ref": "11e77d10-b96c-4dcb-9723-03777b40ee4a",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "32f29e4c-21d9-4e22-b43f-a3e3c32a16a6"
        },
        "item": {
          "id": "eac994fe-0709-4918-883f-cde72c90ff82",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "93d58084-f5ed-44f7-938b-6574e041f0cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce74347-b7c1-4f26-b8f1-0a0d36ac380a",
        "cursor": {
          "ref": "45dc330f-b7c2-4aa4-8220-1c3547f9b3b2",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "33987f7a-c400-4d66-aedb-ddcbaee45cd3"
        },
        "item": {
          "id": "3ce74347-b7c1-4f26-b8f1-0a0d36ac380a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "72a97fb1-364c-4b02-9b65-4f5479469a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a77e9c8-a18f-45b3-8a7a-3de42be1fb96",
        "cursor": {
          "ref": "19a54344-f943-435c-abba-a7e57e39042b",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "792c03ee-d13e-49dd-80aa-5c34ebfaca69"
        },
        "item": {
          "id": "6a77e9c8-a18f-45b3-8a7a-3de42be1fb96",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "78abba94-479e-445a-90ec-5e66b3e92101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c708d2b-c10f-49cb-b119-4605d8d79e90",
        "cursor": {
          "ref": "d54260e3-7872-420b-9391-4c6cab80100c",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dd339947-d890-4dd3-a150-744184ef4132"
        },
        "item": {
          "id": "2c708d2b-c10f-49cb-b119-4605d8d79e90",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7294738e-ec0c-4750-b019-b53303aafbd9",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "553d5167-b60b-492f-a85a-6365dc33b722",
        "cursor": {
          "ref": "18b0439b-e197-4d83-855b-a6b211c63287",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fddcdbc1-3186-40fa-a4e9-7ccc9b7984c3"
        },
        "item": {
          "id": "553d5167-b60b-492f-a85a-6365dc33b722",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "fdad7c1a-4e03-45ff-8daa-69d19bf912e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58bf43f-6faf-4e69-b892-6838b9b2e08b",
        "cursor": {
          "ref": "6da578a0-439a-43d9-ab6e-89fa4de76e9e",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "746c8984-0741-45b5-9277-87f3dc69ce47"
        },
        "item": {
          "id": "e58bf43f-6faf-4e69-b892-6838b9b2e08b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b9f0c8cd-bc89-4a64-bc81-cbe96ff48dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93666473-5d3f-49a0-aad2-4dd42e9b807f",
        "cursor": {
          "ref": "f972641c-7b5d-416a-82a4-17d5c973ee5b",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9cb5501b-a45c-43f7-9e9d-bf7e8745026d"
        },
        "item": {
          "id": "93666473-5d3f-49a0-aad2-4dd42e9b807f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7d0850b5-a921-46b2-9188-63f43add22b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2faa38e4-f4f0-4dab-97fb-919e4b29a1f2",
        "cursor": {
          "ref": "d18cc818-1ce6-4c95-b207-dd3c72242359",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ef9ac1dc-13f5-47f1-81f0-ec411b9276b2"
        },
        "item": {
          "id": "2faa38e4-f4f0-4dab-97fb-919e4b29a1f2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6a9f552d-45b5-48b5-9502-fb547c771f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03661ce-7fe0-4d5d-8174-f03c745714cd",
        "cursor": {
          "ref": "b9a3f82f-5a88-4143-a5aa-0810ef540e63",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d446601c-ea98-455c-9482-c38f23af26a9"
        },
        "item": {
          "id": "f03661ce-7fe0-4d5d-8174-f03c745714cd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a6bc76aa-f80c-415b-b34c-55fc0a66bcc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d3eece-f714-4b4e-ae62-5f01c701d403",
        "cursor": {
          "ref": "c2829ed7-765d-4269-a2a2-e2186d70913c",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f2db1bd9-1a1c-4e95-bb44-4213dbf9ca3d"
        },
        "item": {
          "id": "b4d3eece-f714-4b4e-ae62-5f01c701d403",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5dca165e-41b7-4fff-a64f-34d8a7c6d2cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc940999-6cca-4d91-84be-82ebbc57f207",
        "cursor": {
          "ref": "c507eb95-b0f0-491c-89c7-1857f05b2f99",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5cbaf39a-c066-4289-a60d-281d06ce452c"
        },
        "item": {
          "id": "cc940999-6cca-4d91-84be-82ebbc57f207",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d4b8b626-c2df-4eea-9681-c168e1b0ee9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0c396c-d2e4-4aa9-87b4-83290d9eaa30",
        "cursor": {
          "ref": "36aef078-ce40-4e11-a6ab-1a03b66a5373",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "6cb0b7d2-3fdf-4f16-aa4a-48e54c0d3180"
        },
        "item": {
          "id": "0c0c396c-d2e4-4aa9-87b4-83290d9eaa30",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f50eb5bd-9427-42ae-a094-90c583bd1b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71683137-6ee5-451b-a759-ab9ed28d2256",
        "cursor": {
          "ref": "ce347dfb-ac5c-49fa-a416-b74e004ce445",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b1d46b36-b687-4b15-b411-94fdfe961f85"
        },
        "item": {
          "id": "71683137-6ee5-451b-a759-ab9ed28d2256",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ec4bb74a-b9e6-474a-86d8-32196fcfc6f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d74c75e-cb5c-478f-866b-f91a195929e9",
        "cursor": {
          "ref": "43b311a8-75a0-40a8-8e78-ca92446f226d",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "93f9fdcb-7ab9-47b1-a3bf-a667001878af"
        },
        "item": {
          "id": "8d74c75e-cb5c-478f-866b-f91a195929e9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fcc11416-e8ac-4bdf-9b7b-188cdf70b286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f43c864e-017e-438f-8aec-d49632aff9f9",
        "cursor": {
          "ref": "0ae8c82e-6598-449d-86dd-3b2c0f68d58d",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9fd1df79-fc77-41ee-b599-f7a673825b7e"
        },
        "item": {
          "id": "f43c864e-017e-438f-8aec-d49632aff9f9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6e672343-2eb7-4fb5-8a84-e11d77d905bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f9e325-f3e4-43de-be72-44664ce9d3a9",
        "cursor": {
          "ref": "e7ce0512-9150-4cf7-9f6c-6c993a02badb",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f1604c6f-730c-4ff8-b8e8-0eff8f4e39ce"
        },
        "item": {
          "id": "39f9e325-f3e4-43de-be72-44664ce9d3a9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "06f4e017-88ad-4e7a-bc46-fcf7bd1979d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267cb01c-2a6a-4174-975d-fe79798dd13d",
        "cursor": {
          "ref": "8521b0b3-10b3-4bac-a56f-c14ab4deea24",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4eab4c0b-52bf-4875-a630-1070c997f0f0"
        },
        "item": {
          "id": "267cb01c-2a6a-4174-975d-fe79798dd13d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ac254a3e-14a9-4480-aec9-0cd31648ff30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f53017-3dff-4bab-8133-7fe9d20ace0c",
        "cursor": {
          "ref": "2850cf1b-3e8c-48a9-96b9-1a3897f531b2",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4ed514f7-f5de-44fc-b193-1bb6faa5be96"
        },
        "item": {
          "id": "d0f53017-3dff-4bab-8133-7fe9d20ace0c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "a9a826d3-c836-46dd-a81a-6ef576fcb204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ffdfff2-5e66-4205-a300-d935385b22dc",
        "cursor": {
          "ref": "dcdd9f34-35e1-4777-b746-6445d2c77c4d",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4ec67523-16cd-4da6-a21b-7f875e44ff94"
        },
        "item": {
          "id": "4ffdfff2-5e66-4205-a300-d935385b22dc",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2613189c-38b2-4e76-9666-9f3a061467ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23606b53-0d07-4e59-9718-704141bc28db",
        "cursor": {
          "ref": "240ed894-dac8-42d6-ba99-bd44bb2b4ef9",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "76e6fe9f-08bd-49e0-9e53-8b9c96e7ce33"
        },
        "item": {
          "id": "23606b53-0d07-4e59-9718-704141bc28db",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "098c72e7-b93a-4fa7-93b1-ca09bc0047b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b163f6d-b5e5-412e-88a3-461cc7bca16e",
        "cursor": {
          "ref": "c04334a4-37e0-46a7-adda-271bf4eb62a6",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "09d9faa5-aedc-488a-9b4f-af3f786f625c"
        },
        "item": {
          "id": "7b163f6d-b5e5-412e-88a3-461cc7bca16e",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "2bf0b56b-edfa-4cf6-9fed-d2e1d0c3c91e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b8fc302-82eb-48b7-bd37-940eabbd16d1",
        "cursor": {
          "ref": "687d206e-91d5-48c8-8801-fca8ab6cb807",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "351ef676-5244-49b7-b8ab-9e564a105687"
        },
        "item": {
          "id": "6b8fc302-82eb-48b7-bd37-940eabbd16d1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c344a64b-1ceb-47e6-8f27-8ffadb478e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc6af6b-c9f6-473b-ab7c-0477ad1a520a",
        "cursor": {
          "ref": "c24f3077-da52-4831-862e-4cf9a4ecda3c",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cf3e8a13-e2fa-4a13-a6a7-33583bcafcdf"
        },
        "item": {
          "id": "0cc6af6b-c9f6-473b-ab7c-0477ad1a520a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "00d13036-c146-4ace-8b4e-388c3b7038b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa8ade23-74d6-4d17-b7b7-856d2465d6fc",
        "cursor": {
          "ref": "cedb6bdd-a780-4175-a34d-cc6c418c92ac",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "73a2ee97-ec8f-4e31-a2b4-a860c5c602ce"
        },
        "item": {
          "id": "aa8ade23-74d6-4d17-b7b7-856d2465d6fc",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "14067bd3-3eab-4ca3-a4b6-765cd85fb733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58110767-27a9-4af7-bda8-fb1ae2f256bd",
        "cursor": {
          "ref": "777b2272-1d60-4e85-a46a-510bb51a1b81",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "053ea71f-fd5b-46c4-92f7-bc9cec596992"
        },
        "item": {
          "id": "58110767-27a9-4af7-bda8-fb1ae2f256bd",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3502f5a4-8c3c-463e-8237-8a6f6c548056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28468d3-dd30-4032-8c6b-2ccddbda16d5",
        "cursor": {
          "ref": "c317a691-4352-4dc0-bec5-5ca3a2e53c7e",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9f6e9d93-2300-42da-a740-f45a4686af68"
        },
        "item": {
          "id": "b28468d3-dd30-4032-8c6b-2ccddbda16d5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e61cc0d5-4955-4a61-a1e1-156f36978048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e57642-7652-4921-aad0-54dc72638b9e",
        "cursor": {
          "ref": "589cce7d-bc61-4e08-9d04-5a26898a28e9",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "5f5ec3f8-fcfe-4f33-9230-8b015727865a"
        },
        "item": {
          "id": "b4e57642-7652-4921-aad0-54dc72638b9e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b5351726-568a-4b0f-bdf9-de1a14dfa7cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653d1b98-80ac-40ef-a7f5-6b0f4907f3ab",
        "cursor": {
          "ref": "f3bbe371-cc85-4494-b028-e8b5de16eb33",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b314cfc7-e11f-4aa5-937c-667fb12d0519"
        },
        "item": {
          "id": "653d1b98-80ac-40ef-a7f5-6b0f4907f3ab",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0a75d760-4c49-4246-b18b-d2aebb6ccefb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bee1d00-c2d4-436c-be0d-5d4c7c4442fc",
        "cursor": {
          "ref": "06885e87-e05a-46e1-9143-a3cd3b2468d7",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "be11f165-891b-4fff-be31-649ba8e2654d"
        },
        "item": {
          "id": "0bee1d00-c2d4-436c-be0d-5d4c7c4442fc",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "444cb08a-8509-4f10-8f44-bf9dcd125ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa60ad66-8e8c-483a-8f07-884243ce139d",
        "cursor": {
          "ref": "14b4b09f-128d-4024-b91b-61395e0ab3a2",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2bab638b-b15a-4ea1-9aff-4541941bb186"
        },
        "item": {
          "id": "fa60ad66-8e8c-483a-8f07-884243ce139d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c79d0ee0-ca8b-4193-b5c5-f1aefc96d6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfae5ec3-d182-45ce-a7ba-b2b5b8ed14f6",
        "cursor": {
          "ref": "f0ef0d47-6bb3-479a-8b87-c42838755b38",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4cc804fe-2e73-493f-82ce-d81d12eeb61f"
        },
        "item": {
          "id": "cfae5ec3-d182-45ce-a7ba-b2b5b8ed14f6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b94bc017-b9ec-46f4-a016-0681c1eb5705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a714b45d-6fe4-48c7-aa71-1825ebdf461c",
        "cursor": {
          "ref": "31eb676b-1d8e-4327-9b38-fbcebda28307",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8d890132-fe45-438e-802e-fd647db4edd0"
        },
        "item": {
          "id": "a714b45d-6fe4-48c7-aa71-1825ebdf461c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c90eb744-0d67-4a27-8f25-974de8fafece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e6fdfa-cc7e-4d6b-8103-acc57be9fa12",
        "cursor": {
          "ref": "cbe2d42e-9dfc-4376-bdf9-82ef46468b98",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1a8f98a6-95bb-4d5e-b371-e22fc5a30047"
        },
        "item": {
          "id": "f6e6fdfa-cc7e-4d6b-8103-acc57be9fa12",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f1b41de8-bd20-4b1d-b266-c70614f0309e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "562db4bc-a85e-43ed-9d74-c60f447d6b26",
        "cursor": {
          "ref": "2199171a-8879-4071-be3c-727e7e8125f0",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "be8b8721-deab-414e-a0ef-e123fcf77520"
        },
        "item": {
          "id": "562db4bc-a85e-43ed-9d74-c60f447d6b26",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6a7dd8de-cf27-41f7-b2b5-7d74ba183f49",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "7acb0aae-0d72-4c89-9301-c76a13b8a31c",
        "cursor": {
          "ref": "b01b5df5-8810-4577-9160-3ada49a87f4e",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "352e5d23-9dac-4e53-83ed-05db6eb0b869"
        },
        "item": {
          "id": "7acb0aae-0d72-4c89-9301-c76a13b8a31c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a330916c-212b-4d89-a94f-67d36a9cbc36",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "2ad57351-eb59-4132-9c68-76c304269a2f",
        "cursor": {
          "ref": "7311b5e7-af81-444d-a679-a7875db375d1",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "023cff27-21cd-4ea9-a3f7-188b9a0e14f8"
        },
        "item": {
          "id": "2ad57351-eb59-4132-9c68-76c304269a2f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "641c77f4-7b4a-478d-ac08-c84020fadbe1",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "ce6180a9-1089-491c-9126-dd4b0c43fed0",
        "cursor": {
          "ref": "871b0876-fa4d-4d7c-b36c-8777ea3876b0",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ec41b14c-0ba3-4c19-b45a-876fd2fd241c"
        },
        "item": {
          "id": "ce6180a9-1089-491c-9126-dd4b0c43fed0",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c11596a6-c00a-4969-952f-08587206b362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7df06de-43cd-4171-889e-5cc3f637f81e",
        "cursor": {
          "ref": "f0dc9fa2-07fc-421a-bd8b-0dff06e57015",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bb2d7882-69f8-4041-a316-07163dfcef1a"
        },
        "item": {
          "id": "b7df06de-43cd-4171-889e-5cc3f637f81e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "70d4ac66-4f5c-4196-aa28-f18d9c5819ed",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "cac6b588-0706-4817-ae7d-3a555434c7fd",
        "cursor": {
          "ref": "cf4ec29a-d755-4fed-8306-bc76b6ac8ac9",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3c0450c9-7b03-4752-a8de-b216918e2d03"
        },
        "item": {
          "id": "cac6b588-0706-4817-ae7d-3a555434c7fd",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d6267928-fa48-4081-a944-bc56f7e4a0f9",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "ec4553be-5214-4e56-9dba-38faaacf5918",
        "cursor": {
          "ref": "6557490c-2618-412b-b2e5-c60043f3ccc1",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "bf4c48e7-6a12-4283-9bbc-15b1456d10d8"
        },
        "item": {
          "id": "ec4553be-5214-4e56-9dba-38faaacf5918",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7e36741e-f386-416f-b123-95713fe2cf62",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a73fd103-369f-4e00-9fb5-e98f6a3c14c1",
        "cursor": {
          "ref": "79e62512-8b0a-43ee-8701-72f94a08d925",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "623f8b48-78fa-4db9-bbca-e6279c805d49"
        },
        "item": {
          "id": "a73fd103-369f-4e00-9fb5-e98f6a3c14c1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "71f0c5a5-fc71-4e67-9059-1778bb1e374b",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "454aaf7e-45f9-4b97-b871-d2adaa942bdc",
        "cursor": {
          "ref": "d5894ea7-5279-42fa-8556-a546230fbab3",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "8dc26eaf-1726-46e3-87f8-232cb99084da"
        },
        "item": {
          "id": "454aaf7e-45f9-4b97-b871-d2adaa942bdc",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "a4127890-7b30-4e32-8916-a202cbb81d7f",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "58a14206-45c1-4e72-b998-9f6a0fd336b7",
        "cursor": {
          "ref": "e6aed477-8026-4393-a1a2-ba64aced31f3",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e67040e0-3c94-4bcb-ae62-8cdd95f1de4c"
        },
        "item": {
          "id": "58a14206-45c1-4e72-b998-9f6a0fd336b7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f8a7cb3a-95ce-4efb-8cc1-812b33bec3bd",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "94c9abda-68a1-492d-a6ea-c59ae425a48e",
        "cursor": {
          "ref": "4a0fa8bb-fa2f-47e1-a914-8fa19f089695",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "76ee2554-c48e-44b4-95be-5e6d7e49feb2"
        },
        "item": {
          "id": "94c9abda-68a1-492d-a6ea-c59ae425a48e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5e96bcf9-441c-4413-8155-fa3188fc82b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e40200-a546-4d96-8c12-b4663a4cc11e",
        "cursor": {
          "ref": "c20122bb-d1c7-4d9a-ba2c-d98e25f7bad2",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2d2d0013-6368-44ed-b791-aaaf9d9e78ec"
        },
        "item": {
          "id": "f7e40200-a546-4d96-8c12-b4663a4cc11e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9c64e26f-c916-4640-918f-c0aa7da45e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1409bc7-b504-4491-8228-966b8245ad5e",
        "cursor": {
          "ref": "4c997c6c-0873-48bd-89b9-eb87f19636db",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "05ba6066-1c64-43e5-8180-9afef7b053a2"
        },
        "item": {
          "id": "f1409bc7-b504-4491-8228-966b8245ad5e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9f60e973-b1e5-4cad-b1c0-861b8ca5ae18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71e68bf3-ea6e-4bbd-8573-eaf8e7c58d9c",
        "cursor": {
          "ref": "75e1aa1e-6c92-40a6-8677-36da6a9904a6",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8e87d913-3554-409d-963b-b30892c45762"
        },
        "item": {
          "id": "71e68bf3-ea6e-4bbd-8573-eaf8e7c58d9c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f1e2fe67-3573-4b47-9ce1-10f0d1bb32bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd404b5-f6cd-4ed7-b245-446336d5a27f",
        "cursor": {
          "ref": "8c399e59-60d0-4171-b840-570886b6b2c7",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a61007ac-c56a-4f55-84d7-f542f314711b"
        },
        "item": {
          "id": "8bd404b5-f6cd-4ed7-b245-446336d5a27f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "bb644840-be3b-4baa-be0f-ff197b33d367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ba4670-00a4-4fca-9ab4-3fbde8a69eb8",
        "cursor": {
          "ref": "bd6fdd0f-aeac-4406-88ff-fd301c4ef50f",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a56ae44b-b1cb-42f1-89c0-c908001a8cd3"
        },
        "item": {
          "id": "96ba4670-00a4-4fca-9ab4-3fbde8a69eb8",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "67b27b2f-2156-4721-a0db-2a93103f0f83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d82a48f-7752-4040-8b62-543db3d0a15d",
        "cursor": {
          "ref": "cf4245ca-4bb8-4c3d-8bbf-77934f331230",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2c913d08-a290-4370-b1f3-68c27e6265ba"
        },
        "item": {
          "id": "3d82a48f-7752-4040-8b62-543db3d0a15d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "cfffc3d1-56ff-4c58-97df-7b63f07e2f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab53556-40bd-46c9-9a23-f319c869252d",
        "cursor": {
          "ref": "e960d16a-33eb-48a6-872b-932493b2db90",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ed982183-d78d-4357-9b25-5f26450a98ee"
        },
        "item": {
          "id": "2ab53556-40bd-46c9-9a23-f319c869252d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7ed313ec-9778-4d4e-b7b3-dc0ec4010530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf094f2-37d5-40b3-a808-7e967d5e3f3e",
        "cursor": {
          "ref": "67e57639-ccbd-4e9a-9ea6-4f3b73411a0c",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b6df6c24-0ad0-418f-b0bb-0cef199d683b"
        },
        "item": {
          "id": "6bf094f2-37d5-40b3-a808-7e967d5e3f3e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e5ecc12b-f5cb-4fa1-9574-a748324029d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1797c885-8783-48af-981b-6e44a6e0daab",
        "cursor": {
          "ref": "11487ba2-204f-478f-b9b3-10270671551b",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "65761a3a-a822-4975-9f7f-74708976419a"
        },
        "item": {
          "id": "1797c885-8783-48af-981b-6e44a6e0daab",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "886ebdd3-8d47-4bdb-9eec-9ec31bfe3656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef7b722-96cb-49dd-aa13-cab3b28e0c72",
        "cursor": {
          "ref": "af179c34-43d8-4230-a621-527a5c868290",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c9723402-78bd-491d-a5e3-36af6ae19a06"
        },
        "item": {
          "id": "cef7b722-96cb-49dd-aa13-cab3b28e0c72",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "da45de68-a32e-4682-8084-8a4848f3f89c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caaffecb-7d45-41da-a51d-426b5800d278",
        "cursor": {
          "ref": "386f9d66-42db-4262-90ea-c260ff379b4f",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "85e8b723-4916-41f7-a01c-1b0b14ad0d52"
        },
        "item": {
          "id": "caaffecb-7d45-41da-a51d-426b5800d278",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "67168bfe-6a73-4cad-98cd-cdb9b6572af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8c92d3-23ce-46c0-846f-53cf9aa53209",
        "cursor": {
          "ref": "38ce5bcc-994e-4d68-a795-c41b89e1c363",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "06dca522-42f8-4ce5-bde3-7b22ea55a9ca"
        },
        "item": {
          "id": "2a8c92d3-23ce-46c0-846f-53cf9aa53209",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6474f1db-e3d4-4613-b289-2de6b4918c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63d30117-d80a-4cfa-85de-3e183e388c64",
        "cursor": {
          "ref": "c375f402-5462-44a5-80e1-b77459aa4e8c",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fe1b460a-c9d1-4378-97e2-eff93055b19f"
        },
        "item": {
          "id": "63d30117-d80a-4cfa-85de-3e183e388c64",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7d3a05ff-8730-4bb6-9add-450e723d20d7",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a9bd3699-1ff4-4f86-ac9b-75b5b3e03f76",
        "cursor": {
          "ref": "d6f32e19-08fc-40ba-9423-50fef43acd8f",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "9035d185-dd8d-46fa-a344-2db06356d988"
        },
        "item": {
          "id": "a9bd3699-1ff4-4f86-ac9b-75b5b3e03f76",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "be70b2a4-7b1e-44c1-bb8b-b3b3e74d266c",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "f2772f3a-3c1d-4943-ae88-d36eb628c45e",
        "cursor": {
          "ref": "611df148-14f8-4520-b94d-64adb607b7f1",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9c5cb7d6-c7b0-4056-a559-9537e60faa51"
        },
        "item": {
          "id": "f2772f3a-3c1d-4943-ae88-d36eb628c45e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6ef227cb-93e5-45e1-be70-1154df012729",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "4aee0b55-0f00-49ce-8bd6-8f5c28f8ee0c",
        "cursor": {
          "ref": "dbbdb2a7-9c8a-45cf-92b4-b500a20341f0",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a6460b06-de4b-495f-a4d9-624f5e5bac9f"
        },
        "item": {
          "id": "4aee0b55-0f00-49ce-8bd6-8f5c28f8ee0c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "97688244-ee14-4b1d-b74b-f26e117f4ed6",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "a2e4c4c2-5a3b-4841-b1ed-f0541fee09e3",
        "cursor": {
          "ref": "08e6d3f6-1b63-4f33-96a0-034ec8bd82d3",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "77344883-7a18-4788-8e77-6eab465faad4"
        },
        "item": {
          "id": "a2e4c4c2-5a3b-4841-b1ed-f0541fee09e3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "92f219e4-0198-4528-917d-9f7619f84b7a",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "0f9345f8-017e-453a-ac97-35d2b12fc62e",
        "cursor": {
          "ref": "bbb16460-36e8-4f7f-b5c6-2fa25e2f1379",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "317321aa-2c9d-4b70-92a6-b0a2c2a9a78c"
        },
        "item": {
          "id": "0f9345f8-017e-453a-ac97-35d2b12fc62e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6123b50e-6b06-4abb-9ed3-d3402370f904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18be0cd-2d70-4fa4-b44a-84d6547b6c5c",
        "cursor": {
          "ref": "975b7a1c-b9c6-486f-8be9-b8f73ef5e228",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2adffbbd-3805-494f-9135-819b4a94914a"
        },
        "item": {
          "id": "f18be0cd-2d70-4fa4-b44a-84d6547b6c5c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "436b6dae-06bb-444e-a050-f0293560dfaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63eeb33a-347f-4310-bb5f-83129b160a81",
        "cursor": {
          "ref": "b9ae32cc-d233-4dac-93ea-602b3293e43b",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "845488ad-04a5-4856-9f93-a3ca30fc0007"
        },
        "item": {
          "id": "63eeb33a-347f-4310-bb5f-83129b160a81",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2c3a7f6f-3c91-4172-b53a-d3d525ca3b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35ac2f8-1124-4942-beb2-01f52c1ed7f7",
        "cursor": {
          "ref": "40442271-1a9e-4f2e-8341-3747caac5924",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e84e0443-0b8e-4860-a7a8-147208bcb65b"
        },
        "item": {
          "id": "d35ac2f8-1124-4942-beb2-01f52c1ed7f7",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e794b017-33f1-4d88-810e-20f18ce80a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78fede0-edfe-4636-9e5e-c6bb5b62d7c3",
        "cursor": {
          "ref": "4734fc01-7a15-4c1f-a3ef-33bb342f1dfd",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "aa2a354d-bc72-45ac-87c9-066f27b7ae54"
        },
        "item": {
          "id": "a78fede0-edfe-4636-9e5e-c6bb5b62d7c3",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "de81ea25-f954-4d96-919f-e73a06643079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086efc75-b044-4bf4-b57d-86291d7e2d53",
        "cursor": {
          "ref": "a586f798-d092-47ea-bcb3-a1d2a263409b",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f77a7e29-ed0a-4791-9bf1-b4fffa9dfe9a"
        },
        "item": {
          "id": "086efc75-b044-4bf4-b57d-86291d7e2d53",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "ee42487f-3936-48f3-8a00-731c01d42325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a78a409e-6802-4e89-b604-ad218d56e897",
        "cursor": {
          "ref": "e299eb48-f1ca-48c6-8a05-36376de86b25",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "163ec4ee-1beb-482a-9496-2ca6032d7166"
        },
        "item": {
          "id": "a78a409e-6802-4e89-b604-ad218d56e897",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "db75d2bd-0f47-4771-83f5-2cdd3872acb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37aea976-b22e-4853-ad1e-7472af820da1",
        "cursor": {
          "ref": "c1bfa76e-9cd5-42dc-84ea-3c09c2c86459",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "5b973e63-dd2a-4401-99b1-02994eb63149"
        },
        "item": {
          "id": "37aea976-b22e-4853-ad1e-7472af820da1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8bfd017c-6c01-4994-a233-a9763470aed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "576caec5-0228-461a-805c-277d66180a20",
        "cursor": {
          "ref": "3528de3a-5af0-4e28-92c2-8658de34b45d",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "1f053eff-31b1-4597-9355-295ddb004b7b"
        },
        "item": {
          "id": "576caec5-0228-461a-805c-277d66180a20",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b08e9fd4-d4d4-4aab-9d87-e09302d58d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c87d74-b292-4ede-8811-563f393408ce",
        "cursor": {
          "ref": "65baa857-a97f-408e-ad9e-1521449f189c",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "5557cc24-e463-42be-b604-e56512c09475"
        },
        "item": {
          "id": "89c87d74-b292-4ede-8811-563f393408ce",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "601e6e63-2e69-4e63-9d9f-ca2b213927f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df94b36-bd95-49b9-8ee3-07644a9324ba",
        "cursor": {
          "ref": "a1ad04c1-3ed4-49d8-8137-5feab3937679",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "31574efc-0282-40da-8c5c-fce19900585a"
        },
        "item": {
          "id": "6df94b36-bd95-49b9-8ee3-07644a9324ba",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "425d0ef3-d22e-406a-8c60-2a67f3a96d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e01ceea-c46e-4751-a038-471ec1c3abcf",
        "cursor": {
          "ref": "b3ecd594-bfb1-47e7-8fbc-5013f067a54a",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "a0c221d4-68be-470c-8333-5ef9bb03dd21"
        },
        "item": {
          "id": "0e01ceea-c46e-4751-a038-471ec1c3abcf",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d245d4ca-99b8-4695-8443-37b8c9da0ad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ab783d2-549a-4be6-949d-394902531687",
        "cursor": {
          "ref": "885e2623-252f-499a-8c55-5e9043cf3398",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a6bec9ac-4be3-4ec6-a67e-1a4bc4843ee0"
        },
        "item": {
          "id": "1ab783d2-549a-4be6-949d-394902531687",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "79ca62b4-0afc-42b7-9e0c-e6a882ed8245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4aecd7-272a-42ea-94bc-37dcb6b163d7",
        "cursor": {
          "ref": "b9c876fd-9ee0-4348-9bcf-93ccb6b89bc6",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "bb9361bc-d470-43d7-a78e-ed794e0b2c96"
        },
        "item": {
          "id": "bf4aecd7-272a-42ea-94bc-37dcb6b163d7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "31347c5d-2e8e-4aa2-9ebb-af2ea3b5fdae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9d8e0b-c532-43b1-b776-5a919965a36f",
        "cursor": {
          "ref": "ea06f5f0-f95a-4c42-9c9d-9a3dd0d88bc2",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "cc7899e1-759d-4e44-a50e-28d9576319ee"
        },
        "item": {
          "id": "7a9d8e0b-c532-43b1-b776-5a919965a36f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d70a1640-152a-40a3-b2ec-1dcd21498b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46387b85-604c-4cf0-8acf-55b0410e5a43",
        "cursor": {
          "ref": "a95308b8-4995-4987-9cc2-4418a2c4c480",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "27449912-5f4b-41fa-9fe8-f60de0f828c0"
        },
        "item": {
          "id": "46387b85-604c-4cf0-8acf-55b0410e5a43",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "57fedd3d-aaf7-4bca-9b42-799623fb4843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd5ef4f-4121-47b8-8f53-6f4f15cb003e",
        "cursor": {
          "ref": "b297a41a-598f-4ada-b9d6-ed99b3f5d7cc",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "8dcf8cd9-9294-4104-a706-1b72b2212fab"
        },
        "item": {
          "id": "ecd5ef4f-4121-47b8-8f53-6f4f15cb003e",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "bf3fade1-7753-4ed5-b381-6478a9f29c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b03746-2a67-4da4-8351-94eb70c4afb2",
        "cursor": {
          "ref": "4fd84134-a667-4045-a2c9-26c8505fc101",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ef4ae6a3-0aec-4042-bf53-ecb6dcb3e92a"
        },
        "item": {
          "id": "e1b03746-2a67-4da4-8351-94eb70c4afb2",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ea1de7ac-e433-474e-943a-f91ad50f29af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec2e526-4e2b-4b0e-9968-66c22a8df26c",
        "cursor": {
          "ref": "743de981-170f-4a57-945c-04303caa4780",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "d7eea51f-9645-4d8a-bf80-ed50b7691ec5"
        },
        "item": {
          "id": "9ec2e526-4e2b-4b0e-9968-66c22a8df26c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a59a822d-a41c-4d57-afd3-8035523b7fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "170de56f-2943-414d-8957-448f873abbd8",
        "cursor": {
          "ref": "1319883a-adc5-404f-a480-e59d8ae37b7e",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "6453bd7f-6165-4d6f-9c44-e9af5d35c7cd"
        },
        "item": {
          "id": "170de56f-2943-414d-8957-448f873abbd8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "09df2899-32ae-41ef-8a87-80436dffa813",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f3fa38-647a-4813-9471-4de264577eb3",
        "cursor": {
          "ref": "0b23e0ad-7f53-4b7b-94e6-38b59a0a9bdf",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "af3af3a6-f3e3-4577-ad47-25f3619b50ee"
        },
        "item": {
          "id": "f7f3fa38-647a-4813-9471-4de264577eb3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2c5e4089-2f7c-4359-a92e-9050190fa28d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4059fc96-e661-4ab3-b903-781e0d0abb24",
        "cursor": {
          "ref": "17eb424d-0578-4425-b02b-6e647b8f656d",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d3e3099e-1a56-4424-80af-78767cad8ed7"
        },
        "item": {
          "id": "4059fc96-e661-4ab3-b903-781e0d0abb24",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "5663c16c-32c6-4523-9ed1-749a86e49fd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec8e74a-e4ae-42d7-86e4-5b0e85993b01",
        "cursor": {
          "ref": "b44ed4b4-f9ff-4aee-b751-2b6c5f9d861c",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "06277dd5-100e-4108-8ec9-156a506450fe"
        },
        "item": {
          "id": "fec8e74a-e4ae-42d7-86e4-5b0e85993b01",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5466b1f9-b4d2-42e5-9256-2ba421d063a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf83551b-e060-4872-ab84-fed377a1c29b",
        "cursor": {
          "ref": "a6a8b91e-5811-4d45-8081-524c2fb458cf",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "27971e63-a92e-4d2f-918a-00bfb7f2ae05"
        },
        "item": {
          "id": "bf83551b-e060-4872-ab84-fed377a1c29b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ed65f8c1-6f7f-470f-9518-b772047245aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2f079a4-1353-40da-9669-4ee863a62bdf",
        "cursor": {
          "ref": "4ddfede6-bd55-471f-a5e7-77eb80a4add3",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3c0df764-9fe1-4a2d-bc76-dde337afddeb"
        },
        "item": {
          "id": "d2f079a4-1353-40da-9669-4ee863a62bdf",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "82394ca4-c7df-43f7-b672-6a1f0764a797",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce4acab-a2c4-48af-b884-64e27245fe76",
        "cursor": {
          "ref": "de1b6539-863f-48ff-896c-ce5ae720228f",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a8dfdf3c-3390-4044-a41c-f94b7e392c14"
        },
        "item": {
          "id": "9ce4acab-a2c4-48af-b884-64e27245fe76",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fa998100-b671-47d8-8a4b-24c897b84b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c5828fe-b977-42b3-a5da-1c609b75d36f",
        "cursor": {
          "ref": "188c7222-83e0-4050-a4dc-691dcfef02e2",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "dbe3443e-4855-4db3-8c5e-ec003379f762"
        },
        "item": {
          "id": "0c5828fe-b977-42b3-a5da-1c609b75d36f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "704af4b7-bc0d-4188-8609-68e47e570a60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9916cf-ee5e-4bbd-9029-374c0e16fd5e",
        "cursor": {
          "ref": "e9ee4576-2b2e-4305-8c36-1a18e0e3631b",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "b5dc6701-af6a-4412-bb53-00cbb3073ba8"
        },
        "item": {
          "id": "ae9916cf-ee5e-4bbd-9029-374c0e16fd5e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "63dbbf3b-2769-4b28-baed-b74fa8b1c8fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ffba5dd-b1ed-48dc-82b0-89ddce6142b9",
        "cursor": {
          "ref": "9f34f03b-0213-4fe9-b2d4-af70e98aa8a8",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "ed3742f9-4dae-41f9-819d-beb0219b1969"
        },
        "item": {
          "id": "0ffba5dd-b1ed-48dc-82b0-89ddce6142b9",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e6cebfba-958a-4592-b3f5-5429898c5a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6ff728-a066-4f98-8632-d416621319a3",
        "cursor": {
          "ref": "7e4c9007-3ab8-40a2-8987-1219a89f46fa",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "bb3c1686-bd29-4f97-8c32-1cfde18e43e9"
        },
        "item": {
          "id": "3f6ff728-a066-4f98-8632-d416621319a3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f9f68da1-2096-4b88-88d0-d2216fc0b943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a18dab-e904-4834-bef9-d363917d2bba",
        "cursor": {
          "ref": "09b8b93a-0bd3-4a43-a751-15bce5cefcc8",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "bb1000a2-8fa4-46d1-ae39-ba474555b8c2"
        },
        "item": {
          "id": "79a18dab-e904-4834-bef9-d363917d2bba",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d9d6cfc3-e67c-49b3-99d9-dc4e3665eb5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c138156-6511-4781-a48b-fd63d9aa5526",
        "cursor": {
          "ref": "cc4acea5-cee1-4277-96da-53064b93eb54",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "1f71ffc6-83b5-4913-8c75-755de821a286"
        },
        "item": {
          "id": "8c138156-6511-4781-a48b-fd63d9aa5526",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0c6dabb3-6319-41ea-af64-eacdb7deeead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32557373-7efc-40c7-beb2-68466948edb0",
        "cursor": {
          "ref": "11d754fd-9692-4d38-876f-f8e2b78dfc70",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "cbd613dd-7db4-493b-838a-44bcb7079252"
        },
        "item": {
          "id": "32557373-7efc-40c7-beb2-68466948edb0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0b1b9db6-75c6-4db4-9bc1-a6289c983ed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9d7822-6f7b-4c2f-a28b-59c93e538c86",
        "cursor": {
          "ref": "71845d32-e06c-4bef-b673-523dbc96790d",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "1ebb06dc-ba1c-4385-81fb-4a9f6059afc7"
        },
        "item": {
          "id": "ee9d7822-6f7b-4c2f-a28b-59c93e538c86",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "f32ff610-62c3-4089-b8a0-3014935bf8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d77572-8ffe-413c-a83b-ed147236e591",
        "cursor": {
          "ref": "36c0a253-0567-4743-90e8-d671d0ed0655",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "ad0b0c33-567e-4468-8991-eccfa1909843"
        },
        "item": {
          "id": "69d77572-8ffe-413c-a83b-ed147236e591",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ac3c1b83-8416-457d-9174-3df7ea463160",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196edba9-efd2-4a05-b7a0-65e1dd169a4f",
        "cursor": {
          "ref": "e4656dc3-4de5-4708-836b-e536ff6a35b4",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "97d56dd7-f6e4-4d1b-a326-ce1fac46764c"
        },
        "item": {
          "id": "196edba9-efd2-4a05-b7a0-65e1dd169a4f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ef099b66-ed56-41a7-b6b3-de1cc4823395",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "f1a4af50-6a37-464b-95e0-84f0c421accd",
        "cursor": {
          "ref": "4dde7c82-4d69-490e-b0ba-3c1017047f5e",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "19fe6c69-eb9c-4c40-9f87-cdb429beedd7"
        },
        "item": {
          "id": "f1a4af50-6a37-464b-95e0-84f0c421accd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cee1c74a-309d-48ba-8bd4-b7884e7b8496",
          "status": "OK",
          "code": 200,
          "responseTime": 273,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdcfe246-3b06-43e1-aead-c11158eebe02",
        "cursor": {
          "ref": "e73b2055-66d6-46f3-aff0-8899ecf1f61a",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "befab4e5-56bc-4269-9558-c3f9804987d1"
        },
        "item": {
          "id": "fdcfe246-3b06-43e1-aead-c11158eebe02",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e73f2366-bd77-4cc4-951e-dda0397ae2db",
          "status": "OK",
          "code": 200,
          "responseTime": 169,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "76dbae3a-3226-47f3-acea-2efa6def0f95",
        "cursor": {
          "ref": "ee1f8e64-3ffa-4019-afb7-68bd8554f506",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ff8828cf-ad68-4acb-9a67-8e07012c6d02"
        },
        "item": {
          "id": "76dbae3a-3226-47f3-acea-2efa6def0f95",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ea5962cc-943e-4e57-9c0e-5bae2636dc88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76dbae3a-3226-47f3-acea-2efa6def0f95",
        "cursor": {
          "ref": "ee1f8e64-3ffa-4019-afb7-68bd8554f506",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "ff8828cf-ad68-4acb-9a67-8e07012c6d02"
        },
        "item": {
          "id": "76dbae3a-3226-47f3-acea-2efa6def0f95",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ea5962cc-943e-4e57-9c0e-5bae2636dc88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14cae7c-46d2-4e20-9723-70047439791d",
        "cursor": {
          "ref": "827b8c91-700b-43be-a01b-733671e2b489",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "8c6a058b-1238-4eee-b5a2-bb76e88e1b1f"
        },
        "item": {
          "id": "d14cae7c-46d2-4e20-9723-70047439791d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "bdabb75c-9031-4d55-8cd2-122b37b3a51a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d42bcbf-bce2-4887-80e1-6cb7a6a3fe83",
        "cursor": {
          "ref": "0c606acc-d299-47db-8cc5-d54e8037a966",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "544c6dd9-c4d2-4920-a315-4c6eb3687cbe"
        },
        "item": {
          "id": "0d42bcbf-bce2-4887-80e1-6cb7a6a3fe83",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7881f443-7531-4a8b-985f-fecf57693f72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}